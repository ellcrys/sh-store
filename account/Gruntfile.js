/**
 * Gruntfile
 *
 * This Node script is executed when you run `grunt` or `sails lift`.
 * It's purpose is to load the Grunt tasks in your project's `tasks`
 * folder, and allow you to add and remove tasks as you see fit.
 * For more information on how this works, check out the `README.md`
 * file that was generated in your `tasks` folder.
 *
 * WARNING:
 * Unless you know what you're doing, you shouldn't change this file.
 * Check out the `tasks` directory instead.
 */
module.exports = function (grunt) {
    // Load the include-all library in order to require all of our grunt
    // configurations and task registrations dynamically.
    var includeAll;
    try {
        includeAll = require('include-all');
    }
    catch (e0) {
        try {
            includeAll = require('sails/node_modules/include-all');
        }
        catch (e1) {
            console.error('Could not find `include-all` module.');
            console.error('Skipping grunt tasks...');
            console.error('To fix this, please run:');
            console.error('npm install include-all --save`');
            console.error();
            grunt.registerTask('default', []);
            return;
        }
    }
    /**
     * Loads Grunt configuration modules from the specified
     * relative path. These modules should export a function
     * that, when run, should either load/configure or register
     * a Grunt task.
     */
    function loadTasks(relPath) {
        return includeAll({
            dirname: require('path').resolve(__dirname, relPath),
            filter: /(.+)\.js$/,
            excludeDirs: /^\.(git|svn)$/
        }) || {};
    }
    /**
     * Invokes the function from a Grunt configuration module with
     * a single argument - the `grunt` object.
     */
    function invokeConfigFn(tasks) {
        for (var taskName in tasks) {
            if (tasks.hasOwnProperty(taskName)) {
                tasks[taskName](grunt);
            }
        }
    }
    // Load task functions
    var taskConfigurations = loadTasks('./tasks/config'), registerDefinitions = loadTasks('./tasks/register');
    // (ensure that a default task exists)
    if (!registerDefinitions.default) {
        registerDefinitions.default = function (grunt) {
            grunt.registerTask('default', []);
        };
    }
    // Run task functions to configure Grunt.
    invokeConfigFn(taskConfigurations);
    invokeConfigFn(registerDefinitions);
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkdydW50ZmlsZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7O0dBWUc7QUFFSCxNQUFNLENBQUMsT0FBTyxHQUFHLFVBQVMsS0FBSztJQUc3QixvRUFBb0U7SUFDcEUscURBQXFEO0lBQ3JELElBQUksVUFBVSxDQUFDO0lBQ2YsSUFBSSxDQUFDO1FBQ0gsVUFBVSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNaLElBQUksQ0FBQztZQUNILFVBQVUsR0FBRyxPQUFPLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUN6RCxDQUFDO1FBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNaLE9BQU8sQ0FBQyxLQUFLLENBQUMsc0NBQXNDLENBQUMsQ0FBQztZQUN0RCxPQUFPLENBQUMsS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7WUFDekMsT0FBTyxDQUFDLEtBQUssQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1lBQzFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsaUNBQWlDLENBQUMsQ0FBQztZQUNqRCxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7WUFFaEIsS0FBSyxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDbEMsTUFBTSxDQUFDO1FBQ1QsQ0FBQztJQUNILENBQUM7SUFHRDs7Ozs7T0FLRztJQUNILG1CQUFtQixPQUFPO1FBQ3hCLE1BQU0sQ0FBQyxVQUFVLENBQUM7WUFDaEIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQztZQUNwRCxNQUFNLEVBQUUsV0FBVztZQUNuQixXQUFXLEVBQUUsZUFBZTtTQUM3QixDQUFDLElBQUksRUFBRSxDQUFDO0lBQ1gsQ0FBQztJQUVEOzs7T0FHRztJQUNILHdCQUF3QixLQUFLO1FBQzNCLEdBQUcsQ0FBQyxDQUFDLElBQUksUUFBUSxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDM0IsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ25DLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN6QixDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7SUFJRCxzQkFBc0I7SUFDdEIsSUFBSSxrQkFBa0IsR0FBRyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsRUFDbEQsbUJBQW1CLEdBQUcsU0FBUyxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFFdEQsc0NBQXNDO0lBQ3RDLEVBQUUsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUNqQyxtQkFBbUIsQ0FBQyxPQUFPLEdBQUcsVUFBUyxLQUFLO1lBQzFDLEtBQUssQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3BDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRCx5Q0FBeUM7SUFDekMsY0FBYyxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDbkMsY0FBYyxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFFdEMsQ0FBQyxDQUFDIiwiZmlsZSI6IkdydW50ZmlsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogR3J1bnRmaWxlXG4gKlxuICogVGhpcyBOb2RlIHNjcmlwdCBpcyBleGVjdXRlZCB3aGVuIHlvdSBydW4gYGdydW50YCBvciBgc2FpbHMgbGlmdGAuXG4gKiBJdCdzIHB1cnBvc2UgaXMgdG8gbG9hZCB0aGUgR3J1bnQgdGFza3MgaW4geW91ciBwcm9qZWN0J3MgYHRhc2tzYFxuICogZm9sZGVyLCBhbmQgYWxsb3cgeW91IHRvIGFkZCBhbmQgcmVtb3ZlIHRhc2tzIGFzIHlvdSBzZWUgZml0LlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gaG93IHRoaXMgd29ya3MsIGNoZWNrIG91dCB0aGUgYFJFQURNRS5tZGBcbiAqIGZpbGUgdGhhdCB3YXMgZ2VuZXJhdGVkIGluIHlvdXIgYHRhc2tzYCBmb2xkZXIuXG4gKlxuICogV0FSTklORzpcbiAqIFVubGVzcyB5b3Uga25vdyB3aGF0IHlvdSdyZSBkb2luZywgeW91IHNob3VsZG4ndCBjaGFuZ2UgdGhpcyBmaWxlLlxuICogQ2hlY2sgb3V0IHRoZSBgdGFza3NgIGRpcmVjdG9yeSBpbnN0ZWFkLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZ3J1bnQpIHtcblxuXG4gIC8vIExvYWQgdGhlIGluY2x1ZGUtYWxsIGxpYnJhcnkgaW4gb3JkZXIgdG8gcmVxdWlyZSBhbGwgb2Ygb3VyIGdydW50XG4gIC8vIGNvbmZpZ3VyYXRpb25zIGFuZCB0YXNrIHJlZ2lzdHJhdGlvbnMgZHluYW1pY2FsbHkuXG4gIHZhciBpbmNsdWRlQWxsO1xuICB0cnkge1xuICAgIGluY2x1ZGVBbGwgPSByZXF1aXJlKCdpbmNsdWRlLWFsbCcpO1xuICB9IGNhdGNoIChlMCkge1xuICAgIHRyeSB7XG4gICAgICBpbmNsdWRlQWxsID0gcmVxdWlyZSgnc2FpbHMvbm9kZV9tb2R1bGVzL2luY2x1ZGUtYWxsJyk7XG4gICAgfSBjYXRjaCAoZTEpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0NvdWxkIG5vdCBmaW5kIGBpbmNsdWRlLWFsbGAgbW9kdWxlLicpO1xuICAgICAgY29uc29sZS5lcnJvcignU2tpcHBpbmcgZ3J1bnQgdGFza3MuLi4nKTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1RvIGZpeCB0aGlzLCBwbGVhc2UgcnVuOicpO1xuICAgICAgY29uc29sZS5lcnJvcignbnBtIGluc3RhbGwgaW5jbHVkZS1hbGwgLS1zYXZlYCcpO1xuICAgICAgY29uc29sZS5lcnJvcigpO1xuXG4gICAgICBncnVudC5yZWdpc3RlclRhc2soJ2RlZmF1bHQnLCBbXSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cblxuICAvKipcbiAgICogTG9hZHMgR3J1bnQgY29uZmlndXJhdGlvbiBtb2R1bGVzIGZyb20gdGhlIHNwZWNpZmllZFxuICAgKiByZWxhdGl2ZSBwYXRoLiBUaGVzZSBtb2R1bGVzIHNob3VsZCBleHBvcnQgYSBmdW5jdGlvblxuICAgKiB0aGF0LCB3aGVuIHJ1biwgc2hvdWxkIGVpdGhlciBsb2FkL2NvbmZpZ3VyZSBvciByZWdpc3RlclxuICAgKiBhIEdydW50IHRhc2suXG4gICAqL1xuICBmdW5jdGlvbiBsb2FkVGFza3MocmVsUGF0aCkge1xuICAgIHJldHVybiBpbmNsdWRlQWxsKHtcbiAgICAgIGRpcm5hbWU6IHJlcXVpcmUoJ3BhdGgnKS5yZXNvbHZlKF9fZGlybmFtZSwgcmVsUGF0aCksXG4gICAgICBmaWx0ZXI6IC8oLispXFwuanMkLyxcbiAgICAgIGV4Y2x1ZGVEaXJzOiAvXlxcLihnaXR8c3ZuKSQvXG4gICAgfSkgfHwge307XG4gIH1cblxuICAvKipcbiAgICogSW52b2tlcyB0aGUgZnVuY3Rpb24gZnJvbSBhIEdydW50IGNvbmZpZ3VyYXRpb24gbW9kdWxlIHdpdGhcbiAgICogYSBzaW5nbGUgYXJndW1lbnQgLSB0aGUgYGdydW50YCBvYmplY3QuXG4gICAqL1xuICBmdW5jdGlvbiBpbnZva2VDb25maWdGbih0YXNrcykge1xuICAgIGZvciAodmFyIHRhc2tOYW1lIGluIHRhc2tzKSB7XG4gICAgICBpZiAodGFza3MuaGFzT3duUHJvcGVydHkodGFza05hbWUpKSB7XG4gICAgICAgIHRhc2tzW3Rhc2tOYW1lXShncnVudCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cblxuXG4gIC8vIExvYWQgdGFzayBmdW5jdGlvbnNcbiAgdmFyIHRhc2tDb25maWd1cmF0aW9ucyA9IGxvYWRUYXNrcygnLi90YXNrcy9jb25maWcnKSxcbiAgICByZWdpc3RlckRlZmluaXRpb25zID0gbG9hZFRhc2tzKCcuL3Rhc2tzL3JlZ2lzdGVyJyk7XG5cbiAgLy8gKGVuc3VyZSB0aGF0IGEgZGVmYXVsdCB0YXNrIGV4aXN0cylcbiAgaWYgKCFyZWdpc3RlckRlZmluaXRpb25zLmRlZmF1bHQpIHtcbiAgICByZWdpc3RlckRlZmluaXRpb25zLmRlZmF1bHQgPSBmdW5jdGlvbihncnVudCkge1xuICAgICAgZ3J1bnQucmVnaXN0ZXJUYXNrKCdkZWZhdWx0JywgW10pO1xuICAgIH07XG4gIH1cblxuICAvLyBSdW4gdGFzayBmdW5jdGlvbnMgdG8gY29uZmlndXJlIEdydW50LlxuICBpbnZva2VDb25maWdGbih0YXNrQ29uZmlndXJhdGlvbnMpO1xuICBpbnZva2VDb25maWdGbihyZWdpc3RlckRlZmluaXRpb25zKTtcblxufTtcbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf8;base64,
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,
