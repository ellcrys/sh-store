"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Sequelize = require("sequelize");
const SequelizeCockroachDB = require("sequelize-cockroachdb");
/**
 * Connect to database
 * @export
 * @returns {Sequelize} Sequelize instance
 */
function connectToDatabase() {
    var options = sails.config.connections.postgres;
    var sequelize = new SequelizeCockroachDB(options.database, options.user, options.password, {
        dialect: 'postgres',
        host: options.host,
        port: options.port,
        logging: options.logging
    });
    return sequelize;
}
exports.connectToDatabase = connectToDatabase;
/**
 * Define models. Create tables if not existing.
 *
 * @export
 * @param {Sequelize} sequelize
 * @returns {Promise}
 */
function defineModels(sequelize) {
    sequelize.define('account', {
        sn: { type: Sequelize.BIGINT, primaryKey: true, autoIncrement: true },
        id: { type: Sequelize.STRING },
        first_name: { type: Sequelize.STRING },
        last_name: { type: Sequelize.STRING },
        email: { type: Sequelize.STRING },
        password: { type: Sequelize.STRING },
        developer: { type: Sequelize.BOOLEAN, defaultValue: false },
        confirmed: { type: Sequelize.BOOLEAN, defaultValue: false },
        client_id: { type: Sequelize.STRING },
        client_secret: { type: Sequelize.STRING },
        confirmation_code: { type: Sequelize.STRING }
    }, { underscored: true });
    sequelize.define('reset_token', {
        id: { type: Sequelize.BIGINT, primaryKey: true, autoIncrement: true },
        account: { type: Sequelize.STRING },
        token: { type: Sequelize.STRING },
        used: { type: Sequelize.BOOLEAN, defaultValue: false }
    }, { underscored: true });
    return sequelize.sync({});
}
exports.defineModels = defineModels;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy9kYi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVDQUF1QztBQUN2Qyw4REFBK0Q7QUFHL0Q7Ozs7R0FJRztBQUNIO0lBQ0ksSUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFBO0lBQy9DLElBQUksU0FBUyxHQUFHLElBQUksb0JBQW9CLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxRQUFRLEVBQUU7UUFDdkYsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJO1FBQ2xCLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtRQUNsQixPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU87S0FDM0IsQ0FBQyxDQUFBO0lBQ0YsTUFBTSxDQUFDLFNBQVMsQ0FBQTtBQUNwQixDQUFDO0FBVEQsOENBU0M7QUFFRDs7Ozs7O0dBTUc7QUFDSCxzQkFBNkIsU0FBOEI7SUFFdkQsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUU7UUFDeEIsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFO1FBQ3JFLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTSxFQUFFO1FBQzlCLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTSxFQUFFO1FBQ3RDLFNBQVMsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTSxFQUFFO1FBQ3JDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTSxFQUFFO1FBQ2pDLFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTSxFQUFFO1FBQ3BDLFNBQVMsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUU7UUFDM0QsU0FBUyxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRTtRQUMzRCxTQUFTLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDLE1BQU0sRUFBRTtRQUNyQyxhQUFhLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDLE1BQU0sRUFBRTtRQUN6QyxpQkFBaUIsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTSxFQUFFO0tBQ2hELEVBQUUsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtJQUV6QixTQUFTLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRTtRQUM1QixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUU7UUFDckUsT0FBTyxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxNQUFNLEVBQUU7UUFDbkMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxNQUFNLEVBQUU7UUFDakMsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRTtLQUN6RCxFQUFFLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7SUFFekIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7QUFDN0IsQ0FBQztBQXhCRCxvQ0F3QkMiLCJmaWxlIjoiY29uZmlnL2RiL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNlcXVlbGl6ZSA9IHJlcXVpcmUoJ3NlcXVlbGl6ZScpXG5pbXBvcnQgU2VxdWVsaXplQ29ja3JvYWNoREIgPSByZXF1aXJlKCdzZXF1ZWxpemUtY29ja3JvYWNoZGInKTtcbmltcG9ydCBQcm9taXNlID0gcmVxdWlyZSgnYmx1ZWJpcmQnKTtcblxuLyoqXG4gKiBDb25uZWN0IHRvIGRhdGFiYXNlXG4gKiBAZXhwb3J0XG4gKiBAcmV0dXJucyB7U2VxdWVsaXplfSBTZXF1ZWxpemUgaW5zdGFuY2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbm5lY3RUb0RhdGFiYXNlKCk6IFNlcXVlbGl6ZS5TZXF1ZWxpemUge1xuICAgIHZhciBvcHRpb25zID0gc2FpbHMuY29uZmlnLmNvbm5lY3Rpb25zLnBvc3RncmVzXG4gICAgdmFyIHNlcXVlbGl6ZSA9IG5ldyBTZXF1ZWxpemVDb2Nrcm9hY2hEQihvcHRpb25zLmRhdGFiYXNlLCBvcHRpb25zLnVzZXIsIG9wdGlvbnMucGFzc3dvcmQsIHtcbiAgICAgICAgZGlhbGVjdDogJ3Bvc3RncmVzJyxcbiAgICAgICAgaG9zdDogb3B0aW9ucy5ob3N0LFxuICAgICAgICBwb3J0OiBvcHRpb25zLnBvcnQsXG4gICAgICAgIGxvZ2dpbmc6IG9wdGlvbnMubG9nZ2luZ1xuICAgIH0pXG4gICAgcmV0dXJuIHNlcXVlbGl6ZVxufVxuXG4vKipcbiAqIERlZmluZSBtb2RlbHMuIENyZWF0ZSB0YWJsZXMgaWYgbm90IGV4aXN0aW5nLlxuICogXG4gKiBAZXhwb3J0XG4gKiBAcGFyYW0ge1NlcXVlbGl6ZX0gc2VxdWVsaXplIFxuICogQHJldHVybnMge1Byb21pc2V9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWZpbmVNb2RlbHMoc2VxdWVsaXplOiBTZXF1ZWxpemUuU2VxdWVsaXplKTogUHJvbWlzZTxhbnk+IHtcblxuICAgIHNlcXVlbGl6ZS5kZWZpbmUoJ2FjY291bnQnLCB7XG4gICAgICAgIHNuOiB7IHR5cGU6IFNlcXVlbGl6ZS5CSUdJTlQsIHByaW1hcnlLZXk6IHRydWUsIGF1dG9JbmNyZW1lbnQ6IHRydWUgfSxcbiAgICAgICAgaWQ6IHsgdHlwZTogU2VxdWVsaXplLlNUUklORyB9LFxuICAgICAgICBmaXJzdF9uYW1lOiB7IHR5cGU6IFNlcXVlbGl6ZS5TVFJJTkcgfSxcbiAgICAgICAgbGFzdF9uYW1lOiB7IHR5cGU6IFNlcXVlbGl6ZS5TVFJJTkcgfSxcbiAgICAgICAgZW1haWw6IHsgdHlwZTogU2VxdWVsaXplLlNUUklORyB9LFxuICAgICAgICBwYXNzd29yZDogeyB0eXBlOiBTZXF1ZWxpemUuU1RSSU5HIH0sXG4gICAgICAgIGRldmVsb3BlcjogeyB0eXBlOiBTZXF1ZWxpemUuQk9PTEVBTiwgZGVmYXVsdFZhbHVlOiBmYWxzZSB9LFxuICAgICAgICBjb25maXJtZWQ6IHsgdHlwZTogU2VxdWVsaXplLkJPT0xFQU4sIGRlZmF1bHRWYWx1ZTogZmFsc2UgfSxcbiAgICAgICAgY2xpZW50X2lkOiB7IHR5cGU6IFNlcXVlbGl6ZS5TVFJJTkcgfSxcbiAgICAgICAgY2xpZW50X3NlY3JldDogeyB0eXBlOiBTZXF1ZWxpemUuU1RSSU5HIH0sXG4gICAgICAgIGNvbmZpcm1hdGlvbl9jb2RlOiB7IHR5cGU6IFNlcXVlbGl6ZS5TVFJJTkcgfVxuICAgIH0sIHsgdW5kZXJzY29yZWQ6IHRydWUgfSlcbiAgICBcbiAgICBzZXF1ZWxpemUuZGVmaW5lKCdyZXNldF90b2tlbicsIHtcbiAgICAgICAgaWQ6IHsgdHlwZTogU2VxdWVsaXplLkJJR0lOVCwgcHJpbWFyeUtleTogdHJ1ZSwgYXV0b0luY3JlbWVudDogdHJ1ZSB9LFxuICAgICAgICBhY2NvdW50OiB7IHR5cGU6IFNlcXVlbGl6ZS5TVFJJTkcgfSxcbiAgICAgICAgdG9rZW46IHsgdHlwZTogU2VxdWVsaXplLlNUUklORyB9LFxuICAgICAgICB1c2VkOiB7IHR5cGU6IFNlcXVlbGl6ZS5CT09MRUFOLCBkZWZhdWx0VmFsdWU6IGZhbHNlIH1cbiAgICB9LCB7IHVuZGVyc2NvcmVkOiB0cnVlIH0pXG5cbiAgICByZXR1cm4gc2VxdWVsaXplLnN5bmMoe30pXG59Il19
