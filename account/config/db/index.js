"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Sequelize = require("sequelize");
const SequelizeCockroachDB = require("sequelize-cockroachdb");
/**
 * Connect to database
 * @export
 * @returns {Sequelize} Sequelize instance
 */
function connectToDatabase() {
    var options = sails.config.connections.postgres;
    var sequelize = new SequelizeCockroachDB(options.database, options.user, options.password, {
        dialect: 'postgres',
        host: options.host,
        port: options.port,
        logging: options.logging
    });
    return sequelize;
}
exports.connectToDatabase = connectToDatabase;
/**
 * Define models. Create tables if not existing.
 *
 * @export
 * @param {Sequelize} sequelize
 * @returns {Promise}
 */
function defineModels(sequelize) {
    sequelize.define('account', {
        sn: { type: Sequelize.BIGINT, primaryKey: true, autoIncrement: true },
        id: { type: Sequelize.STRING },
        first_name: { type: Sequelize.STRING },
        last_name: { type: Sequelize.STRING },
        email: { type: Sequelize.STRING },
        password: { type: Sequelize.STRING },
        developer: { type: Sequelize.BOOLEAN, defaultValue: false },
        confirmed: { type: Sequelize.BOOLEAN, defaultValue: false },
        client_id: { type: Sequelize.STRING },
        client_secret: { type: Sequelize.STRING },
        confirmation_code: { type: Sequelize.STRING }
    }, { underscored: true });
    return sequelize.sync({});
}
exports.defineModels = defineModels;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy9kYi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVDQUF1QztBQUN2Qyw4REFBK0Q7QUFHL0Q7Ozs7R0FJRztBQUNIO0lBQ0ksSUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFBO0lBQy9DLElBQUksU0FBUyxHQUFHLElBQUksb0JBQW9CLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxRQUFRLEVBQUU7UUFDdkYsT0FBTyxFQUFFLFVBQVU7UUFDbkIsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJO1FBQ2xCLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtRQUNsQixPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU87S0FDM0IsQ0FBQyxDQUFBO0lBQ0YsTUFBTSxDQUFDLFNBQVMsQ0FBQTtBQUNwQixDQUFDO0FBVEQsOENBU0M7QUFFRDs7Ozs7O0dBTUc7QUFDSCxzQkFBNkIsU0FBOEI7SUFFdkQsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUU7UUFDeEIsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFO1FBQ3JFLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTSxFQUFFO1FBQzlCLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTSxFQUFFO1FBQ3RDLFNBQVMsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTSxFQUFFO1FBQ3JDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTSxFQUFFO1FBQ2pDLFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTSxFQUFFO1FBQ3BDLFNBQVMsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUU7UUFDM0QsU0FBUyxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRTtRQUMzRCxTQUFTLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDLE1BQU0sRUFBRTtRQUNyQyxhQUFhLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDLE1BQU0sRUFBRTtRQUN6QyxpQkFBaUIsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTSxFQUFFO0tBQ2hELEVBQUUsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtJQUV6QixNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtBQUM3QixDQUFDO0FBakJELG9DQWlCQyIsImZpbGUiOiJjb25maWcvZGIvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU2VxdWVsaXplID0gcmVxdWlyZSgnc2VxdWVsaXplJylcbmltcG9ydCBTZXF1ZWxpemVDb2Nrcm9hY2hEQiA9IHJlcXVpcmUoJ3NlcXVlbGl6ZS1jb2Nrcm9hY2hkYicpO1xuaW1wb3J0IFByb21pc2UgPSByZXF1aXJlKCdibHVlYmlyZCcpO1xuXG4vKipcbiAqIENvbm5lY3QgdG8gZGF0YWJhc2VcbiAqIEBleHBvcnRcbiAqIEByZXR1cm5zIHtTZXF1ZWxpemV9IFNlcXVlbGl6ZSBpbnN0YW5jZVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29ubmVjdFRvRGF0YWJhc2UoKTogU2VxdWVsaXplLlNlcXVlbGl6ZSB7XG4gICAgdmFyIG9wdGlvbnMgPSBzYWlscy5jb25maWcuY29ubmVjdGlvbnMucG9zdGdyZXNcbiAgICB2YXIgc2VxdWVsaXplID0gbmV3IFNlcXVlbGl6ZUNvY2tyb2FjaERCKG9wdGlvbnMuZGF0YWJhc2UsIG9wdGlvbnMudXNlciwgb3B0aW9ucy5wYXNzd29yZCwge1xuICAgICAgICBkaWFsZWN0OiAncG9zdGdyZXMnLFxuICAgICAgICBob3N0OiBvcHRpb25zLmhvc3QsXG4gICAgICAgIHBvcnQ6IG9wdGlvbnMucG9ydCxcbiAgICAgICAgbG9nZ2luZzogb3B0aW9ucy5sb2dnaW5nXG4gICAgfSlcbiAgICByZXR1cm4gc2VxdWVsaXplXG59XG5cbi8qKlxuICogRGVmaW5lIG1vZGVscy4gQ3JlYXRlIHRhYmxlcyBpZiBub3QgZXhpc3RpbmcuXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBwYXJhbSB7U2VxdWVsaXplfSBzZXF1ZWxpemUgXG4gKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmluZU1vZGVscyhzZXF1ZWxpemU6IFNlcXVlbGl6ZS5TZXF1ZWxpemUpOiBQcm9taXNlPGFueT4ge1xuXG4gICAgc2VxdWVsaXplLmRlZmluZSgnYWNjb3VudCcsIHtcbiAgICAgICAgc246IHsgdHlwZTogU2VxdWVsaXplLkJJR0lOVCwgcHJpbWFyeUtleTogdHJ1ZSwgYXV0b0luY3JlbWVudDogdHJ1ZSB9LFxuICAgICAgICBpZDogeyB0eXBlOiBTZXF1ZWxpemUuU1RSSU5HIH0sXG4gICAgICAgIGZpcnN0X25hbWU6IHsgdHlwZTogU2VxdWVsaXplLlNUUklORyB9LFxuICAgICAgICBsYXN0X25hbWU6IHsgdHlwZTogU2VxdWVsaXplLlNUUklORyB9LFxuICAgICAgICBlbWFpbDogeyB0eXBlOiBTZXF1ZWxpemUuU1RSSU5HIH0sXG4gICAgICAgIHBhc3N3b3JkOiB7IHR5cGU6IFNlcXVlbGl6ZS5TVFJJTkcgfSxcbiAgICAgICAgZGV2ZWxvcGVyOiB7IHR5cGU6IFNlcXVlbGl6ZS5CT09MRUFOLCBkZWZhdWx0VmFsdWU6IGZhbHNlIH0sXG4gICAgICAgIGNvbmZpcm1lZDogeyB0eXBlOiBTZXF1ZWxpemUuQk9PTEVBTiwgZGVmYXVsdFZhbHVlOiBmYWxzZSB9LFxuICAgICAgICBjbGllbnRfaWQ6IHsgdHlwZTogU2VxdWVsaXplLlNUUklORyB9LFxuICAgICAgICBjbGllbnRfc2VjcmV0OiB7IHR5cGU6IFNlcXVlbGl6ZS5TVFJJTkcgfSxcbiAgICAgICAgY29uZmlybWF0aW9uX2NvZGU6IHsgdHlwZTogU2VxdWVsaXplLlNUUklORyB9XG4gICAgfSwgeyB1bmRlcnNjb3JlZDogdHJ1ZSB9KVxuXG4gICAgcmV0dXJuIHNlcXVlbGl6ZS5zeW5jKHt9KVxufSJdfQ==
