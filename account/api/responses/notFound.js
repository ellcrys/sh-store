/**
 * 404 (Not Found) Handler
 *
 * Usage:
 * return res.notFound();
 * return res.notFound(err);
 * return res.notFound(err, 'some/specific/notfound/view');
 *
 * e.g.:
 * ```
 * return res.notFound();
 * ```
 *
 * NOTE:
 * If a request doesn't match any explicit routes (i.e. `config/routes.js`)
 * or route blueprints (i.e. "shadow routes", Sails will call `res.notFound()`
 * automatically.
 */
module.exports = function notFound(data, options) {
    // Get access to `req`, `res`, & `sails`
    var req = this.req;
    var res = this.res;
    var sails = req._sails;
    // Set status code
    res.status(404);
    // Log error to console
    if (data !== undefined) {
        sails.log.verbose('Sending 404 ("Not Found") response: \n', data);
    }
    else
        sails.log.verbose('Sending 404 ("Not Found") response');
    // Only include errors in response if application environment
    // is not set to 'production'.  In production, we shouldn't
    // send back any identifying information about errors.
    if (sails.config.environment === 'production' && sails.config.keepResponseErrors !== true) {
        data = undefined;
    }
    // If the user-agent wants JSON, always respond with JSON
    // If views are disabled, revert to json
    if (req.wantsJSON || sails.config.hooks.views === false) {
        return res.jsonx(data);
    }
    // If second argument is a string, we take that to mean it refers to a view.
    // If it was omitted, use an empty object (`{}`)
    options = (typeof options === 'string') ? { view: options } : options || {};
    // Attempt to prettify data for views, if it's a non-error object
    var viewData = data;
    if (!(viewData instanceof Error) && 'object' == typeof viewData) {
        try {
            viewData = require('util').inspect(data, { depth: null });
        }
        catch (e) {
            viewData = undefined;
        }
    }
    // If a view was provided in options, serve it.
    // Otherwise try to guess an appropriate view, or if that doesn't
    // work, just send JSON.
    if (options.view) {
        return res.view(options.view, { data: viewData, title: 'Not Found' });
    }
    else
        return res.view('404', { data: viewData, title: 'Not Found' }, function (err, html) {
            // If a view error occured, fall back to JSON(P).
            if (err) {
                //
                // Additionally:
                // â€¢ If the view was missing, ignore the error but provide a verbose log.
                if (err.code === 'E_VIEW_FAILED') {
                    sails.log.verbose('res.notFound() :: Could not locate view for error page (sending JSON instead).  Details: ', err);
                }
                else {
                    sails.log.warn('res.notFound() :: When attempting to render error page view, an error occured (sending JSON instead).  Details: ', err);
                }
                return res.jsonx(data);
            }
            return res.send(html);
        });
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS9yZXNwb25zZXMvbm90Rm91bmQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBaUJHO0FBRUgsTUFBTSxDQUFDLE9BQU8sR0FBRyxrQkFBbUIsSUFBSSxFQUFFLE9BQU87SUFFL0Msd0NBQXdDO0lBQ3hDLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDbkIsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNuQixJQUFJLEtBQUssR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDO0lBRXZCLGtCQUFrQjtJQUNsQixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRWhCLHVCQUF1QjtJQUN2QixFQUFFLENBQUMsQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztRQUN2QixLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyx3Q0FBd0MsRUFBQyxJQUFJLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBQ0QsSUFBSTtRQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7SUFFN0QsNkRBQTZEO0lBQzdELDJEQUEyRDtJQUMzRCxzREFBc0Q7SUFDdEQsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEtBQUssWUFBWSxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsa0JBQWtCLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQztRQUMxRixJQUFJLEdBQUcsU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFFRCx5REFBeUQ7SUFDekQsd0NBQXdDO0lBQ3hDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDeEQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekIsQ0FBQztJQUVELDRFQUE0RTtJQUM1RSxnREFBZ0Q7SUFDaEQsT0FBTyxHQUFHLENBQUMsT0FBTyxPQUFPLEtBQUssUUFBUSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsT0FBTyxJQUFJLEVBQUUsQ0FBQztJQUU1RSxpRUFBaUU7SUFDakUsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDO0lBQ3BCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLFlBQVksS0FBSyxDQUFDLElBQUksUUFBUSxJQUFJLE9BQU8sUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNoRSxJQUFJLENBQUM7WUFDSCxRQUFRLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztRQUMxRCxDQUFDO1FBQ0QsS0FBSyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNSLFFBQVEsR0FBRyxTQUFTLENBQUM7UUFDdkIsQ0FBQztJQUNILENBQUM7SUFFRCwrQ0FBK0M7SUFDL0MsaUVBQWlFO0lBQ2pFLHdCQUF3QjtJQUN4QixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNqQixNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBSUQsSUFBSTtRQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxFQUFFLFVBQVUsR0FBRyxFQUFFLElBQUk7WUFFckYsaURBQWlEO1lBQ2pELEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ1IsRUFBRTtnQkFDRixnQkFBZ0I7Z0JBQ2hCLHlFQUF5RTtnQkFDekUsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksS0FBSyxlQUFlLENBQUMsQ0FBQyxDQUFDO29CQUNqQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQywyRkFBMkYsRUFBQyxHQUFHLENBQUMsQ0FBQztnQkFDckgsQ0FBQztnQkFFRCxJQUFJLENBQUMsQ0FBQztvQkFDSixLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxrSEFBa0gsRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFDMUksQ0FBQztnQkFDRCxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN6QixDQUFDO1lBRUQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDeEIsQ0FBQyxDQUFDLENBQUM7QUFFTCxDQUFDLENBQUMiLCJmaWxlIjoiYXBpL3Jlc3BvbnNlcy9ub3RGb3VuZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogNDA0IChOb3QgRm91bmQpIEhhbmRsZXJcbiAqXG4gKiBVc2FnZTpcbiAqIHJldHVybiByZXMubm90Rm91bmQoKTtcbiAqIHJldHVybiByZXMubm90Rm91bmQoZXJyKTtcbiAqIHJldHVybiByZXMubm90Rm91bmQoZXJyLCAnc29tZS9zcGVjaWZpYy9ub3Rmb3VuZC92aWV3Jyk7XG4gKlxuICogZS5nLjpcbiAqIGBgYFxuICogcmV0dXJuIHJlcy5ub3RGb3VuZCgpO1xuICogYGBgXG4gKlxuICogTk9URTpcbiAqIElmIGEgcmVxdWVzdCBkb2Vzbid0IG1hdGNoIGFueSBleHBsaWNpdCByb3V0ZXMgKGkuZS4gYGNvbmZpZy9yb3V0ZXMuanNgKVxuICogb3Igcm91dGUgYmx1ZXByaW50cyAoaS5lLiBcInNoYWRvdyByb3V0ZXNcIiwgU2FpbHMgd2lsbCBjYWxsIGByZXMubm90Rm91bmQoKWBcbiAqIGF1dG9tYXRpY2FsbHkuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3RGb3VuZCAoZGF0YSwgb3B0aW9ucykge1xuXG4gIC8vIEdldCBhY2Nlc3MgdG8gYHJlcWAsIGByZXNgLCAmIGBzYWlsc2BcbiAgdmFyIHJlcSA9IHRoaXMucmVxO1xuICB2YXIgcmVzID0gdGhpcy5yZXM7XG4gIHZhciBzYWlscyA9IHJlcS5fc2FpbHM7XG5cbiAgLy8gU2V0IHN0YXR1cyBjb2RlXG4gIHJlcy5zdGF0dXMoNDA0KTtcblxuICAvLyBMb2cgZXJyb3IgdG8gY29uc29sZVxuICBpZiAoZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgc2FpbHMubG9nLnZlcmJvc2UoJ1NlbmRpbmcgNDA0IChcIk5vdCBGb3VuZFwiKSByZXNwb25zZTogXFxuJyxkYXRhKTtcbiAgfVxuICBlbHNlIHNhaWxzLmxvZy52ZXJib3NlKCdTZW5kaW5nIDQwNCAoXCJOb3QgRm91bmRcIikgcmVzcG9uc2UnKTtcblxuICAvLyBPbmx5IGluY2x1ZGUgZXJyb3JzIGluIHJlc3BvbnNlIGlmIGFwcGxpY2F0aW9uIGVudmlyb25tZW50XG4gIC8vIGlzIG5vdCBzZXQgdG8gJ3Byb2R1Y3Rpb24nLiAgSW4gcHJvZHVjdGlvbiwgd2Ugc2hvdWxkbid0XG4gIC8vIHNlbmQgYmFjayBhbnkgaWRlbnRpZnlpbmcgaW5mb3JtYXRpb24gYWJvdXQgZXJyb3JzLlxuICBpZiAoc2FpbHMuY29uZmlnLmVudmlyb25tZW50ID09PSAncHJvZHVjdGlvbicgJiYgc2FpbHMuY29uZmlnLmtlZXBSZXNwb25zZUVycm9ycyAhPT0gdHJ1ZSkge1xuICAgIGRhdGEgPSB1bmRlZmluZWQ7XG4gIH1cblxuICAvLyBJZiB0aGUgdXNlci1hZ2VudCB3YW50cyBKU09OLCBhbHdheXMgcmVzcG9uZCB3aXRoIEpTT05cbiAgLy8gSWYgdmlld3MgYXJlIGRpc2FibGVkLCByZXZlcnQgdG8ganNvblxuICBpZiAocmVxLndhbnRzSlNPTiB8fCBzYWlscy5jb25maWcuaG9va3Mudmlld3MgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIHJlcy5qc29ueChkYXRhKTtcbiAgfVxuXG4gIC8vIElmIHNlY29uZCBhcmd1bWVudCBpcyBhIHN0cmluZywgd2UgdGFrZSB0aGF0IHRvIG1lYW4gaXQgcmVmZXJzIHRvIGEgdmlldy5cbiAgLy8gSWYgaXQgd2FzIG9taXR0ZWQsIHVzZSBhbiBlbXB0eSBvYmplY3QgKGB7fWApXG4gIG9wdGlvbnMgPSAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSA/IHsgdmlldzogb3B0aW9ucyB9IDogb3B0aW9ucyB8fCB7fTtcblxuICAvLyBBdHRlbXB0IHRvIHByZXR0aWZ5IGRhdGEgZm9yIHZpZXdzLCBpZiBpdCdzIGEgbm9uLWVycm9yIG9iamVjdFxuICB2YXIgdmlld0RhdGEgPSBkYXRhO1xuICBpZiAoISh2aWV3RGF0YSBpbnN0YW5jZW9mIEVycm9yKSAmJiAnb2JqZWN0JyA9PSB0eXBlb2Ygdmlld0RhdGEpIHtcbiAgICB0cnkge1xuICAgICAgdmlld0RhdGEgPSByZXF1aXJlKCd1dGlsJykuaW5zcGVjdChkYXRhLCB7ZGVwdGg6IG51bGx9KTtcbiAgICB9XG4gICAgY2F0Y2goZSkge1xuICAgICAgdmlld0RhdGEgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgLy8gSWYgYSB2aWV3IHdhcyBwcm92aWRlZCBpbiBvcHRpb25zLCBzZXJ2ZSBpdC5cbiAgLy8gT3RoZXJ3aXNlIHRyeSB0byBndWVzcyBhbiBhcHByb3ByaWF0ZSB2aWV3LCBvciBpZiB0aGF0IGRvZXNuJ3RcbiAgLy8gd29yaywganVzdCBzZW5kIEpTT04uXG4gIGlmIChvcHRpb25zLnZpZXcpIHtcbiAgICByZXR1cm4gcmVzLnZpZXcob3B0aW9ucy52aWV3LCB7IGRhdGE6IHZpZXdEYXRhLCB0aXRsZTogJ05vdCBGb3VuZCcgfSk7XG4gIH1cblxuICAvLyBJZiBubyBzZWNvbmQgYXJndW1lbnQgcHJvdmlkZWQsIHRyeSB0byBzZXJ2ZSB0aGUgZGVmYXVsdCB2aWV3LFxuICAvLyBidXQgZmFsbCBiYWNrIHRvIHNlbmRpbmcgSlNPTihQKSBpZiBhbnkgZXJyb3JzIG9jY3VyLlxuICBlbHNlIHJldHVybiByZXMudmlldygnNDA0JywgeyBkYXRhOiB2aWV3RGF0YSwgdGl0bGU6ICdOb3QgRm91bmQnIH0sIGZ1bmN0aW9uIChlcnIsIGh0bWwpIHtcblxuICAgIC8vIElmIGEgdmlldyBlcnJvciBvY2N1cmVkLCBmYWxsIGJhY2sgdG8gSlNPTihQKS5cbiAgICBpZiAoZXJyKSB7XG4gICAgICAvL1xuICAgICAgLy8gQWRkaXRpb25hbGx5OlxuICAgICAgLy8g4oCiIElmIHRoZSB2aWV3IHdhcyBtaXNzaW5nLCBpZ25vcmUgdGhlIGVycm9yIGJ1dCBwcm92aWRlIGEgdmVyYm9zZSBsb2cuXG4gICAgICBpZiAoZXJyLmNvZGUgPT09ICdFX1ZJRVdfRkFJTEVEJykge1xuICAgICAgICBzYWlscy5sb2cudmVyYm9zZSgncmVzLm5vdEZvdW5kKCkgOjogQ291bGQgbm90IGxvY2F0ZSB2aWV3IGZvciBlcnJvciBwYWdlIChzZW5kaW5nIEpTT04gaW5zdGVhZCkuICBEZXRhaWxzOiAnLGVycik7XG4gICAgICB9XG4gICAgICAvLyBPdGhlcndpc2UsIGlmIHRoaXMgd2FzIGEgbW9yZSBzZXJpb3VzIGVycm9yLCBsb2cgdG8gdGhlIGNvbnNvbGUgd2l0aCB0aGUgZGV0YWlscy5cbiAgICAgIGVsc2Uge1xuICAgICAgICBzYWlscy5sb2cud2FybigncmVzLm5vdEZvdW5kKCkgOjogV2hlbiBhdHRlbXB0aW5nIHRvIHJlbmRlciBlcnJvciBwYWdlIHZpZXcsIGFuIGVycm9yIG9jY3VyZWQgKHNlbmRpbmcgSlNPTiBpbnN0ZWFkKS4gIERldGFpbHM6ICcsIGVycik7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzLmpzb254KGRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiByZXMuc2VuZChodG1sKTtcbiAgfSk7XG5cbn07XG5cbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS9yZXNwb25zZXMvbm90Rm91bmQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBaUJHO0FBQ0gsTUFBTSxDQUFDLE9BQU8sR0FBRyxrQkFBa0IsSUFBSSxFQUFFLE9BQU87SUFDNUMsd0NBQXdDO0lBQ3hDLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDbkIsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNuQixJQUFJLEtBQUssR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDO0lBQ3ZCLGtCQUFrQjtJQUNsQixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hCLHVCQUF1QjtJQUN2QixFQUFFLENBQUMsQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztRQUNyQixLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyx3Q0FBd0MsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBQ0QsSUFBSTtRQUNBLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7SUFDNUQsNkRBQTZEO0lBQzdELDJEQUEyRDtJQUMzRCxzREFBc0Q7SUFDdEQsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEtBQUssWUFBWSxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsa0JBQWtCLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQztRQUN4RixJQUFJLEdBQUcsU0FBUyxDQUFDO0lBQ3JCLENBQUM7SUFDRCx5REFBeUQ7SUFDekQsd0NBQXdDO0lBQ3hDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDdEQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUNELDRFQUE0RTtJQUM1RSxnREFBZ0Q7SUFDaEQsT0FBTyxHQUFHLENBQUMsT0FBTyxPQUFPLEtBQUssUUFBUSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsT0FBTyxJQUFJLEVBQUUsQ0FBQztJQUM1RSxpRUFBaUU7SUFDakUsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDO0lBQ3BCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLFlBQVksS0FBSyxDQUFDLElBQUksUUFBUSxJQUFJLE9BQU8sUUFBUSxDQUFDLENBQUMsQ0FBQztRQUM5RCxJQUFJLENBQUM7WUFDRCxRQUFRLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUM5RCxDQUFDO1FBQ0QsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNQLFFBQVEsR0FBRyxTQUFTLENBQUM7UUFDekIsQ0FBQztJQUNMLENBQUM7SUFDRCwrQ0FBK0M7SUFDL0MsaUVBQWlFO0lBQ2pFLHdCQUF3QjtJQUN4QixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNmLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFDRCxJQUFJO1FBQ0EsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLEVBQUUsVUFBVSxHQUFHLEVBQUUsSUFBSTtZQUM5RSxpREFBaUQ7WUFDakQsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDTixFQUFFO2dCQUNGLGdCQUFnQjtnQkFDaEIseUVBQXlFO2dCQUN6RSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLGVBQWUsQ0FBQyxDQUFDLENBQUM7b0JBQy9CLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLDJGQUEyRixFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUN4SCxDQUFDO2dCQUNELElBQUksQ0FBQyxDQUFDO29CQUNGLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGtIQUFrSCxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUM1SSxDQUFDO2dCQUNELE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzNCLENBQUM7WUFDRCxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxQixDQUFDLENBQUMsQ0FBQztBQUNYLENBQUMsQ0FBQztBQUVGLHUvTkFBdS9OIiwiZmlsZSI6ImFwaS9yZXNwb25zZXMvbm90Rm91bmQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIDQwNCAoTm90IEZvdW5kKSBIYW5kbGVyXG4gKlxuICogVXNhZ2U6XG4gKiByZXR1cm4gcmVzLm5vdEZvdW5kKCk7XG4gKiByZXR1cm4gcmVzLm5vdEZvdW5kKGVycik7XG4gKiByZXR1cm4gcmVzLm5vdEZvdW5kKGVyciwgJ3NvbWUvc3BlY2lmaWMvbm90Zm91bmQvdmlldycpO1xuICpcbiAqIGUuZy46XG4gKiBgYGBcbiAqIHJldHVybiByZXMubm90Rm91bmQoKTtcbiAqIGBgYFxuICpcbiAqIE5PVEU6XG4gKiBJZiBhIHJlcXVlc3QgZG9lc24ndCBtYXRjaCBhbnkgZXhwbGljaXQgcm91dGVzIChpLmUuIGBjb25maWcvcm91dGVzLmpzYClcbiAqIG9yIHJvdXRlIGJsdWVwcmludHMgKGkuZS4gXCJzaGFkb3cgcm91dGVzXCIsIFNhaWxzIHdpbGwgY2FsbCBgcmVzLm5vdEZvdW5kKClgXG4gKiBhdXRvbWF0aWNhbGx5LlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vdEZvdW5kKGRhdGEsIG9wdGlvbnMpIHtcbiAgICAvLyBHZXQgYWNjZXNzIHRvIGByZXFgLCBgcmVzYCwgJiBgc2FpbHNgXG4gICAgdmFyIHJlcSA9IHRoaXMucmVxO1xuICAgIHZhciByZXMgPSB0aGlzLnJlcztcbiAgICB2YXIgc2FpbHMgPSByZXEuX3NhaWxzO1xuICAgIC8vIFNldCBzdGF0dXMgY29kZVxuICAgIHJlcy5zdGF0dXMoNDA0KTtcbiAgICAvLyBMb2cgZXJyb3IgdG8gY29uc29sZVxuICAgIGlmIChkYXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc2FpbHMubG9nLnZlcmJvc2UoJ1NlbmRpbmcgNDA0IChcIk5vdCBGb3VuZFwiKSByZXNwb25zZTogXFxuJywgZGF0YSk7XG4gICAgfVxuICAgIGVsc2VcbiAgICAgICAgc2FpbHMubG9nLnZlcmJvc2UoJ1NlbmRpbmcgNDA0IChcIk5vdCBGb3VuZFwiKSByZXNwb25zZScpO1xuICAgIC8vIE9ubHkgaW5jbHVkZSBlcnJvcnMgaW4gcmVzcG9uc2UgaWYgYXBwbGljYXRpb24gZW52aXJvbm1lbnRcbiAgICAvLyBpcyBub3Qgc2V0IHRvICdwcm9kdWN0aW9uJy4gIEluIHByb2R1Y3Rpb24sIHdlIHNob3VsZG4ndFxuICAgIC8vIHNlbmQgYmFjayBhbnkgaWRlbnRpZnlpbmcgaW5mb3JtYXRpb24gYWJvdXQgZXJyb3JzLlxuICAgIGlmIChzYWlscy5jb25maWcuZW52aXJvbm1lbnQgPT09ICdwcm9kdWN0aW9uJyAmJiBzYWlscy5jb25maWcua2VlcFJlc3BvbnNlRXJyb3JzICE9PSB0cnVlKSB7XG4gICAgICAgIGRhdGEgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8vIElmIHRoZSB1c2VyLWFnZW50IHdhbnRzIEpTT04sIGFsd2F5cyByZXNwb25kIHdpdGggSlNPTlxuICAgIC8vIElmIHZpZXdzIGFyZSBkaXNhYmxlZCwgcmV2ZXJ0IHRvIGpzb25cbiAgICBpZiAocmVxLndhbnRzSlNPTiB8fCBzYWlscy5jb25maWcuaG9va3Mudmlld3MgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiByZXMuanNvbngoZGF0YSk7XG4gICAgfVxuICAgIC8vIElmIHNlY29uZCBhcmd1bWVudCBpcyBhIHN0cmluZywgd2UgdGFrZSB0aGF0IHRvIG1lYW4gaXQgcmVmZXJzIHRvIGEgdmlldy5cbiAgICAvLyBJZiBpdCB3YXMgb21pdHRlZCwgdXNlIGFuIGVtcHR5IG9iamVjdCAoYHt9YClcbiAgICBvcHRpb25zID0gKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJykgPyB7IHZpZXc6IG9wdGlvbnMgfSA6IG9wdGlvbnMgfHwge307XG4gICAgLy8gQXR0ZW1wdCB0byBwcmV0dGlmeSBkYXRhIGZvciB2aWV3cywgaWYgaXQncyBhIG5vbi1lcnJvciBvYmplY3RcbiAgICB2YXIgdmlld0RhdGEgPSBkYXRhO1xuICAgIGlmICghKHZpZXdEYXRhIGluc3RhbmNlb2YgRXJyb3IpICYmICdvYmplY3QnID09IHR5cGVvZiB2aWV3RGF0YSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmlld0RhdGEgPSByZXF1aXJlKCd1dGlsJykuaW5zcGVjdChkYXRhLCB7IGRlcHRoOiBudWxsIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICB2aWV3RGF0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBJZiBhIHZpZXcgd2FzIHByb3ZpZGVkIGluIG9wdGlvbnMsIHNlcnZlIGl0LlxuICAgIC8vIE90aGVyd2lzZSB0cnkgdG8gZ3Vlc3MgYW4gYXBwcm9wcmlhdGUgdmlldywgb3IgaWYgdGhhdCBkb2Vzbid0XG4gICAgLy8gd29yaywganVzdCBzZW5kIEpTT04uXG4gICAgaWYgKG9wdGlvbnMudmlldykge1xuICAgICAgICByZXR1cm4gcmVzLnZpZXcob3B0aW9ucy52aWV3LCB7IGRhdGE6IHZpZXdEYXRhLCB0aXRsZTogJ05vdCBGb3VuZCcgfSk7XG4gICAgfVxuICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIHJlcy52aWV3KCc0MDQnLCB7IGRhdGE6IHZpZXdEYXRhLCB0aXRsZTogJ05vdCBGb3VuZCcgfSwgZnVuY3Rpb24gKGVyciwgaHRtbCkge1xuICAgICAgICAgICAgLy8gSWYgYSB2aWV3IGVycm9yIG9jY3VyZWQsIGZhbGwgYmFjayB0byBKU09OKFApLlxuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy8gQWRkaXRpb25hbGx5OlxuICAgICAgICAgICAgICAgIC8vIOKAoiBJZiB0aGUgdmlldyB3YXMgbWlzc2luZywgaWdub3JlIHRoZSBlcnJvciBidXQgcHJvdmlkZSBhIHZlcmJvc2UgbG9nLlxuICAgICAgICAgICAgICAgIGlmIChlcnIuY29kZSA9PT0gJ0VfVklFV19GQUlMRUQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHNhaWxzLmxvZy52ZXJib3NlKCdyZXMubm90Rm91bmQoKSA6OiBDb3VsZCBub3QgbG9jYXRlIHZpZXcgZm9yIGVycm9yIHBhZ2UgKHNlbmRpbmcgSlNPTiBpbnN0ZWFkKS4gIERldGFpbHM6ICcsIGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzYWlscy5sb2cud2FybigncmVzLm5vdEZvdW5kKCkgOjogV2hlbiBhdHRlbXB0aW5nIHRvIHJlbmRlciBlcnJvciBwYWdlIHZpZXcsIGFuIGVycm9yIG9jY3VyZWQgKHNlbmRpbmcgSlNPTiBpbnN0ZWFkKS4gIERldGFpbHM6ICcsIGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXMuanNvbngoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzLnNlbmQoaHRtbCk7XG4gICAgICAgIH0pO1xufTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbUZ3YVM5eVpYTndiMjV6WlhNdmJtOTBSbTkxYm1RdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3T3pzN096czdPenM3T3pzN096czdPMGRCYVVKSE8wRkJSVWdzVFVGQlRTeERRVUZETEU5QlFVOHNSMEZCUnl4clFrRkJiVUlzU1VGQlNTeEZRVUZGTEU5QlFVODdTVUZGTDBNc2QwTkJRWGRETzBsQlEzaERMRWxCUVVrc1IwRkJSeXhIUVVGSExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTTdTVUZEYmtJc1NVRkJTU3hIUVVGSExFZEJRVWNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXp0SlFVTnVRaXhKUVVGSkxFdEJRVXNzUjBGQlJ5eEhRVUZITEVOQlFVTXNUVUZCVFN4RFFVRkRPMGxCUlhaQ0xHdENRVUZyUWp0SlFVTnNRaXhIUVVGSExFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMGxCUldoQ0xIVkNRVUYxUWp0SlFVTjJRaXhGUVVGRkxFTkJRVU1zUTBGQlF5eEpRVUZKTEV0QlFVc3NVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOMlFpeExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRTlCUVU4c1EwRkJReXgzUTBGQmQwTXNSVUZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRKUVVOdVJTeERRVUZETzBsQlEwUXNTVUZCU1R0UlFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU1zVDBGQlR5eERRVUZETEc5RFFVRnZReXhEUVVGRExFTkJRVU03U1VGRk4wUXNOa1JCUVRaRU8wbEJRemRFTERKRVFVRXlSRHRKUVVNelJDeHpSRUZCYzBRN1NVRkRkRVFzUlVGQlJTeERRVUZETEVOQlFVTXNTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJReXhYUVVGWExFdEJRVXNzV1VGQldTeEpRVUZKTEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc2EwSkJRV3RDTEV0QlFVc3NTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVNeFJpeEpRVUZKTEVkQlFVY3NVMEZCVXl4RFFVRkRPMGxCUTI1Q0xFTkJRVU03U1VGRlJDeDVSRUZCZVVRN1NVRkRla1FzZDBOQlFYZERPMGxCUTNoRExFVkJRVVVzUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4VFFVRlRMRWxCUVVrc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4TFFVRkxMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGVFUXNUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdTVUZEZWtJc1EwRkJRenRKUVVWRUxEUkZRVUUwUlR0SlFVTTFSU3huUkVGQlowUTdTVUZEYUVRc1QwRkJUeXhIUVVGSExFTkJRVU1zVDBGQlR5eFBRVUZQTEV0QlFVc3NVVUZCVVN4RFFVRkRMRWRCUVVjc1JVRkJSU3hKUVVGSkxFVkJRVVVzVDBGQlR5eEZRVUZGTEVkQlFVY3NUMEZCVHl4SlFVRkpMRVZCUVVVc1EwRkJRenRKUVVVMVJTeHBSVUZCYVVVN1NVRkRha1VzU1VGQlNTeFJRVUZSTEVkQlFVY3NTVUZCU1N4RFFVRkRPMGxCUTNCQ0xFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4UlFVRlJMRmxCUVZrc1MwRkJTeXhEUVVGRExFbEJRVWtzVVVGQlVTeEpRVUZKTEU5QlFVOHNVVUZCVVN4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOb1JTeEpRVUZKTEVOQlFVTTdXVUZEU0N4UlFVRlJMRWRCUVVjc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRVZCUVVVc1JVRkJReXhMUVVGTExFVkJRVVVzU1VGQlNTeEZRVUZETEVOQlFVTXNRMEZCUXp0UlFVTXhSQ3hEUVVGRE8xRkJRMFFzUzBGQlN5eERRVUZCTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOU0xGRkJRVkVzUjBGQlJ5eFRRVUZUTEVOQlFVTTdVVUZEZGtJc1EwRkJRenRKUVVOSUxFTkJRVU03U1VGRlJDd3JRMEZCSzBNN1NVRkRMME1zYVVWQlFXbEZPMGxCUTJwRkxIZENRVUYzUWp0SlFVTjRRaXhGUVVGRkxFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOcVFpeE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeEZRVUZGTEVWQlFVVXNTVUZCU1N4RlFVRkZMRkZCUVZFc1JVRkJSU3hMUVVGTExFVkJRVVVzVjBGQlZ5eEZRVUZGTEVOQlFVTXNRMEZCUXp0SlFVTjRSU3hEUVVGRE8wbEJTVVFzU1VGQlNUdFJRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUlVGQlJTeEZRVUZGTEVsQlFVa3NSVUZCUlN4UlFVRlJMRVZCUVVVc1MwRkJTeXhGUVVGRkxGZEJRVmNzUlVGQlJTeEZRVUZGTEZWQlFWVXNSMEZCUnl4RlFVRkZMRWxCUVVrN1dVRkZja1lzYVVSQlFXbEVPMWxCUTJwRUxFVkJRVVVzUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRMUlzUlVGQlJUdG5Ra0ZEUml4blFrRkJaMEk3WjBKQlEyaENMSGxGUVVGNVJUdG5Ra0ZEZWtVc1JVRkJSU3hEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NTMEZCU3l4bFFVRmxMRU5CUVVNc1EwRkJReXhEUVVGRE8yOUNRVU5xUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFOUJRVThzUTBGQlF5d3lSa0ZCTWtZc1JVRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dG5Ra0ZEY2tnc1EwRkJRenRuUWtGRlJDeEpRVUZKTEVOQlFVTXNRMEZCUXp0dlFrRkRTaXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4clNFRkJhMGdzUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXp0blFrRkRNVWtzUTBGQlF6dG5Ra0ZEUkN4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0WlFVTjZRaXhEUVVGRE8xbEJSVVFzVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03VVVGRGVFSXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkZUQ3hEUVVGRExFTkJRVU1pTENKbWFXeGxJam9pWVhCcEwzSmxjM0J2Ym5ObGN5OXViM1JHYjNWdVpDNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtseHVJQ29nTkRBMElDaE9iM1FnUm05MWJtUXBJRWhoYm1Sc1pYSmNiaUFxWEc0Z0tpQlZjMkZuWlRwY2JpQXFJSEpsZEhWeWJpQnlaWE11Ym05MFJtOTFibVFvS1R0Y2JpQXFJSEpsZEhWeWJpQnlaWE11Ym05MFJtOTFibVFvWlhKeUtUdGNiaUFxSUhKbGRIVnliaUJ5WlhNdWJtOTBSbTkxYm1Rb1pYSnlMQ0FuYzI5dFpTOXpjR1ZqYVdacFl5OXViM1JtYjNWdVpDOTJhV1YzSnlrN1hHNGdLbHh1SUNvZ1pTNW5ManBjYmlBcUlHQmdZRnh1SUNvZ2NtVjBkWEp1SUhKbGN5NXViM1JHYjNWdVpDZ3BPMXh1SUNvZ1lHQmdYRzRnS2x4dUlDb2dUazlVUlRwY2JpQXFJRWxtSUdFZ2NtVnhkV1Z6ZENCa2IyVnpiaWQwSUcxaGRHTm9JR0Z1ZVNCbGVIQnNhV05wZENCeWIzVjBaWE1nS0drdVpTNGdZR052Ym1acFp5OXliM1YwWlhNdWFuTmdLVnh1SUNvZ2IzSWdjbTkxZEdVZ1lteDFaWEJ5YVc1MGN5QW9hUzVsTGlCY0luTm9ZV1J2ZHlCeWIzVjBaWE5jSWl3Z1UyRnBiSE1nZDJsc2JDQmpZV3hzSUdCeVpYTXVibTkwUm05MWJtUW9LV0JjYmlBcUlHRjFkRzl0WVhScFkyRnNiSGt1WEc0Z0tpOWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaUJ1YjNSR2IzVnVaQ0FvWkdGMFlTd2diM0IwYVc5dWN5a2dlMXh1WEc0Z0lDOHZJRWRsZENCaFkyTmxjM01nZEc4Z1lISmxjV0FzSUdCeVpYTmdMQ0FtSUdCellXbHNjMkJjYmlBZ2RtRnlJSEpsY1NBOUlIUm9hWE11Y21WeE8xeHVJQ0IyWVhJZ2NtVnpJRDBnZEdocGN5NXlaWE03WEc0Z0lIWmhjaUJ6WVdsc2N5QTlJSEpsY1M1ZmMyRnBiSE03WEc1Y2JpQWdMeThnVTJWMElITjBZWFIxY3lCamIyUmxYRzRnSUhKbGN5NXpkR0YwZFhNb05EQTBLVHRjYmx4dUlDQXZMeUJNYjJjZ1pYSnliM0lnZEc4Z1kyOXVjMjlzWlZ4dUlDQnBaaUFvWkdGMFlTQWhQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnYzJGcGJITXViRzluTG5abGNtSnZjMlVvSjFObGJtUnBibWNnTkRBMElDaGNJazV2ZENCR2IzVnVaRndpS1NCeVpYTndiMjV6WlRvZ1hGeHVKeXhrWVhSaEtUdGNiaUFnZlZ4dUlDQmxiSE5sSUhOaGFXeHpMbXh2Wnk1MlpYSmliM05sS0NkVFpXNWthVzVuSURRd05DQW9YQ0pPYjNRZ1JtOTFibVJjSWlrZ2NtVnpjRzl1YzJVbktUdGNibHh1SUNBdkx5QlBibXg1SUdsdVkyeDFaR1VnWlhKeWIzSnpJR2x1SUhKbGMzQnZibk5sSUdsbUlHRndjR3hwWTJGMGFXOXVJR1Z1ZG1seWIyNXRaVzUwWEc0Z0lDOHZJR2x6SUc1dmRDQnpaWFFnZEc4Z0ozQnliMlIxWTNScGIyNG5MaUFnU1c0Z2NISnZaSFZqZEdsdmJpd2dkMlVnYzJodmRXeGtiaWQwWEc0Z0lDOHZJSE5sYm1RZ1ltRmpheUJoYm5rZ2FXUmxiblJwWm5scGJtY2dhVzVtYjNKdFlYUnBiMjRnWVdKdmRYUWdaWEp5YjNKekxseHVJQ0JwWmlBb2MyRnBiSE11WTI5dVptbG5MbVZ1ZG1seWIyNXRaVzUwSUQwOVBTQW5jSEp2WkhWamRHbHZiaWNnSmlZZ2MyRnBiSE11WTI5dVptbG5MbXRsWlhCU1pYTndiMjV6WlVWeWNtOXljeUFoUFQwZ2RISjFaU2tnZTF4dUlDQWdJR1JoZEdFZ1BTQjFibVJsWm1sdVpXUTdYRzRnSUgxY2JseHVJQ0F2THlCSlppQjBhR1VnZFhObGNpMWhaMlZ1ZENCM1lXNTBjeUJLVTA5T0xDQmhiSGRoZVhNZ2NtVnpjRzl1WkNCM2FYUm9JRXBUVDA1Y2JpQWdMeThnU1dZZ2RtbGxkM01nWVhKbElHUnBjMkZpYkdWa0xDQnlaWFpsY25RZ2RHOGdhbk52Ymx4dUlDQnBaaUFvY21WeExuZGhiblJ6U2xOUFRpQjhmQ0J6WVdsc2N5NWpiMjVtYVdjdWFHOXZhM011ZG1sbGQzTWdQVDA5SUdaaGJITmxLU0I3WEc0Z0lDQWdjbVYwZFhKdUlISmxjeTVxYzI5dWVDaGtZWFJoS1R0Y2JpQWdmVnh1WEc0Z0lDOHZJRWxtSUhObFkyOXVaQ0JoY21kMWJXVnVkQ0JwY3lCaElITjBjbWx1Wnl3Z2QyVWdkR0ZyWlNCMGFHRjBJSFJ2SUcxbFlXNGdhWFFnY21WbVpYSnpJSFJ2SUdFZ2RtbGxkeTVjYmlBZ0x5OGdTV1lnYVhRZ2QyRnpJRzl0YVhSMFpXUXNJSFZ6WlNCaGJpQmxiWEIwZVNCdlltcGxZM1FnS0dCN2ZXQXBYRzRnSUc5d2RHbHZibk1nUFNBb2RIbHdaVzltSUc5d2RHbHZibk1nUFQwOUlDZHpkSEpwYm1jbktTQS9JSHNnZG1sbGR6b2diM0IwYVc5dWN5QjlJRG9nYjNCMGFXOXVjeUI4ZkNCN2ZUdGNibHh1SUNBdkx5QkJkSFJsYlhCMElIUnZJSEJ5WlhSMGFXWjVJR1JoZEdFZ1ptOXlJSFpwWlhkekxDQnBaaUJwZENkeklHRWdibTl1TFdWeWNtOXlJRzlpYW1WamRGeHVJQ0IyWVhJZ2RtbGxkMFJoZEdFZ1BTQmtZWFJoTzF4dUlDQnBaaUFvSVNoMmFXVjNSR0YwWVNCcGJuTjBZVzVqWlc5bUlFVnljbTl5S1NBbUppQW5iMkpxWldOMEp5QTlQU0IwZVhCbGIyWWdkbWxsZDBSaGRHRXBJSHRjYmlBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnZG1sbGQwUmhkR0VnUFNCeVpYRjFhWEpsS0NkMWRHbHNKeWt1YVc1emNHVmpkQ2hrWVhSaExDQjdaR1Z3ZEdnNklHNTFiR3g5S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdZMkYwWTJnb1pTa2dlMXh1SUNBZ0lDQWdkbWxsZDBSaGRHRWdQU0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnTHk4Z1NXWWdZU0IyYVdWM0lIZGhjeUJ3Y205MmFXUmxaQ0JwYmlCdmNIUnBiMjV6TENCelpYSjJaU0JwZEM1Y2JpQWdMeThnVDNSb1pYSjNhWE5sSUhSeWVTQjBieUJuZFdWemN5QmhiaUJoY0hCeWIzQnlhV0YwWlNCMmFXVjNMQ0J2Y2lCcFppQjBhR0YwSUdSdlpYTnVKM1JjYmlBZ0x5OGdkMjl5YXl3Z2FuVnpkQ0J6Wlc1a0lFcFRUMDR1WEc0Z0lHbG1JQ2h2Y0hScGIyNXpMblpwWlhjcElIdGNiaUFnSUNCeVpYUjFjbTRnY21WekxuWnBaWGNvYjNCMGFXOXVjeTUyYVdWM0xDQjdJR1JoZEdFNklIWnBaWGRFWVhSaExDQjBhWFJzWlRvZ0owNXZkQ0JHYjNWdVpDY2dmU2s3WEc0Z0lIMWNibHh1SUNBdkx5QkpaaUJ1YnlCelpXTnZibVFnWVhKbmRXMWxiblFnY0hKdmRtbGtaV1FzSUhSeWVTQjBieUJ6WlhKMlpTQjBhR1VnWkdWbVlYVnNkQ0IyYVdWM0xGeHVJQ0F2THlCaWRYUWdabUZzYkNCaVlXTnJJSFJ2SUhObGJtUnBibWNnU2xOUFRpaFFLU0JwWmlCaGJua2daWEp5YjNKeklHOWpZM1Z5TGx4dUlDQmxiSE5sSUhKbGRIVnliaUJ5WlhNdWRtbGxkeWduTkRBMEp5d2dleUJrWVhSaE9pQjJhV1YzUkdGMFlTd2dkR2wwYkdVNklDZE9iM1FnUm05MWJtUW5JSDBzSUdaMWJtTjBhVzl1SUNobGNuSXNJR2gwYld3cElIdGNibHh1SUNBZ0lDOHZJRWxtSUdFZ2RtbGxkeUJsY25KdmNpQnZZMk4xY21Wa0xDQm1ZV3hzSUdKaFkyc2dkRzhnU2xOUFRpaFFLUzVjYmlBZ0lDQnBaaUFvWlhKeUtTQjdYRzRnSUNBZ0lDQXZMMXh1SUNBZ0lDQWdMeThnUVdSa2FYUnBiMjVoYkd4NU9seHVJQ0FnSUNBZ0x5OGc0b0NpSUVsbUlIUm9aU0IyYVdWM0lIZGhjeUJ0YVhOemFXNW5MQ0JwWjI1dmNtVWdkR2hsSUdWeWNtOXlJR0oxZENCd2NtOTJhV1JsSUdFZ2RtVnlZbTl6WlNCc2IyY3VYRzRnSUNBZ0lDQnBaaUFvWlhKeUxtTnZaR1VnUFQwOUlDZEZYMVpKUlZkZlJrRkpURVZFSnlrZ2UxeHVJQ0FnSUNBZ0lDQnpZV2xzY3k1c2IyY3VkbVZ5WW05elpTZ25jbVZ6TG01dmRFWnZkVzVrS0NrZ09qb2dRMjkxYkdRZ2JtOTBJR3h2WTJGMFpTQjJhV1YzSUdadmNpQmxjbkp2Y2lCd1lXZGxJQ2h6Wlc1a2FXNW5JRXBUVDA0Z2FXNXpkR1ZoWkNrdUlDQkVaWFJoYVd4ek9pQW5MR1Z5Y2lrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNBdkx5QlBkR2hsY25kcGMyVXNJR2xtSUhSb2FYTWdkMkZ6SUdFZ2JXOXlaU0J6WlhKcGIzVnpJR1Z5Y205eUxDQnNiMmNnZEc4Z2RHaGxJR052Ym5OdmJHVWdkMmwwYUNCMGFHVWdaR1YwWVdsc2N5NWNiaUFnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCellXbHNjeTVzYjJjdWQyRnliaWduY21WekxtNXZkRVp2ZFc1a0tDa2dPam9nVjJobGJpQmhkSFJsYlhCMGFXNW5JSFJ2SUhKbGJtUmxjaUJsY25KdmNpQndZV2RsSUhacFpYY3NJR0Z1SUdWeWNtOXlJRzlqWTNWeVpXUWdLSE5sYm1ScGJtY2dTbE5QVGlCcGJuTjBaV0ZrS1M0Z0lFUmxkR0ZwYkhNNklDY3NJR1Z5Y2lrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCeVpYUjFjbTRnY21WekxtcHpiMjU0S0dSaGRHRXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCeVpYTXVjMlZ1WkNob2RHMXNLVHRjYmlBZ2ZTazdYRzVjYm4wN1hHNWNiaUpkZlE9PVxuIl19
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,
