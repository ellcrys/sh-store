/**
 * 200 (OK) Response
 *
 * Usage:
 * return res.ok();
 * return res.ok(data);
 * return res.ok(data, 'auth/login');
 *
 * @param  {Object} data
 * @param  {String|Object} options
 *          - pass string to render specified view
 */
module.exports = function sendOK(data, options) {
    // Get access to `req`, `res`, & `sails`
    var req = this.req;
    var res = this.res;
    var sails = req._sails;
    sails.log.silly('res.ok() :: Sending 200 ("OK") response');
    // Set status code
    res.status(200);
    // If appropriate, serve data as JSON(P)
    // If views are disabled, revert to json
    if (req.wantsJSON || sails.config.hooks.views === false) {
        return res.jsonx(data);
    }
    // If second argument is a string, we take that to mean it refers to a view.
    // If it was omitted, use an empty object (`{}`)
    options = (typeof options === 'string') ? { view: options } : options || {};
    // Attempt to prettify data for views, if it's a non-error object
    var viewData = data;
    if (!(viewData instanceof Error) && 'object' == typeof viewData) {
        try {
            viewData = require('util').inspect(data, { depth: null });
        }
        catch (e) {
            viewData = undefined;
        }
    }
    // If a view was provided in options, serve it.
    // Otherwise try to guess an appropriate view, or if that doesn't
    // work, just send JSON.
    if (options.view) {
        return res.view(options.view, { data: viewData, title: 'OK' });
    }
    else
        return res.guessView({ data: viewData, title: 'OK' }, function couldNotGuessView() {
            return res.jsonx(data);
        });
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS9yZXNwb25zZXMvb2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0dBV0c7QUFFSCxNQUFNLENBQUMsT0FBTyxHQUFHLGdCQUFpQixJQUFJLEVBQUUsT0FBTztJQUU3Qyx3Q0FBd0M7SUFDeEMsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNuQixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQ25CLElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUM7SUFFdkIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMseUNBQXlDLENBQUMsQ0FBQztJQUUzRCxrQkFBa0I7SUFDbEIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoQix3Q0FBd0M7SUFDeEMsd0NBQXdDO0lBQ3hDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDeEQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekIsQ0FBQztJQUVELDRFQUE0RTtJQUM1RSxnREFBZ0Q7SUFDaEQsT0FBTyxHQUFHLENBQUMsT0FBTyxPQUFPLEtBQUssUUFBUSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsT0FBTyxJQUFJLEVBQUUsQ0FBQztJQUU1RSxpRUFBaUU7SUFDakUsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDO0lBQ3BCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLFlBQVksS0FBSyxDQUFDLElBQUksUUFBUSxJQUFJLE9BQU8sUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNoRSxJQUFJLENBQUM7WUFDSCxRQUFRLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztRQUMxRCxDQUFDO1FBQ0QsS0FBSyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNSLFFBQVEsR0FBRyxTQUFTLENBQUM7UUFDdkIsQ0FBQztJQUNILENBQUM7SUFFRCwrQ0FBK0M7SUFDL0MsaUVBQWlFO0lBQ2pFLHdCQUF3QjtJQUN4QixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNqQixNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBSUQsSUFBSTtRQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUU7WUFDekQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekIsQ0FBQyxDQUFDLENBQUM7QUFFTCxDQUFDLENBQUMiLCJmaWxlIjoiYXBpL3Jlc3BvbnNlcy9vay5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogMjAwIChPSykgUmVzcG9uc2VcbiAqXG4gKiBVc2FnZTpcbiAqIHJldHVybiByZXMub2soKTtcbiAqIHJldHVybiByZXMub2soZGF0YSk7XG4gKiByZXR1cm4gcmVzLm9rKGRhdGEsICdhdXRoL2xvZ2luJyk7XG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBkYXRhXG4gKiBAcGFyYW0gIHtTdHJpbmd8T2JqZWN0fSBvcHRpb25zXG4gKiAgICAgICAgICAtIHBhc3Mgc3RyaW5nIHRvIHJlbmRlciBzcGVjaWZpZWQgdmlld1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2VuZE9LIChkYXRhLCBvcHRpb25zKSB7XG5cbiAgLy8gR2V0IGFjY2VzcyB0byBgcmVxYCwgYHJlc2AsICYgYHNhaWxzYFxuICB2YXIgcmVxID0gdGhpcy5yZXE7XG4gIHZhciByZXMgPSB0aGlzLnJlcztcbiAgdmFyIHNhaWxzID0gcmVxLl9zYWlscztcblxuICBzYWlscy5sb2cuc2lsbHkoJ3Jlcy5vaygpIDo6IFNlbmRpbmcgMjAwIChcIk9LXCIpIHJlc3BvbnNlJyk7XG5cbiAgLy8gU2V0IHN0YXR1cyBjb2RlXG4gIHJlcy5zdGF0dXMoMjAwKTtcblxuICAvLyBJZiBhcHByb3ByaWF0ZSwgc2VydmUgZGF0YSBhcyBKU09OKFApXG4gIC8vIElmIHZpZXdzIGFyZSBkaXNhYmxlZCwgcmV2ZXJ0IHRvIGpzb25cbiAgaWYgKHJlcS53YW50c0pTT04gfHwgc2FpbHMuY29uZmlnLmhvb2tzLnZpZXdzID09PSBmYWxzZSkge1xuICAgIHJldHVybiByZXMuanNvbngoZGF0YSk7XG4gIH1cblxuICAvLyBJZiBzZWNvbmQgYXJndW1lbnQgaXMgYSBzdHJpbmcsIHdlIHRha2UgdGhhdCB0byBtZWFuIGl0IHJlZmVycyB0byBhIHZpZXcuXG4gIC8vIElmIGl0IHdhcyBvbWl0dGVkLCB1c2UgYW4gZW1wdHkgb2JqZWN0IChge31gKVxuICBvcHRpb25zID0gKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJykgPyB7IHZpZXc6IG9wdGlvbnMgfSA6IG9wdGlvbnMgfHwge307XG5cbiAgLy8gQXR0ZW1wdCB0byBwcmV0dGlmeSBkYXRhIGZvciB2aWV3cywgaWYgaXQncyBhIG5vbi1lcnJvciBvYmplY3RcbiAgdmFyIHZpZXdEYXRhID0gZGF0YTtcbiAgaWYgKCEodmlld0RhdGEgaW5zdGFuY2VvZiBFcnJvcikgJiYgJ29iamVjdCcgPT0gdHlwZW9mIHZpZXdEYXRhKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZpZXdEYXRhID0gcmVxdWlyZSgndXRpbCcpLmluc3BlY3QoZGF0YSwge2RlcHRoOiBudWxsfSk7XG4gICAgfVxuICAgIGNhdGNoKGUpIHtcbiAgICAgIHZpZXdEYXRhID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIC8vIElmIGEgdmlldyB3YXMgcHJvdmlkZWQgaW4gb3B0aW9ucywgc2VydmUgaXQuXG4gIC8vIE90aGVyd2lzZSB0cnkgdG8gZ3Vlc3MgYW4gYXBwcm9wcmlhdGUgdmlldywgb3IgaWYgdGhhdCBkb2Vzbid0XG4gIC8vIHdvcmssIGp1c3Qgc2VuZCBKU09OLlxuICBpZiAob3B0aW9ucy52aWV3KSB7XG4gICAgcmV0dXJuIHJlcy52aWV3KG9wdGlvbnMudmlldywgeyBkYXRhOiB2aWV3RGF0YSwgdGl0bGU6ICdPSycgfSk7XG4gIH1cblxuICAvLyBJZiBubyBzZWNvbmQgYXJndW1lbnQgcHJvdmlkZWQsIHRyeSB0byBzZXJ2ZSB0aGUgaW1wbGllZCB2aWV3LFxuICAvLyBidXQgZmFsbCBiYWNrIHRvIHNlbmRpbmcgSlNPTihQKSBpZiBubyB2aWV3IGNhbiBiZSBpbmZlcnJlZC5cbiAgZWxzZSByZXR1cm4gcmVzLmd1ZXNzVmlldyh7IGRhdGE6IHZpZXdEYXRhLCB0aXRsZTogJ09LJyB9LCBmdW5jdGlvbiBjb3VsZE5vdEd1ZXNzVmlldyAoKSB7XG4gICAgcmV0dXJuIHJlcy5qc29ueChkYXRhKTtcbiAgfSk7XG5cbn07XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf8;base64,
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,
