/**
 * 400 (Bad Request) Handler
 *
 * Usage:
 * return res.badRequest();
 * return res.badRequest(data);
 * return res.badRequest(data, 'some/specific/badRequest/view');
 *
 * e.g.:
 * ```
 * return res.badRequest(
 *   'Please choose a valid `password` (6-12 characters)',
 *   'trial/signup'
 * );
 * ```
 */
module.exports = function badRequest(data, options) {
    // Get access to `req`, `res`, & `sails`
    var req = this.req;
    var res = this.res;
    var sails = req._sails;
    // Set status code
    res.status(400);
    // Log error to console
    if (data !== undefined) {
        sails.log.verbose('Sending 400 ("Bad Request") response: \n', data);
    }
    else
        sails.log.verbose('Sending 400 ("Bad Request") response');
    // Only include errors in response if application environment
    // is not set to 'production'.  In production, we shouldn't
    // send back any identifying information about errors.
    if (sails.config.environment === 'production' && sails.config.keepResponseErrors !== true) {
        data = undefined;
    }
    // If the user-agent wants JSON, always respond with JSON
    // If views are disabled, revert to json
    if (req.wantsJSON || sails.config.hooks.views === false) {
        return res.jsonx(data);
    }
    // If second argument is a string, we take that to mean it refers to a view.
    // If it was omitted, use an empty object (`{}`)
    options = (typeof options === 'string') ? { view: options } : options || {};
    // Attempt to prettify data for views, if it's a non-error object
    var viewData = data;
    if (!(viewData instanceof Error) && 'object' == typeof viewData) {
        try {
            viewData = require('util').inspect(data, { depth: null });
        }
        catch (e) {
            viewData = undefined;
        }
    }
    // If a view was provided in options, serve it.
    // Otherwise try to guess an appropriate view, or if that doesn't
    // work, just send JSON.
    if (options.view) {
        return res.view(options.view, { data: viewData, title: 'Bad Request' });
    }
    else
        return res.guessView({ data: viewData, title: 'Bad Request' }, function couldNotGuessView() {
            return res.jsonx(data);
        });
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS9yZXNwb25zZXMvYmFkUmVxdWVzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFFSCxNQUFNLENBQUMsT0FBTyxHQUFHLG9CQUFvQixJQUFJLEVBQUUsT0FBTztJQUVoRCx3Q0FBd0M7SUFDeEMsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNuQixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQ25CLElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUM7SUFFdkIsa0JBQWtCO0lBQ2xCLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFaEIsdUJBQXVCO0lBQ3ZCLEVBQUUsQ0FBQyxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLDBDQUEwQyxFQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFDRCxJQUFJO1FBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsc0NBQXNDLENBQUMsQ0FBQztJQUUvRCw2REFBNkQ7SUFDN0QsMkRBQTJEO0lBQzNELHNEQUFzRDtJQUN0RCxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFdBQVcsS0FBSyxZQUFZLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzFGLElBQUksR0FBRyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUVELHlEQUF5RDtJQUN6RCx3Q0FBd0M7SUFDeEMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQztRQUN4RCxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBRUQsNEVBQTRFO0lBQzVFLGdEQUFnRDtJQUNoRCxPQUFPLEdBQUcsQ0FBQyxPQUFPLE9BQU8sS0FBSyxRQUFRLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxPQUFPLElBQUksRUFBRSxDQUFDO0lBRTVFLGlFQUFpRTtJQUNqRSxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUM7SUFDcEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsWUFBWSxLQUFLLENBQUMsSUFBSSxRQUFRLElBQUksT0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQztZQUNILFFBQVEsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFDLEtBQUssRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO1FBQzFELENBQUM7UUFDRCxLQUFLLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ1IsUUFBUSxHQUFHLFNBQVMsQ0FBQztRQUN2QixDQUFDO0lBQ0gsQ0FBQztJQUVELCtDQUErQztJQUMvQyxpRUFBaUU7SUFDakUsd0JBQXdCO0lBQ3hCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ2pCLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFJRCxJQUFJO1FBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxhQUFhLEVBQUUsRUFBRTtZQUNsRSxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6QixDQUFDLENBQUMsQ0FBQztBQUVMLENBQUMsQ0FBQyIsImZpbGUiOiJhcGkvcmVzcG9uc2VzL2JhZFJlcXVlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIDQwMCAoQmFkIFJlcXVlc3QpIEhhbmRsZXJcbiAqXG4gKiBVc2FnZTpcbiAqIHJldHVybiByZXMuYmFkUmVxdWVzdCgpO1xuICogcmV0dXJuIHJlcy5iYWRSZXF1ZXN0KGRhdGEpO1xuICogcmV0dXJuIHJlcy5iYWRSZXF1ZXN0KGRhdGEsICdzb21lL3NwZWNpZmljL2JhZFJlcXVlc3QvdmlldycpO1xuICpcbiAqIGUuZy46XG4gKiBgYGBcbiAqIHJldHVybiByZXMuYmFkUmVxdWVzdChcbiAqICAgJ1BsZWFzZSBjaG9vc2UgYSB2YWxpZCBgcGFzc3dvcmRgICg2LTEyIGNoYXJhY3RlcnMpJyxcbiAqICAgJ3RyaWFsL3NpZ251cCdcbiAqICk7XG4gKiBgYGBcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJhZFJlcXVlc3QoZGF0YSwgb3B0aW9ucykge1xuXG4gIC8vIEdldCBhY2Nlc3MgdG8gYHJlcWAsIGByZXNgLCAmIGBzYWlsc2BcbiAgdmFyIHJlcSA9IHRoaXMucmVxO1xuICB2YXIgcmVzID0gdGhpcy5yZXM7XG4gIHZhciBzYWlscyA9IHJlcS5fc2FpbHM7XG5cbiAgLy8gU2V0IHN0YXR1cyBjb2RlXG4gIHJlcy5zdGF0dXMoNDAwKTtcblxuICAvLyBMb2cgZXJyb3IgdG8gY29uc29sZVxuICBpZiAoZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgc2FpbHMubG9nLnZlcmJvc2UoJ1NlbmRpbmcgNDAwIChcIkJhZCBSZXF1ZXN0XCIpIHJlc3BvbnNlOiBcXG4nLGRhdGEpO1xuICB9XG4gIGVsc2Ugc2FpbHMubG9nLnZlcmJvc2UoJ1NlbmRpbmcgNDAwIChcIkJhZCBSZXF1ZXN0XCIpIHJlc3BvbnNlJyk7XG5cbiAgLy8gT25seSBpbmNsdWRlIGVycm9ycyBpbiByZXNwb25zZSBpZiBhcHBsaWNhdGlvbiBlbnZpcm9ubWVudFxuICAvLyBpcyBub3Qgc2V0IHRvICdwcm9kdWN0aW9uJy4gIEluIHByb2R1Y3Rpb24sIHdlIHNob3VsZG4ndFxuICAvLyBzZW5kIGJhY2sgYW55IGlkZW50aWZ5aW5nIGluZm9ybWF0aW9uIGFib3V0IGVycm9ycy5cbiAgaWYgKHNhaWxzLmNvbmZpZy5lbnZpcm9ubWVudCA9PT0gJ3Byb2R1Y3Rpb24nICYmIHNhaWxzLmNvbmZpZy5rZWVwUmVzcG9uc2VFcnJvcnMgIT09IHRydWUpIHtcbiAgICBkYXRhID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgLy8gSWYgdGhlIHVzZXItYWdlbnQgd2FudHMgSlNPTiwgYWx3YXlzIHJlc3BvbmQgd2l0aCBKU09OXG4gIC8vIElmIHZpZXdzIGFyZSBkaXNhYmxlZCwgcmV2ZXJ0IHRvIGpzb25cbiAgaWYgKHJlcS53YW50c0pTT04gfHwgc2FpbHMuY29uZmlnLmhvb2tzLnZpZXdzID09PSBmYWxzZSkge1xuICAgIHJldHVybiByZXMuanNvbngoZGF0YSk7XG4gIH1cblxuICAvLyBJZiBzZWNvbmQgYXJndW1lbnQgaXMgYSBzdHJpbmcsIHdlIHRha2UgdGhhdCB0byBtZWFuIGl0IHJlZmVycyB0byBhIHZpZXcuXG4gIC8vIElmIGl0IHdhcyBvbWl0dGVkLCB1c2UgYW4gZW1wdHkgb2JqZWN0IChge31gKVxuICBvcHRpb25zID0gKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJykgPyB7IHZpZXc6IG9wdGlvbnMgfSA6IG9wdGlvbnMgfHwge307XG5cbiAgLy8gQXR0ZW1wdCB0byBwcmV0dGlmeSBkYXRhIGZvciB2aWV3cywgaWYgaXQncyBhIG5vbi1lcnJvciBvYmplY3RcbiAgdmFyIHZpZXdEYXRhID0gZGF0YTtcbiAgaWYgKCEodmlld0RhdGEgaW5zdGFuY2VvZiBFcnJvcikgJiYgJ29iamVjdCcgPT0gdHlwZW9mIHZpZXdEYXRhKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZpZXdEYXRhID0gcmVxdWlyZSgndXRpbCcpLmluc3BlY3QoZGF0YSwge2RlcHRoOiBudWxsfSk7XG4gICAgfVxuICAgIGNhdGNoKGUpIHtcbiAgICAgIHZpZXdEYXRhID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIC8vIElmIGEgdmlldyB3YXMgcHJvdmlkZWQgaW4gb3B0aW9ucywgc2VydmUgaXQuXG4gIC8vIE90aGVyd2lzZSB0cnkgdG8gZ3Vlc3MgYW4gYXBwcm9wcmlhdGUgdmlldywgb3IgaWYgdGhhdCBkb2Vzbid0XG4gIC8vIHdvcmssIGp1c3Qgc2VuZCBKU09OLlxuICBpZiAob3B0aW9ucy52aWV3KSB7XG4gICAgcmV0dXJuIHJlcy52aWV3KG9wdGlvbnMudmlldywgeyBkYXRhOiB2aWV3RGF0YSwgdGl0bGU6ICdCYWQgUmVxdWVzdCcgfSk7XG4gIH1cblxuICAvLyBJZiBubyBzZWNvbmQgYXJndW1lbnQgcHJvdmlkZWQsIHRyeSB0byBzZXJ2ZSB0aGUgaW1wbGllZCB2aWV3LFxuICAvLyBidXQgZmFsbCBiYWNrIHRvIHNlbmRpbmcgSlNPTihQKSBpZiBubyB2aWV3IGNhbiBiZSBpbmZlcnJlZC5cbiAgZWxzZSByZXR1cm4gcmVzLmd1ZXNzVmlldyh7IGRhdGE6IHZpZXdEYXRhLCB0aXRsZTogJ0JhZCBSZXF1ZXN0JyB9LCBmdW5jdGlvbiBjb3VsZE5vdEd1ZXNzVmlldyAoKSB7XG4gICAgcmV0dXJuIHJlcy5qc29ueChkYXRhKTtcbiAgfSk7XG5cbn07XG5cbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf8;base64,
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,
