/**
 * sessionAuth
 *
 * @module      :: Policy
 * @description :: Simple policy to allow any authenticated user
 *                 Assumes that your login action in one of your controllers sets `req.session.authenticated = true;`
 * @docs        :: http://sailsjs.org/#!/documentation/concepts/Policies
 *
 */
module.exports = function (req, res, next) {
    // User is allowed, proceed to the next policy, 
    // or if this is the last policy, the controller
    if (req.session.authenticated) {
        return next();
    }
    // User is not allowed
    // (default res.forbidden() behavior can be overridden in `config/403.js`)
    return res.forbidden('You are not permitted to perform this action.');
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS9wb2xpY2llcy9zZXNzaW9uQXV0aC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFBUyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUk7SUFFdEMsZ0RBQWdEO0lBQ2hELGdEQUFnRDtJQUNoRCxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUFDOUIsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxzQkFBc0I7SUFDdEIsMEVBQTBFO0lBQzFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLCtDQUErQyxDQUFDLENBQUM7QUFDeEUsQ0FBQyxDQUFDIiwiZmlsZSI6ImFwaS9wb2xpY2llcy9zZXNzaW9uQXV0aC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogc2Vzc2lvbkF1dGhcbiAqXG4gKiBAbW9kdWxlICAgICAgOjogUG9saWN5XG4gKiBAZGVzY3JpcHRpb24gOjogU2ltcGxlIHBvbGljeSB0byBhbGxvdyBhbnkgYXV0aGVudGljYXRlZCB1c2VyXG4gKiAgICAgICAgICAgICAgICAgQXNzdW1lcyB0aGF0IHlvdXIgbG9naW4gYWN0aW9uIGluIG9uZSBvZiB5b3VyIGNvbnRyb2xsZXJzIHNldHMgYHJlcS5zZXNzaW9uLmF1dGhlbnRpY2F0ZWQgPSB0cnVlO2BcbiAqIEBkb2NzICAgICAgICA6OiBodHRwOi8vc2FpbHNqcy5vcmcvIyEvZG9jdW1lbnRhdGlvbi9jb25jZXB0cy9Qb2xpY2llc1xuICpcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuXG4gIC8vIFVzZXIgaXMgYWxsb3dlZCwgcHJvY2VlZCB0byB0aGUgbmV4dCBwb2xpY3ksIFxuICAvLyBvciBpZiB0aGlzIGlzIHRoZSBsYXN0IHBvbGljeSwgdGhlIGNvbnRyb2xsZXJcbiAgaWYgKHJlcS5zZXNzaW9uLmF1dGhlbnRpY2F0ZWQpIHtcbiAgICByZXR1cm4gbmV4dCgpO1xuICB9XG5cbiAgLy8gVXNlciBpcyBub3QgYWxsb3dlZFxuICAvLyAoZGVmYXVsdCByZXMuZm9yYmlkZGVuKCkgYmVoYXZpb3IgY2FuIGJlIG92ZXJyaWRkZW4gaW4gYGNvbmZpZy80MDMuanNgKVxuICByZXR1cm4gcmVzLmZvcmJpZGRlbignWW91IGFyZSBub3QgcGVybWl0dGVkIHRvIHBlcmZvcm0gdGhpcyBhY3Rpb24uJyk7XG59O1xuIl19
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS9wb2xpY2llcy9zZXNzaW9uQXV0aC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFBVSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUk7SUFDckMsZ0RBQWdEO0lBQ2hELGdEQUFnRDtJQUNoRCxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUFDNUIsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2xCLENBQUM7SUFDRCxzQkFBc0I7SUFDdEIsMEVBQTBFO0lBQzFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLCtDQUErQyxDQUFDLENBQUM7QUFDMUUsQ0FBQyxDQUFDO0FBRUYsMmpEQUEyakQiLCJmaWxlIjoiYXBpL3BvbGljaWVzL3Nlc3Npb25BdXRoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBzZXNzaW9uQXV0aFxuICpcbiAqIEBtb2R1bGUgICAgICA6OiBQb2xpY3lcbiAqIEBkZXNjcmlwdGlvbiA6OiBTaW1wbGUgcG9saWN5IHRvIGFsbG93IGFueSBhdXRoZW50aWNhdGVkIHVzZXJcbiAqICAgICAgICAgICAgICAgICBBc3N1bWVzIHRoYXQgeW91ciBsb2dpbiBhY3Rpb24gaW4gb25lIG9mIHlvdXIgY29udHJvbGxlcnMgc2V0cyBgcmVxLnNlc3Npb24uYXV0aGVudGljYXRlZCA9IHRydWU7YFxuICogQGRvY3MgICAgICAgIDo6IGh0dHA6Ly9zYWlsc2pzLm9yZy8jIS9kb2N1bWVudGF0aW9uL2NvbmNlcHRzL1BvbGljaWVzXG4gKlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyZXEsIHJlcywgbmV4dCkge1xuICAgIC8vIFVzZXIgaXMgYWxsb3dlZCwgcHJvY2VlZCB0byB0aGUgbmV4dCBwb2xpY3ksIFxuICAgIC8vIG9yIGlmIHRoaXMgaXMgdGhlIGxhc3QgcG9saWN5LCB0aGUgY29udHJvbGxlclxuICAgIGlmIChyZXEuc2Vzc2lvbi5hdXRoZW50aWNhdGVkKSB7XG4gICAgICAgIHJldHVybiBuZXh0KCk7XG4gICAgfVxuICAgIC8vIFVzZXIgaXMgbm90IGFsbG93ZWRcbiAgICAvLyAoZGVmYXVsdCByZXMuZm9yYmlkZGVuKCkgYmVoYXZpb3IgY2FuIGJlIG92ZXJyaWRkZW4gaW4gYGNvbmZpZy80MDMuanNgKVxuICAgIHJldHVybiByZXMuZm9yYmlkZGVuKCdZb3UgYXJlIG5vdCBwZXJtaXR0ZWQgdG8gcGVyZm9ybSB0aGlzIGFjdGlvbi4nKTtcbn07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zjg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Gd2FTOXdiMnhwWTJsbGN5OXpaWE56YVc5dVFYVjBhQzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUczdPenM3T3pzN1IwRlJSenRCUVVOSUxFMUJRVTBzUTBGQlF5eFBRVUZQTEVkQlFVY3NWVUZCVXl4SFFVRkhMRVZCUVVVc1IwRkJSeXhGUVVGRkxFbEJRVWs3U1VGRmRFTXNaMFJCUVdkRU8wbEJRMmhFTEdkRVFVRm5SRHRKUVVOb1JDeEZRVUZGTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1QwRkJUeXhEUVVGRExHRkJRV0VzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZET1VJc1RVRkJUU3hEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETzBsQlEyaENMRU5CUVVNN1NVRkZSQ3h6UWtGQmMwSTdTVUZEZEVJc01FVkJRVEJGTzBsQlF6RkZMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zVTBGQlV5eERRVUZETEN0RFFVRXJReXhEUVVGRExFTkJRVU03UVVGRGVFVXNRMEZCUXl4RFFVRkRJaXdpWm1sc1pTSTZJbUZ3YVM5d2IyeHBZMmxsY3k5elpYTnphVzl1UVhWMGFDNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtseHVJQ29nYzJWemMybHZia0YxZEdoY2JpQXFYRzRnS2lCQWJXOWtkV3hsSUNBZ0lDQWdPam9nVUc5c2FXTjVYRzRnS2lCQVpHVnpZM0pwY0hScGIyNGdPam9nVTJsdGNHeGxJSEJ2YkdsamVTQjBieUJoYkd4dmR5QmhibmtnWVhWMGFHVnVkR2xqWVhSbFpDQjFjMlZ5WEc0Z0tpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1FYTnpkVzFsY3lCMGFHRjBJSGx2ZFhJZ2JHOW5hVzRnWVdOMGFXOXVJR2x1SUc5dVpTQnZaaUI1YjNWeUlHTnZiblJ5YjJ4c1pYSnpJSE5sZEhNZ1lISmxjUzV6WlhOemFXOXVMbUYxZEdobGJuUnBZMkYwWldRZ1BTQjBjblZsTzJCY2JpQXFJRUJrYjJOeklDQWdJQ0FnSUNBNk9pQm9kSFJ3T2k4dmMyRnBiSE5xY3k1dmNtY3ZJeUV2Wkc5amRXMWxiblJoZEdsdmJpOWpiMjVqWlhCMGN5OVFiMnhwWTJsbGMxeHVJQ3BjYmlBcUwxeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaHlaWEVzSUhKbGN5d2dibVY0ZENrZ2UxeHVYRzRnSUM4dklGVnpaWElnYVhNZ1lXeHNiM2RsWkN3Z2NISnZZMlZsWkNCMGJ5QjBhR1VnYm1WNGRDQndiMnhwWTNrc0lGeHVJQ0F2THlCdmNpQnBaaUIwYUdseklHbHpJSFJvWlNCc1lYTjBJSEJ2YkdsamVTd2dkR2hsSUdOdmJuUnliMnhzWlhKY2JpQWdhV1lnS0hKbGNTNXpaWE56YVc5dUxtRjFkR2hsYm5ScFkyRjBaV1FwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibVY0ZENncE8xeHVJQ0I5WEc1Y2JpQWdMeThnVlhObGNpQnBjeUJ1YjNRZ1lXeHNiM2RsWkZ4dUlDQXZMeUFvWkdWbVlYVnNkQ0J5WlhNdVptOXlZbWxrWkdWdUtDa2dZbVZvWVhacGIzSWdZMkZ1SUdKbElHOTJaWEp5YVdSa1pXNGdhVzRnWUdOdmJtWnBaeTgwTURNdWFuTmdLVnh1SUNCeVpYUjFjbTRnY21WekxtWnZjbUpwWkdSbGJpZ25XVzkxSUdGeVpTQnViM1FnY0dWeWJXbDBkR1ZrSUhSdklIQmxjbVp2Y20wZ2RHaHBjeUJoWTNScGIyNHVKeWs3WEc1OU8xeHVJbDE5XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,
