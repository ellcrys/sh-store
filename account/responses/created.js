/**
 * 201 (CREATED) Response
 *
 * Usage:
 * return res.created();
 * return res.created(data);
 * return res.created(data, 'auth/login');
 *
 * @param  {Object} data
 * @param  {String|Object} options
 *          - pass string to render specified view
 */
module.exports = function created(data, options) {
    // Get access to `req`, `res`, & `sails`
    var req = this.req;
    var res = this.res;
    var sails = req._sails;
    sails.log.silly('res.created() :: Sending 201 ("CREATED") response');
    // Set status code
    res.status(201);
    // If appropriate, serve data as JSON(P)
    // If views are disabled, revert to json
    if (req.wantsJSON || sails.config.hooks.views === false) {
        return res.jsonx(data);
    }
    // If second argument is a string, we take that to mean it refers to a view.
    // If it was omitted, use an empty object (`{}`)
    options = (typeof options === 'string') ? { view: options } : options || {};
    // Attempt to prettify data for views, if it's a non-error object
    var viewData = data;
    if (!(viewData instanceof Error) && 'object' == typeof viewData) {
        try {
            viewData = require('util').inspect(data, { depth: null });
        }
        catch (e) {
            viewData = undefined;
        }
    }
    // If a view was provided in options, serve it.
    // Otherwise try to guess an appropriate view, or if that doesn't
    // work, just send JSON.
    if (options.view) {
        return res.view(options.view, { data: viewData, title: 'Created' });
    }
    else
        return res.guessView({ data: viewData, title: 'Created' }, function couldNotGuessView() {
            return res.jsonx(data);
        });
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS9yZXNwb25zZXMvY3JlYXRlZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7R0FXRztBQUVILE1BQU0sQ0FBQyxPQUFPLEdBQUcsaUJBQWtCLElBQUksRUFBRSxPQUFPO0lBRTlDLHdDQUF3QztJQUN4QyxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQ25CLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDbkIsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQztJQUV2QixLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxtREFBbUQsQ0FBQyxDQUFDO0lBRXJFLGtCQUFrQjtJQUNsQixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRWhCLHdDQUF3QztJQUN4Qyx3Q0FBd0M7SUFDeEMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQztRQUN4RCxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBRUQsNEVBQTRFO0lBQzVFLGdEQUFnRDtJQUNoRCxPQUFPLEdBQUcsQ0FBQyxPQUFPLE9BQU8sS0FBSyxRQUFRLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxPQUFPLElBQUksRUFBRSxDQUFDO0lBRTVFLGlFQUFpRTtJQUNqRSxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUM7SUFDcEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsWUFBWSxLQUFLLENBQUMsSUFBSSxRQUFRLElBQUksT0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQztZQUNILFFBQVEsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFDLEtBQUssRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO1FBQzFELENBQUM7UUFDRCxLQUFLLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ1IsUUFBUSxHQUFHLFNBQVMsQ0FBQztRQUN2QixDQUFDO0lBQ0gsQ0FBQztJQUVELCtDQUErQztJQUMvQyxpRUFBaUU7SUFDakUsd0JBQXdCO0lBQ3hCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ2pCLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFJRCxJQUFJO1FBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsRUFBRTtZQUM5RCxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6QixDQUFDLENBQUMsQ0FBQztBQUVMLENBQUMsQ0FBQyIsImZpbGUiOiJhcGkvcmVzcG9uc2VzL2NyZWF0ZWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIDIwMSAoQ1JFQVRFRCkgUmVzcG9uc2VcbiAqXG4gKiBVc2FnZTpcbiAqIHJldHVybiByZXMuY3JlYXRlZCgpO1xuICogcmV0dXJuIHJlcy5jcmVhdGVkKGRhdGEpO1xuICogcmV0dXJuIHJlcy5jcmVhdGVkKGRhdGEsICdhdXRoL2xvZ2luJyk7XG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBkYXRhXG4gKiBAcGFyYW0gIHtTdHJpbmd8T2JqZWN0fSBvcHRpb25zXG4gKiAgICAgICAgICAtIHBhc3Mgc3RyaW5nIHRvIHJlbmRlciBzcGVjaWZpZWQgdmlld1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlZCAoZGF0YSwgb3B0aW9ucykge1xuXG4gIC8vIEdldCBhY2Nlc3MgdG8gYHJlcWAsIGByZXNgLCAmIGBzYWlsc2BcbiAgdmFyIHJlcSA9IHRoaXMucmVxO1xuICB2YXIgcmVzID0gdGhpcy5yZXM7XG4gIHZhciBzYWlscyA9IHJlcS5fc2FpbHM7XG5cbiAgc2FpbHMubG9nLnNpbGx5KCdyZXMuY3JlYXRlZCgpIDo6IFNlbmRpbmcgMjAxIChcIkNSRUFURURcIikgcmVzcG9uc2UnKTtcblxuICAvLyBTZXQgc3RhdHVzIGNvZGVcbiAgcmVzLnN0YXR1cygyMDEpO1xuXG4gIC8vIElmIGFwcHJvcHJpYXRlLCBzZXJ2ZSBkYXRhIGFzIEpTT04oUClcbiAgLy8gSWYgdmlld3MgYXJlIGRpc2FibGVkLCByZXZlcnQgdG8ganNvblxuICBpZiAocmVxLndhbnRzSlNPTiB8fCBzYWlscy5jb25maWcuaG9va3Mudmlld3MgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIHJlcy5qc29ueChkYXRhKTtcbiAgfVxuXG4gIC8vIElmIHNlY29uZCBhcmd1bWVudCBpcyBhIHN0cmluZywgd2UgdGFrZSB0aGF0IHRvIG1lYW4gaXQgcmVmZXJzIHRvIGEgdmlldy5cbiAgLy8gSWYgaXQgd2FzIG9taXR0ZWQsIHVzZSBhbiBlbXB0eSBvYmplY3QgKGB7fWApXG4gIG9wdGlvbnMgPSAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSA/IHsgdmlldzogb3B0aW9ucyB9IDogb3B0aW9ucyB8fCB7fTtcblxuICAvLyBBdHRlbXB0IHRvIHByZXR0aWZ5IGRhdGEgZm9yIHZpZXdzLCBpZiBpdCdzIGEgbm9uLWVycm9yIG9iamVjdFxuICB2YXIgdmlld0RhdGEgPSBkYXRhO1xuICBpZiAoISh2aWV3RGF0YSBpbnN0YW5jZW9mIEVycm9yKSAmJiAnb2JqZWN0JyA9PSB0eXBlb2Ygdmlld0RhdGEpIHtcbiAgICB0cnkge1xuICAgICAgdmlld0RhdGEgPSByZXF1aXJlKCd1dGlsJykuaW5zcGVjdChkYXRhLCB7ZGVwdGg6IG51bGx9KTtcbiAgICB9XG4gICAgY2F0Y2goZSkge1xuICAgICAgdmlld0RhdGEgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgLy8gSWYgYSB2aWV3IHdhcyBwcm92aWRlZCBpbiBvcHRpb25zLCBzZXJ2ZSBpdC5cbiAgLy8gT3RoZXJ3aXNlIHRyeSB0byBndWVzcyBhbiBhcHByb3ByaWF0ZSB2aWV3LCBvciBpZiB0aGF0IGRvZXNuJ3RcbiAgLy8gd29yaywganVzdCBzZW5kIEpTT04uXG4gIGlmIChvcHRpb25zLnZpZXcpIHtcbiAgICByZXR1cm4gcmVzLnZpZXcob3B0aW9ucy52aWV3LCB7IGRhdGE6IHZpZXdEYXRhLCB0aXRsZTogJ0NyZWF0ZWQnIH0pO1xuICB9XG5cbiAgLy8gSWYgbm8gc2Vjb25kIGFyZ3VtZW50IHByb3ZpZGVkLCB0cnkgdG8gc2VydmUgdGhlIGltcGxpZWQgdmlldyxcbiAgLy8gYnV0IGZhbGwgYmFjayB0byBzZW5kaW5nIEpTT04oUCkgaWYgbm8gdmlldyBjYW4gYmUgaW5mZXJyZWQuXG4gIGVsc2UgcmV0dXJuIHJlcy5ndWVzc1ZpZXcoeyBkYXRhOiB2aWV3RGF0YSwgdGl0bGU6ICdDcmVhdGVkJyB9LCBmdW5jdGlvbiBjb3VsZE5vdEd1ZXNzVmlldyAoKSB7XG4gICAgcmV0dXJuIHJlcy5qc29ueChkYXRhKTtcbiAgfSk7XG5cbn07XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf8;base64,
//# sourceMappingURL=data:application/json;charset=utf8;base64,
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,
