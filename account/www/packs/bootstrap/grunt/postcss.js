module.exports = {
    use: [
        'postcss-flexbugs-fixes',
        'autoprefixer'
    ],
    map: {
        inline: false,
        annotation: true,
        sourcesContent: true
    },
    autoprefixer: {
        browsers: [
            //
            // Official browser support policy:
            // https://v4-alpha.getbootstrap.com/getting-started/browsers-devices/#supported-browsers
            //
            'Chrome >= 35',
            // Rather than using Autoprefixer's native "Firefox ESR" version specifier string,
            // we deliberately hardcode the number. This is to avoid unwittingly severely breaking the previous ESR in the event that:
            // (a) we happen to ship a new Bootstrap release soon after the release of a new ESR,
            //     such that folks haven't yet had a reasonable amount of time to upgrade; and
            // (b) the new ESR has unprefixed CSS properties/values whose absence would severely break webpages
            //     (e.g. `box-sizing`, as opposed to `background: linear-gradient(...)`).
            //     Since they've been unprefixed, Autoprefixer will stop prefixing them,
            //     thus causing them to not work in the previous ESR (where the prefixes were required).
            'Firefox >= 38',
            // Note: Edge versions in Autoprefixer & Can I Use refer to the EdgeHTML rendering engine version,
            // NOT the Edge app version shown in Edge's "About" screen.
            // For example, at the time of writing, Edge 20 on an up-to-date system uses EdgeHTML 12.
            // See also https://github.com/Fyrd/caniuse/issues/1928
            'Edge >= 12',
            'Explorer >= 10',
            // Out of leniency, we prefix these 1 version further back than the official policy.
            'iOS >= 8',
            'Safari >= 8',
            // The following remain NOT officially supported, but we're lenient and include their prefixes to avoid severely breaking in them.
            'Android 2.3',
            'Android >= 4',
            'Opera >= 12'
        ]
    }
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInd3dy9wYWNrcy9ib290c3RyYXAvZ3J1bnQvcG9zdGNzcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsT0FBTyxHQUFHO0lBQ2YsR0FBRyxFQUFFO1FBQ0gsd0JBQXdCO1FBQ3hCLGNBQWM7S0FDZjtJQUNELEdBQUcsRUFBRTtRQUNILE1BQU0sRUFBRSxLQUFLO1FBQ2IsVUFBVSxFQUFFLElBQUk7UUFDaEIsY0FBYyxFQUFFLElBQUk7S0FDckI7SUFDRCxZQUFZLEVBQUU7UUFDWixRQUFRLEVBQUU7WUFDUixFQUFFO1lBQ0YsbUNBQW1DO1lBQ25DLHlGQUF5RjtZQUN6RixFQUFFO1lBQ0YsY0FBYztZQUNkLGtGQUFrRjtZQUNsRiwwSEFBMEg7WUFDMUgscUZBQXFGO1lBQ3JGLGtGQUFrRjtZQUNsRixtR0FBbUc7WUFDbkcsNkVBQTZFO1lBQzdFLDRFQUE0RTtZQUM1RSw0RkFBNEY7WUFDNUYsZUFBZTtZQUNmLGtHQUFrRztZQUNsRywyREFBMkQ7WUFDM0QseUZBQXlGO1lBQ3pGLHVEQUF1RDtZQUN2RCxZQUFZO1lBQ1osZ0JBQWdCO1lBQ2hCLG9GQUFvRjtZQUNwRixVQUFVO1lBQ1YsYUFBYTtZQUNiLGtJQUFrSTtZQUNsSSxhQUFhO1lBQ2IsY0FBYztZQUNkLGFBQWE7U0FDZDtLQUNGO0NBQ0YsQ0FBQSIsImZpbGUiOiJ3d3cvcGFja3MvYm9vdHN0cmFwL2dydW50L3Bvc3Rjc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgdXNlOiBbXG4gICAgJ3Bvc3Rjc3MtZmxleGJ1Z3MtZml4ZXMnLFxuICAgICdhdXRvcHJlZml4ZXInXG4gIF0sXG4gIG1hcDoge1xuICAgIGlubGluZTogZmFsc2UsXG4gICAgYW5ub3RhdGlvbjogdHJ1ZSxcbiAgICBzb3VyY2VzQ29udGVudDogdHJ1ZVxuICB9LFxuICBhdXRvcHJlZml4ZXI6IHtcbiAgICBicm93c2VyczogW1xuICAgICAgLy9cbiAgICAgIC8vIE9mZmljaWFsIGJyb3dzZXIgc3VwcG9ydCBwb2xpY3k6XG4gICAgICAvLyBodHRwczovL3Y0LWFscGhhLmdldGJvb3RzdHJhcC5jb20vZ2V0dGluZy1zdGFydGVkL2Jyb3dzZXJzLWRldmljZXMvI3N1cHBvcnRlZC1icm93c2Vyc1xuICAgICAgLy9cbiAgICAgICdDaHJvbWUgPj0gMzUnLCAvLyBFeGFjdCB2ZXJzaW9uIG51bWJlciBoZXJlIGlzIGtpbmRhIGFyYml0cmFyeVxuICAgICAgLy8gUmF0aGVyIHRoYW4gdXNpbmcgQXV0b3ByZWZpeGVyJ3MgbmF0aXZlIFwiRmlyZWZveCBFU1JcIiB2ZXJzaW9uIHNwZWNpZmllciBzdHJpbmcsXG4gICAgICAvLyB3ZSBkZWxpYmVyYXRlbHkgaGFyZGNvZGUgdGhlIG51bWJlci4gVGhpcyBpcyB0byBhdm9pZCB1bndpdHRpbmdseSBzZXZlcmVseSBicmVha2luZyB0aGUgcHJldmlvdXMgRVNSIGluIHRoZSBldmVudCB0aGF0OlxuICAgICAgLy8gKGEpIHdlIGhhcHBlbiB0byBzaGlwIGEgbmV3IEJvb3RzdHJhcCByZWxlYXNlIHNvb24gYWZ0ZXIgdGhlIHJlbGVhc2Ugb2YgYSBuZXcgRVNSLFxuICAgICAgLy8gICAgIHN1Y2ggdGhhdCBmb2xrcyBoYXZlbid0IHlldCBoYWQgYSByZWFzb25hYmxlIGFtb3VudCBvZiB0aW1lIHRvIHVwZ3JhZGU7IGFuZFxuICAgICAgLy8gKGIpIHRoZSBuZXcgRVNSIGhhcyB1bnByZWZpeGVkIENTUyBwcm9wZXJ0aWVzL3ZhbHVlcyB3aG9zZSBhYnNlbmNlIHdvdWxkIHNldmVyZWx5IGJyZWFrIHdlYnBhZ2VzXG4gICAgICAvLyAgICAgKGUuZy4gYGJveC1zaXppbmdgLCBhcyBvcHBvc2VkIHRvIGBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoLi4uKWApLlxuICAgICAgLy8gICAgIFNpbmNlIHRoZXkndmUgYmVlbiB1bnByZWZpeGVkLCBBdXRvcHJlZml4ZXIgd2lsbCBzdG9wIHByZWZpeGluZyB0aGVtLFxuICAgICAgLy8gICAgIHRodXMgY2F1c2luZyB0aGVtIHRvIG5vdCB3b3JrIGluIHRoZSBwcmV2aW91cyBFU1IgKHdoZXJlIHRoZSBwcmVmaXhlcyB3ZXJlIHJlcXVpcmVkKS5cbiAgICAgICdGaXJlZm94ID49IDM4JywgLy8gQ3VycmVudCBGaXJlZm94IEV4dGVuZGVkIFN1cHBvcnQgUmVsZWFzZSAoRVNSKTsgaHR0cHM6Ly93d3cubW96aWxsYS5vcmcvZW4tVVMvZmlyZWZveC9vcmdhbml6YXRpb25zL2ZhcS9cbiAgICAgIC8vIE5vdGU6IEVkZ2UgdmVyc2lvbnMgaW4gQXV0b3ByZWZpeGVyICYgQ2FuIEkgVXNlIHJlZmVyIHRvIHRoZSBFZGdlSFRNTCByZW5kZXJpbmcgZW5naW5lIHZlcnNpb24sXG4gICAgICAvLyBOT1QgdGhlIEVkZ2UgYXBwIHZlcnNpb24gc2hvd24gaW4gRWRnZSdzIFwiQWJvdXRcIiBzY3JlZW4uXG4gICAgICAvLyBGb3IgZXhhbXBsZSwgYXQgdGhlIHRpbWUgb2Ygd3JpdGluZywgRWRnZSAyMCBvbiBhbiB1cC10by1kYXRlIHN5c3RlbSB1c2VzIEVkZ2VIVE1MIDEyLlxuICAgICAgLy8gU2VlIGFsc28gaHR0cHM6Ly9naXRodWIuY29tL0Z5cmQvY2FuaXVzZS9pc3N1ZXMvMTkyOFxuICAgICAgJ0VkZ2UgPj0gMTInLFxuICAgICAgJ0V4cGxvcmVyID49IDEwJyxcbiAgICAgIC8vIE91dCBvZiBsZW5pZW5jeSwgd2UgcHJlZml4IHRoZXNlIDEgdmVyc2lvbiBmdXJ0aGVyIGJhY2sgdGhhbiB0aGUgb2ZmaWNpYWwgcG9saWN5LlxuICAgICAgJ2lPUyA+PSA4JyxcbiAgICAgICdTYWZhcmkgPj0gOCcsXG4gICAgICAvLyBUaGUgZm9sbG93aW5nIHJlbWFpbiBOT1Qgb2ZmaWNpYWxseSBzdXBwb3J0ZWQsIGJ1dCB3ZSdyZSBsZW5pZW50IGFuZCBpbmNsdWRlIHRoZWlyIHByZWZpeGVzIHRvIGF2b2lkIHNldmVyZWx5IGJyZWFraW5nIGluIHRoZW0uXG4gICAgICAnQW5kcm9pZCAyLjMnLFxuICAgICAgJ0FuZHJvaWQgPj0gNCcsXG4gICAgICAnT3BlcmEgPj0gMTInXG4gICAgXVxuICB9XG59XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInd3dy9wYWNrcy9ib290c3RyYXAvZ3J1bnQvcG9zdGNzcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsT0FBTyxHQUFHO0lBQ2IsR0FBRyxFQUFFO1FBQ0Qsd0JBQXdCO1FBQ3hCLGNBQWM7S0FDakI7SUFDRCxHQUFHLEVBQUU7UUFDRCxNQUFNLEVBQUUsS0FBSztRQUNiLFVBQVUsRUFBRSxJQUFJO1FBQ2hCLGNBQWMsRUFBRSxJQUFJO0tBQ3ZCO0lBQ0QsWUFBWSxFQUFFO1FBQ1YsUUFBUSxFQUFFO1lBQ04sRUFBRTtZQUNGLG1DQUFtQztZQUNuQyx5RkFBeUY7WUFDekYsRUFBRTtZQUNGLGNBQWM7WUFDZCxrRkFBa0Y7WUFDbEYsMEhBQTBIO1lBQzFILHFGQUFxRjtZQUNyRixrRkFBa0Y7WUFDbEYsbUdBQW1HO1lBQ25HLDZFQUE2RTtZQUM3RSw0RUFBNEU7WUFDNUUsNEZBQTRGO1lBQzVGLGVBQWU7WUFDZixrR0FBa0c7WUFDbEcsMkRBQTJEO1lBQzNELHlGQUF5RjtZQUN6Rix1REFBdUQ7WUFDdkQsWUFBWTtZQUNaLGdCQUFnQjtZQUNoQixvRkFBb0Y7WUFDcEYsVUFBVTtZQUNWLGFBQWE7WUFDYixrSUFBa0k7WUFDbEksYUFBYTtZQUNiLGNBQWM7WUFDZCxhQUFhO1NBQ2hCO0tBQ0o7Q0FDSixDQUFDO0FBQ0YsbXFIQUFtcUg7QUFFbnFILCtuUkFBK25SIiwiZmlsZSI6Ind3dy9wYWNrcy9ib290c3RyYXAvZ3J1bnQvcG9zdGNzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xuICAgIHVzZTogW1xuICAgICAgICAncG9zdGNzcy1mbGV4YnVncy1maXhlcycsXG4gICAgICAgICdhdXRvcHJlZml4ZXInXG4gICAgXSxcbiAgICBtYXA6IHtcbiAgICAgICAgaW5saW5lOiBmYWxzZSxcbiAgICAgICAgYW5ub3RhdGlvbjogdHJ1ZSxcbiAgICAgICAgc291cmNlc0NvbnRlbnQ6IHRydWVcbiAgICB9LFxuICAgIGF1dG9wcmVmaXhlcjoge1xuICAgICAgICBicm93c2VyczogW1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIE9mZmljaWFsIGJyb3dzZXIgc3VwcG9ydCBwb2xpY3k6XG4gICAgICAgICAgICAvLyBodHRwczovL3Y0LWFscGhhLmdldGJvb3RzdHJhcC5jb20vZ2V0dGluZy1zdGFydGVkL2Jyb3dzZXJzLWRldmljZXMvI3N1cHBvcnRlZC1icm93c2Vyc1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICdDaHJvbWUgPj0gMzUnLFxuICAgICAgICAgICAgLy8gUmF0aGVyIHRoYW4gdXNpbmcgQXV0b3ByZWZpeGVyJ3MgbmF0aXZlIFwiRmlyZWZveCBFU1JcIiB2ZXJzaW9uIHNwZWNpZmllciBzdHJpbmcsXG4gICAgICAgICAgICAvLyB3ZSBkZWxpYmVyYXRlbHkgaGFyZGNvZGUgdGhlIG51bWJlci4gVGhpcyBpcyB0byBhdm9pZCB1bndpdHRpbmdseSBzZXZlcmVseSBicmVha2luZyB0aGUgcHJldmlvdXMgRVNSIGluIHRoZSBldmVudCB0aGF0OlxuICAgICAgICAgICAgLy8gKGEpIHdlIGhhcHBlbiB0byBzaGlwIGEgbmV3IEJvb3RzdHJhcCByZWxlYXNlIHNvb24gYWZ0ZXIgdGhlIHJlbGVhc2Ugb2YgYSBuZXcgRVNSLFxuICAgICAgICAgICAgLy8gICAgIHN1Y2ggdGhhdCBmb2xrcyBoYXZlbid0IHlldCBoYWQgYSByZWFzb25hYmxlIGFtb3VudCBvZiB0aW1lIHRvIHVwZ3JhZGU7IGFuZFxuICAgICAgICAgICAgLy8gKGIpIHRoZSBuZXcgRVNSIGhhcyB1bnByZWZpeGVkIENTUyBwcm9wZXJ0aWVzL3ZhbHVlcyB3aG9zZSBhYnNlbmNlIHdvdWxkIHNldmVyZWx5IGJyZWFrIHdlYnBhZ2VzXG4gICAgICAgICAgICAvLyAgICAgKGUuZy4gYGJveC1zaXppbmdgLCBhcyBvcHBvc2VkIHRvIGBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoLi4uKWApLlxuICAgICAgICAgICAgLy8gICAgIFNpbmNlIHRoZXkndmUgYmVlbiB1bnByZWZpeGVkLCBBdXRvcHJlZml4ZXIgd2lsbCBzdG9wIHByZWZpeGluZyB0aGVtLFxuICAgICAgICAgICAgLy8gICAgIHRodXMgY2F1c2luZyB0aGVtIHRvIG5vdCB3b3JrIGluIHRoZSBwcmV2aW91cyBFU1IgKHdoZXJlIHRoZSBwcmVmaXhlcyB3ZXJlIHJlcXVpcmVkKS5cbiAgICAgICAgICAgICdGaXJlZm94ID49IDM4JyxcbiAgICAgICAgICAgIC8vIE5vdGU6IEVkZ2UgdmVyc2lvbnMgaW4gQXV0b3ByZWZpeGVyICYgQ2FuIEkgVXNlIHJlZmVyIHRvIHRoZSBFZGdlSFRNTCByZW5kZXJpbmcgZW5naW5lIHZlcnNpb24sXG4gICAgICAgICAgICAvLyBOT1QgdGhlIEVkZ2UgYXBwIHZlcnNpb24gc2hvd24gaW4gRWRnZSdzIFwiQWJvdXRcIiBzY3JlZW4uXG4gICAgICAgICAgICAvLyBGb3IgZXhhbXBsZSwgYXQgdGhlIHRpbWUgb2Ygd3JpdGluZywgRWRnZSAyMCBvbiBhbiB1cC10by1kYXRlIHN5c3RlbSB1c2VzIEVkZ2VIVE1MIDEyLlxuICAgICAgICAgICAgLy8gU2VlIGFsc28gaHR0cHM6Ly9naXRodWIuY29tL0Z5cmQvY2FuaXVzZS9pc3N1ZXMvMTkyOFxuICAgICAgICAgICAgJ0VkZ2UgPj0gMTInLFxuICAgICAgICAgICAgJ0V4cGxvcmVyID49IDEwJyxcbiAgICAgICAgICAgIC8vIE91dCBvZiBsZW5pZW5jeSwgd2UgcHJlZml4IHRoZXNlIDEgdmVyc2lvbiBmdXJ0aGVyIGJhY2sgdGhhbiB0aGUgb2ZmaWNpYWwgcG9saWN5LlxuICAgICAgICAgICAgJ2lPUyA+PSA4JyxcbiAgICAgICAgICAgICdTYWZhcmkgPj0gOCcsXG4gICAgICAgICAgICAvLyBUaGUgZm9sbG93aW5nIHJlbWFpbiBOT1Qgb2ZmaWNpYWxseSBzdXBwb3J0ZWQsIGJ1dCB3ZSdyZSBsZW5pZW50IGFuZCBpbmNsdWRlIHRoZWlyIHByZWZpeGVzIHRvIGF2b2lkIHNldmVyZWx5IGJyZWFraW5nIGluIHRoZW0uXG4gICAgICAgICAgICAnQW5kcm9pZCAyLjMnLFxuICAgICAgICAgICAgJ0FuZHJvaWQgPj0gNCcsXG4gICAgICAgICAgICAnT3BlcmEgPj0gMTInXG4gICAgICAgIF1cbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmQzZHk5d1lXTnJjeTlpYjI5MGMzUnlZWEF2WjNKMWJuUXZjRzl6ZEdOemN5NXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4TlFVRk5MRU5CUVVNc1QwRkJUeXhIUVVGSE8wbEJRMllzUjBGQlJ5eEZRVUZGTzFGQlEwZ3NkMEpCUVhkQ08xRkJRM2hDTEdOQlFXTTdTMEZEWmp0SlFVTkVMRWRCUVVjc1JVRkJSVHRSUVVOSUxFMUJRVTBzUlVGQlJTeExRVUZMTzFGQlEySXNWVUZCVlN4RlFVRkZMRWxCUVVrN1VVRkRhRUlzWTBGQll5eEZRVUZGTEVsQlFVazdTMEZEY2tJN1NVRkRSQ3haUVVGWkxFVkJRVVU3VVVGRFdpeFJRVUZSTEVWQlFVVTdXVUZEVWl4RlFVRkZPMWxCUTBZc2JVTkJRVzFETzFsQlEyNURMSGxHUVVGNVJqdFpRVU42Uml4RlFVRkZPMWxCUTBZc1kwRkJZenRaUVVOa0xHdEdRVUZyUmp0WlFVTnNSaXd3U0VGQk1FZzdXVUZETVVnc2NVWkJRWEZHTzFsQlEzSkdMR3RHUVVGclJqdFpRVU5zUml4dFIwRkJiVWM3V1VGRGJrY3NOa1ZCUVRaRk8xbEJRemRGTERSRlFVRTBSVHRaUVVNMVJTdzBSa0ZCTkVZN1dVRkROVVlzWlVGQlpUdFpRVU5tTEd0SFFVRnJSenRaUVVOc1J5d3lSRUZCTWtRN1dVRkRNMFFzZVVaQlFYbEdPMWxCUTNwR0xIVkVRVUYxUkR0WlFVTjJSQ3haUVVGWk8xbEJRMW9zWjBKQlFXZENPMWxCUTJoQ0xHOUdRVUZ2Ump0WlFVTndSaXhWUVVGVk8xbEJRMVlzWVVGQllUdFpRVU5pTEd0SlFVRnJTVHRaUVVOc1NTeGhRVUZoTzFsQlEySXNZMEZCWXp0WlFVTmtMR0ZCUVdFN1UwRkRaRHRMUVVOR08wTkJRMFlzUTBGQlFTSXNJbVpwYkdVaU9pSjNkM2N2Y0dGamEzTXZZbTl2ZEhOMGNtRndMMmR5ZFc1MEwzQnZjM1JqYzNNdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUp0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHRjYmlBZ2RYTmxPaUJiWEc0Z0lDQWdKM0J2YzNSamMzTXRabXhsZUdKMVozTXRabWw0WlhNbkxGeHVJQ0FnSUNkaGRYUnZjSEpsWm1sNFpYSW5YRzRnSUYwc1hHNGdJRzFoY0RvZ2UxeHVJQ0FnSUdsdWJHbHVaVG9nWm1Gc2MyVXNYRzRnSUNBZ1lXNXViM1JoZEdsdmJqb2dkSEoxWlN4Y2JpQWdJQ0J6YjNWeVkyVnpRMjl1ZEdWdWREb2dkSEoxWlZ4dUlDQjlMRnh1SUNCaGRYUnZjSEpsWm1sNFpYSTZJSHRjYmlBZ0lDQmljbTkzYzJWeWN6b2dXMXh1SUNBZ0lDQWdMeTljYmlBZ0lDQWdJQzh2SUU5bVptbGphV0ZzSUdKeWIzZHpaWElnYzNWd2NHOXlkQ0J3YjJ4cFkzazZYRzRnSUNBZ0lDQXZMeUJvZEhSd2N6b3ZMM1kwTFdGc2NHaGhMbWRsZEdKdmIzUnpkSEpoY0M1amIyMHZaMlYwZEdsdVp5MXpkR0Z5ZEdWa0wySnliM2R6WlhKekxXUmxkbWxqWlhNdkkzTjFjSEJ2Y25SbFpDMWljbTkzYzJWeWMxeHVJQ0FnSUNBZ0x5OWNiaUFnSUNBZ0lDZERhSEp2YldVZ1BqMGdNelVuTENBdkx5QkZlR0ZqZENCMlpYSnphVzl1SUc1MWJXSmxjaUJvWlhKbElHbHpJR3RwYm1SaElHRnlZbWwwY21GeWVWeHVJQ0FnSUNBZ0x5OGdVbUYwYUdWeUlIUm9ZVzRnZFhOcGJtY2dRWFYwYjNCeVpXWnBlR1Z5SjNNZ2JtRjBhWFpsSUZ3aVJtbHlaV1p2ZUNCRlUxSmNJaUIyWlhKemFXOXVJSE53WldOcFptbGxjaUJ6ZEhKcGJtY3NYRzRnSUNBZ0lDQXZMeUIzWlNCa1pXeHBZbVZ5WVhSbGJIa2dhR0Z5WkdOdlpHVWdkR2hsSUc1MWJXSmxjaTRnVkdocGN5QnBjeUIwYnlCaGRtOXBaQ0IxYm5kcGRIUnBibWRzZVNCelpYWmxjbVZzZVNCaWNtVmhhMmx1WnlCMGFHVWdjSEpsZG1sdmRYTWdSVk5TSUdsdUlIUm9aU0JsZG1WdWRDQjBhR0YwT2x4dUlDQWdJQ0FnTHk4Z0tHRXBJSGRsSUdoaGNIQmxiaUIwYnlCemFHbHdJR0VnYm1WM0lFSnZiM1J6ZEhKaGNDQnlaV3hsWVhObElITnZiMjRnWVdaMFpYSWdkR2hsSUhKbGJHVmhjMlVnYjJZZ1lTQnVaWGNnUlZOU0xGeHVJQ0FnSUNBZ0x5OGdJQ0FnSUhOMVkyZ2dkR2hoZENCbWIyeHJjeUJvWVhabGJpZDBJSGxsZENCb1lXUWdZU0J5WldGemIyNWhZbXhsSUdGdGIzVnVkQ0J2WmlCMGFXMWxJSFJ2SUhWd1ozSmhaR1U3SUdGdVpGeHVJQ0FnSUNBZ0x5OGdLR0lwSUhSb1pTQnVaWGNnUlZOU0lHaGhjeUIxYm5CeVpXWnBlR1ZrSUVOVFV5QndjbTl3WlhKMGFXVnpMM1poYkhWbGN5QjNhRzl6WlNCaFluTmxibU5sSUhkdmRXeGtJSE5sZG1WeVpXeDVJR0p5WldGcklIZGxZbkJoWjJWelhHNGdJQ0FnSUNBdkx5QWdJQ0FnS0dVdVp5NGdZR0p2ZUMxemFYcHBibWRnTENCaGN5QnZjSEJ2YzJWa0lIUnZJR0JpWVdOclozSnZkVzVrT2lCc2FXNWxZWEl0WjNKaFpHbGxiblFvTGk0dUtXQXBMbHh1SUNBZ0lDQWdMeThnSUNBZ0lGTnBibU5sSUhSb1pYa25kbVVnWW1WbGJpQjFibkJ5WldacGVHVmtMQ0JCZFhSdmNISmxabWw0WlhJZ2QybHNiQ0J6ZEc5d0lIQnlaV1pwZUdsdVp5QjBhR1Z0TEZ4dUlDQWdJQ0FnTHk4Z0lDQWdJSFJvZFhNZ1kyRjFjMmx1WnlCMGFHVnRJSFJ2SUc1dmRDQjNiM0pySUdsdUlIUm9aU0J3Y21WMmFXOTFjeUJGVTFJZ0tIZG9aWEpsSUhSb1pTQndjbVZtYVhobGN5QjNaWEpsSUhKbGNYVnBjbVZrS1M1Y2JpQWdJQ0FnSUNkR2FYSmxabTk0SUQ0OUlETTRKeXdnTHk4Z1EzVnljbVZ1ZENCR2FYSmxabTk0SUVWNGRHVnVaR1ZrSUZOMWNIQnZjblFnVW1Wc1pXRnpaU0FvUlZOU0tUc2dhSFIwY0hNNkx5OTNkM2N1Ylc5NmFXeHNZUzV2Y21jdlpXNHRWVk12Wm1seVpXWnZlQzl2Y21kaGJtbDZZWFJwYjI1ekwyWmhjUzljYmlBZ0lDQWdJQzh2SUU1dmRHVTZJRVZrWjJVZ2RtVnljMmx2Ym5NZ2FXNGdRWFYwYjNCeVpXWnBlR1Z5SUNZZ1EyRnVJRWtnVlhObElISmxabVZ5SUhSdklIUm9aU0JGWkdkbFNGUk5UQ0J5Wlc1a1pYSnBibWNnWlc1bmFXNWxJSFpsY25OcGIyNHNYRzRnSUNBZ0lDQXZMeUJPVDFRZ2RHaGxJRVZrWjJVZ1lYQndJSFpsY25OcGIyNGdjMmh2ZDI0Z2FXNGdSV1JuWlNkeklGd2lRV0p2ZFhSY0lpQnpZM0psWlc0dVhHNGdJQ0FnSUNBdkx5QkdiM0lnWlhoaGJYQnNaU3dnWVhRZ2RHaGxJSFJwYldVZ2IyWWdkM0pwZEdsdVp5d2dSV1JuWlNBeU1DQnZiaUJoYmlCMWNDMTBieTFrWVhSbElITjVjM1JsYlNCMWMyVnpJRVZrWjJWSVZFMU1JREV5TGx4dUlDQWdJQ0FnTHk4Z1UyVmxJR0ZzYzI4Z2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwwWjVjbVF2WTJGdWFYVnpaUzlwYzNOMVpYTXZNVGt5T0Z4dUlDQWdJQ0FnSjBWa1oyVWdQajBnTVRJbkxGeHVJQ0FnSUNBZ0owVjRjR3h2Y21WeUlENDlJREV3Snl4Y2JpQWdJQ0FnSUM4dklFOTFkQ0J2WmlCc1pXNXBaVzVqZVN3Z2QyVWdjSEpsWm1sNElIUm9aWE5sSURFZ2RtVnljMmx2YmlCbWRYSjBhR1Z5SUdKaFkyc2dkR2hoYmlCMGFHVWdiMlptYVdOcFlXd2djRzlzYVdONUxseHVJQ0FnSUNBZ0oybFBVeUErUFNBNEp5eGNiaUFnSUNBZ0lDZFRZV1poY21rZ1BqMGdPQ2NzWEc0Z0lDQWdJQ0F2THlCVWFHVWdabTlzYkc5M2FXNW5JSEpsYldGcGJpQk9UMVFnYjJabWFXTnBZV3hzZVNCemRYQndiM0owWldRc0lHSjFkQ0IzWlNkeVpTQnNaVzVwWlc1MElHRnVaQ0JwYm1Oc2RXUmxJSFJvWldseUlIQnlaV1pwZUdWeklIUnZJR0YyYjJsa0lITmxkbVZ5Wld4NUlHSnlaV0ZyYVc1bklHbHVJSFJvWlcwdVhHNGdJQ0FnSUNBblFXNWtjbTlwWkNBeUxqTW5MRnh1SUNBZ0lDQWdKMEZ1WkhKdmFXUWdQajBnTkNjc1hHNGdJQ0FnSUNBblQzQmxjbUVnUGowZ01USW5YRzRnSUNBZ1hWeHVJQ0I5WEc1OVhHNGlYWDA9XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zjg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kM2R5OXdZV05yY3k5aWIyOTBjM1J5WVhBdlozSjFiblF2Y0c5emRHTnpjeTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeE5RVUZOTEVOQlFVTXNUMEZCVHl4SFFVRkhPMGxCUTJJc1IwRkJSeXhGUVVGRk8xRkJRMFFzZDBKQlFYZENPMUZCUTNoQ0xHTkJRV003UzBGRGFrSTdTVUZEUkN4SFFVRkhMRVZCUVVVN1VVRkRSQ3hOUVVGTkxFVkJRVVVzUzBGQlN6dFJRVU5pTEZWQlFWVXNSVUZCUlN4SlFVRkpPMUZCUTJoQ0xHTkJRV01zUlVGQlJTeEpRVUZKTzB0QlEzWkNPMGxCUTBRc1dVRkJXU3hGUVVGRk8xRkJRMVlzVVVGQlVTeEZRVUZGTzFsQlEwNHNSVUZCUlR0WlFVTkdMRzFEUVVGdFF6dFpRVU51UXl4NVJrRkJlVVk3V1VGRGVrWXNSVUZCUlR0WlFVTkdMR05CUVdNN1dVRkRaQ3hyUmtGQmEwWTdXVUZEYkVZc01FaEJRVEJJTzFsQlF6RklMSEZHUVVGeFJqdFpRVU55Uml4clJrRkJhMFk3V1VGRGJFWXNiVWRCUVcxSE8xbEJRMjVITERaRlFVRTJSVHRaUVVNM1JTdzBSVUZCTkVVN1dVRkROVVVzTkVaQlFUUkdPMWxCUXpWR0xHVkJRV1U3V1VGRFppeHJSMEZCYTBjN1dVRkRiRWNzTWtSQlFUSkVPMWxCUXpORUxIbEdRVUY1Ump0WlFVTjZSaXgxUkVGQmRVUTdXVUZEZGtRc1dVRkJXVHRaUVVOYUxHZENRVUZuUWp0WlFVTm9RaXh2UmtGQmIwWTdXVUZEY0VZc1ZVRkJWVHRaUVVOV0xHRkJRV0U3V1VGRFlpeHJTVUZCYTBrN1dVRkRiRWtzWVVGQllUdFpRVU5pTEdOQlFXTTdXVUZEWkN4aFFVRmhPMU5CUTJoQ08wdEJRMG83UTBGRFNpeERRVUZETzBGQlJVWXNiWEZJUVVGdGNVZ2lMQ0ptYVd4bElqb2lkM2QzTDNCaFkydHpMMkp2YjNSemRISmhjQzluY25WdWRDOXdiM04wWTNOekxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0I3WEc0Z0lDQWdkWE5sT2lCYlhHNGdJQ0FnSUNBZ0lDZHdiM04wWTNOekxXWnNaWGhpZFdkekxXWnBlR1Z6Snl4Y2JpQWdJQ0FnSUNBZ0oyRjFkRzl3Y21WbWFYaGxjaWRjYmlBZ0lDQmRMRnh1SUNBZ0lHMWhjRG9nZTF4dUlDQWdJQ0FnSUNCcGJteHBibVU2SUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0JoYm01dmRHRjBhVzl1T2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0J6YjNWeVkyVnpRMjl1ZEdWdWREb2dkSEoxWlZ4dUlDQWdJSDBzWEc0Z0lDQWdZWFYwYjNCeVpXWnBlR1Z5T2lCN1hHNGdJQ0FnSUNBZ0lHSnliM2R6WlhKek9pQmJYRzRnSUNBZ0lDQWdJQ0FnSUNBdkwxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1QyWm1hV05wWVd3Z1luSnZkM05sY2lCemRYQndiM0owSUhCdmJHbGplVHBjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJR2gwZEhCek9pOHZkalF0WVd4d2FHRXVaMlYwWW05dmRITjBjbUZ3TG1OdmJTOW5aWFIwYVc1bkxYTjBZWEowWldRdlluSnZkM05sY25NdFpHVjJhV05sY3k4amMzVndjRzl5ZEdWa0xXSnliM2R6WlhKelhHNGdJQ0FnSUNBZ0lDQWdJQ0F2TDF4dUlDQWdJQ0FnSUNBZ0lDQWdKME5vY205dFpTQStQU0F6TlNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCU1lYUm9aWElnZEdoaGJpQjFjMmx1WnlCQmRYUnZjSEpsWm1sNFpYSW5jeUJ1WVhScGRtVWdYQ0pHYVhKbFptOTRJRVZUVWx3aUlIWmxjbk5wYjI0Z2MzQmxZMmxtYVdWeUlITjBjbWx1Wnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUhkbElHUmxiR2xpWlhKaGRHVnNlU0JvWVhKa1kyOWtaU0IwYUdVZ2JuVnRZbVZ5TGlCVWFHbHpJR2x6SUhSdklHRjJiMmxrSUhWdWQybDBkR2x1WjJ4NUlITmxkbVZ5Wld4NUlHSnlaV0ZyYVc1bklIUm9aU0J3Y21WMmFXOTFjeUJGVTFJZ2FXNGdkR2hsSUdWMlpXNTBJSFJvWVhRNlhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlBb1lTa2dkMlVnYUdGd2NHVnVJSFJ2SUhOb2FYQWdZU0J1WlhjZ1FtOXZkSE4wY21Gd0lISmxiR1ZoYzJVZ2MyOXZiaUJoWm5SbGNpQjBhR1VnY21Wc1pXRnpaU0J2WmlCaElHNWxkeUJGVTFJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlBZ0lDQWdjM1ZqYUNCMGFHRjBJR1p2Ykd0eklHaGhkbVZ1SjNRZ2VXVjBJR2hoWkNCaElISmxZWE52Ym1GaWJHVWdZVzF2ZFc1MElHOW1JSFJwYldVZ2RHOGdkWEJuY21Ga1pUc2dZVzVrWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUFvWWlrZ2RHaGxJRzVsZHlCRlUxSWdhR0Z6SUhWdWNISmxabWw0WldRZ1ExTlRJSEJ5YjNCbGNuUnBaWE12ZG1Gc2RXVnpJSGRvYjNObElHRmljMlZ1WTJVZ2QyOTFiR1FnYzJWMlpYSmxiSGtnWW5KbFlXc2dkMlZpY0dGblpYTmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklDQWdJQ0FvWlM1bkxpQmdZbTk0TFhOcGVtbHVaMkFzSUdGeklHOXdjRzl6WldRZ2RHOGdZR0poWTJ0bmNtOTFibVE2SUd4cGJtVmhjaTFuY21Ga2FXVnVkQ2d1TGk0cFlDa3VYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QWdJQ0FnVTJsdVkyVWdkR2hsZVNkMlpTQmlaV1Z1SUhWdWNISmxabWw0WldRc0lFRjFkRzl3Y21WbWFYaGxjaUIzYVd4c0lITjBiM0FnY0hKbFptbDRhVzVuSUhSb1pXMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QWdJQ0FnZEdoMWN5QmpZWFZ6YVc1bklIUm9aVzBnZEc4Z2JtOTBJSGR2Y21zZ2FXNGdkR2hsSUhCeVpYWnBiM1Z6SUVWVFVpQW9kMmhsY21VZ2RHaGxJSEJ5WldacGVHVnpJSGRsY21VZ2NtVnhkV2x5WldRcExseHVJQ0FnSUNBZ0lDQWdJQ0FnSjBacGNtVm1iM2dnUGowZ016Z25MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdUbTkwWlRvZ1JXUm5aU0IyWlhKemFXOXVjeUJwYmlCQmRYUnZjSEpsWm1sNFpYSWdKaUJEWVc0Z1NTQlZjMlVnY21WbVpYSWdkRzhnZEdobElFVmtaMlZJVkUxTUlISmxibVJsY21sdVp5QmxibWRwYm1VZ2RtVnljMmx2Yml4Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUU1UFZDQjBhR1VnUldSblpTQmhjSEFnZG1WeWMybHZiaUJ6YUc5M2JpQnBiaUJGWkdkbEozTWdYQ0pCWW05MWRGd2lJSE5qY21WbGJpNWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklFWnZjaUJsZUdGdGNHeGxMQ0JoZENCMGFHVWdkR2x0WlNCdlppQjNjbWwwYVc1bkxDQkZaR2RsSURJd0lHOXVJR0Z1SUhWd0xYUnZMV1JoZEdVZ2MzbHpkR1Z0SUhWelpYTWdSV1JuWlVoVVRVd2dNVEl1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJUWldVZ1lXeHpieUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2Um5seVpDOWpZVzVwZFhObEwybHpjM1ZsY3k4eE9USTRYRzRnSUNBZ0lDQWdJQ0FnSUNBblJXUm5aU0ErUFNBeE1pY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBblJYaHdiRzl5WlhJZ1BqMGdNVEFuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnVDNWMElHOW1JR3hsYm1sbGJtTjVMQ0IzWlNCd2NtVm1hWGdnZEdobGMyVWdNU0IyWlhKemFXOXVJR1oxY25Sb1pYSWdZbUZqYXlCMGFHRnVJSFJvWlNCdlptWnBZMmxoYkNCd2IyeHBZM2t1WEc0Z0lDQWdJQ0FnSUNBZ0lDQW5hVTlUSUQ0OUlEZ25MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0oxTmhabUZ5YVNBK1BTQTRKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRlJvWlNCbWIyeHNiM2RwYm1jZ2NtVnRZV2x1SUU1UFZDQnZabVpwWTJsaGJHeDVJSE4xY0hCdmNuUmxaQ3dnWW5WMElIZGxKM0psSUd4bGJtbGxiblFnWVc1a0lHbHVZMngxWkdVZ2RHaGxhWElnY0hKbFptbDRaWE1nZEc4Z1lYWnZhV1FnYzJWMlpYSmxiSGtnWW5KbFlXdHBibWNnYVc0Z2RHaGxiUzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDZEJibVJ5YjJsa0lESXVNeWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5RVzVrY205cFpDQStQU0EwSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2RQY0dWeVlTQStQU0F4TWlkY2JpQWdJQ0FnSUNBZ1hWeHVJQ0FnSUgxY2JuMDdYRzVjYmk4dkl5QnpiM1Z5WTJWTllYQndhVzVuVlZKTVBXUmhkR0U2WVhCd2JHbGpZWFJwYjI0dmFuTnZianRqYUdGeWMyVjBQWFYwWmpnN1ltRnpaVFkwTEdWNVNqSmFXRXA2WVZjNWRVbHFiM3BNUTBwNllqTldlVmt5Vm5wSmFuQmlTVzVrTTJSNU9YZFpWMDV5WTNrNWFXSXlPVEJqTTFKNVdWaEJkbG96U2pGaWJsRjJZMGM1ZW1SSFRucGplVFZ4WTNsS1pFeERTblZaVnpGc1kzbEpObGN4TUhOSmJURm9ZMGhDY0dKdFpIcEphbTlwVVZWR1FsRlRlRTVSVlVaT1RFVk9RbEZWVFhOVU1FWkNWSGw0U0ZGVlJraFBNR3hDVVRKWmMxSXdSa0pTZVhoR1VWVkdSazh4UmtKUk1HZHpaREJLUWxGWVpFTlBNVVpDVVROb1EweEhUa0pSVjAwM1V6QkdSRnBxZEVwUlZVNUZURVZrUWxGVlkzTlNWVVpDVWxSMFVsRlZUa2xNUlRGQ1VWVXdjMUpWUmtKU1UzaE1VVlZHVEU4eFJrSlJNa2x6VmxWR1FsWlRlRVpSVlVaR1RFVnNRbEZWYXpkVlZVWkVZVVZKYzFrd1JrSlplWGhHVVZWR1JreEZiRUpSVldzM1V6QkdSR05yU1RkVFZVWkVVa040V2xGVlJscE1SVlpDVVZWVk4xVlZSa1JYYVhoU1VWVkdVa3hGVmtKUlZWVTNWMVZHUkZWcGVFWlJWVVpHVHpGc1FsRXdXWE5pVlU1Q1VWY3hSRTh4YkVKUk1qVkVURWhzUjFGVlJqVlNhblJhVVZWT05sSnBlRVpSVlVaR1R6RnNRbEV3V1hOWk1FWkNXWHAwV2xGVlRtdE1SM1JIVVZWR2NsSnFkRnBSVlU1elVtbDNkMU5GUmtKTlJXYzNWMVZHUkUxVlozTmpWVnBDVVZoR1IwOHhiRUpSTTBwSFRFZDBSMUZWUm5KU2FuUmFVVlZPYzFKcGVIUlNNRVpDWWxWak4xZFZSa1JpYTJOelRtdFdRbEZVV2taUE1XeENVWHBrUmt4RVVrWlJWVVV3VWxSMFdsRlZUVEZTVTNjd1VtdEdRazVGV1RkWFZVWkVUbFZaYzFwVlJrSmFWSFJhVVZWT2JVeEhkRWhSVlVaeVVucDBXbEZWVG5OU2VYZDVVa1ZHUWsxclVUZFhWVVpFVFRCUmMyVlZXa0pSV0d4SFR6RnNRbEV6Y0VkTVNGWkZVVlZHTVZKRWRGcFJWVTR5VWtONFdsRlZSbHBQTVd4Q1VURnZjMW93U2tKUlYyUkRUekZzUWxFeWFFTk1SemxIVVZWR2RsSnFkRnBSVlU1M1VtbDRWbEZWUmxaUE1XeENVVEZaYzFsVlJrSlpWSFJhVVZWT2FVeEhkRXBSVlVaeVUxUjBXbEZWVG5OVFUzaG9VVlZHYUU4eGJFSlJNa2x6V1RCR1FsbDZkRnBSVlU1clRFZEdRbEZYUlRkVk1FWkVXa1IwVEZGVlRrZFBNRTVDVVRCWmMxRXdSa0pSVTBselNXMWFjR0pIVldsUGFVb3paRE5qZG1OSFJtcGhNMDEyV1cwNWRtUklUakJqYlVaM1RESmtlV1JYTlRCTU0wSjJZek5TYW1NelRYVmhiazFwVEVOS2VtSXpWbmxaTWxaNlVUSTVkV1JIVm5Wa1EwazJWM2xLZEdJeVVqRmlSMVYxV2xob2QySXpTakJqZVVFNVNVaDBZMkpwUVdka1dFNXNUMmxDWWxoSE5HZEpRMEZuU2pOQ2RtTXpVbXBqTTAxMFdtMTRiR1ZIU2pGYU0wMTBXbTFzTkZwWVRXNU1SbmgxU1VOQlowbERaR2hrV0ZKMlkwaEtiRnB0YkRSYVdFbHVXRWMwWjBsR01ITllSelJuU1VjeGFHTkViMmRsTVhoMVNVTkJaMGxIYkhWaVIyeDFXbFJ2WjFwdFJuTmpNbFZ6V0VjMFowbERRV2RaVnpWMVlqTlNhR1JIYkhaaWFtOW5aRWhLTVZwVGVHTmlhVUZuU1VOQ2VtSXpWbmxaTWxaNlVUSTVkV1JIVm5Wa1JHOW5aRWhLTVZwV2VIVkpRMEk1VEVaNGRVbERRbWhrV0ZKMlkwaEtiRnB0YkRSYVdFazJTVWgwWTJKcFFXZEpRMEpwWTIwNU0yTXlWbmxqZW05blZ6RjRkVWxEUVdkSlEwRm5USGs1WTJKcFFXZEpRMEZuU1VNNGRrbEZPVzFhYld4cVlWZEdjMGxIU25saU0yUjZXbGhKWjJNelZuZGpSemw1WkVOQ2QySXllSEJaTTJzMldFYzBaMGxEUVdkSlEwRjJUSGxDYjJSSVVuZGplbTkyVEROWk1FeFhSbk5qUjJob1RHMWtiR1JIU25aaU0xSjZaRWhLYUdORE5XcGlNakIyV2pKV01HUkhiSFZhZVRGNlpFZEdlV1JIVm10TU1rcDVZak5rZWxwWVNucE1WMUpzWkcxc2FscFlUWFpKTTA0eFkwaENkbU51VW14YVF6RnBZMjA1TTJNeVZubGpNWGgxU1VOQlowbERRV2RNZVRsalltbEJaMGxEUVdkSlEyUkVZVWhLZG1KWFZXZFFhakJuVFhwVmJreERRWFpNZVVKR1pVZEdhbVJEUWpKYVdFcDZZVmM1ZFVsSE5URmlWMHBzWTJsQ2IxcFlTbXhKUjJ4NlNVZDBjR0p0VW1oSlIwWjVXVzFzTUdOdFJubGxWbmgxU1VOQlowbERRV2RNZVRoblZXMUdNR0ZIVm5sSlNGSnZXVmMwWjJSWVRuQmliV05uVVZoV01HSXpRbmxhVjFwd1pVZFdlVW96VFdkaWJVWXdZVmhhYkVsR2QybFNiV3g1V2xkYWRtVkRRa1pWTVVwalNXbENNbHBZU25waFZ6bDFTVWhPZDFwWFRuQmFiV3hzWTJsQ2VtUklTbkJpYldOeldFYzBaMGxEUVdkSlEwRjJUSGxDTTFwVFFtdGFWM2h3V1cxV2VWbFlVbXhpU0d0bllVZEdlVnBIVG5aYVIxVm5aRWRvYkVsSE5URmlWMHBzWTJrMFoxWkhhSEJqZVVKd1kzbENNR0o1UW1oa2JUbHdXa05DTVdKdVpIQmtTRkp3WW0xa2MyVlRRbnBhV0Zwc1kyMVdjMlZUUW1samJWWm9ZVEpzZFZwNVFqQmhSMVZuWTBoS2JHUnRiSFprV0UxblVsWk9VMGxIYkhWSlNGSnZXbE5DYkdSdFZuVmtRMEl3WVVkR01FOXNlSFZKUTBGblNVTkJaMHg1T0dkTFIwVndTVWhrYkVsSGFHaGpTRUpzWW1sQ01HSjVRbnBoUjJ4M1NVZEZaMkp0VmpOSlJVcDJZak5TZW1SSVNtaGpRMEo1V2xkNGJGbFlUbXhKU0U1MllqSTBaMWxYV2pCYVdFbG5aRWRvYkVsSVNteGlSMVpvWXpKVloySXlXV2RaVTBKMVdsaGpaMUpXVGxOTVJuaDFTVU5CWjBsRFFXZE1lVGhuU1VOQlowbElUakZaTW1kblpFZG9hR1JEUW0xaU1uaHlZM2xDYjFsWVdteGlhV1F3U1Voc2JHUkRRbTlaVjFGbldWTkNlVnBYUm5waU1qVm9XVzE0YkVsSFJuUmlNMVoxWkVOQ2RscHBRakJoVnpGc1NVaFNka2xJVm5kYU0wcG9Xa2RWTjBsSFJuVmFSbmgxU1VOQlowbERRV2RNZVRoblMwZEpjRWxJVW05YVUwSjFXbGhqWjFKV1RsTkpSMmhvWTNsQ01XSnVRbmxhVjFwd1pVZFdhMGxGVGxSVmVVSjNZMjA1ZDFwWVNqQmhWMVo2VEROYWFHSklWbXhqZVVJellVYzVlbHBUUW1oWmJrNXNZbTFPYkVsSVpIWmtWM2hyU1VoT2JHUnRWbmxhVjNnMVNVZEtlVnBYUm5KSlNHUnNXVzVDYUZveVZucFlSelJuU1VOQlowbERRWFpNZVVGblNVTkJaMHRIVlhWYWVUUm5XVWRLZG1WRE1YcGhXSEJ3WW0xa1oweERRbWhqZVVKMlkwaENkbU15Vm10SlNGSjJTVWRDYVZsWFRuSmFNMHAyWkZjMWEwOXBRbk5oVnpWc1dWaEpkRm96U21oYVIyeHNZbTVSYjB4cE5IVkxWMEZ3VEd4NGRVbERRV2RKUTBGblRIazRaMGxEUVdkSlJrNXdZbTFPYkVsSVVtOWFXR3R1WkcxVloxbHRWbXhpYVVJeFltNUNlVnBYV25CbFIxWnJURU5DUW1SWVVuWmpTRXBzV20xc05GcFlTV2RrTW14ellrTkNlbVJIT1hkSlNFSjVXbGRhY0dWSGJIVmFlVUl3WVVkV2RFeEdlSFZKUTBGblNVTkJaMHg1T0dkSlEwRm5TVWhTYjJSWVRXZFpNa1l4WXpKc2RWcDVRakJoUjFaMFNVaFNka2xITlhaa1EwSXpZak5LY2tsSGJIVkpTRkp2V2xOQ2QyTnRWakpoVnpreFkzbENSbFV4U1dkTFNHUnZXbGhLYkVsSVVtOWFVMEozWTIxV2JXRllhR3hqZVVJeldsaEtiRWxJU214aldGWndZMjFXYTB0VE5XTmlhVUZuU1VOQlowbERaRWRoV0Vwc1dtMDVORWxFTkRsSlJFMDBTbmwzWjB4NU9HZFJNMVo1WTIxV2RXUkRRa2RoV0Vwc1dtMDVORWxGVmpSa1IxWjFXa2RXYTBsR1RqRmpTRUoyWTI1UloxVnRWbk5hVjBaNldsTkJiMUpXVGxOTFZITm5ZVWhTTUdOSVRUWk1lVGt6WkROamRXSlhPVFpoVjNoeldWTTFkbU50WTNaYVZ6UjBWbFpOZGxwdGJIbGFWMXAyWlVNNWRtTnRaR2hpYld3MldWaFNjR0l5TlhwTU1scG9ZMU01WTJKcFFXZEpRMEZuU1VNNGRrbEZOWFprUjFVMlNVVldhMW95Vldka2JWWjVZekpzZG1KdVRXZGhWelJuVVZoV01HSXpRbmxhVjFwd1pVZFdlVWxEV1dkUk1rWjFTVVZyWjFaWVRteEpTRXBzV20xV2VVbElVblpKU0ZKdldsTkNSbHBIWkd4VFJsSk9WRU5DZVZwWE5XdGFXRXB3WW0xaloxcFhOVzVoVnpWc1NVaGFiR051VG5CaU1qUnpXRWMwWjBsRFFXZEpRMEYyVEhsQ1QxUXhVV2RrUjJoc1NVVldhMW95VldkWldFSjNTVWhhYkdOdVRuQmlNalJuWXpKb2RtUXlOR2RoVnpSblVsZFNibHBUWkhwSlJuZHBVVmRLZG1SWVVtTkphVUo2V1ROS2JGcFhOSFZZUnpSblNVTkJaMGxEUVhaTWVVSkhZak5KWjFwWWFHaGlXRUp6V2xOM1oxbFlVV2RrUjJoc1NVaFNjR0pYVldkaU1sbG5aRE5LY0dSSGJIVmFlWGRuVWxkU2JscFRRWGxOUTBKMlltbENhR0pwUWpGalF6RXdZbmt4YTFsWVVteEpTRTQxWXpOU2JHSlRRakZqTWxaNlNVVldhMW95VmtsV1JURk5TVVJGZVV4c2VIVkpRMEZuU1VOQloweDVPR2RWTWxac1NVZEdjMk15T0dkaFNGSXdZMGhOTmt4NU9XNWhXRkp2WkZkSmRWa3lPWFJNTUZvMVkyMVJkbGt5Um5WaFdGWjZXbE01Y0dNelRqRmFXRTEyVFZScmVVOUdlSFZKUTBGblNVTkJaMG93Vm10YU1sVm5VR293WjAxVVNXNU1SbmgxU1VOQlowbERRV2RLTUZZMFkwZDRkbU50Vm5sSlJEUTVTVVJGZDBwNWVHTmlhVUZuU1VOQlowbERPSFpKUlRreFpFTkNkbHBwUW5OYVZ6VndXbGMxYW1WVGQyZGtNbFZuWTBoS2JGcHRiRFJKU0ZKdldsaE9iRWxFUldka2JWWjVZekpzZG1KcFFtMWtXRW93WVVkV2VVbEhTbWhaTW5OblpFZG9hR0pwUWpCaFIxVm5ZakphYldGWFRuQlpWM2RuWTBjNWMyRlhUalZNYkhoMVNVTkJaMGxEUVdkS01teFFWWGxCSzFCVFFUUktlWGhqWW1sQlowbERRV2RKUTJSVVdWZGFhR050YTJkUWFqQm5UME5qYzFoSE5HZEpRMEZuU1VOQmRreDVRbFZoUjFWbldtMDVjMkpIT1ROaFZ6VnVTVWhLYkdKWFJuQmlhVUpQVkRGUloySXlXbTFoVjA1d1dWZDRjMlZUUW5wa1dFSjNZak5LTUZwWFVYTkpSMG94WkVOQ00xcFRaSGxhVTBKeldsYzFjRnBYTlRCSlIwWjFXa05DY0dKdFRuTmtWMUpzU1VoU2IxcFhiSGxKU0VKNVdsZGFjR1ZIVm5wSlNGSjJTVWRHTW1JeWJHdEpTRTVzWkcxV2VWcFhlRFZKUjBwNVdsZEdjbUZYTlc1SlIyeDFTVWhTYjFwWE1IVllSelJuU1VOQlowbERRVzVSVnpWclkyMDVjRnBEUVhsTWFrMXVURVo0ZFVsRFFXZEpRMEZuU2pCR2RWcElTblpoVjFGblVHb3daMDVEWTNOWVJ6Um5TVU5CWjBsRFFXNVVNMEpzWTIxRloxQnFNR2ROVkVsdVdFYzBaMGxEUVdkWVZuaDFTVU5DT1ZoSE5UbFlSelJwV0Znd1BWeHVJbDE5XG4iXX0=
