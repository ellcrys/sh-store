define([
    "../core",
    "./var/nonce",
    "./var/rquery",
    "../ajax"
], function (jQuery, nonce, rquery) {
    "use strict";
    var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
    // Default jsonp settings
    jQuery.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function () {
            var callback = oldCallbacks.pop() || (jQuery.expando + "_" + (nonce++));
            this[callback] = true;
            return callback;
        }
    });
    // Detect, normalize options and install callbacks for jsonp requests
    jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {
        var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ?
            "url" :
            typeof s.data === "string" &&
                (s.contentType || "")
                    .indexOf("application/x-www-form-urlencoded") === 0 &&
                rjsonp.test(s.data) && "data");
        // Handle iff the expected data type is "jsonp" or we have a parameter to set
        if (jsonProp || s.dataTypes[0] === "jsonp") {
            // Get callback name, remembering preexisting value associated with it
            callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ?
                s.jsonpCallback() :
                s.jsonpCallback;
            // Insert callback into url or form data
            if (jsonProp) {
                s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
            }
            else if (s.jsonp !== false) {
                s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
            }
            // Use data converter to retrieve json after script execution
            s.converters["script json"] = function () {
                if (!responseContainer) {
                    jQuery.error(callbackName + " was not called");
                }
                return responseContainer[0];
            };
            // Force json dataType
            s.dataTypes[0] = "json";
            // Install callback
            overwritten = window[callbackName];
            window[callbackName] = function () {
                responseContainer = arguments;
            };
            // Clean-up function (fires after converters)
            jqXHR.always(function () {
                // If previous value didn't exist - remove it
                if (overwritten === undefined) {
                    jQuery(window).removeProp(callbackName);
                    // Otherwise restore preexisting value
                }
                else {
                    window[callbackName] = overwritten;
                }
                // Save back as free
                if (s[callbackName]) {
                    // Make sure that re-using the options doesn't screw things around
                    s.jsonpCallback = originalSettings.jsonpCallback;
                    // Save the callback name for future use
                    oldCallbacks.push(callbackName);
                }
                // Call if it was a function and we have a response
                if (responseContainer && jQuery.isFunction(overwritten)) {
                    overwritten(responseContainer[0]);
                }
                responseContainer = overwritten = undefined;
            });
            // Delegate to script
            return "script";
        }
    });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInd3dy9wYWNrcy9qcXVlcnkvc3JjL2FqYXgvanNvbnAuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFFO0lBQ1AsU0FBUztJQUNULGFBQWE7SUFDYixjQUFjO0lBQ2QsU0FBUztDQUNULEVBQUUsVUFBVSxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU07SUFFbEMsWUFBWSxDQUFDO0lBRWIsSUFBSSxZQUFZLEdBQUcsRUFBRSxFQUNwQixNQUFNLEdBQUcsbUJBQW1CLENBQUM7SUFFOUIseUJBQXlCO0lBQ3pCLE1BQU0sQ0FBQyxTQUFTLENBQUU7UUFDakIsS0FBSyxFQUFFLFVBQVU7UUFDakIsYUFBYSxFQUFFO1lBQ2QsSUFBSSxRQUFRLEdBQUcsWUFBWSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUUsTUFBTSxDQUFDLE9BQU8sR0FBRyxHQUFHLEdBQUcsQ0FBRSxLQUFLLEVBQUUsQ0FBRSxDQUFFLENBQUM7WUFDNUUsSUFBSSxDQUFFLFFBQVEsQ0FBRSxHQUFHLElBQUksQ0FBQztZQUN4QixNQUFNLENBQUMsUUFBUSxDQUFDO1FBQ2pCLENBQUM7S0FDRCxDQUFFLENBQUM7SUFFSixxRUFBcUU7SUFDckUsTUFBTSxDQUFDLGFBQWEsQ0FBRSxZQUFZLEVBQUUsVUFBVSxDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsS0FBSztRQUV2RSxJQUFJLFlBQVksRUFBRSxXQUFXLEVBQUUsaUJBQWlCLEVBQy9DLFFBQVEsR0FBRyxDQUFDLENBQUMsS0FBSyxLQUFLLEtBQUssSUFBSSxDQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBRTtZQUNyRCxLQUFLO1lBQ0wsT0FBTyxDQUFDLENBQUMsSUFBSSxLQUFLLFFBQVE7Z0JBQ3pCLENBQUUsQ0FBQyxDQUFDLFdBQVcsSUFBSSxFQUFFLENBQUU7cUJBQ3JCLE9BQU8sQ0FBRSxtQ0FBbUMsQ0FBRSxLQUFLLENBQUM7Z0JBQ3RELE1BQU0sQ0FBQyxJQUFJLENBQUUsQ0FBQyxDQUFDLElBQUksQ0FBRSxJQUFJLE1BQU0sQ0FDaEMsQ0FBQztRQUVILDZFQUE2RTtRQUM3RSxFQUFFLENBQUMsQ0FBRSxRQUFRLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBRSxDQUFDLENBQUUsS0FBSyxPQUFRLENBQUMsQ0FBQyxDQUFDO1lBRWhELHNFQUFzRTtZQUN0RSxZQUFZLEdBQUcsQ0FBQyxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFFLENBQUMsQ0FBQyxhQUFhLENBQUU7Z0JBQ3BFLENBQUMsQ0FBQyxhQUFhLEVBQUU7Z0JBQ2pCLENBQUMsQ0FBQyxhQUFhLENBQUM7WUFFakIsd0NBQXdDO1lBQ3hDLEVBQUUsQ0FBQyxDQUFFLFFBQVMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2hCLENBQUMsQ0FBRSxRQUFRLENBQUUsR0FBRyxDQUFDLENBQUUsUUFBUSxDQUFFLENBQUMsT0FBTyxDQUFFLE1BQU0sRUFBRSxJQUFJLEdBQUcsWUFBWSxDQUFFLENBQUM7WUFDdEUsQ0FBQztZQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBRSxDQUFDLENBQUMsS0FBSyxLQUFLLEtBQU0sQ0FBQyxDQUFDLENBQUM7Z0JBQ2hDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBRSxNQUFNLENBQUMsSUFBSSxDQUFFLENBQUMsQ0FBQyxHQUFHLENBQUUsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFFLEdBQUcsQ0FBQyxDQUFDLEtBQUssR0FBRyxHQUFHLEdBQUcsWUFBWSxDQUFDO1lBQzlFLENBQUM7WUFFRCw2REFBNkQ7WUFDN0QsQ0FBQyxDQUFDLFVBQVUsQ0FBRSxhQUFhLENBQUUsR0FBRztnQkFDL0IsRUFBRSxDQUFDLENBQUUsQ0FBQyxpQkFBa0IsQ0FBQyxDQUFDLENBQUM7b0JBQzFCLE1BQU0sQ0FBQyxLQUFLLENBQUUsWUFBWSxHQUFHLGlCQUFpQixDQUFFLENBQUM7Z0JBQ2xELENBQUM7Z0JBQ0QsTUFBTSxDQUFDLGlCQUFpQixDQUFFLENBQUMsQ0FBRSxDQUFDO1lBQy9CLENBQUMsQ0FBQztZQUVGLHNCQUFzQjtZQUN0QixDQUFDLENBQUMsU0FBUyxDQUFFLENBQUMsQ0FBRSxHQUFHLE1BQU0sQ0FBQztZQUUxQixtQkFBbUI7WUFDbkIsV0FBVyxHQUFHLE1BQU0sQ0FBRSxZQUFZLENBQUUsQ0FBQztZQUNyQyxNQUFNLENBQUUsWUFBWSxDQUFFLEdBQUc7Z0JBQ3hCLGlCQUFpQixHQUFHLFNBQVMsQ0FBQztZQUMvQixDQUFDLENBQUM7WUFFRiw2Q0FBNkM7WUFDN0MsS0FBSyxDQUFDLE1BQU0sQ0FBRTtnQkFFYiw2Q0FBNkM7Z0JBQzdDLEVBQUUsQ0FBQyxDQUFFLFdBQVcsS0FBSyxTQUFVLENBQUMsQ0FBQyxDQUFDO29CQUNqQyxNQUFNLENBQUUsTUFBTSxDQUFFLENBQUMsVUFBVSxDQUFFLFlBQVksQ0FBRSxDQUFDO29CQUU3QyxzQ0FBc0M7Z0JBQ3RDLENBQUM7Z0JBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ1AsTUFBTSxDQUFFLFlBQVksQ0FBRSxHQUFHLFdBQVcsQ0FBQztnQkFDdEMsQ0FBQztnQkFFRCxvQkFBb0I7Z0JBQ3BCLEVBQUUsQ0FBQyxDQUFFLENBQUMsQ0FBRSxZQUFZLENBQUcsQ0FBQyxDQUFDLENBQUM7b0JBRXpCLGtFQUFrRTtvQkFDbEUsQ0FBQyxDQUFDLGFBQWEsR0FBRyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUM7b0JBRWpELHdDQUF3QztvQkFDeEMsWUFBWSxDQUFDLElBQUksQ0FBRSxZQUFZLENBQUUsQ0FBQztnQkFDbkMsQ0FBQztnQkFFRCxtREFBbUQ7Z0JBQ25ELEVBQUUsQ0FBQyxDQUFFLGlCQUFpQixJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUUsV0FBVyxDQUFHLENBQUMsQ0FBQyxDQUFDO29CQUM3RCxXQUFXLENBQUUsaUJBQWlCLENBQUUsQ0FBQyxDQUFFLENBQUUsQ0FBQztnQkFDdkMsQ0FBQztnQkFFRCxpQkFBaUIsR0FBRyxXQUFXLEdBQUcsU0FBUyxDQUFDO1lBQzdDLENBQUMsQ0FBRSxDQUFDO1lBRUoscUJBQXFCO1lBQ3JCLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDakIsQ0FBQztJQUNGLENBQUMsQ0FBRSxDQUFDO0FBRUosQ0FBQyxDQUFFLENBQUMiLCJmaWxlIjoid3d3L3BhY2tzL2pxdWVyeS9zcmMvYWpheC9qc29ucC5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSggW1xuXHRcIi4uL2NvcmVcIixcblx0XCIuL3Zhci9ub25jZVwiLFxuXHRcIi4vdmFyL3JxdWVyeVwiLFxuXHRcIi4uL2FqYXhcIlxuXSwgZnVuY3Rpb24oIGpRdWVyeSwgbm9uY2UsIHJxdWVyeSApIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZSsrICkgKTtcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcblx0XHRyZXR1cm4gY2FsbGJhY2s7XG5cdH1cbn0gKTtcblxuLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcblxuXHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cblx0XHRcdFwidXJsXCIgOlxuXHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApXG5cdFx0XHRcdFx0LmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCAmJlxuXHRcdFx0XHRyanNvbnAudGVzdCggcy5kYXRhICkgJiYgXCJkYXRhXCJcblx0XHQpO1xuXG5cdC8vIEhhbmRsZSBpZmYgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZSBpcyBcImpzb25wXCIgb3Igd2UgaGF2ZSBhIHBhcmFtZXRlciB0byBzZXRcblx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XG5cblx0XHQvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0XG5cdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0galF1ZXJ5LmlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcblxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcblx0XHRpZiAoIGpzb25Qcm9wICkge1xuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0fVxuXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuXHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBGb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgdmFsdWUgZGlkbid0IGV4aXN0IC0gcmVtb3ZlIGl0XG5cdFx0XHRpZiAoIG92ZXJ3cml0dGVuID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XG5cblx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHRcdFx0Ly8gU2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBqUXVlcnkuaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG59ICk7XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,
