define([
    "../core"
], function (jQuery) {
    "use strict";
    // Cross-browser xml parsing
    jQuery.parseXML = function (data) {
        var xml;
        if (!data || typeof data !== "string") {
            return null;
        }
        // Support: IE 9 - 11 only
        // IE throws on parseFromString with invalid input.
        try {
            xml = (new window.DOMParser()).parseFromString(data, "text/xml");
        }
        catch (e) {
            xml = undefined;
        }
        if (!xml || xml.getElementsByTagName("parsererror").length) {
            jQuery.error("Invalid XML: " + data);
        }
        return xml;
    };
    return jQuery.parseXML;
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInd3dy9wYWNrcy9qcXVlcnkvc3JjL2FqYXgvcGFyc2VYTUwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFFO0lBQ1AsU0FBUztDQUNULEVBQUUsVUFBVSxNQUFNO0lBRW5CLFlBQVksQ0FBQztJQUViLDRCQUE0QjtJQUM1QixNQUFNLENBQUMsUUFBUSxHQUFHLFVBQVUsSUFBSTtRQUMvQixJQUFJLEdBQUcsQ0FBQztRQUNSLEVBQUUsQ0FBQyxDQUFFLENBQUMsSUFBSSxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVMsQ0FBQyxDQUFDLENBQUM7WUFDekMsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNiLENBQUM7UUFFRCwwQkFBMEI7UUFDMUIsbURBQW1EO1FBQ25ELElBQUksQ0FBQztZQUNKLEdBQUcsR0FBRyxDQUFFLElBQUksTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFFLENBQUMsZUFBZSxDQUFFLElBQUksRUFBRSxVQUFVLENBQUUsQ0FBQztRQUN0RSxDQUFDO1FBQUMsS0FBSyxDQUFDLENBQUUsQ0FBRSxDQUFDLENBQUMsQ0FBQztZQUNkLEdBQUcsR0FBRyxTQUFTLENBQUM7UUFDakIsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFFLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBRSxhQUFhLENBQUUsQ0FBQyxNQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ2hFLE1BQU0sQ0FBQyxLQUFLLENBQUUsZUFBZSxHQUFHLElBQUksQ0FBRSxDQUFDO1FBQ3hDLENBQUM7UUFDRCxNQUFNLENBQUMsR0FBRyxDQUFDO0lBQ1osQ0FBQyxDQUFDO0lBRUYsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7QUFFdkIsQ0FBQyxDQUFFLENBQUMiLCJmaWxlIjoid3d3L3BhY2tzL2pxdWVyeS9zcmMvYWpheC9wYXJzZVhNTC5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSggW1xuXHRcIi4uL2NvcmVcIlxuXSwgZnVuY3Rpb24oIGpRdWVyeSApIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gSUUgdGhyb3dzIG9uIHBhcnNlRnJvbVN0cmluZyB3aXRoIGludmFsaWQgaW5wdXQuXG5cdHRyeSB7XG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0eG1sID0gdW5kZWZpbmVkO1xuXHR9XG5cblx0aWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cbnJldHVybiBqUXVlcnkucGFyc2VYTUw7XG5cbn0gKTtcbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInd3dy9wYWNrcy9qcXVlcnkvc3JjL2FqYXgvcGFyc2VYTUwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDO0lBQ0gsU0FBUztDQUNaLEVBQUUsVUFBVSxNQUFNO0lBQ2YsWUFBWSxDQUFDO0lBQ2IsNEJBQTRCO0lBQzVCLE1BQU0sQ0FBQyxRQUFRLEdBQUcsVUFBVSxJQUFJO1FBQzVCLElBQUksR0FBRyxDQUFDO1FBQ1IsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNwQyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2hCLENBQUM7UUFDRCwwQkFBMEI7UUFDMUIsbURBQW1EO1FBQ25ELElBQUksQ0FBQztZQUNELEdBQUcsR0FBRyxDQUFDLElBQUksTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNyRSxDQUFDO1FBQ0QsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNQLEdBQUcsR0FBRyxTQUFTLENBQUM7UUFDcEIsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxhQUFhLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ3pELE1BQU0sQ0FBQyxLQUFLLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ3pDLENBQUM7UUFDRCxNQUFNLENBQUMsR0FBRyxDQUFDO0lBQ2YsQ0FBQyxDQUFDO0lBQ0YsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7QUFDM0IsQ0FBQyxDQUFDLENBQUM7QUFFSCwyL0RBQTIvRCIsImZpbGUiOiJ3d3cvcGFja3MvanF1ZXJ5L3NyYy9hamF4L3BhcnNlWE1MLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKFtcbiAgICBcIi4uL2NvcmVcIlxuXSwgZnVuY3Rpb24gKGpRdWVyeSkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIC8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbiAgICBqUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB2YXIgeG1sO1xuICAgICAgICBpZiAoIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG4gICAgICAgIC8vIElFIHRocm93cyBvbiBwYXJzZUZyb21TdHJpbmcgd2l0aCBpbnZhbGlkIGlucHV0LlxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgeG1sID0gKG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkpLnBhcnNlRnJvbVN0cmluZyhkYXRhLCBcInRleHQveG1sXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICB4bWwgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF4bWwgfHwgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwicGFyc2VyZXJyb3JcIikubGVuZ3RoKSB7XG4gICAgICAgICAgICBqUXVlcnkuZXJyb3IoXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geG1sO1xuICAgIH07XG4gICAgcmV0dXJuIGpRdWVyeS5wYXJzZVhNTDtcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGY4O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZDNkeTl3WVdOcmN5OXFjWFZsY25rdmMzSmpMMkZxWVhndmNHRnljMlZZVFV3dWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzVFVGQlRTeERRVUZGTzBsQlExQXNVMEZCVXp0RFFVTlVMRVZCUVVVc1ZVRkJWU3hOUVVGTk8wbEJSVzVDTEZsQlFWa3NRMEZCUXp0SlFVVmlMRFJDUVVFMFFqdEpRVU0xUWl4TlFVRk5MRU5CUVVNc1VVRkJVU3hIUVVGSExGVkJRVlVzU1VGQlNUdFJRVU12UWl4SlFVRkpMRWRCUVVjc1EwRkJRenRSUVVOU0xFVkJRVVVzUTBGQlF5eERRVUZGTEVOQlFVTXNTVUZCU1N4SlFVRkpMRTlCUVU4c1NVRkJTU3hMUVVGTExGRkJRVk1zUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEZWtNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF6dFJRVU5pTEVOQlFVTTdVVUZGUkN3d1FrRkJNRUk3VVVGRE1VSXNiVVJCUVcxRU8xRkJRMjVFTEVsQlFVa3NRMEZCUXp0WlFVTktMRWRCUVVjc1IwRkJSeXhEUVVGRkxFbEJRVWtzVFVGQlRTeERRVUZETEZOQlFWTXNSVUZCUlN4RFFVRkZMRU5CUVVNc1pVRkJaU3hEUVVGRkxFbEJRVWtzUlVGQlJTeFZRVUZWTEVOQlFVVXNRMEZCUXp0UlFVTjBSU3hEUVVGRE8xRkJRVU1zUzBGQlN5eERRVUZETEVOQlFVVXNRMEZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOa0xFZEJRVWNzUjBGQlJ5eFRRVUZUTEVOQlFVTTdVVUZEYWtJc1EwRkJRenRSUVVWRUxFVkJRVVVzUTBGQlF5eERRVUZGTEVOQlFVTXNSMEZCUnl4SlFVRkpMRWRCUVVjc1EwRkJReXh2UWtGQmIwSXNRMEZCUlN4aFFVRmhMRU5CUVVVc1EwRkJReXhOUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEyaEZMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVVVzWlVGQlpTeEhRVUZITEVsQlFVa3NRMEZCUlN4RFFVRkRPMUZCUTNoRExFTkJRVU03VVVGRFJDeE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRPMGxCUTFvc1EwRkJReXhEUVVGRE8wbEJSVVlzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNN1FVRkZka0lzUTBGQlF5eERRVUZGTEVOQlFVTWlMQ0ptYVd4bElqb2lkM2QzTDNCaFkydHpMMnB4ZFdWeWVTOXpjbU12WVdwaGVDOXdZWEp6WlZoTlRDNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1SbFptbHVaU2dnVzF4dVhIUmNJaTR1TDJOdmNtVmNJbHh1WFN3Z1puVnVZM1JwYjI0b0lHcFJkV1Z5ZVNBcElIdGNibHh1WENKMWMyVWdjM1J5YVdOMFhDSTdYRzVjYmk4dklFTnliM056TFdKeWIzZHpaWElnZUcxc0lIQmhjbk5wYm1kY2JtcFJkV1Z5ZVM1d1lYSnpaVmhOVENBOUlHWjFibU4wYVc5dUtDQmtZWFJoSUNrZ2UxeHVYSFIyWVhJZ2VHMXNPMXh1WEhScFppQW9JQ0ZrWVhSaElIeDhJSFI1Y0dWdlppQmtZWFJoSUNFOVBTQmNJbk4wY21sdVoxd2lJQ2tnZTF4dVhIUmNkSEpsZEhWeWJpQnVkV3hzTzF4dVhIUjlYRzVjYmx4MEx5OGdVM1Z3Y0c5eWREb2dTVVVnT1NBdElERXhJRzl1YkhsY2JseDBMeThnU1VVZ2RHaHliM2R6SUc5dUlIQmhjbk5sUm5KdmJWTjBjbWx1WnlCM2FYUm9JR2x1ZG1Gc2FXUWdhVzV3ZFhRdVhHNWNkSFJ5ZVNCN1hHNWNkRngwZUcxc0lEMGdLQ0J1WlhjZ2QybHVaRzkzTGtSUFRWQmhjbk5sY2lncElDa3VjR0Z5YzJWR2NtOXRVM1J5YVc1bktDQmtZWFJoTENCY0luUmxlSFF2ZUcxc1hDSWdLVHRjYmx4MGZTQmpZWFJqYUNBb0lHVWdLU0I3WEc1Y2RGeDBlRzFzSUQwZ2RXNWtaV1pwYm1Wa08xeHVYSFI5WEc1Y2JseDBhV1lnS0NBaGVHMXNJSHg4SUhodGJDNW5aWFJGYkdWdFpXNTBjMEo1VkdGblRtRnRaU2dnWENKd1lYSnpaWEpsY25KdmNsd2lJQ2t1YkdWdVozUm9JQ2tnZTF4dVhIUmNkR3BSZFdWeWVTNWxjbkp2Y2lnZ1hDSkpiblpoYkdsa0lGaE5URG9nWENJZ0t5QmtZWFJoSUNrN1hHNWNkSDFjYmx4MGNtVjBkWEp1SUhodGJEdGNibjA3WEc1Y2JuSmxkSFZ5YmlCcVVYVmxjbmt1Y0dGeWMyVllUVXc3WEc1Y2JuMGdLVHRjYmlKZGZRPT1cbiJdfQ==

//# sourceMappingURL=data:application/json;charset=utf8;base64,
