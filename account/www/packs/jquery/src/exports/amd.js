define([
    "../core"
], function (jQuery) {
    "use strict";
    // Register as a named AMD module, since jQuery can be concatenated with other
    // files that may use define, but not via a proper concatenation script that
    // understands anonymous AMD modules. A named AMD is safest and most robust
    // way to register. Lowercase jquery is used because AMD module names are
    // derived from file names, and jQuery is normally delivered in a lowercase
    // file name. Do this after creating the global so that if an AMD module wants
    // to call noConflict to hide this version of jQuery, it will work.
    // Note that for maximum portability, libraries that are not jQuery should
    // declare themselves as anonymous modules, and avoid setting a global if an
    // AMD loader is present. jQuery is a special case. For more information, see
    // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
    if (typeof define === "function" && define.amd) {
        define("jquery", [], function () {
            return jQuery;
        });
    }
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInd3dy9wYWNrcy9qcXVlcnkvc3JjL2V4cG9ydHMvYW1kLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBRTtJQUNQLFNBQVM7Q0FDVCxFQUFFLFVBQVUsTUFBTTtJQUVuQixZQUFZLENBQUM7SUFFYiw4RUFBOEU7SUFDOUUsNEVBQTRFO0lBQzVFLDJFQUEyRTtJQUMzRSx5RUFBeUU7SUFDekUsMkVBQTJFO0lBQzNFLDhFQUE4RTtJQUM5RSxtRUFBbUU7SUFFbkUsMEVBQTBFO0lBQzFFLDRFQUE0RTtJQUM1RSw2RUFBNkU7SUFDN0Usa0ZBQWtGO0lBRWxGLEVBQUUsQ0FBQyxDQUFFLE9BQU8sTUFBTSxLQUFLLFVBQVUsSUFBSSxNQUFNLENBQUMsR0FBSSxDQUFDLENBQUMsQ0FBQztRQUNsRCxNQUFNLENBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRTtZQUNyQixNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ2YsQ0FBQyxDQUFFLENBQUM7SUFDTCxDQUFDO0FBRUQsQ0FBQyxDQUFFLENBQUMiLCJmaWxlIjoid3d3L3BhY2tzL2pxdWVyeS9zcmMvZXhwb3J0cy9hbWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoIFtcblx0XCIuLi9jb3JlXCJcbl0sIGZ1bmN0aW9uKCBqUXVlcnkgKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cblxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnk7XG5cdH0gKTtcbn1cblxufSApO1xuIl19
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInd3dy9wYWNrcy9qcXVlcnkvc3JjL2V4cG9ydHMvYW1kLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQztJQUNILFNBQVM7Q0FDWixFQUFFLFVBQVUsTUFBTTtJQUNmLFlBQVksQ0FBQztJQUNiLDhFQUE4RTtJQUM5RSw0RUFBNEU7SUFDNUUsMkVBQTJFO0lBQzNFLHlFQUF5RTtJQUN6RSwyRUFBMkU7SUFDM0UsOEVBQThFO0lBQzlFLG1FQUFtRTtJQUNuRSwwRUFBMEU7SUFDMUUsNEVBQTRFO0lBQzVFLDZFQUE2RTtJQUM3RSxrRkFBa0Y7SUFDbEYsRUFBRSxDQUFDLENBQUMsT0FBTyxNQUFNLEtBQUssVUFBVSxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzdDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsRUFBRSxFQUFFO1lBQ2pCLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDbEIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCwrcEVBQStwRSIsImZpbGUiOiJ3d3cvcGFja3MvanF1ZXJ5L3NyYy9leHBvcnRzL2FtZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZShbXG4gICAgXCIuLi9jb3JlXCJcbl0sIGZ1bmN0aW9uIChqUXVlcnkpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAvLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcbiAgICAvLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4gICAgLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4gICAgLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxuICAgIC8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuICAgIC8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuICAgIC8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cbiAgICAvLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuICAgIC8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cbiAgICAvLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4galF1ZXJ5O1xuICAgICAgICB9KTtcbiAgICB9XG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmQzZHk5d1lXTnJjeTlxY1hWbGNua3ZjM0pqTDJWNGNHOXlkSE12WVcxa0xtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEUxQlFVMHNRMEZCUlR0SlFVTlFMRk5CUVZNN1EwRkRWQ3hGUVVGRkxGVkJRVlVzVFVGQlRUdEpRVVZ1UWl4WlFVRlpMRU5CUVVNN1NVRkZZaXc0UlVGQk9FVTdTVUZET1VVc05FVkJRVFJGTzBsQlF6VkZMREpGUVVFeVJUdEpRVU16UlN4NVJVRkJlVVU3U1VGRGVrVXNNa1ZCUVRKRk8wbEJRek5GTERoRlFVRTRSVHRKUVVNNVJTeHRSVUZCYlVVN1NVRkZia1VzTUVWQlFUQkZPMGxCUXpGRkxEUkZRVUUwUlR0SlFVTTFSU3cyUlVGQk5rVTdTVUZETjBVc2EwWkJRV3RHTzBsQlJXeEdMRVZCUVVVc1EwRkJReXhEUVVGRkxFOUJRVThzVFVGQlRTeExRVUZMTEZWQlFWVXNTVUZCU1N4TlFVRk5MRU5CUVVNc1IwRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU5zUkN4TlFVRk5MRU5CUVVVc1VVRkJVU3hGUVVGRkxFVkJRVVVzUlVGQlJUdFpRVU55UWl4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRE8xRkJRMllzUTBGQlF5eERRVUZGTEVOQlFVTTdTVUZEVEN4RFFVRkRPMEZCUlVRc1EwRkJReXhEUVVGRkxFTkJRVU1pTENKbWFXeGxJam9pZDNkM0wzQmhZMnR6TDJweGRXVnllUzl6Y21NdlpYaHdiM0owY3k5aGJXUXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKa1pXWnBibVVvSUZ0Y2JseDBYQ0l1TGk5amIzSmxYQ0pjYmwwc0lHWjFibU4wYVc5dUtDQnFVWFZsY25rZ0tTQjdYRzVjYmx3aWRYTmxJSE4wY21samRGd2lPMXh1WEc0dkx5QlNaV2RwYzNSbGNpQmhjeUJoSUc1aGJXVmtJRUZOUkNCdGIyUjFiR1VzSUhOcGJtTmxJR3BSZFdWeWVTQmpZVzRnWW1VZ1kyOXVZMkYwWlc1aGRHVmtJSGRwZEdnZ2IzUm9aWEpjYmk4dklHWnBiR1Z6SUhSb1lYUWdiV0Y1SUhWelpTQmtaV1pwYm1Vc0lHSjFkQ0J1YjNRZ2RtbGhJR0VnY0hKdmNHVnlJR052Ym1OaGRHVnVZWFJwYjI0Z2MyTnlhWEIwSUhSb1lYUmNiaTh2SUhWdVpHVnljM1JoYm1SeklHRnViMjU1Ylc5MWN5QkJUVVFnYlc5a2RXeGxjeTRnUVNCdVlXMWxaQ0JCVFVRZ2FYTWdjMkZtWlhOMElHRnVaQ0J0YjNOMElISnZZblZ6ZEZ4dUx5OGdkMkY1SUhSdklISmxaMmx6ZEdWeUxpQk1iM2RsY21OaGMyVWdhbkYxWlhKNUlHbHpJSFZ6WldRZ1ltVmpZWFZ6WlNCQlRVUWdiVzlrZFd4bElHNWhiV1Z6SUdGeVpWeHVMeThnWkdWeWFYWmxaQ0JtY205dElHWnBiR1VnYm1GdFpYTXNJR0Z1WkNCcVVYVmxjbmtnYVhNZ2JtOXliV0ZzYkhrZ1pHVnNhWFpsY21Wa0lHbHVJR0VnYkc5M1pYSmpZWE5sWEc0dkx5Qm1hV3hsSUc1aGJXVXVJRVJ2SUhSb2FYTWdZV1owWlhJZ1kzSmxZWFJwYm1jZ2RHaGxJR2RzYjJKaGJDQnpieUIwYUdGMElHbG1JR0Z1SUVGTlJDQnRiMlIxYkdVZ2QyRnVkSE5jYmk4dklIUnZJR05oYkd3Z2JtOURiMjVtYkdsamRDQjBieUJvYVdSbElIUm9hWE1nZG1WeWMybHZiaUJ2WmlCcVVYVmxjbmtzSUdsMElIZHBiR3dnZDI5eWF5NWNibHh1THk4Z1RtOTBaU0IwYUdGMElHWnZjaUJ0WVhocGJYVnRJSEJ2Y25SaFltbHNhWFI1TENCc2FXSnlZWEpwWlhNZ2RHaGhkQ0JoY21VZ2JtOTBJR3BSZFdWeWVTQnphRzkxYkdSY2JpOHZJR1JsWTJ4aGNtVWdkR2hsYlhObGJIWmxjeUJoY3lCaGJtOXVlVzF2ZFhNZ2JXOWtkV3hsY3l3Z1lXNWtJR0YyYjJsa0lITmxkSFJwYm1jZ1lTQm5iRzlpWVd3Z2FXWWdZVzVjYmk4dklFRk5SQ0JzYjJGa1pYSWdhWE1nY0hKbGMyVnVkQzRnYWxGMVpYSjVJR2x6SUdFZ2MzQmxZMmxoYkNCallYTmxMaUJHYjNJZ2JXOXlaU0JwYm1admNtMWhkR2x2Yml3Z2MyVmxYRzR2THlCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmFuSmlkWEpyWlM5eVpYRjFhWEpsYW5NdmQybHJhUzlWY0dSaGRHbHVaeTFsZUdsemRHbHVaeTFzYVdKeVlYSnBaWE1qZDJscmFTMWhibTl1WEc1Y2JtbG1JQ2dnZEhsd1pXOW1JR1JsWm1sdVpTQTlQVDBnWENKbWRXNWpkR2x2Ymx3aUlDWW1JR1JsWm1sdVpTNWhiV1FnS1NCN1hHNWNkR1JsWm1sdVpTZ2dYQ0pxY1hWbGNubGNJaXdnVzEwc0lHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RISmxkSFZ5YmlCcVVYVmxjbms3WEc1Y2RIMGdLVHRjYm4xY2JseHVmU0FwTzF4dUlsMTlcbiJdfQ==

//# sourceMappingURL=data:application/json;charset=utf8;base64,
