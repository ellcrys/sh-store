define([
    "../var/document",
    "../var/support"
], function (document, support) {
    "use strict";
    (function () {
        var fragment = document.createDocumentFragment(), div = fragment.appendChild(document.createElement("div")), input = document.createElement("input");
        // Support: Android 4.0 - 4.3 only
        // Check state lost if the name is set (#11217)
        // Support: Windows Web Apps (WWA)
        // `name` and `type` must use .setAttribute for WWA (#14901)
        input.setAttribute("type", "radio");
        input.setAttribute("checked", "checked");
        input.setAttribute("name", "t");
        div.appendChild(input);
        // Support: Android <=4.1 only
        // Older WebKit doesn't clone checked state correctly in fragments
        support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
        // Support: IE <=11 only
        // Make sure textarea (and checkbox) defaultValue is properly cloned
        div.innerHTML = "<textarea>x</textarea>";
        support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
    })();
    return support;
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInd3dy9wYWNrcy9qcXVlcnkvc3JjL21hbmlwdWxhdGlvbi9zdXBwb3J0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBRTtJQUNQLGlCQUFpQjtJQUNqQixnQkFBZ0I7Q0FDaEIsRUFBRSxVQUFVLFFBQVEsRUFBRSxPQUFPO0lBRTlCLFlBQVksQ0FBQztJQUViLENBQUU7UUFDRCxJQUFJLFFBQVEsR0FBRyxRQUFRLENBQUMsc0JBQXNCLEVBQUUsRUFDL0MsR0FBRyxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUUsUUFBUSxDQUFDLGFBQWEsQ0FBRSxLQUFLLENBQUUsQ0FBRSxFQUM3RCxLQUFLLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBRSxPQUFPLENBQUUsQ0FBQztRQUUzQyxrQ0FBa0M7UUFDbEMsK0NBQStDO1FBQy9DLGtDQUFrQztRQUNsQyw0REFBNEQ7UUFDNUQsS0FBSyxDQUFDLFlBQVksQ0FBRSxNQUFNLEVBQUUsT0FBTyxDQUFFLENBQUM7UUFDdEMsS0FBSyxDQUFDLFlBQVksQ0FBRSxTQUFTLEVBQUUsU0FBUyxDQUFFLENBQUM7UUFDM0MsS0FBSyxDQUFDLFlBQVksQ0FBRSxNQUFNLEVBQUUsR0FBRyxDQUFFLENBQUM7UUFFbEMsR0FBRyxDQUFDLFdBQVcsQ0FBRSxLQUFLLENBQUUsQ0FBQztRQUV6Qiw4QkFBOEI7UUFDOUIsa0VBQWtFO1FBQ2xFLE9BQU8sQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBRSxJQUFJLENBQUUsQ0FBQyxTQUFTLENBQUUsSUFBSSxDQUFFLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztRQUUvRSx3QkFBd0I7UUFDeEIsb0VBQW9FO1FBQ3BFLEdBQUcsQ0FBQyxTQUFTLEdBQUcsd0JBQXdCLENBQUM7UUFDekMsT0FBTyxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBRSxJQUFJLENBQUUsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDO0lBQ3pFLENBQUMsQ0FBRSxFQUFFLENBQUM7SUFFTixNQUFNLENBQUMsT0FBTyxDQUFDO0FBRWYsQ0FBQyxDQUFFLENBQUMiLCJmaWxlIjoid3d3L3BhY2tzL2pxdWVyeS9zcmMvbWFuaXB1bGF0aW9uL3N1cHBvcnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoIFtcblx0XCIuLi92YXIvZG9jdW1lbnRcIixcblx0XCIuLi92YXIvc3VwcG9ydFwiXG5dLCBmdW5jdGlvbiggZG9jdW1lbnQsIHN1cHBvcnQgKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHQvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAoIzExMjE3KVxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSBvbmx5XG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG59ICkoKTtcblxucmV0dXJuIHN1cHBvcnQ7XG5cbn0gKTtcbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInd3dy9wYWNrcy9qcXVlcnkvc3JjL21hbmlwdWxhdGlvbi9zdXBwb3J0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQztJQUNILGlCQUFpQjtJQUNqQixnQkFBZ0I7Q0FDbkIsRUFBRSxVQUFVLFFBQVEsRUFBRSxPQUFPO0lBQzFCLFlBQVksQ0FBQztJQUNiLENBQUM7UUFDRyxJQUFJLFFBQVEsR0FBRyxRQUFRLENBQUMsc0JBQXNCLEVBQUUsRUFBRSxHQUFHLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckosa0NBQWtDO1FBQ2xDLCtDQUErQztRQUMvQyxrQ0FBa0M7UUFDbEMsNERBQTREO1FBQzVELEtBQUssQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3BDLEtBQUssQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3pDLEtBQUssQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ2hDLEdBQUcsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkIsOEJBQThCO1FBQzlCLGtFQUFrRTtRQUNsRSxPQUFPLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7UUFDM0Usd0JBQXdCO1FBQ3hCLG9FQUFvRTtRQUNwRSxHQUFHLENBQUMsU0FBUyxHQUFHLHdCQUF3QixDQUFDO1FBQ3pDLE9BQU8sQ0FBQyxjQUFjLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQztJQUMxRSxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ0wsTUFBTSxDQUFDLE9BQU8sQ0FBQztBQUNuQixDQUFDLENBQUMsQ0FBQztBQUVILHUzRkFBdTNGIiwiZmlsZSI6Ind3dy9wYWNrcy9qcXVlcnkvc3JjL21hbmlwdWxhdGlvbi9zdXBwb3J0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKFtcbiAgICBcIi4uL3Zhci9kb2N1bWVudFwiLFxuICAgIFwiLi4vdmFyL3N1cHBvcnRcIlxuXSwgZnVuY3Rpb24gKGRvY3VtZW50LCBzdXBwb3J0KSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLCBkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKSwgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgIC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcbiAgICAgICAgLy8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcbiAgICAgICAgLy8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuICAgICAgICAvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcbiAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInJhZGlvXCIpO1xuICAgICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiKTtcbiAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKFwibmFtZVwiLCBcInRcIik7XG4gICAgICAgIGRpdi5hcHBlbmRDaGlsZChpbnB1dCk7XG4gICAgICAgIC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgb25seVxuICAgICAgICAvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcbiAgICAgICAgc3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSh0cnVlKS5jbG9uZU5vZGUodHJ1ZSkubGFzdENoaWxkLmNoZWNrZWQ7XG4gICAgICAgIC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuICAgICAgICAvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuICAgICAgICBkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG4gICAgICAgIHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUodHJ1ZSkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcbiAgICB9KSgpO1xuICAgIHJldHVybiBzdXBwb3J0O1xufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zjg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kM2R5OXdZV05yY3k5cWNYVmxjbmt2YzNKakwyMWhibWx3ZFd4aGRHbHZiaTl6ZFhCd2IzSjBMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFMUJRVTBzUTBGQlJUdEpRVU5RTEdsQ1FVRnBRanRKUVVOcVFpeG5Ra0ZCWjBJN1EwRkRhRUlzUlVGQlJTeFZRVUZWTEZGQlFWRXNSVUZCUlN4UFFVRlBPMGxCUlRsQ0xGbEJRVmtzUTBGQlF6dEpRVVZpTEVOQlFVVTdVVUZEUkN4SlFVRkpMRkZCUVZFc1IwRkJSeXhSUVVGUkxFTkJRVU1zYzBKQlFYTkNMRVZCUVVVc1JVRkRMME1zUjBGQlJ5eEhRVUZITEZGQlFWRXNRMEZCUXl4WFFVRlhMRU5CUVVVc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlJTeExRVUZMTEVOQlFVVXNRMEZCUlN4RlFVTTNSQ3hMUVVGTExFZEJRVWNzVVVGQlVTeERRVUZETEdGQlFXRXNRMEZCUlN4UFFVRlBMRU5CUVVVc1EwRkJRenRSUVVVelF5eHJRMEZCYTBNN1VVRkRiRU1zSzBOQlFTdERPMUZCUXk5RExHdERRVUZyUXp0UlFVTnNReXcwUkVGQk5FUTdVVUZETlVRc1MwRkJTeXhEUVVGRExGbEJRVmtzUTBGQlJTeE5RVUZOTEVWQlFVVXNUMEZCVHl4RFFVRkZMRU5CUVVNN1VVRkRkRU1zUzBGQlN5eERRVUZETEZsQlFWa3NRMEZCUlN4VFFVRlRMRVZCUVVVc1UwRkJVeXhEUVVGRkxFTkJRVU03VVVGRE0wTXNTMEZCU3l4RFFVRkRMRmxCUVZrc1EwRkJSU3hOUVVGTkxFVkJRVVVzUjBGQlJ5eERRVUZGTEVOQlFVTTdVVUZGYkVNc1IwRkJSeXhEUVVGRExGZEJRVmNzUTBGQlJTeExRVUZMTEVOQlFVVXNRMEZCUXp0UlFVVjZRaXc0UWtGQk9FSTdVVUZET1VJc2EwVkJRV3RGTzFGQlEyeEZMRTlCUVU4c1EwRkJReXhWUVVGVkxFZEJRVWNzUjBGQlJ5eERRVUZETEZOQlFWTXNRMEZCUlN4SlFVRkpMRU5CUVVVc1EwRkJReXhUUVVGVExFTkJRVVVzU1VGQlNTeERRVUZGTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTlCUVU4c1EwRkJRenRSUVVVdlJTeDNRa0ZCZDBJN1VVRkRlRUlzYjBWQlFXOUZPMUZCUTNCRkxFZEJRVWNzUTBGQlF5eFRRVUZUTEVkQlFVY3NkMEpCUVhkQ0xFTkJRVU03VVVGRGVrTXNUMEZCVHl4RFFVRkRMR05CUVdNc1IwRkJSeXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEZOQlFWTXNRMEZCUlN4SlFVRkpMRU5CUVVVc1EwRkJReXhUUVVGVExFTkJRVU1zV1VGQldTeERRVUZETzBsQlEzcEZMRU5CUVVNc1EwRkJSU3hGUVVGRkxFTkJRVU03U1VGRlRpeE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRPMEZCUldZc1EwRkJReXhEUVVGRkxFTkJRVU1pTENKbWFXeGxJam9pZDNkM0wzQmhZMnR6TDJweGRXVnllUzl6Y21NdmJXRnVhWEIxYkdGMGFXOXVMM04xY0hCdmNuUXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKa1pXWnBibVVvSUZ0Y2JseDBYQ0l1TGk5MllYSXZaRzlqZFcxbGJuUmNJaXhjYmx4MFhDSXVMaTkyWVhJdmMzVndjRzl5ZEZ3aVhHNWRMQ0JtZFc1amRHbHZiaWdnWkc5amRXMWxiblFzSUhOMWNIQnZjblFnS1NCN1hHNWNibHdpZFhObElITjBjbWxqZEZ3aU8xeHVYRzRvSUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFIyWVhJZ1puSmhaMjFsYm5RZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRWIyTjFiV1Z1ZEVaeVlXZHRaVzUwS0Nrc1hHNWNkRngwWkdsMklEMGdabkpoWjIxbGJuUXVZWEJ3Wlc1a1EyaHBiR1FvSUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9JRndpWkdsMlhDSWdLU0FwTEZ4dVhIUmNkR2x1Y0hWMElEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnZ1hDSnBibkIxZEZ3aUlDazdYRzVjYmx4MEx5OGdVM1Z3Y0c5eWREb2dRVzVrY205cFpDQTBMakFnTFNBMExqTWdiMjVzZVZ4dVhIUXZMeUJEYUdWamF5QnpkR0YwWlNCc2IzTjBJR2xtSUhSb1pTQnVZVzFsSUdseklITmxkQ0FvSXpFeE1qRTNLVnh1WEhRdkx5QlRkWEJ3YjNKME9pQlhhVzVrYjNkeklGZGxZaUJCY0hCeklDaFhWMEVwWEc1Y2RDOHZJR0J1WVcxbFlDQmhibVFnWUhSNWNHVmdJRzExYzNRZ2RYTmxJQzV6WlhSQmRIUnlhV0oxZEdVZ1ptOXlJRmRYUVNBb0l6RTBPVEF4S1Z4dVhIUnBibkIxZEM1elpYUkJkSFJ5YVdKMWRHVW9JRndpZEhsd1pWd2lMQ0JjSW5KaFpHbHZYQ0lnS1R0Y2JseDBhVzV3ZFhRdWMyVjBRWFIwY21saWRYUmxLQ0JjSW1Ob1pXTnJaV1JjSWl3Z1hDSmphR1ZqYTJWa1hDSWdLVHRjYmx4MGFXNXdkWFF1YzJWMFFYUjBjbWxpZFhSbEtDQmNJbTVoYldWY0lpd2dYQ0owWENJZ0tUdGNibHh1WEhSa2FYWXVZWEJ3Wlc1a1EyaHBiR1FvSUdsdWNIVjBJQ2s3WEc1Y2JseDBMeThnVTNWd2NHOXlkRG9nUVc1a2NtOXBaQ0E4UFRRdU1TQnZibXg1WEc1Y2RDOHZJRTlzWkdWeUlGZGxZa3RwZENCa2IyVnpiaWQwSUdOc2IyNWxJR05vWldOclpXUWdjM1JoZEdVZ1kyOXljbVZqZEd4NUlHbHVJR1p5WVdkdFpXNTBjMXh1WEhSemRYQndiM0owTG1Ob1pXTnJRMnh2Ym1VZ1BTQmthWFl1WTJ4dmJtVk9iMlJsS0NCMGNuVmxJQ2t1WTJ4dmJtVk9iMlJsS0NCMGNuVmxJQ2t1YkdGemRFTm9hV3hrTG1Ob1pXTnJaV1E3WEc1Y2JseDBMeThnVTNWd2NHOXlkRG9nU1VVZ1BEMHhNU0J2Ym14NVhHNWNkQzh2SUUxaGEyVWdjM1Z5WlNCMFpYaDBZWEpsWVNBb1lXNWtJR05vWldOclltOTRLU0JrWldaaGRXeDBWbUZzZFdVZ2FYTWdjSEp2Y0dWeWJIa2dZMnh2Ym1Wa1hHNWNkR1JwZGk1cGJtNWxja2hVVFV3Z1BTQmNJangwWlhoMFlYSmxZVDU0UEM5MFpYaDBZWEpsWVQ1Y0lqdGNibHgwYzNWd2NHOXlkQzV1YjBOc2IyNWxRMmhsWTJ0bFpDQTlJQ0VoWkdsMkxtTnNiMjVsVG05a1pTZ2dkSEoxWlNBcExteGhjM1JEYUdsc1pDNWtaV1poZFd4MFZtRnNkV1U3WEc1OUlDa29LVHRjYmx4dWNtVjBkWEp1SUhOMWNIQnZjblE3WEc1Y2JuMGdLVHRjYmlKZGZRPT1cbiJdfQ==

//# sourceMappingURL=data:application/json;charset=utf8;base64,
