define([
    "../core",
    "../var/document"
], function (jQuery, document) {
    "use strict";
    var readyCallbacks = [], whenReady = function (fn) {
        readyCallbacks.push(fn);
    }, executeReady = function (fn) {
        // Prevent errors from freezing future callback execution (gh-1823)
        // Not backwards-compatible as this does not execute sync
        window.setTimeout(function () {
            fn.call(document, jQuery);
        });
    };
    jQuery.fn.ready = function (fn) {
        whenReady(fn);
        return this;
    };
    jQuery.extend({
        // Is the DOM ready to be used? Set to true once it occurs.
        isReady: false,
        // A counter to track how many items to wait for before
        // the ready event fires. See #6781
        readyWait: 1,
        ready: function (wait) {
            // Abort if there are pending holds or we're already ready
            if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                return;
            }
            // Remember that the DOM is ready
            jQuery.isReady = true;
            // If a normal DOM Ready event fired, decrement, and wait if need be
            if (wait !== true && --jQuery.readyWait > 0) {
                return;
            }
            whenReady = function (fn) {
                readyCallbacks.push(fn);
                while (readyCallbacks.length) {
                    fn = readyCallbacks.shift();
                    if (jQuery.isFunction(fn)) {
                        executeReady(fn);
                    }
                }
            };
            whenReady();
        }
    });
    // Make jQuery.ready Promise consumable (gh-1778)
    jQuery.ready.then = jQuery.fn.ready;
    /**
     * The ready event handler and self cleanup method
     */
    function completed() {
        document.removeEventListener("DOMContentLoaded", completed);
        window.removeEventListener("load", completed);
        jQuery.ready();
    }
    // Catch cases where $(document).ready() is called
    // after the browser event has already occurred.
    // Support: IE9-10 only
    // Older IE sometimes signals "interactive" too soon
    if (document.readyState === "complete" ||
        (document.readyState !== "loading" && !document.documentElement.doScroll)) {
        // Handle it asynchronously to allow scripts the opportunity to delay ready
        window.setTimeout(jQuery.ready);
    }
    else {
        // Use the handy event callback
        document.addEventListener("DOMContentLoaded", completed);
        // A fallback to window.onload, that will always work
        window.addEventListener("load", completed);
    }
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInd3dy9wYWNrcy9qcXVlcnkvc3JjL2NvcmUvcmVhZHktbm8tZGVmZXJyZWQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFFO0lBQ1AsU0FBUztJQUNULGlCQUFpQjtDQUNqQixFQUFFLFVBQVUsTUFBTSxFQUFFLFFBQVE7SUFFN0IsWUFBWSxDQUFDO0lBRWIsSUFBSSxjQUFjLEdBQUcsRUFBRSxFQUN0QixTQUFTLEdBQUcsVUFBVSxFQUFFO1FBQ3ZCLGNBQWMsQ0FBQyxJQUFJLENBQUUsRUFBRSxDQUFFLENBQUM7SUFDM0IsQ0FBQyxFQUNELFlBQVksR0FBRyxVQUFVLEVBQUU7UUFFMUIsbUVBQW1FO1FBQ25FLHlEQUF5RDtRQUN6RCxNQUFNLENBQUMsVUFBVSxDQUFFO1lBQ2xCLEVBQUUsQ0FBQyxJQUFJLENBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBRSxDQUFDO1FBQzdCLENBQUMsQ0FBRSxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0lBRUgsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEdBQUcsVUFBVSxFQUFFO1FBQzdCLFNBQVMsQ0FBRSxFQUFFLENBQUUsQ0FBQztRQUNoQixNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2IsQ0FBQyxDQUFDO0lBRUYsTUFBTSxDQUFDLE1BQU0sQ0FBRTtRQUVkLDJEQUEyRDtRQUMzRCxPQUFPLEVBQUUsS0FBSztRQUVkLHVEQUF1RDtRQUN2RCxtQ0FBbUM7UUFDbkMsU0FBUyxFQUFFLENBQUM7UUFFWixLQUFLLEVBQUUsVUFBVSxJQUFJO1lBRXBCLDBEQUEwRDtZQUMxRCxFQUFFLENBQUMsQ0FBRSxJQUFJLEtBQUssSUFBSSxHQUFHLEVBQUUsTUFBTSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsT0FBUSxDQUFDLENBQUMsQ0FBQztnQkFDM0QsTUFBTSxDQUFDO1lBQ1IsQ0FBQztZQUVELGlDQUFpQztZQUNqQyxNQUFNLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztZQUV0QixvRUFBb0U7WUFDcEUsRUFBRSxDQUFDLENBQUUsSUFBSSxLQUFLLElBQUksSUFBSSxFQUFFLE1BQU0sQ0FBQyxTQUFTLEdBQUcsQ0FBRSxDQUFDLENBQUMsQ0FBQztnQkFDL0MsTUFBTSxDQUFDO1lBQ1IsQ0FBQztZQUVELFNBQVMsR0FBRyxVQUFVLEVBQUU7Z0JBQ3ZCLGNBQWMsQ0FBQyxJQUFJLENBQUUsRUFBRSxDQUFFLENBQUM7Z0JBRTFCLE9BQVEsY0FBYyxDQUFDLE1BQU0sRUFBRyxDQUFDO29CQUNoQyxFQUFFLEdBQUcsY0FBYyxDQUFDLEtBQUssRUFBRSxDQUFDO29CQUM1QixFQUFFLENBQUMsQ0FBRSxNQUFNLENBQUMsVUFBVSxDQUFFLEVBQUUsQ0FBRyxDQUFDLENBQUMsQ0FBQzt3QkFDL0IsWUFBWSxDQUFFLEVBQUUsQ0FBRSxDQUFDO29CQUNwQixDQUFDO2dCQUNGLENBQUM7WUFDRixDQUFDLENBQUM7WUFFRixTQUFTLEVBQUUsQ0FBQztRQUNiLENBQUM7S0FDRCxDQUFFLENBQUM7SUFFSixpREFBaUQ7SUFDakQsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUM7SUFFcEM7O09BRUc7SUFDSDtRQUNDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBRSxrQkFBa0IsRUFBRSxTQUFTLENBQUUsQ0FBQztRQUM5RCxNQUFNLENBQUMsbUJBQW1CLENBQUUsTUFBTSxFQUFFLFNBQVMsQ0FBRSxDQUFDO1FBQ2hELE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNoQixDQUFDO0lBRUQsa0RBQWtEO0lBQ2xELGdEQUFnRDtJQUNoRCx1QkFBdUI7SUFDdkIsb0RBQW9EO0lBQ3BELEVBQUUsQ0FBQyxDQUFFLFFBQVEsQ0FBQyxVQUFVLEtBQUssVUFBVTtRQUN0QyxDQUFFLFFBQVEsQ0FBQyxVQUFVLEtBQUssU0FBUyxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUcsQ0FBQyxDQUFDLENBQUM7UUFFL0UsMkVBQTJFO1FBQzNFLE1BQU0sQ0FBQyxVQUFVLENBQUUsTUFBTSxDQUFDLEtBQUssQ0FBRSxDQUFDO0lBRW5DLENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUVQLCtCQUErQjtRQUMvQixRQUFRLENBQUMsZ0JBQWdCLENBQUUsa0JBQWtCLEVBQUUsU0FBUyxDQUFFLENBQUM7UUFFM0QscURBQXFEO1FBQ3JELE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBRSxNQUFNLEVBQUUsU0FBUyxDQUFFLENBQUM7SUFDOUMsQ0FBQztBQUVELENBQUMsQ0FBRSxDQUFDIiwiZmlsZSI6Ind3dy9wYWNrcy9qcXVlcnkvc3JjL2NvcmUvcmVhZHktbm8tZGVmZXJyZWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoIFtcblx0XCIuLi9jb3JlXCIsXG5cdFwiLi4vdmFyL2RvY3VtZW50XCJcbl0sIGZ1bmN0aW9uKCBqUXVlcnksIGRvY3VtZW50ICkge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIHJlYWR5Q2FsbGJhY2tzID0gW10sXG5cdHdoZW5SZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZWFkeUNhbGxiYWNrcy5wdXNoKCBmbiApO1xuXHR9LFxuXHRleGVjdXRlUmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cblx0XHQvLyBQcmV2ZW50IGVycm9ycyBmcm9tIGZyZWV6aW5nIGZ1dHVyZSBjYWxsYmFjayBleGVjdXRpb24gKGdoLTE4MjMpXG5cdFx0Ly8gTm90IGJhY2t3YXJkcy1jb21wYXRpYmxlIGFzIHRoaXMgZG9lcyBub3QgZXhlY3V0ZSBzeW5jXG5cdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0Zm4uY2FsbCggZG9jdW1lbnQsIGpRdWVyeSApO1xuXHRcdH0gKTtcblx0fTtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXHR3aGVuUmVhZHkoIGZuICk7XG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHdoZW5SZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdHJlYWR5Q2FsbGJhY2tzLnB1c2goIGZuICk7XG5cblx0XHRcdHdoaWxlICggcmVhZHlDYWxsYmFja3MubGVuZ3RoICkge1xuXHRcdFx0XHRmbiA9IHJlYWR5Q2FsbGJhY2tzLnNoaWZ0KCk7XG5cdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0XHRcdFx0ZXhlY3V0ZVJlYWR5KCBmbiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHdoZW5SZWFkeSgpO1xuXHR9XG59ICk7XG5cbi8vIE1ha2UgalF1ZXJ5LnJlYWR5IFByb21pc2UgY29uc3VtYWJsZSAoZ2gtMTc3OClcbmpRdWVyeS5yZWFkeS50aGVuID0galF1ZXJ5LmZuLnJlYWR5O1xuXG4vKipcbiAqIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG4gKi9cbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHRqUXVlcnkucmVhZHkoKTtcbn1cblxuLy8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWRcbi8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuLy8gU3VwcG9ydDogSUU5LTEwIG9ubHlcbi8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxuaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0KCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XG5cblx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxufSBlbHNlIHtcblxuXHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblxuXHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xufVxuXG59ICk7XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,
