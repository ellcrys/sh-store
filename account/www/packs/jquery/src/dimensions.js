define([
    "./core",
    "./core/access",
    "./css"
], function (jQuery, access) {
    "use strict";
    // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
    jQuery.each({ Height: "height", Width: "width" }, function (name, type) {
        jQuery.each({ padding: "inner" + name, content: type, "": "outer" + name }, function (defaultExtra, funcName) {
            // Margin is only for outerHeight, outerWidth
            jQuery.fn[funcName] = function (margin, value) {
                var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"), extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
                return access(this, function (elem, type, value) {
                    var doc;
                    if (jQuery.isWindow(elem)) {
                        // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
                        return funcName.indexOf("outer") === 0 ?
                            elem["inner" + name] :
                            elem.document.documentElement["client" + name];
                    }
                    // Get document width or height
                    if (elem.nodeType === 9) {
                        doc = elem.documentElement;
                        // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
                        // whichever is greatest
                        return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
                    }
                    return value === undefined ?
                        // Get width or height on the element, requesting but not forcing parseFloat
                        jQuery.css(elem, type, extra) :
                        // Set width or height on the element
                        jQuery.style(elem, type, value, extra);
                }, type, chainable ? margin : undefined, chainable);
            };
        });
    });
    return jQuery;
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInd3dy9wYWNrcy9qcXVlcnkvc3JjL2RpbWVuc2lvbnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFFO0lBQ1AsUUFBUTtJQUNSLGVBQWU7SUFDZixPQUFPO0NBQ1AsRUFBRSxVQUFVLE1BQU0sRUFBRSxNQUFNO0lBRTNCLFlBQVksQ0FBQztJQUViLG9GQUFvRjtJQUNwRixNQUFNLENBQUMsSUFBSSxDQUFFLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEVBQUUsVUFBVSxJQUFJLEVBQUUsSUFBSTtRQUN0RSxNQUFNLENBQUMsSUFBSSxDQUFFLEVBQUUsT0FBTyxFQUFFLE9BQU8sR0FBRyxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsT0FBTyxHQUFHLElBQUksRUFBRSxFQUMxRSxVQUFVLFlBQVksRUFBRSxRQUFRO1lBRWhDLDZDQUE2QztZQUM3QyxNQUFNLENBQUMsRUFBRSxDQUFFLFFBQVEsQ0FBRSxHQUFHLFVBQVUsTUFBTSxFQUFFLEtBQUs7Z0JBQzlDLElBQUksU0FBUyxHQUFHLFNBQVMsQ0FBQyxNQUFNLElBQUksQ0FBRSxZQUFZLElBQUksT0FBTyxNQUFNLEtBQUssU0FBUyxDQUFFLEVBQ2xGLEtBQUssR0FBRyxZQUFZLElBQUksQ0FBRSxNQUFNLEtBQUssSUFBSSxJQUFJLEtBQUssS0FBSyxJQUFJLEdBQUcsUUFBUSxHQUFHLFFBQVEsQ0FBRSxDQUFDO2dCQUVyRixNQUFNLENBQUMsTUFBTSxDQUFFLElBQUksRUFBRSxVQUFVLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSztvQkFDL0MsSUFBSSxHQUFHLENBQUM7b0JBRVIsRUFBRSxDQUFDLENBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBRSxJQUFJLENBQUcsQ0FBQyxDQUFDLENBQUM7d0JBRS9CLDBFQUEwRTt3QkFDMUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUUsT0FBTyxDQUFFLEtBQUssQ0FBQzs0QkFDdkMsSUFBSSxDQUFFLE9BQU8sR0FBRyxJQUFJLENBQUU7NEJBQ3RCLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFFLFFBQVEsR0FBRyxJQUFJLENBQUUsQ0FBQztvQkFDbkQsQ0FBQztvQkFFRCwrQkFBK0I7b0JBQy9CLEVBQUUsQ0FBQyxDQUFFLElBQUksQ0FBQyxRQUFRLEtBQUssQ0FBRSxDQUFDLENBQUMsQ0FBQzt3QkFDM0IsR0FBRyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUM7d0JBRTNCLCtFQUErRTt3QkFDL0Usd0JBQXdCO3dCQUN4QixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FDZCxJQUFJLENBQUMsSUFBSSxDQUFFLFFBQVEsR0FBRyxJQUFJLENBQUUsRUFBRSxHQUFHLENBQUUsUUFBUSxHQUFHLElBQUksQ0FBRSxFQUNwRCxJQUFJLENBQUMsSUFBSSxDQUFFLFFBQVEsR0FBRyxJQUFJLENBQUUsRUFBRSxHQUFHLENBQUUsUUFBUSxHQUFHLElBQUksQ0FBRSxFQUNwRCxHQUFHLENBQUUsUUFBUSxHQUFHLElBQUksQ0FBRSxDQUN0QixDQUFDO29CQUNILENBQUM7b0JBRUQsTUFBTSxDQUFDLEtBQUssS0FBSyxTQUFTO3dCQUV6Qiw0RUFBNEU7d0JBQzVFLE1BQU0sQ0FBQyxHQUFHLENBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUU7d0JBRS9CLHFDQUFxQzt3QkFDckMsTUFBTSxDQUFDLEtBQUssQ0FBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUUsQ0FBQztnQkFDM0MsQ0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLEdBQUcsTUFBTSxHQUFHLFNBQVMsRUFBRSxTQUFTLENBQUUsQ0FBQztZQUN0RCxDQUFDLENBQUM7UUFDSCxDQUFDLENBQUUsQ0FBQztJQUNMLENBQUMsQ0FBRSxDQUFDO0lBRUosTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUNkLENBQUMsQ0FBRSxDQUFDIiwiZmlsZSI6Ind3dy9wYWNrcy9qcXVlcnkvc3JjL2RpbWVuc2lvbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoIFtcblx0XCIuL2NvcmVcIixcblx0XCIuL2NvcmUvYWNjZXNzXCIsXG5cdFwiLi9jc3NcIlxuXSwgZnVuY3Rpb24oIGpRdWVyeSwgYWNjZXNzICkge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcblx0XHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vICQoIHdpbmRvdyApLm91dGVyV2lkdGgvSGVpZ2h0IHJldHVybiB3L2ggaW5jbHVkaW5nIHNjcm9sbGJhcnMgKGdoLTE3MjkpXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoIFwib3V0ZXJcIiApID09PSAwID9cblx0XHRcdFx0XHRcdGVsZW1bIFwiaW5uZXJcIiArIG5hbWUgXSA6XG5cdFx0XHRcdFx0XHRlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxucmV0dXJuIGpRdWVyeTtcbn0gKTtcbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInd3dy9wYWNrcy9qcXVlcnkvc3JjL2RpbWVuc2lvbnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDO0lBQ0gsUUFBUTtJQUNSLGVBQWU7SUFDZixPQUFPO0NBQ1YsRUFBRSxVQUFVLE1BQU0sRUFBRSxNQUFNO0lBQ3ZCLFlBQVksQ0FBQztJQUNiLG9GQUFvRjtJQUNwRixNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEVBQUUsVUFBVSxJQUFJLEVBQUUsSUFBSTtRQUNsRSxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLE9BQU8sR0FBRyxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsT0FBTyxHQUFHLElBQUksRUFBRSxFQUFFLFVBQVUsWUFBWSxFQUFFLFFBQVE7WUFDeEcsNkNBQTZDO1lBQzdDLE1BQU0sQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLEdBQUcsVUFBVSxNQUFNLEVBQUUsS0FBSztnQkFDekMsSUFBSSxTQUFTLEdBQUcsU0FBUyxDQUFDLE1BQU0sSUFBSSxDQUFDLFlBQVksSUFBSSxPQUFPLE1BQU0sS0FBSyxTQUFTLENBQUMsRUFBRSxLQUFLLEdBQUcsWUFBWSxJQUFJLENBQUMsTUFBTSxLQUFLLElBQUksSUFBSSxLQUFLLEtBQUssSUFBSSxHQUFHLFFBQVEsR0FBRyxRQUFRLENBQUMsQ0FBQztnQkFDckssTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsVUFBVSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUs7b0JBQzNDLElBQUksR0FBRyxDQUFDO29CQUNSLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUN4QiwwRUFBMEU7d0JBQzFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7NEJBQ2xDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDOzRCQUNwQixJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUM7b0JBQ3ZELENBQUM7b0JBQ0QsK0JBQStCO29CQUMvQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ3RCLEdBQUcsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDO3dCQUMzQiwrRUFBK0U7d0JBQy9FLHdCQUF3Qjt3QkFDeEIsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztvQkFDOUksQ0FBQztvQkFDRCxNQUFNLENBQUMsS0FBSyxLQUFLLFNBQVM7d0JBQ3RCLDRFQUE0RTt3QkFDNUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQzt3QkFDN0IscUNBQXFDO3dCQUNyQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUMvQyxDQUFDLEVBQUUsSUFBSSxFQUFFLFNBQVMsR0FBRyxNQUFNLEdBQUcsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1lBQ3hELENBQUMsQ0FBQztRQUNOLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDSCxNQUFNLENBQUMsTUFBTSxDQUFDO0FBQ2xCLENBQUMsQ0FBQyxDQUFDO0FBRUgsbWdLQUFtZ0siLCJmaWxlIjoid3d3L3BhY2tzL2pxdWVyeS9zcmMvZGltZW5zaW9ucy5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZShbXG4gICAgXCIuL2NvcmVcIixcbiAgICBcIi4vY29yZS9hY2Nlc3NcIixcbiAgICBcIi4vY3NzXCJcbl0sIGZ1bmN0aW9uIChqUXVlcnksIGFjY2Vzcykge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIC8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xuICAgIGpRdWVyeS5lYWNoKHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uIChuYW1lLCB0eXBlKSB7XG4gICAgICAgIGpRdWVyeS5lYWNoKHsgcGFkZGluZzogXCJpbm5lclwiICsgbmFtZSwgY29udGVudDogdHlwZSwgXCJcIjogXCJvdXRlclwiICsgbmFtZSB9LCBmdW5jdGlvbiAoZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSkge1xuICAgICAgICAgICAgLy8gTWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoXG4gICAgICAgICAgICBqUXVlcnkuZm5bZnVuY05hbWVdID0gZnVuY3Rpb24gKG1hcmdpbiwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiKSwgZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjZXNzKHRoaXMsIGZ1bmN0aW9uIChlbGVtLCB0eXBlLCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZG9jO1xuICAgICAgICAgICAgICAgICAgICBpZiAoalF1ZXJ5LmlzV2luZG93KGVsZW0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAkKCB3aW5kb3cgKS5vdXRlcldpZHRoL0hlaWdodCByZXR1cm4gdy9oIGluY2x1ZGluZyBzY3JvbGxiYXJzIChnaC0xNzI5KVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoXCJvdXRlclwiKSA9PT0gMCA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbVtcImlubmVyXCIgKyBuYW1lXSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbXCJjbGllbnRcIiArIG5hbWVdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW0ubm9kZVR5cGUgPT09IDkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5tYXgoZWxlbS5ib2R5W1wic2Nyb2xsXCIgKyBuYW1lXSwgZG9jW1wic2Nyb2xsXCIgKyBuYW1lXSwgZWxlbS5ib2R5W1wib2Zmc2V0XCIgKyBuYW1lXSwgZG9jW1wib2Zmc2V0XCIgKyBuYW1lXSwgZG9jW1wiY2xpZW50XCIgKyBuYW1lXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LmNzcyhlbGVtLCB0eXBlLCBleHRyYSkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LnN0eWxlKGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSk7XG4gICAgICAgICAgICAgICAgfSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGpRdWVyeTtcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGY4O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZDNkeTl3WVdOcmN5OXFjWFZsY25rdmMzSmpMMlJwYldWdWMybHZibk11YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNUVUZCVFN4RFFVRkZPMGxCUTFBc1VVRkJVVHRKUVVOU0xHVkJRV1U3U1VGRFppeFBRVUZQTzBOQlExQXNSVUZCUlN4VlFVRlZMRTFCUVUwc1JVRkJSU3hOUVVGTk8wbEJSVE5DTEZsQlFWa3NRMEZCUXp0SlFVVmlMRzlHUVVGdlJqdEpRVU53Uml4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRkxFVkJRVVVzVFVGQlRTeEZRVUZGTEZGQlFWRXNSVUZCUlN4TFFVRkxMRVZCUVVVc1QwRkJUeXhGUVVGRkxFVkJRVVVzVlVGQlZTeEpRVUZKTEVWQlFVVXNTVUZCU1R0UlFVTjBSU3hOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZGTEVWQlFVVXNUMEZCVHl4RlFVRkZMRTlCUVU4c1IwRkJSeXhKUVVGSkxFVkJRVVVzVDBGQlR5eEZRVUZGTEVsQlFVa3NSVUZCUlN4RlFVRkZMRVZCUVVVc1QwRkJUeXhIUVVGSExFbEJRVWtzUlVGQlJTeEZRVU14UlN4VlFVRlZMRmxCUVZrc1JVRkJSU3hSUVVGUk8xbEJSV2hETERaRFFVRTJRenRaUVVNM1F5eE5RVUZOTEVOQlFVTXNSVUZCUlN4RFFVRkZMRkZCUVZFc1EwRkJSU3hIUVVGSExGVkJRVlVzVFVGQlRTeEZRVUZGTEV0QlFVczdaMEpCUXpsRExFbEJRVWtzVTBGQlV5eEhRVUZITEZOQlFWTXNRMEZCUXl4TlFVRk5MRWxCUVVrc1EwRkJSU3haUVVGWkxFbEJRVWtzVDBGQlR5eE5RVUZOTEV0QlFVc3NVMEZCVXl4RFFVRkZMRVZCUTJ4R0xFdEJRVXNzUjBGQlJ5eFpRVUZaTEVsQlFVa3NRMEZCUlN4TlFVRk5MRXRCUVVzc1NVRkJTU3hKUVVGSkxFdEJRVXNzUzBGQlN5eEpRVUZKTEVkQlFVY3NVVUZCVVN4SFFVRkhMRkZCUVZFc1EwRkJSU3hEUVVGRE8yZENRVVZ5Uml4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRkxFbEJRVWtzUlVGQlJTeFZRVUZWTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1MwRkJTenR2UWtGREwwTXNTVUZCU1N4SFFVRkhMRU5CUVVNN2IwSkJSVklzUlVGQlJTeERRVUZETEVOQlFVVXNUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJSU3hKUVVGSkxFTkJRVWNzUTBGQlF5eERRVUZETEVOQlFVTTdkMEpCUlM5Q0xEQkZRVUV3UlR0M1FrRkRNVVVzVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4UFFVRlBMRU5CUVVVc1QwRkJUeXhEUVVGRkxFdEJRVXNzUTBGQlF6czBRa0ZEZGtNc1NVRkJTU3hEUVVGRkxFOUJRVThzUjBGQlJ5eEpRVUZKTEVOQlFVVTdORUpCUTNSQ0xFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNaVUZCWlN4RFFVRkZMRkZCUVZFc1IwRkJSeXhKUVVGSkxFTkJRVVVzUTBGQlF6dHZRa0ZEYmtRc1EwRkJRenR2UWtGRlJDd3JRa0ZCSzBJN2IwSkJReTlDTEVWQlFVVXNRMEZCUXl4RFFVRkZMRWxCUVVrc1EwRkJReXhSUVVGUkxFdEJRVXNzUTBGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0M1FrRkRNMElzUjBGQlJ5eEhRVUZITEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUVVNN2QwSkJSVE5DTEN0RlFVRXJSVHQzUWtGREwwVXNkMEpCUVhkQ08zZENRVU40UWl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGRFpDeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkZMRkZCUVZFc1IwRkJSeXhKUVVGSkxFTkJRVVVzUlVGQlJTeEhRVUZITEVOQlFVVXNVVUZCVVN4SFFVRkhMRWxCUVVrc1EwRkJSU3hGUVVOd1JDeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkZMRkZCUVZFc1IwRkJSeXhKUVVGSkxFTkJRVVVzUlVGQlJTeEhRVUZITEVOQlFVVXNVVUZCVVN4SFFVRkhMRWxCUVVrc1EwRkJSU3hGUVVOd1JDeEhRVUZITEVOQlFVVXNVVUZCVVN4SFFVRkhMRWxCUVVrc1EwRkJSU3hEUVVOMFFpeERRVUZETzI5Q1FVTklMRU5CUVVNN2IwSkJSVVFzVFVGQlRTeERRVUZETEV0QlFVc3NTMEZCU3l4VFFVRlRPM2RDUVVWNlFpdzBSVUZCTkVVN2QwSkJRelZGTEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeExRVUZMTEVOQlFVVTdkMEpCUlM5Q0xIRkRRVUZ4UXp0M1FrRkRja01zVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVOQlFVVXNRMEZCUXp0blFrRkRNME1zUTBGQlF5eEZRVUZGTEVsQlFVa3NSVUZCUlN4VFFVRlRMRWRCUVVjc1RVRkJUU3hIUVVGSExGTkJRVk1zUlVGQlJTeFRRVUZUTEVOQlFVVXNRMEZCUXp0WlFVTjBSQ3hEUVVGRExFTkJRVU03VVVGRFNDeERRVUZETEVOQlFVVXNRMEZCUXp0SlFVTk1MRU5CUVVNc1EwRkJSU3hEUVVGRE8wbEJSVW9zVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXp0QlFVTmtMRU5CUVVNc1EwRkJSU3hEUVVGRElpd2labWxzWlNJNkluZDNkeTl3WVdOcmN5OXFjWFZsY25rdmMzSmpMMlJwYldWdWMybHZibk11YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SmtaV1pwYm1Vb0lGdGNibHgwWENJdUwyTnZjbVZjSWl4Y2JseDBYQ0l1TDJOdmNtVXZZV05qWlhOelhDSXNYRzVjZEZ3aUxpOWpjM05jSWx4dVhTd2dablZ1WTNScGIyNG9JR3BSZFdWeWVTd2dZV05qWlhOeklDa2dlMXh1WEc1Y0luVnpaU0J6ZEhKcFkzUmNJanRjYmx4dUx5OGdRM0psWVhSbElHbHVibVZ5U0dWcFoyaDBMQ0JwYm01bGNsZHBaSFJvTENCb1pXbG5hSFFzSUhkcFpIUm9MQ0J2ZFhSbGNraGxhV2RvZENCaGJtUWdiM1YwWlhKWGFXUjBhQ0J0WlhSb2IyUnpYRzVxVVhWbGNua3VaV0ZqYUNnZ2V5QklaV2xuYUhRNklGd2lhR1ZwWjJoMFhDSXNJRmRwWkhSb09pQmNJbmRwWkhSb1hDSWdmU3dnWm5WdVkzUnBiMjRvSUc1aGJXVXNJSFI1Y0dVZ0tTQjdYRzVjZEdwUmRXVnllUzVsWVdOb0tDQjdJSEJoWkdScGJtYzZJRndpYVc1dVpYSmNJaUFySUc1aGJXVXNJR052Ym5SbGJuUTZJSFI1Y0dVc0lGd2lYQ0k2SUZ3aWIzVjBaWEpjSWlBcklHNWhiV1VnZlN4Y2JseDBYSFJtZFc1amRHbHZiaWdnWkdWbVlYVnNkRVY0ZEhKaExDQm1kVzVqVG1GdFpTQXBJSHRjYmx4dVhIUmNkQzh2SUUxaGNtZHBiaUJwY3lCdmJteDVJR1p2Y2lCdmRYUmxja2hsYVdkb2RDd2diM1YwWlhKWGFXUjBhRnh1WEhSY2RHcFJkV1Z5ZVM1bWJsc2dablZ1WTA1aGJXVWdYU0E5SUdaMWJtTjBhVzl1S0NCdFlYSm5hVzRzSUhaaGJIVmxJQ2tnZTF4dVhIUmNkRngwZG1GeUlHTm9ZV2x1WVdKc1pTQTlJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dKaVlnS0NCa1pXWmhkV3gwUlhoMGNtRWdmSHdnZEhsd1pXOW1JRzFoY21kcGJpQWhQVDBnWENKaWIyOXNaV0Z1WENJZ0tTeGNibHgwWEhSY2RGeDBaWGgwY21FZ1BTQmtaV1poZFd4MFJYaDBjbUVnZkh3Z0tDQnRZWEpuYVc0Z1BUMDlJSFJ5ZFdVZ2ZId2dkbUZzZFdVZ1BUMDlJSFJ5ZFdVZ1B5QmNJbTFoY21kcGJsd2lJRG9nWENKaWIzSmtaWEpjSWlBcE8xeHVYRzVjZEZ4MFhIUnlaWFIxY200Z1lXTmpaWE56S0NCMGFHbHpMQ0JtZFc1amRHbHZiaWdnWld4bGJTd2dkSGx3WlN3Z2RtRnNkV1VnS1NCN1hHNWNkRngwWEhSY2RIWmhjaUJrYjJNN1hHNWNibHgwWEhSY2RGeDBhV1lnS0NCcVVYVmxjbmt1YVhOWGFXNWtiM2NvSUdWc1pXMGdLU0FwSUh0Y2JseHVYSFJjZEZ4MFhIUmNkQzh2SUNRb0lIZHBibVJ2ZHlBcExtOTFkR1Z5VjJsa2RHZ3ZTR1ZwWjJoMElISmxkSFZ5YmlCM0wyZ2dhVzVqYkhWa2FXNW5JSE5qY205c2JHSmhjbk1nS0dkb0xURTNNamtwWEc1Y2RGeDBYSFJjZEZ4MGNtVjBkWEp1SUdaMWJtTk9ZVzFsTG1sdVpHVjRUMllvSUZ3aWIzVjBaWEpjSWlBcElEMDlQU0F3SUQ5Y2JseDBYSFJjZEZ4MFhIUmNkR1ZzWlcxYklGd2lhVzV1WlhKY0lpQXJJRzVoYldVZ1hTQTZYRzVjZEZ4MFhIUmNkRngwWEhSbGJHVnRMbVJ2WTNWdFpXNTBMbVJ2WTNWdFpXNTBSV3hsYldWdWRGc2dYQ0pqYkdsbGJuUmNJaUFySUc1aGJXVWdYVHRjYmx4MFhIUmNkRngwZlZ4dVhHNWNkRngwWEhSY2RDOHZJRWRsZENCa2IyTjFiV1Z1ZENCM2FXUjBhQ0J2Y2lCb1pXbG5hSFJjYmx4MFhIUmNkRngwYVdZZ0tDQmxiR1Z0TG01dlpHVlVlWEJsSUQwOVBTQTVJQ2tnZTF4dVhIUmNkRngwWEhSY2RHUnZZeUE5SUdWc1pXMHVaRzlqZFcxbGJuUkZiR1Z0Wlc1ME8xeHVYRzVjZEZ4MFhIUmNkRngwTHk4Z1JXbDBhR1Z5SUhOamNtOXNiRnRYYVdSMGFDOUlaV2xuYUhSZElHOXlJRzltWm5ObGRGdFhhV1IwYUM5SVpXbG5hSFJkSUc5eUlHTnNhV1Z1ZEZ0WGFXUjBhQzlJWldsbmFIUmRMRnh1WEhSY2RGeDBYSFJjZEM4dklIZG9hV05vWlhabGNpQnBjeUJuY21WaGRHVnpkRnh1WEhSY2RGeDBYSFJjZEhKbGRIVnliaUJOWVhSb0xtMWhlQ2hjYmx4MFhIUmNkRngwWEhSY2RHVnNaVzB1WW05a2VWc2dYQ0p6WTNKdmJHeGNJaUFySUc1aGJXVWdYU3dnWkc5ald5QmNJbk5qY205c2JGd2lJQ3NnYm1GdFpTQmRMRnh1WEhSY2RGeDBYSFJjZEZ4MFpXeGxiUzVpYjJSNVd5QmNJbTltWm5ObGRGd2lJQ3NnYm1GdFpTQmRMQ0JrYjJOYklGd2liMlptYzJWMFhDSWdLeUJ1WVcxbElGMHNYRzVjZEZ4MFhIUmNkRngwWEhSa2IyTmJJRndpWTJ4cFpXNTBYQ0lnS3lCdVlXMWxJRjFjYmx4MFhIUmNkRngwWEhRcE8xeHVYSFJjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkRngwY21WMGRYSnVJSFpoYkhWbElEMDlQU0IxYm1SbFptbHVaV1FnUDF4dVhHNWNkRngwWEhSY2RGeDBMeThnUjJWMElIZHBaSFJvSUc5eUlHaGxhV2RvZENCdmJpQjBhR1VnWld4bGJXVnVkQ3dnY21WeGRXVnpkR2x1WnlCaWRYUWdibTkwSUdadmNtTnBibWNnY0dGeWMyVkdiRzloZEZ4dVhIUmNkRngwWEhSY2RHcFJkV1Z5ZVM1amMzTW9JR1ZzWlcwc0lIUjVjR1VzSUdWNGRISmhJQ2tnT2x4dVhHNWNkRngwWEhSY2RGeDBMeThnVTJWMElIZHBaSFJvSUc5eUlHaGxhV2RvZENCdmJpQjBhR1VnWld4bGJXVnVkRnh1WEhSY2RGeDBYSFJjZEdwUmRXVnllUzV6ZEhsc1pTZ2daV3hsYlN3Z2RIbHdaU3dnZG1Gc2RXVXNJR1Y0ZEhKaElDazdYRzVjZEZ4MFhIUjlMQ0IwZVhCbExDQmphR0ZwYm1GaWJHVWdQeUJ0WVhKbmFXNGdPaUIxYm1SbFptbHVaV1FzSUdOb1lXbHVZV0pzWlNBcE8xeHVYSFJjZEgwN1hHNWNkSDBnS1R0Y2JuMGdLVHRjYmx4dWNtVjBkWEp1SUdwUmRXVnllVHRjYm4wZ0tUdGNiaUpkZlE9PVxuIl19

//# sourceMappingURL=data:application/json;charset=utf8;base64,
