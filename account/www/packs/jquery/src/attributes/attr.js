define([
    "../core",
    "../core/access",
    "../core/nodeName",
    "./support",
    "../var/rnothtmlwhite",
    "../selector"
], function (jQuery, access, nodeName, support, rnothtmlwhite) {
    "use strict";
    var boolHook, attrHandle = jQuery.expr.attrHandle;
    jQuery.fn.extend({
        attr: function (name, value) {
            return access(this, jQuery.attr, name, value, arguments.length > 1);
        },
        removeAttr: function (name) {
            return this.each(function () {
                jQuery.removeAttr(this, name);
            });
        }
    });
    jQuery.extend({
        attr: function (elem, name, value) {
            var ret, hooks, nType = elem.nodeType;
            // Don't get/set attributes on text, comment and attribute nodes
            if (nType === 3 || nType === 8 || nType === 2) {
                return;
            }
            // Fallback to prop when attributes are not supported
            if (typeof elem.getAttribute === "undefined") {
                return jQuery.prop(elem, name, value);
            }
            // Attribute hooks are determined by the lowercase version
            // Grab necessary hook if one is defined
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                hooks = jQuery.attrHooks[name.toLowerCase()] ||
                    (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
            }
            if (value !== undefined) {
                if (value === null) {
                    jQuery.removeAttr(elem, name);
                    return;
                }
                if (hooks && "set" in hooks &&
                    (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;
                }
                elem.setAttribute(name, value + "");
                return value;
            }
            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
                return ret;
            }
            ret = jQuery.find.attr(elem, name);
            // Non-existent attributes return null, we normalize to undefined
            return ret == null ? undefined : ret;
        },
        attrHooks: {
            type: {
                set: function (elem, value) {
                    if (!support.radioValue && value === "radio" &&
                        nodeName(elem, "input")) {
                        var val = elem.value;
                        elem.setAttribute("type", value);
                        if (val) {
                            elem.value = val;
                        }
                        return value;
                    }
                }
            }
        },
        removeAttr: function (elem, value) {
            var name, i = 0, 
            // Attribute names can contain non-HTML whitespace characters
            // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
            attrNames = value && value.match(rnothtmlwhite);
            if (attrNames && elem.nodeType === 1) {
                while ((name = attrNames[i++])) {
                    elem.removeAttribute(name);
                }
            }
        }
    });
    // Hooks for boolean attributes
    boolHook = {
        set: function (elem, value, name) {
            if (value === false) {
                // Remove boolean attributes when set to false
                jQuery.removeAttr(elem, name);
            }
            else {
                elem.setAttribute(name, name);
            }
            return name;
        }
    };
    jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
        var getter = attrHandle[name] || jQuery.find.attr;
        attrHandle[name] = function (elem, name, isXML) {
            var ret, handle, lowercaseName = name.toLowerCase();
            if (!isXML) {
                // Avoid an infinite loop by temporarily removing this function from the getter
                handle = attrHandle[lowercaseName];
                attrHandle[lowercaseName] = ret;
                ret = getter(elem, name, isXML) != null ?
                    lowercaseName :
                    null;
                attrHandle[lowercaseName] = handle;
            }
            return ret;
        };
    });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInd3dy9wYWNrcy9qcXVlcnkvc3JjL2F0dHJpYnV0ZXMvYXR0ci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUM7SUFDSCxTQUFTO0lBQ1QsZ0JBQWdCO0lBQ2hCLGtCQUFrQjtJQUNsQixXQUFXO0lBQ1gsc0JBQXNCO0lBQ3RCLGFBQWE7Q0FDaEIsRUFBRSxVQUFVLE1BQU0sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxhQUFhO0lBQ3pELFlBQVksQ0FBQztJQUNiLElBQUksUUFBUSxFQUFFLFVBQVUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUNsRCxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQztRQUNiLElBQUksRUFBRSxVQUFVLElBQUksRUFBRSxLQUFLO1lBQ3ZCLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3hFLENBQUM7UUFDRCxVQUFVLEVBQUUsVUFBVSxJQUFJO1lBQ3RCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO2dCQUNiLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ2xDLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQztLQUNKLENBQUMsQ0FBQztJQUNILE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDVixJQUFJLEVBQUUsVUFBVSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUs7WUFDN0IsSUFBSSxHQUFHLEVBQUUsS0FBSyxFQUFFLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1lBQ3RDLGdFQUFnRTtZQUNoRSxFQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQyxJQUFJLEtBQUssS0FBSyxDQUFDLElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JB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QUFJLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDcEQsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNULCtFQUErRTtnQkFDL0UsTUFBTSxHQUFHLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztnQkFDbkMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEdBQUcsQ0FBQztnQkFDaEMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLElBQUk7b0JBQ25DLGFBQWE7b0JBQ2IsSUFBSSxDQUFDO2dCQUNULFVBQVUsQ0FBQyxhQUFhLENBQUMsR0FBRyxNQUFNLENBQUM7WUFDdkMsQ0FBQztZQUNELE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFDZixDQUFDLENBQUM7SUFDTixDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ0gsdXFVQUF1cVU7QUFFdnFVLDJyeEJBQTJyeEIiLCJmaWxlIjoid3d3L3BhY2tzL2pxdWVyeS9zcmMvYXR0cmlidXRlcy9hdHRyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKFtcbiAgICBcIi4uL2NvcmVcIixcbiAgICBcIi4uL2NvcmUvYWNjZXNzXCIsXG4gICAgXCIuLi9jb3JlL25vZGVOYW1lXCIsXG4gICAgXCIuL3N1cHBvcnRcIixcbiAgICBcIi4uL3Zhci9ybm90aHRtbHdoaXRlXCIsXG4gICAgXCIuLi9zZWxlY3RvclwiXG5dLCBmdW5jdGlvbiAoalF1ZXJ5LCBhY2Nlc3MsIG5vZGVOYW1lLCBzdXBwb3J0LCBybm90aHRtbHdoaXRlKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgdmFyIGJvb2xIb29rLCBhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcbiAgICBqUXVlcnkuZm4uZXh0ZW5kKHtcbiAgICAgICAgYXR0cjogZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gYWNjZXNzKHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEpO1xuICAgICAgICB9LFxuICAgICAgICByZW1vdmVBdHRyOiBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgalF1ZXJ5LnJlbW92ZUF0dHIodGhpcywgbmFtZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGpRdWVyeS5leHRlbmQoe1xuICAgICAgICBhdHRyOiBmdW5jdGlvbiAoZWxlbSwgbmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgIHZhciByZXQsIGhvb2tzLCBuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG4gICAgICAgICAgICAvLyBEb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG4gICAgICAgICAgICBpZiAoblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuICAgICAgICAgICAgaWYgKHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBqUXVlcnkucHJvcChlbGVtLCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBBdHRyaWJ1dGUgaG9va3MgYXJlIGRldGVybWluZWQgYnkgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uXG4gICAgICAgICAgICAvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG4gICAgICAgICAgICBpZiAoblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyhlbGVtKSkge1xuICAgICAgICAgICAgICAgIGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1tuYW1lLnRvTG93ZXJDYXNlKCldIHx8XG4gICAgICAgICAgICAgICAgICAgIChqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QobmFtZSkgPyBib29sSG9vayA6IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBqUXVlcnkucmVtb3ZlQXR0cihlbGVtLCBuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuICAgICAgICAgICAgICAgICAgICAocmV0ID0gaG9va3Muc2V0KGVsZW0sIHZhbHVlLCBuYW1lKSkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbGVtLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSArIFwiXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5nZXQoZWxlbSwgbmFtZSkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldCA9IGpRdWVyeS5maW5kLmF0dHIoZWxlbSwgbmFtZSk7XG4gICAgICAgICAgICAvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuICAgICAgICAgICAgcmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuICAgICAgICB9LFxuICAgICAgICBhdHRySG9va3M6IHtcbiAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChlbGVtLCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlTmFtZShlbGVtLCBcImlucHV0XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gZWxlbS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW0uc2V0QXR0cmlidXRlKFwidHlwZVwiLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS52YWx1ZSA9IHZhbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlQXR0cjogZnVuY3Rpb24gKGVsZW0sIHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgbmFtZSwgaSA9IDAsIFxuICAgICAgICAgICAgLy8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuICAgICAgICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG4gICAgICAgICAgICBhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaChybm90aHRtbHdoaXRlKTtcbiAgICAgICAgICAgIGlmIChhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHdoaWxlICgobmFtZSA9IGF0dHJOYW1lc1tpKytdKSkge1xuICAgICAgICAgICAgICAgICAgICBlbGVtLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG4gICAgYm9vbEhvb2sgPSB7XG4gICAgICAgIHNldDogZnVuY3Rpb24gKGVsZW0sIHZhbHVlLCBuYW1lKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuICAgICAgICAgICAgICAgIGpRdWVyeS5yZW1vdmVBdHRyKGVsZW0sIG5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZWxlbS5zZXRBdHRyaWJ1dGUobmFtZSwgbmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmFtZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgalF1ZXJ5LmVhY2goalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goL1xcdysvZyksIGZ1bmN0aW9uIChpLCBuYW1lKSB7XG4gICAgICAgIHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlW25hbWVdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG4gICAgICAgIGF0dHJIYW5kbGVbbmFtZV0gPSBmdW5jdGlvbiAoZWxlbSwgbmFtZSwgaXNYTUwpIHtcbiAgICAgICAgICAgIHZhciByZXQsIGhhbmRsZSwgbG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGlmICghaXNYTUwpIHtcbiAgICAgICAgICAgICAgICAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG4gICAgICAgICAgICAgICAgaGFuZGxlID0gYXR0ckhhbmRsZVtsb3dlcmNhc2VOYW1lXTtcbiAgICAgICAgICAgICAgICBhdHRySGFuZGxlW2xvd2VyY2FzZU5hbWVdID0gcmV0O1xuICAgICAgICAgICAgICAgIHJldCA9IGdldHRlcihlbGVtLCBuYW1lLCBpc1hNTCkgIT0gbnVsbCA/XG4gICAgICAgICAgICAgICAgICAgIGxvd2VyY2FzZU5hbWUgOlxuICAgICAgICAgICAgICAgICAgICBudWxsO1xuICAgICAgICAgICAgICAgIGF0dHJIYW5kbGVbbG93ZXJjYXNlTmFtZV0gPSBoYW5kbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9O1xuICAgIH0pO1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGY4O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZDNkeTl3WVdOcmN5OXFjWFZsY25rdmMzSmpMMkYwZEhKcFluVjBaWE12WVhSMGNpNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4TlFVRk5MRU5CUVVVN1NVRkRVQ3hUUVVGVE8wbEJRMVFzWjBKQlFXZENPMGxCUTJoQ0xHdENRVUZyUWp0SlFVTnNRaXhYUVVGWE8wbEJRMWdzYzBKQlFYTkNPMGxCUTNSQ0xHRkJRV0U3UTBGRFlpeEZRVUZGTEZWQlFWVXNUVUZCVFN4RlFVRkZMRTFCUVUwc1JVRkJSU3hSUVVGUkxFVkJRVVVzVDBGQlR5eEZRVUZGTEdGQlFXRTdTVUZGTjBRc1dVRkJXU3hEUVVGRE8wbEJSV0lzU1VGQlNTeFJRVUZSTEVWQlExZ3NWVUZCVlN4SFFVRkhMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETzBsQlJYSkRMRTFCUVUwc1EwRkJReXhGUVVGRkxFTkJRVU1zVFVGQlRTeERRVUZGTzFGQlEycENMRWxCUVVrc1JVRkJSU3hWUVVGVkxFbEJRVWtzUlVGQlJTeExRVUZMTzFsQlF6RkNMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVVVzU1VGQlNTeEZRVUZGTEUxQlFVMHNRMEZCUXl4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFdEJRVXNzUlVGQlJTeFRRVUZUTEVOQlFVTXNUVUZCVFN4SFFVRkhMRU5CUVVNc1EwRkJSU3hEUVVGRE8xRkJRM1pGTEVOQlFVTTdVVUZGUkN4VlFVRlZMRVZCUVVVc1ZVRkJWU3hKUVVGSk8xbEJRM3BDTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRk8yZENRVU5xUWl4TlFVRk5MRU5CUVVNc1ZVRkJWU3hEUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVOQlFVVXNRMEZCUXp0WlFVTnFReXhEUVVGRExFTkJRVVVzUTBGQlF6dFJRVU5NTEVOQlFVTTdTMEZEUkN4RFFVRkZMRU5CUVVNN1NVRkZTaXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZGTzFGQlEyUXNTVUZCU1N4RlFVRkZMRlZCUVZVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeExRVUZMTzFsQlEyaERMRWxCUVVrc1IwRkJSeXhGUVVGRkxFdEJRVXNzUlVGRFlpeExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJRenRaUVVWMlFpeG5SVUZCWjBVN1dVRkRhRVVzUlVGQlJTeERRVUZETEVOQlFVVXNTMEZCU3l4TFFVRkxMRU5CUVVNc1NVRkJTU3hMUVVGTExFdEJRVXNzUTBGQlF5eEpRVUZKTEV0QlFVc3NTMEZCU3l4RFFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8yZENRVU5xUkN4TlFVRk5MRU5CUVVNN1dVRkRVaXhEUVVGRE8xbEJSVVFzY1VSQlFYRkVPMWxCUTNKRUxFVkJRVVVzUTBGQlF5eERRVUZGTEU5QlFVOHNTVUZCU1N4RFFVRkRMRmxCUVZrc1MwRkJTeXhYUVVGWkxFTkJRVU1zUTBGQlF5eERRVUZETzJkQ1FVTm9SQ3hOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFdEJRVXNzUTBGQlJTeERRVUZETzFsQlEzcERMRU5CUVVNN1dVRkZSQ3d3UkVGQk1FUTdXVUZETVVRc2QwTkJRWGRETzFsQlEzaERMRVZCUVVVc1EwRkJReXhEUVVGRkxFdEJRVXNzUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRkxFbEJRVWtzUTBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkRMME1zUzBGQlN5eEhRVUZITEUxQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVVc1NVRkJTU3hEUVVGRExGZEJRVmNzUlVGQlJTeERRVUZGTzI5Q1FVTTNReXhEUVVGRkxFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVVVzU1VGQlNTeERRVUZGTEVkQlFVY3NVVUZCVVN4SFFVRkhMRk5CUVZNc1EwRkJSU3hEUVVGRE8xbEJRMnBGTEVOQlFVTTdXVUZGUkN4RlFVRkZMRU5CUVVNc1EwRkJSU3hMUVVGTExFdEJRVXNzVTBGQlZTeERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkRNMElzUlVGQlJTeERRVUZETEVOQlFVVXNTMEZCU3l4TFFVRkxMRWxCUVVzc1EwRkJReXhEUVVGRExFTkJRVU03YjBKQlEzUkNMRTFCUVUwc1EwRkJReXhWUVVGVkxFTkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUlN4RFFVRkRPMjlDUVVOb1F5eE5RVUZOTEVOQlFVTTdaMEpCUTFJc1EwRkJRenRuUWtGRlJDeEZRVUZGTEVOQlFVTXNRMEZCUlN4TFFVRkxMRWxCUVVrc1MwRkJTeXhKUVVGSkxFdEJRVXM3YjBKQlF6TkNMRU5CUVVVc1IwRkJSeXhIUVVGSExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVVXNTVUZCU1N4RlFVRkZMRXRCUVVzc1JVRkJSU3hKUVVGSkxFTkJRVVVzUTBGQlJTeExRVUZMTEZOQlFWVXNRMEZCUXl4RFFVRkRMRU5CUVVNN2IwSkJRekZFTEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNN1owSkJRMW9zUTBGQlF6dG5Ra0ZGUkN4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRkxFbEJRVWtzUlVGQlJTeExRVUZMTEVkQlFVY3NSVUZCUlN4RFFVRkZMRU5CUVVNN1owSkJRM1JETEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNN1dVRkRaQ3hEUVVGRE8xbEJSVVFzUlVGQlJTeERRVUZETEVOQlFVVXNTMEZCU3l4SlFVRkpMRXRCUVVzc1NVRkJTU3hMUVVGTExFbEJRVWtzUTBGQlJTeEhRVUZITEVkQlFVY3NTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZGTEVOQlFVVXNTMEZCU3l4SlFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRE8yZENRVU0zUlN4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRE8xbEJRMW9zUTBGQlF6dFpRVVZFTEVkQlFVY3NSMEZCUnl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RFFVRkZMRU5CUVVNN1dVRkZja01zYVVWQlFXbEZPMWxCUTJwRkxFMUJRVTBzUTBGQlF5eEhRVUZITEVsQlFVa3NTVUZCU1N4SFFVRkhMRk5CUVZNc1IwRkJSeXhIUVVGSExFTkJRVU03VVVGRGRFTXNRMEZCUXp0UlFVVkVMRk5CUVZNc1JVRkJSVHRaUVVOV0xFbEJRVWtzUlVGQlJUdG5Ra0ZEVEN4SFFVRkhMRVZCUVVVc1ZVRkJWU3hKUVVGSkxFVkJRVVVzUzBGQlN6dHZRa0ZEZWtJc1JVRkJSU3hEUVVGRExFTkJRVVVzUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCVlN4SlFVRkpMRXRCUVVzc1MwRkJTeXhQUVVGUE8zZENRVU0xUXl4UlFVRlJMRU5CUVVVc1NVRkJTU3hGUVVGRkxFOUJRVThzUTBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXp0M1FrRkROMElzU1VGQlNTeEhRVUZITEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJRenQzUWtGRGNrSXNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJSU3hOUVVGTkxFVkJRVVVzUzBGQlN5eERRVUZGTEVOQlFVTTdkMEpCUTI1RExFVkJRVVVzUTBGQlF5eERRVUZGTEVkQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNN05FSkJRMWdzU1VGQlNTeERRVUZETEV0QlFVc3NSMEZCUnl4SFFVRkhMRU5CUVVNN2QwSkJRMnhDTEVOQlFVTTdkMEpCUTBRc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF6dHZRa0ZEWkN4RFFVRkRPMmRDUVVOR0xFTkJRVU03WVVGRFJEdFRRVU5FTzFGQlJVUXNWVUZCVlN4RlFVRkZMRlZCUVZVc1NVRkJTU3hGUVVGRkxFdEJRVXM3V1VGRGFFTXNTVUZCU1N4SlFVRkpMRVZCUTFBc1EwRkJReXhIUVVGSExFTkJRVU03V1VGRlRDdzJSRUZCTmtRN1dVRkROMFFzYTBWQlFXdEZPMWxCUTJ4RkxGTkJRVk1zUjBGQlJ5eExRVUZMTEVsQlFVa3NTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJSU3hoUVVGaExFTkJRVVVzUTBGQlF6dFpRVVZ1UkN4RlFVRkZMRU5CUVVNc1EwRkJSU3hUUVVGVExFbEJRVWtzU1VGQlNTeERRVUZETEZGQlFWRXNTMEZCU3l4RFFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8yZENRVU40UXl4UFFVRlJMRU5CUVVVc1NVRkJTU3hIUVVGSExGTkJRVk1zUTBGQlJTeERRVUZETEVWQlFVVXNRMEZCUlN4RFFVRkZMRVZCUVVjc1EwRkJRenR2UWtGRGRFTXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1EwRkJSU3hKUVVGSkxFTkJRVVVzUTBGQlF6dG5Ra0ZET1VJc1EwRkJRenRaUVVOR0xFTkJRVU03VVVGRFJpeERRVUZETzB0QlEwUXNRMEZCUlN4RFFVRkRPMGxCUlVvc0swSkJRU3RDTzBsQlF5OUNMRkZCUVZFc1IwRkJSenRSUVVOV0xFZEJRVWNzUlVGQlJTeFZRVUZWTEVsQlFVa3NSVUZCUlN4TFFVRkxMRVZCUVVVc1NVRkJTVHRaUVVNdlFpeEZRVUZGTEVOQlFVTXNRMEZCUlN4TFFVRkxMRXRCUVVzc1MwRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF6dG5Ra0ZGZGtJc09FTkJRVGhETzJkQ1FVTTVReXhOUVVGTkxFTkJRVU1zVlVGQlZTeERRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVVc1EwRkJRenRaUVVOcVF5eERRVUZETzFsQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1owSkJRMUFzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hEUVVGRkxFTkJRVU03V1VGRGFrTXNRMEZCUXp0WlFVTkVMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU03VVVGRFlpeERRVUZETzB0QlEwUXNRMEZCUXp0SlFVVkdMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVVVzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVVXNUVUZCVFN4RFFVRkZMRVZCUVVVc1ZVRkJWU3hEUVVGRExFVkJRVVVzU1VGQlNUdFJRVU0xUlN4SlFVRkpMRTFCUVUwc1IwRkJSeXhWUVVGVkxFTkJRVVVzU1VGQlNTeERRVUZGTEVsQlFVa3NUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU03VVVGRmNFUXNWVUZCVlN4RFFVRkZMRWxCUVVrc1EwRkJSU3hIUVVGSExGVkJRVlVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4TFFVRkxPMWxCUXk5RExFbEJRVWtzUjBGQlJ5eEZRVUZGTEUxQlFVMHNSVUZEWkN4aFFVRmhMRWRCUVVjc1NVRkJTU3hEUVVGRExGZEJRVmNzUlVGQlJTeERRVUZETzFsQlJYQkRMRVZCUVVVc1EwRkJReXhEUVVGRkxFTkJRVU1zUzBGQlRTeERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkZaQ3dyUlVGQkswVTdaMEpCUXk5RkxFMUJRVTBzUjBGQlJ5eFZRVUZWTEVOQlFVVXNZVUZCWVN4RFFVRkZMRU5CUVVNN1owSkJRM0pETEZWQlFWVXNRMEZCUlN4aFFVRmhMRU5CUVVVc1IwRkJSeXhIUVVGSExFTkJRVU03WjBKQlEyeERMRWRCUVVjc1IwRkJSeXhOUVVGTkxFTkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4TFFVRkxMRU5CUVVVc1NVRkJTU3hKUVVGSk8yOUNRVU40UXl4aFFVRmhPMjlDUVVOaUxFbEJRVWtzUTBGQlF6dG5Ra0ZEVGl4VlFVRlZMRU5CUVVVc1lVRkJZU3hEUVVGRkxFZEJRVWNzVFVGQlRTeERRVUZETzFsQlEzUkRMRU5CUVVNN1dVRkRSQ3hOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETzFGQlExb3NRMEZCUXl4RFFVRkRPMGxCUTBnc1EwRkJReXhEUVVGRkxFTkJRVU03UVVGRlNpeERRVUZETEVOQlFVVXNRMEZCUXlJc0ltWnBiR1VpT2lKM2QzY3ZjR0ZqYTNNdmFuRjFaWEo1TDNOeVl5OWhkSFJ5YVdKMWRHVnpMMkYwZEhJdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUprWldacGJtVW9JRnRjYmx4MFhDSXVMaTlqYjNKbFhDSXNYRzVjZEZ3aUxpNHZZMjl5WlM5aFkyTmxjM05jSWl4Y2JseDBYQ0l1TGk5amIzSmxMMjV2WkdWT1lXMWxYQ0lzWEc1Y2RGd2lMaTl6ZFhCd2IzSjBYQ0lzWEc1Y2RGd2lMaTR2ZG1GeUwzSnViM1JvZEcxc2QyaHBkR1ZjSWl4Y2JseDBYQ0l1TGk5elpXeGxZM1J2Y2x3aVhHNWRMQ0JtZFc1amRHbHZiaWdnYWxGMVpYSjVMQ0JoWTJObGMzTXNJRzV2WkdWT1lXMWxMQ0J6ZFhCd2IzSjBMQ0J5Ym05MGFIUnRiSGRvYVhSbElDa2dlMXh1WEc1Y0luVnpaU0J6ZEhKcFkzUmNJanRjYmx4dWRtRnlJR0p2YjJ4SWIyOXJMRnh1WEhSaGRIUnlTR0Z1Wkd4bElEMGdhbEYxWlhKNUxtVjRjSEl1WVhSMGNraGhibVJzWlR0Y2JseHVhbEYxWlhKNUxtWnVMbVY0ZEdWdVpDZ2dlMXh1WEhSaGRIUnlPaUJtZFc1amRHbHZiaWdnYm1GdFpTd2dkbUZzZFdVZ0tTQjdYRzVjZEZ4MGNtVjBkWEp1SUdGalkyVnpjeWdnZEdocGN5d2dhbEYxWlhKNUxtRjBkSElzSUc1aGJXVXNJSFpoYkhWbExDQmhjbWQxYldWdWRITXViR1Z1WjNSb0lENGdNU0FwTzF4dVhIUjlMRnh1WEc1Y2RISmxiVzkyWlVGMGRISTZJR1oxYm1OMGFXOXVLQ0J1WVcxbElDa2dlMXh1WEhSY2RISmxkSFZ5YmlCMGFHbHpMbVZoWTJnb0lHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RGeDBhbEYxWlhKNUxuSmxiVzkyWlVGMGRISW9JSFJvYVhNc0lHNWhiV1VnS1R0Y2JseDBYSFI5SUNrN1hHNWNkSDFjYm4wZ0tUdGNibHh1YWxGMVpYSjVMbVY0ZEdWdVpDZ2dlMXh1WEhSaGRIUnlPaUJtZFc1amRHbHZiaWdnWld4bGJTd2dibUZ0WlN3Z2RtRnNkV1VnS1NCN1hHNWNkRngwZG1GeUlISmxkQ3dnYUc5dmEzTXNYRzVjZEZ4MFhIUnVWSGx3WlNBOUlHVnNaVzB1Ym05a1pWUjVjR1U3WEc1Y2JseDBYSFF2THlCRWIyNG5kQ0JuWlhRdmMyVjBJR0YwZEhKcFluVjBaWE1nYjI0Z2RHVjRkQ3dnWTI5dGJXVnVkQ0JoYm1RZ1lYUjBjbWxpZFhSbElHNXZaR1Z6WEc1Y2RGeDBhV1lnS0NCdVZIbHdaU0E5UFQwZ015QjhmQ0J1Vkhsd1pTQTlQVDBnT0NCOGZDQnVWSGx3WlNBOVBUMGdNaUFwSUh0Y2JseDBYSFJjZEhKbGRIVnlianRjYmx4MFhIUjlYRzVjYmx4MFhIUXZMeUJHWVd4c1ltRmpheUIwYnlCd2NtOXdJSGRvWlc0Z1lYUjBjbWxpZFhSbGN5QmhjbVVnYm05MElITjFjSEJ2Y25SbFpGeHVYSFJjZEdsbUlDZ2dkSGx3Wlc5bUlHVnNaVzB1WjJWMFFYUjBjbWxpZFhSbElEMDlQU0JjSW5WdVpHVm1hVzVsWkZ3aUlDa2dlMXh1WEhSY2RGeDBjbVYwZFhKdUlHcFJkV1Z5ZVM1d2NtOXdLQ0JsYkdWdExDQnVZVzFsTENCMllXeDFaU0FwTzF4dVhIUmNkSDFjYmx4dVhIUmNkQzh2SUVGMGRISnBZblYwWlNCb2IyOXJjeUJoY21VZ1pHVjBaWEp0YVc1bFpDQmllU0IwYUdVZ2JHOTNaWEpqWVhObElIWmxjbk5wYjI1Y2JseDBYSFF2THlCSGNtRmlJRzVsWTJWemMyRnllU0JvYjI5cklHbG1JRzl1WlNCcGN5QmtaV1pwYm1Wa1hHNWNkRngwYVdZZ0tDQnVWSGx3WlNBaFBUMGdNU0I4ZkNBaGFsRjFaWEo1TG1seldFMU1SRzlqS0NCbGJHVnRJQ2tnS1NCN1hHNWNkRngwWEhSb2IyOXJjeUE5SUdwUmRXVnllUzVoZEhSeVNHOXZhM05iSUc1aGJXVXVkRzlNYjNkbGNrTmhjMlVvS1NCZElIeDhYRzVjZEZ4MFhIUmNkQ2dnYWxGMVpYSjVMbVY0Y0hJdWJXRjBZMmd1WW05dmJDNTBaWE4wS0NCdVlXMWxJQ2tnUHlCaWIyOXNTRzl2YXlBNklIVnVaR1ZtYVc1bFpDQXBPMXh1WEhSY2RIMWNibHh1WEhSY2RHbG1JQ2dnZG1Gc2RXVWdJVDA5SUhWdVpHVm1hVzVsWkNBcElIdGNibHgwWEhSY2RHbG1JQ2dnZG1Gc2RXVWdQVDA5SUc1MWJHd2dLU0I3WEc1Y2RGeDBYSFJjZEdwUmRXVnllUzV5WlcxdmRtVkJkSFJ5S0NCbGJHVnRMQ0J1WVcxbElDazdYRzVjZEZ4MFhIUmNkSEpsZEhWeWJqdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBhV1lnS0NCb2IyOXJjeUFtSmlCY0luTmxkRndpSUdsdUlHaHZiMnR6SUNZbVhHNWNkRngwWEhSY2RDZ2djbVYwSUQwZ2FHOXZhM011YzJWMEtDQmxiR1Z0TENCMllXeDFaU3dnYm1GdFpTQXBJQ2tnSVQwOUlIVnVaR1ZtYVc1bFpDQXBJSHRjYmx4MFhIUmNkRngwY21WMGRYSnVJSEpsZER0Y2JseDBYSFJjZEgxY2JseHVYSFJjZEZ4MFpXeGxiUzV6WlhSQmRIUnlhV0oxZEdVb0lHNWhiV1VzSUhaaGJIVmxJQ3NnWENKY0lpQXBPMXh1WEhSY2RGeDBjbVYwZFhKdUlIWmhiSFZsTzF4dVhIUmNkSDFjYmx4dVhIUmNkR2xtSUNnZ2FHOXZhM01nSmlZZ1hDSm5aWFJjSWlCcGJpQm9iMjlyY3lBbUppQW9JSEpsZENBOUlHaHZiMnR6TG1kbGRDZ2daV3hsYlN3Z2JtRnRaU0FwSUNrZ0lUMDlJRzUxYkd3Z0tTQjdYRzVjZEZ4MFhIUnlaWFIxY200Z2NtVjBPMXh1WEhSY2RIMWNibHh1WEhSY2RISmxkQ0E5SUdwUmRXVnllUzVtYVc1a0xtRjBkSElvSUdWc1pXMHNJRzVoYldVZ0tUdGNibHh1WEhSY2RDOHZJRTV2YmkxbGVHbHpkR1Z1ZENCaGRIUnlhV0oxZEdWeklISmxkSFZ5YmlCdWRXeHNMQ0IzWlNCdWIzSnRZV3hwZW1VZ2RHOGdkVzVrWldacGJtVmtYRzVjZEZ4MGNtVjBkWEp1SUhKbGRDQTlQU0J1ZFd4c0lEOGdkVzVrWldacGJtVmtJRG9nY21WME8xeHVYSFI5TEZ4dVhHNWNkR0YwZEhKSWIyOXJjem9nZTF4dVhIUmNkSFI1Y0dVNklIdGNibHgwWEhSY2RITmxkRG9nWm5WdVkzUnBiMjRvSUdWc1pXMHNJSFpoYkhWbElDa2dlMXh1WEhSY2RGeDBYSFJwWmlBb0lDRnpkWEJ3YjNKMExuSmhaR2x2Vm1Gc2RXVWdKaVlnZG1Gc2RXVWdQVDA5SUZ3aWNtRmthVzljSWlBbUpseHVYSFJjZEZ4MFhIUmNkRzV2WkdWT1lXMWxLQ0JsYkdWdExDQmNJbWx1Y0hWMFhDSWdLU0FwSUh0Y2JseDBYSFJjZEZ4MFhIUjJZWElnZG1Gc0lEMGdaV3hsYlM1MllXeDFaVHRjYmx4MFhIUmNkRngwWEhSbGJHVnRMbk5sZEVGMGRISnBZblYwWlNnZ1hDSjBlWEJsWENJc0lIWmhiSFZsSUNrN1hHNWNkRngwWEhSY2RGeDBhV1lnS0NCMllXd2dLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUmxiR1Z0TG5aaGJIVmxJRDBnZG1Gc08xeHVYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwWEhSeVpYUjFjbTRnZG1Gc2RXVTdYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkSDFjYmx4MFhIUjlYRzVjZEgwc1hHNWNibHgwY21WdGIzWmxRWFIwY2pvZ1puVnVZM1JwYjI0b0lHVnNaVzBzSUhaaGJIVmxJQ2tnZTF4dVhIUmNkSFpoY2lCdVlXMWxMRnh1WEhSY2RGeDBhU0E5SURBc1hHNWNibHgwWEhSY2RDOHZJRUYwZEhKcFluVjBaU0J1WVcxbGN5QmpZVzRnWTI5dWRHRnBiaUJ1YjI0dFNGUk5UQ0IzYUdsMFpYTndZV05sSUdOb1lYSmhZM1JsY25OY2JseDBYSFJjZEM4dklHaDBkSEJ6T2k4dmFIUnRiQzV6Y0dWakxuZG9ZWFIzWnk1dmNtY3ZiWFZzZEdsd1lXZGxMM041Ym5SaGVDNW9kRzFzSTJGMGRISnBZblYwWlhNdE1seHVYSFJjZEZ4MFlYUjBjazVoYldWeklEMGdkbUZzZFdVZ0ppWWdkbUZzZFdVdWJXRjBZMmdvSUhKdWIzUm9kRzFzZDJocGRHVWdLVHRjYmx4dVhIUmNkR2xtSUNnZ1lYUjBjazVoYldWeklDWW1JR1ZzWlcwdWJtOWtaVlI1Y0dVZ1BUMDlJREVnS1NCN1hHNWNkRngwWEhSM2FHbHNaU0FvSUNnZ2JtRnRaU0E5SUdGMGRISk9ZVzFsYzFzZ2FTc3JJRjBnS1NBcElIdGNibHgwWEhSY2RGeDBaV3hsYlM1eVpXMXZkbVZCZEhSeWFXSjFkR1VvSUc1aGJXVWdLVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlYRzVjZEgxY2JuMGdLVHRjYmx4dUx5OGdTRzl2YTNNZ1ptOXlJR0p2YjJ4bFlXNGdZWFIwY21saWRYUmxjMXh1WW05dmJFaHZiMnNnUFNCN1hHNWNkSE5sZERvZ1puVnVZM1JwYjI0b0lHVnNaVzBzSUhaaGJIVmxMQ0J1WVcxbElDa2dlMXh1WEhSY2RHbG1JQ2dnZG1Gc2RXVWdQVDA5SUdaaGJITmxJQ2tnZTF4dVhHNWNkRngwWEhRdkx5QlNaVzF2ZG1VZ1ltOXZiR1ZoYmlCaGRIUnlhV0oxZEdWeklIZG9aVzRnYzJWMElIUnZJR1poYkhObFhHNWNkRngwWEhScVVYVmxjbmt1Y21WdGIzWmxRWFIwY2lnZ1pXeGxiU3dnYm1GdFpTQXBPMXh1WEhSY2RIMGdaV3h6WlNCN1hHNWNkRngwWEhSbGJHVnRMbk5sZEVGMGRISnBZblYwWlNnZ2JtRnRaU3dnYm1GdFpTQXBPMXh1WEhSY2RIMWNibHgwWEhSeVpYUjFjbTRnYm1GdFpUdGNibHgwZlZ4dWZUdGNibHh1YWxGMVpYSjVMbVZoWTJnb0lHcFJkV1Z5ZVM1bGVIQnlMbTFoZEdOb0xtSnZiMnd1YzI5MWNtTmxMbTFoZEdOb0tDQXZYRngzS3k5bklDa3NJR1oxYm1OMGFXOXVLQ0JwTENCdVlXMWxJQ2tnZTF4dVhIUjJZWElnWjJWMGRHVnlJRDBnWVhSMGNraGhibVJzWlZzZ2JtRnRaU0JkSUh4OElHcFJkV1Z5ZVM1bWFXNWtMbUYwZEhJN1hHNWNibHgwWVhSMGNraGhibVJzWlZzZ2JtRnRaU0JkSUQwZ1puVnVZM1JwYjI0b0lHVnNaVzBzSUc1aGJXVXNJR2x6V0UxTUlDa2dlMXh1WEhSY2RIWmhjaUJ5WlhRc0lHaGhibVJzWlN4Y2JseDBYSFJjZEd4dmQyVnlZMkZ6WlU1aGJXVWdQU0J1WVcxbExuUnZURzkzWlhKRFlYTmxLQ2s3WEc1Y2JseDBYSFJwWmlBb0lDRnBjMWhOVENBcElIdGNibHh1WEhSY2RGeDBMeThnUVhadmFXUWdZVzRnYVc1bWFXNXBkR1VnYkc5dmNDQmllU0IwWlcxd2IzSmhjbWxzZVNCeVpXMXZkbWx1WnlCMGFHbHpJR1oxYm1OMGFXOXVJR1p5YjIwZ2RHaGxJR2RsZEhSbGNseHVYSFJjZEZ4MGFHRnVaR3hsSUQwZ1lYUjBja2hoYm1Sc1pWc2diRzkzWlhKallYTmxUbUZ0WlNCZE8xeHVYSFJjZEZ4MFlYUjBja2hoYm1Sc1pWc2diRzkzWlhKallYTmxUbUZ0WlNCZElEMGdjbVYwTzF4dVhIUmNkRngwY21WMElEMGdaMlYwZEdWeUtDQmxiR1Z0TENCdVlXMWxMQ0JwYzFoTlRDQXBJQ0U5SUc1MWJHd2dQMXh1WEhSY2RGeDBYSFJzYjNkbGNtTmhjMlZPWVcxbElEcGNibHgwWEhSY2RGeDBiblZzYkR0Y2JseDBYSFJjZEdGMGRISklZVzVrYkdWYklHeHZkMlZ5WTJGelpVNWhiV1VnWFNBOUlHaGhibVJzWlR0Y2JseDBYSFI5WEc1Y2RGeDBjbVYwZFhKdUlISmxkRHRjYmx4MGZUdGNibjBnS1R0Y2JseHVmU0FwTzF4dUlsMTlcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmQzZHk5d1lXTnJjeTlxY1hWbGNua3ZjM0pqTDJGMGRISnBZblYwWlhNdllYUjBjaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeE5RVUZOTEVOQlFVTTdTVUZEU0N4VFFVRlRPMGxCUTFRc1owSkJRV2RDTzBsQlEyaENMR3RDUVVGclFqdEpRVU5zUWl4WFFVRlhPMGxCUTFnc2MwSkJRWE5DTzBsQlEzUkNMR0ZCUVdFN1EwRkRhRUlzUlVGQlJTeFZRVUZWTEUxQlFVMHNSVUZCUlN4TlFVRk5MRVZCUVVVc1VVRkJVU3hGUVVGRkxFOUJRVThzUlVGQlJTeGhRVUZoTzBsQlEzcEVMRmxCUVZrc1EwRkJRenRKUVVOaUxFbEJRVWtzVVVGQlVTeEZRVUZGTEZWQlFWVXNSMEZCUnl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF6dEpRVU5zUkN4TlFVRk5MRU5CUVVNc1JVRkJSU3hEUVVGRExFMUJRVTBzUTBGQlF6dFJRVU5pTEVsQlFVa3NSVUZCUlN4VlFVRlZMRWxCUVVrc1JVRkJSU3hMUVVGTE8xbEJRM1pDTEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hGUVVGRkxFMUJRVTBzUTBGQlF5eEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRXRCUVVzc1JVRkJSU3hUUVVGVExFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTNoRkxFTkJRVU03VVVGRFJDeFZRVUZWTEVWQlFVVXNWVUZCVlN4SlFVRkpPMWxCUTNSQ0xFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRPMmRDUVVOaUxFMUJRVTBzUTBGQlF5eFZRVUZWTEVOQlFVTXNTVUZCU1N4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE8xbEJRMnhETEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTFBc1EwRkJRenRMUVVOS0xFTkJRVU1zUTBGQlF6dEpRVU5JTEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNN1VVRkRWaXhKUVVGSkxFVkJRVVVzVlVGQlZTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRXRCUVVzN1dVRkROMElzU1VGQlNTeEhRVUZITEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETzFsQlEzUkRMR2RGUVVGblJUdFpRVU5vUlN4RlFVRkZMRU5CUVVNc1EwRkJReXhMUVVGTExFdEJRVXNzUTBGQlF5eEpRVUZKTEV0QlFVc3NTMEZCU3l4RFFVRkRMRWxCUVVrc1MwRkJTeXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUXpWRExFMUJRVTBzUTBGQlF6dFpRVU5ZTEVOQlFVTTdXVUZEUkN4eFJFRkJjVVE3V1VGRGNrUXNSVUZCUlN4RFFVRkRMRU5CUVVNc1QwRkJUeXhKUVVGSkxFTkJRVU1zV1VGQldTeExRVUZMTEZkQlFWY3NRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRek5ETEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1dVRkRNVU1zUTBGQlF6dFpRVU5FTERCRVFVRXdSRHRaUVVNeFJDeDNRMEZCZDBNN1dVRkRlRU1zUlVGQlJTeERRVUZETEVOQlFVTXNTMEZCU3l4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8yZENRVU40UXl4TFFVRkxMRWRCUVVjc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RlFVRkZMRU5CUVVNN2IwSkJRM2hETEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhSUVVGUkxFZEJRVWNzVTBGQlV5eERRVUZETEVOQlFVTTdXVUZEYmtVc1EwRkJRenRaUVVORUxFVkJRVVVzUTBGQlF5eERRVUZETEV0QlFVc3NTMEZCU3l4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRE8yZENRVU4wUWl4RlFVRkZMRU5CUVVNc1EwRkJReXhMUVVGTExFdEJRVXNzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXp0dlFrRkRha0lzVFVGQlRTeERRVUZETEZWQlFWVXNRMEZCUXl4SlFVRkpMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03YjBKQlF6bENMRTFCUVUwc1EwRkJRenRuUWtGRFdDeERRVUZETzJkQ1FVTkVMRVZCUVVVc1EwRkJReXhEUVVGRExFdEJRVXNzU1VGQlNTeExRVUZMTEVsQlFVa3NTMEZCU3p0dlFrRkRka0lzUTBGQlF5eEhRVUZITEVkQlFVY3NTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFVkJRVVVzUzBGQlN5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRMRXRCUVVzc1UwRkJVeXhEUVVGRExFTkJRVU1zUTBGQlF6dHZRa0ZEY2tRc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF6dG5Ra0ZEWml4RFFVRkRPMmRDUVVORUxFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNTVUZCU1N4RlFVRkZMRXRCUVVzc1IwRkJSeXhGUVVGRkxFTkJRVU1zUTBGQlF6dG5Ra0ZEY0VNc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF6dFpRVU5xUWl4RFFVRkRPMWxCUTBRc1JVRkJSU3hEUVVGRExFTkJRVU1zUzBGQlN5eEpRVUZKTEV0QlFVc3NTVUZCU1N4TFFVRkxMRWxCUVVrc1EwRkJReXhIUVVGSExFZEJRVWNzUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU1zUzBGQlN5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVOd1JTeE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRPMWxCUTJZc1EwRkJRenRaUVVORUxFZEJRVWNzUjBGQlJ5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdXVUZEYmtNc2FVVkJRV2xGTzFsQlEycEZMRTFCUVUwc1EwRkJReXhIUVVGSExFbEJRVWtzU1VGQlNTeEhRVUZITEZOQlFWTXNSMEZCUnl4SFFVRkhMRU5CUVVNN1VVRkRla01zUTBGQlF6dFJRVU5FTEZOQlFWTXNSVUZCUlR0WlFVTlFMRWxCUVVrc1JVRkJSVHRuUWtGRFJpeEhRVUZITEVWQlFVVXNWVUZCVlN4SlFVRkpMRVZCUVVVc1MwRkJTenR2UWtGRGRFSXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhQUVVGUExFTkJRVU1zVlVGQlZTeEpRVUZKTEV0QlFVc3NTMEZCU3l4UFFVRlBPM2RDUVVONFF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RlFVRkZMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dDNRa0ZETVVJc1NVRkJTU3hIUVVGSExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXp0M1FrRkRja0lzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4TlFVRk5MRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU03ZDBKQlEycERMRVZCUVVVc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTTdORUpCUTA0c1NVRkJTU3hEUVVGRExFdEJRVXNzUjBGQlJ5eEhRVUZITEVOQlFVTTdkMEpCUTNKQ0xFTkJRVU03ZDBKQlEwUXNUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJRenR2UWtGRGFrSXNRMEZCUXp0blFrRkRUQ3hEUVVGRE8yRkJRMG83VTBGRFNqdFJRVU5FTEZWQlFWVXNSVUZCUlN4VlFVRlZMRWxCUVVrc1JVRkJSU3hMUVVGTE8xbEJRemRDTEVsQlFVa3NTVUZCU1N4RlFVRkZMRU5CUVVNc1IwRkJSeXhEUVVGRE8xbEJRMllzTmtSQlFUWkVPMWxCUXpkRUxHdEZRVUZyUlR0WlFVTnNSU3hUUVVGVExFZEJRVWNzUzBGQlN5eEpRVUZKTEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1lVRkJZU3hEUVVGRExFTkJRVU03V1VGRGFFUXNSVUZCUlN4RFFVRkRMRU5CUVVNc1UwRkJVeXhKUVVGSkxFbEJRVWtzUTBGQlF5eFJRVUZSTEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRuUWtGRGJrTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1IwRkJSeXhUUVVGVExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNN2IwSkJRemRDTEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03WjBKQlF5OUNMRU5CUVVNN1dVRkRUQ3hEUVVGRE8xRkJRMHdzUTBGQlF6dExRVU5LTEVOQlFVTXNRMEZCUXp0SlFVTklMQ3RDUVVFclFqdEpRVU12UWl4UlFVRlJMRWRCUVVjN1VVRkRVQ3hIUVVGSExFVkJRVVVzVlVGQlZTeEpRVUZKTEVWQlFVVXNTMEZCU3l4RlFVRkZMRWxCUVVrN1dVRkROVUlzUlVGQlJTeERRVUZETEVOQlFVTXNTMEZCU3l4TFFVRkxMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlEyeENMRGhEUVVFNFF6dG5Ra0ZET1VNc1RVRkJUU3hEUVVGRExGVkJRVlVzUTBGQlF5eEpRVUZKTEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNN1dVRkRiRU1zUTBGQlF6dFpRVU5FTEVsQlFVa3NRMEZCUXl4RFFVRkRPMmRDUVVOR0xFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNTVUZCU1N4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE8xbEJRMnhETEVOQlFVTTdXVUZEUkN4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRE8xRkJRMmhDTEVOQlFVTTdTMEZEU2l4RFFVRkRPMGxCUTBZc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1JVRkJSU3hWUVVGVkxFTkJRVU1zUlVGQlJTeEpRVUZKTzFGQlEzUkZMRWxCUVVrc1RVRkJUU3hIUVVGSExGVkJRVlVzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF6dFJRVU5zUkN4VlFVRlZMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzVlVGQlZTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRXRCUVVzN1dVRkRNVU1zU1VGQlNTeEhRVUZITEVWQlFVVXNUVUZCVFN4RlFVRkZMR0ZCUVdFc1IwRkJSeXhKUVVGSkxFTkJRVU1zVjBGQlZ5eEZRVUZGTEVOQlFVTTdXVUZEY0VRc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVOVUxDdEZRVUVyUlR0blFrRkRMMFVzVFVGQlRTeEhRVUZITEZWQlFWVXNRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJRenRuUWtGRGJrTXNWVUZCVlN4RFFVRkRMR0ZCUVdFc1EwRkJReXhIUVVGSExFZEJRVWNzUTBGQlF6dG5Ra0ZEYUVNc1IwRkJSeXhIUVVGSExFMUJRVTBzUTBGQlF5eEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRXRCUVVzc1EwRkJReXhKUVVGSkxFbEJRVWs3YjBKQlEyNURMR0ZCUVdFN2IwSkJRMklzU1VGQlNTeERRVUZETzJkQ1FVTlVMRlZCUVZVc1EwRkJReXhoUVVGaExFTkJRVU1zUjBGQlJ5eE5RVUZOTEVOQlFVTTdXVUZEZGtNc1EwRkJRenRaUVVORUxFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTTdVVUZEWml4RFFVRkRMRU5CUVVNN1NVRkRUaXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU5RTEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUlVnc2RYRlZRVUYxY1ZVaUxDSm1hV3hsSWpvaWQzZDNMM0JoWTJ0ekwycHhkV1Z5ZVM5emNtTXZZWFIwY21saWRYUmxjeTloZEhSeUxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpWkdWbWFXNWxLRnRjYmlBZ0lDQmNJaTR1TDJOdmNtVmNJaXhjYmlBZ0lDQmNJaTR1TDJOdmNtVXZZV05qWlhOelhDSXNYRzRnSUNBZ1hDSXVMaTlqYjNKbEwyNXZaR1ZPWVcxbFhDSXNYRzRnSUNBZ1hDSXVMM04xY0hCdmNuUmNJaXhjYmlBZ0lDQmNJaTR1TDNaaGNpOXlibTkwYUhSdGJIZG9hWFJsWENJc1hHNGdJQ0FnWENJdUxpOXpaV3hsWTNSdmNsd2lYRzVkTENCbWRXNWpkR2x2YmlBb2FsRjFaWEo1TENCaFkyTmxjM01zSUc1dlpHVk9ZVzFsTENCemRYQndiM0owTENCeWJtOTBhSFJ0Ykhkb2FYUmxLU0I3WEc0Z0lDQWdYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNGdJQ0FnZG1GeUlHSnZiMnhJYjI5ckxDQmhkSFJ5U0dGdVpHeGxJRDBnYWxGMVpYSjVMbVY0Y0hJdVlYUjBja2hoYm1Sc1pUdGNiaUFnSUNCcVVYVmxjbmt1Wm00dVpYaDBaVzVrS0h0Y2JpQWdJQ0FnSUNBZ1lYUjBjam9nWm5WdVkzUnBiMjRnS0c1aGJXVXNJSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWVdOalpYTnpLSFJvYVhNc0lHcFJkV1Z5ZVM1aGRIUnlMQ0J1WVcxbExDQjJZV3gxWlN3Z1lYSm5kVzFsYm5SekxteGxibWQwYUNBK0lERXBPMXh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCeVpXMXZkbVZCZEhSeU9pQm1kVzVqZEdsdmJpQW9ibUZ0WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVpXRmphQ2htZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FsRjFaWEo1TG5KbGJXOTJaVUYwZEhJb2RHaHBjeXdnYm1GdFpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1SUNBZ0lHcFJkV1Z5ZVM1bGVIUmxibVFvZTF4dUlDQWdJQ0FnSUNCaGRIUnlPaUJtZFc1amRHbHZiaUFvWld4bGJTd2dibUZ0WlN3Z2RtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCeVpYUXNJR2h2YjJ0ekxDQnVWSGx3WlNBOUlHVnNaVzB1Ym05a1pWUjVjR1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJFYjI0bmRDQm5aWFF2YzJWMElHRjBkSEpwWW5WMFpYTWdiMjRnZEdWNGRDd2dZMjl0YldWdWRDQmhibVFnWVhSMGNtbGlkWFJsSUc1dlpHVnpYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ibFI1Y0dVZ1BUMDlJRE1nZkh3Z2JsUjVjR1VnUFQwOUlEZ2dmSHdnYmxSNWNHVWdQVDA5SURJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJHWVd4c1ltRmpheUIwYnlCd2NtOXdJSGRvWlc0Z1lYUjBjbWxpZFhSbGN5QmhjbVVnYm05MElITjFjSEJ2Y25SbFpGeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCbGJHVnRMbWRsZEVGMGRISnBZblYwWlNBOVBUMGdYQ0oxYm1SbFptbHVaV1JjSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCcVVYVmxjbmt1Y0hKdmNDaGxiR1Z0TENCdVlXMWxMQ0IyWVd4MVpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCQmRIUnlhV0oxZEdVZ2FHOXZhM01nWVhKbElHUmxkR1Z5YldsdVpXUWdZbmtnZEdobElHeHZkMlZ5WTJGelpTQjJaWEp6YVc5dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCSGNtRmlJRzVsWTJWemMyRnllU0JvYjI5cklHbG1JRzl1WlNCcGN5QmtaV1pwYm1Wa1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JsUjVjR1VnSVQwOUlERWdmSHdnSVdwUmRXVnllUzVwYzFoTlRFUnZZeWhsYkdWdEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2h2YjJ0eklEMGdhbEYxWlhKNUxtRjBkSEpJYjI5cmMxdHVZVzFsTG5SdlRHOTNaWEpEWVhObEtDbGRJSHg4WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDaHFVWFZsY25rdVpYaHdjaTV0WVhSamFDNWliMjlzTG5SbGMzUW9ibUZ0WlNrZ1B5QmliMjlzU0c5dmF5QTZJSFZ1WkdWbWFXNWxaQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kbUZzZFdVZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDJZV3gxWlNBOVBUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JxVVhWbGNua3VjbVZ0YjNabFFYUjBjaWhsYkdWdExDQnVZVzFsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYUc5dmEzTWdKaVlnWENKelpYUmNJaUJwYmlCb2IyOXJjeUFtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW9jbVYwSUQwZ2FHOXZhM011YzJWMEtHVnNaVzBzSUhaaGJIVmxMQ0J1WVcxbEtTa2dJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVYwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJHVnRMbk5sZEVGMGRISnBZblYwWlNodVlXMWxMQ0IyWVd4MVpTQXJJRndpWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMllXeDFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaG9iMjlyY3lBbUppQmNJbWRsZEZ3aUlHbHVJR2h2YjJ0eklDWW1JQ2h5WlhRZ1BTQm9iMjlyY3k1blpYUW9aV3hsYlN3Z2JtRnRaU2twSUNFOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKbGREdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZENBOUlHcFJkV1Z5ZVM1bWFXNWtMbUYwZEhJb1pXeGxiU3dnYm1GdFpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5Qk9iMjR0WlhocGMzUmxiblFnWVhSMGNtbGlkWFJsY3lCeVpYUjFjbTRnYm5Wc2JDd2dkMlVnYm05eWJXRnNhWHBsSUhSdklIVnVaR1ZtYVc1bFpGeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsZENBOVBTQnVkV3hzSUQ4Z2RXNWtaV1pwYm1Wa0lEb2djbVYwTzF4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQmhkSFJ5U0c5dmEzTTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpYUTZJR1oxYm1OMGFXOXVJQ2hsYkdWdExDQjJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lYTjFjSEJ2Y25RdWNtRmthVzlXWVd4MVpTQW1KaUIyWVd4MVpTQTlQVDBnWENKeVlXUnBiMXdpSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdWIyUmxUbUZ0WlNobGJHVnRMQ0JjSW1sdWNIVjBYQ0lwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdkbUZzSUQwZ1pXeGxiUzUyWVd4MVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNaVzB1YzJWMFFYUjBjbWxpZFhSbEtGd2lkSGx3WlZ3aUxDQjJZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kbUZzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3hsYlM1MllXeDFaU0E5SUhaaGJEdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMllXeDFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdjbVZ0YjNabFFYUjBjam9nWm5WdVkzUnBiMjRnS0dWc1pXMHNJSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdibUZ0WlN3Z2FTQTlJREFzSUZ4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnUVhSMGNtbGlkWFJsSUc1aGJXVnpJR05oYmlCamIyNTBZV2x1SUc1dmJpMUlWRTFNSUhkb2FYUmxjM0JoWTJVZ1kyaGhjbUZqZEdWeWMxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2FIUjBjSE02THk5b2RHMXNMbk53WldNdWQyaGhkSGRuTG05eVp5OXRkV3gwYVhCaFoyVXZjM2x1ZEdGNExtaDBiV3dqWVhSMGNtbGlkWFJsY3kweVhHNGdJQ0FnSUNBZ0lDQWdJQ0JoZEhSeVRtRnRaWE1nUFNCMllXeDFaU0FtSmlCMllXeDFaUzV0WVhSamFDaHlibTkwYUhSdGJIZG9hWFJsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoaGRIUnlUbUZ0WlhNZ0ppWWdaV3hsYlM1dWIyUmxWSGx3WlNBOVBUMGdNU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhkb2FXeGxJQ2dvYm1GdFpTQTlJR0YwZEhKT1lXMWxjMXRwS3l0ZEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJHVnRMbkpsYlc5MlpVRjBkSEpwWW5WMFpTaHVZVzFsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JpQWdJQ0F2THlCSWIyOXJjeUJtYjNJZ1ltOXZiR1ZoYmlCaGRIUnlhV0oxZEdWelhHNGdJQ0FnWW05dmJFaHZiMnNnUFNCN1hHNGdJQ0FnSUNBZ0lITmxkRG9nWm5WdVkzUnBiMjRnS0dWc1pXMHNJSFpoYkhWbExDQnVZVzFsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RtRnNkV1VnUFQwOUlHWmhiSE5sS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdVbVZ0YjNabElHSnZiMnhsWVc0Z1lYUjBjbWxpZFhSbGN5QjNhR1Z1SUhObGRDQjBieUJtWVd4elpWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHcFJkV1Z5ZVM1eVpXMXZkbVZCZEhSeUtHVnNaVzBzSUc1aGJXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3hsYlM1elpYUkJkSFJ5YVdKMWRHVW9ibUZ0WlN3Z2JtRnRaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1GdFpUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMDdYRzRnSUNBZ2FsRjFaWEo1TG1WaFkyZ29hbEYxWlhKNUxtVjRjSEl1YldGMFkyZ3VZbTl2YkM1emIzVnlZMlV1YldGMFkyZ29MMXhjZHlzdlp5a3NJR1oxYm1OMGFXOXVJQ2hwTENCdVlXMWxLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQm5aWFIwWlhJZ1BTQmhkSFJ5U0dGdVpHeGxXMjVoYldWZElIeDhJR3BSZFdWeWVTNW1hVzVrTG1GMGRISTdYRzRnSUNBZ0lDQWdJR0YwZEhKSVlXNWtiR1ZiYm1GdFpWMGdQU0JtZFc1amRHbHZiaUFvWld4bGJTd2dibUZ0WlN3Z2FYTllUVXdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCeVpYUXNJR2hoYm1Sc1pTd2diRzkzWlhKallYTmxUbUZ0WlNBOUlHNWhiV1V1ZEc5TWIzZGxja05oYzJVb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hhWE5ZVFV3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJCZG05cFpDQmhiaUJwYm1acGJtbDBaU0JzYjI5d0lHSjVJSFJsYlhCdmNtRnlhV3g1SUhKbGJXOTJhVzVuSUhSb2FYTWdablZ1WTNScGIyNGdabkp2YlNCMGFHVWdaMlYwZEdWeVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FHRnVaR3hsSUQwZ1lYUjBja2hoYm1Sc1pWdHNiM2RsY21OaGMyVk9ZVzFsWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGRIUnlTR0Z1Wkd4bFcyeHZkMlZ5WTJGelpVNWhiV1ZkSUQwZ2NtVjBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZENBOUlHZGxkSFJsY2lobGJHVnRMQ0J1WVcxbExDQnBjMWhOVENrZ0lUMGdiblZzYkNBL1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3h2ZDJWeVkyRnpaVTVoYldVZ09seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRjBkSEpJWVc1a2JHVmJiRzkzWlhKallYTmxUbUZ0WlYwZ1BTQm9ZVzVrYkdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVjBPMXh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJSDBwTzF4dWZTazdYRzVjYmk4dkl5QnpiM1Z5WTJWTllYQndhVzVuVlZKTVBXUmhkR0U2WVhCd2JHbGpZWFJwYjI0dmFuTnZianRqYUdGeWMyVjBQWFYwWmpnN1ltRnpaVFkwTEdWNVNqSmFXRXA2WVZjNWRVbHFiM3BNUTBwNllqTldlVmt5Vm5wSmFuQmlTVzVrTTJSNU9YZFpWMDV5WTNrNWNXTllWbXhqYm10Mll6Tktha3d5UmpCa1NFcHdXVzVXTUZwWVRYWlpXRkl3WTJrMWNXTjVTbVJNUTBwMVdWY3hiR041U1RaWE1UQnpTVzB4YUdOSVFuQmliV1I2U1dwdmFWRlZSa0pSVTNoT1VWVkdUa3hGVGtKUlZWVTNVMVZHUkZWRGVGUlJWVVpVVHpCc1FsRXhVWE5hTUVwQ1VWZGtRMDh3YkVKUk1taERURWQwUTFGVlJuSlJhblJLVVZWT2MxRnBlRmhSVlVaWVR6QnNRbEV4WjNOak1FcENVVmhPUTA4d2JFSlJNMUpEVEVkR1FsRlhSVGRSTUVaRVdXbDRSbEZWUmtaTVJsWkNVVlpWYzFSVlJrSlVVM2hHVVZWR1JreEZNVUpSVlRCelVsVkdRbEpUZUZKUlZVWlNURVZXUWxGVlZYTlVNRVpDVkhsNFJsRlZSa1pNUjBaQ1VWZEZOMU5WUmtaT01GRnpWMVZHUWxkVGVFUlJWVVpFVHpCc1FsSlhTWE5UVlVaQ1UxTjRVbEZWUmxKTVJWWkNVVEZuYzFaVlJrSldVM2hJVVZWR1NFeEZNVUpSVlRCelVUQkdRbEY1ZUVwUlZVWktURVZPUWxGVlRYTldWVVpDVmxONFJGRlZSa1JQTUd4Q1VsaEtSRXhGTVVKUlZUQnpVVEJHUWxGNWVFWlJWVVpHVEVWT1FsRlZUWE5VVlVaQ1ZGTjRSRkZWUmtaUE1VWkNVVEp3UTB4RmJFSlJWV3R6VWxWR1FsSlRlRlpSVlVaV1RFVnNRbEZWYTNOU1ZVWkNVbE40VEZGVlJreFBNV3hDVVhwR1EweEZNVUpSVlRCelVUQkdRbEY1ZUU1UlZVWk9URVZPUWxGVlZYTlRWVVpDVTFONFJsRlZSa1pNUlRGQ1VWVXdjMUV3UmtKUmVYaEtVVlZHU2t4RlZrSlJWVlZ6VTFWR1FsTlRlRVpSVlVaR1RFVjBRbEZWYzNOU1ZVWkNVbE40VkZGVlJsUk1SVTVDVVZWTmMxUlZSa0pVVTNoSVVWVkdTRXhGVGtKUlZVMXpVVEJHUWxKVGVFUlJWVVpFVHpGR1FsRXpXa1pNUlU1Q1VWVk5OMVZWUmtaU1EzaFdVVlZHVmt4RlZrSlJWVlZ6VmxWR1FsWlRlRXBSVlVaS1R6RnNRbEV6Y0VOTVJURkNVVlV3YzFFd1JrSlJlWGhLVVZWR1NreEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkdUekprUTFGVlRuRlJhWGhPVVZWR1RreEZUa0pSVlUxelZsVkdRbFpUZUVSUlZVWkdURVZzUWxGVmEzTlNWVVpDVWxONFNsRlZSa3BNUlU1Q1VWVlZjMUV3UmtKUmVuUmFVVlZPY1ZGNWVFUlJWVVpFVEVWT1FsRlZWWE5STUVaQ1VYcDBVbEZWVGsxTVJVNUNVVlZOTjFNd1JrUlNRM2hFVVZWR1JreEZUa0pSVlUwM1UxVkdSbE5wZUU1UlZVWk9URVZPUWxGVlRYTlVWVVpDVkZONFJGRlZSa1pQTVVaQ1VUSlJjMU5WUmtKVFUzaEdVVlZHUmt4R1ZrSlJWbFZ6VTFWR1FsTlRlRVpSVlVaR1RFVnNRbEZWYTNOU1ZVWkNVbE40VEZGVlJreFBNV3hDVVRKb1JFeEZiRUpSVld0elVqQkdRbEo1ZUVaUlZVWkdURVYwUWxGVmMzTlNWVVpFV1dsNFRGRlZSa3hNUldSQ1VWVmpjMU5WUmtKVFUzaEVVVlZHUkV4R1JrSlJWa1Z6VVRCR1FsRjZkRnBSVlZZeVVXbDRibEpWUmtKYU1GVTNWMVZHUkdGRlZYTlNWVVpDVWxONFJGRlZSa1JNUlU1Q1VWVlZjMU13UmtKVGVYaE1VVlZHVEV4RlRrSlJWVTF6VTFWR1FsTlRlRXhSVlVaTVRFVjBRbEZWYzNOUk1FWkNVWGw0U2xGVlJrcE1SWFJDVVZWemMxTXdSa0pUZVhoRVVWVkdSa3hGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVHpKa1ExRlZUbkZTUTNoT1VWVkdUa3hGVGtKUlZVMDNWMVZHUkZWcGVFUlJWVVpFVHpGc1FsSlZVWE5qVlZKQ1VWaEdSVTh4YkVKUk0wcEZURVZXUWxGVlZYTlJNRVpDVVhsNFJGRlZSa1pNUlRsQ1VWVTRjMU5WUmtKVFUzaEVVVlZHUkV4R2JFSlJWbXR6VXpCR1FsTjVlRmhSVlVaYVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUlBNbVJEVVZWT2IxSkRlRTVSVlVaT1RFVk9RbEZWVFhOVVZVWkNWRk40UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pTVTNoS1VWVkdTa3hGVmtKUlZWVnpVMVZHUWxOVGVFWlJWVVpHVEVWMFFsRlZjM05STUVaQ1VsTjRSRkZWUmtSUE1XeENVVE53UkV4RlRrSlJWVTAzVjFWR1JsSkRkM2RTUlVaQ1RVVlJOMWRWUmtSTlZWRnpaREJPUWxGWVpFUlBNV3hDVVROb1JFeEZWa0pSVlZWelVUQkdRbEY1ZUVSUlZVWkdURVYwUWxGVmMzTlRNRVpDVTNsNFJGRlZSa1JNUld4Q1VWVnJjMUV3UmtKUmVYaE9VVlZHVGt4RlRrSlJWVTF6VlZWR1FsVlRlRVJSVlVaR1RFVnNRbEZWYTNOUk1FWkNVbmw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZW5SdVVXdEdSRXd3VFhOVE1FWkNVM2w0U0ZGVlJraE1SVEZDVVZVd2MxRXdSa0pSZVhoVVVWVkdWRXhGVGtKUlZWVnpVMVZHUWxOVGVFUlJWVVpFVEVaa1FsRldZM05TVlVaQ1VsTjRSRkZWUmtaUE1qbERVVlZOTTFGNWVFUlJWVVpHVEVVeFFsRlZNSE5STUVaQ1VYbDRTbEZWUmtwTVJVNUNVVlZOYzFNd1JrSlRlWGhFVVZWR1JFeEZiRUpSVld0elVUQkdRbEY1ZUVwUlZVWktURVZPUWxGVlZYTlRWVVpDVTFONFJGRlZSa1pNUldSQ1VWVmpjMVZWUmtKVlUzaElVVlZHU0V4R1RrSlJWazF6VVRCR1FsSlRlRVJSVlVaRVR6RnNRbEV5Y0VaTVJVNUNVVlZOTjFkVlJrWlNRM2hHVVZWR1JreEZUa0pSVlUxelVUQkdRbEpUZUV4UlZVWk1URVYwUWxGVmMzTlZNRVpDVmxONFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUnVVV3RHUkUwd1NYTlNWVVpDVWxONFJGRlZSa1JNUlU1Q1VWVlZjMU13UmtKVGVYaE1VVlZHVEV4RmJFSlJWWE56VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFRkaU1FcENVVE5TUTB4Rk1VSlJWVEJ6VVRCR1FsRjVlRlpSVlVaV1RFVk9RbEZWVlhOVFZVWkNVMU40UmxGVlJrWk1SV3hDVVZWcmMxRXdSa0pTVTNoRVVWVkdSRTh5T1VOUlZVNXZVWGw0VGxGVlJrNU1SVTVDVVZWTk4xb3dTa0pSTVVselVUQkdRbEY2ZEc1UmEwWkdVa040UmxGVlJrWk1SVTVDVVZWTmMxRXdSa0pTVTNoTVVWVkdURXhGYkVKUlZXdHpVekJHUWxONWVFcFJWVVpLVEVWMFFsRlZjemRpTUVwQ1VYcE9RMHhGVGtKUlZWVnpVakJHUWxKNWVFaFJWVVpJVEVWMFFsRlZjM05STUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZWYzFOVlJrSlRVM2hHVVZWR1JreEZkRUpSVlhOelVsVkdRbEpUZUVwUlZVWktURVZPUWxGVlZYTlJNRVpDVWxONFRGRlZSa3hNUms1Q1VWWlZjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTAzWWpCS1FsRjZSa1ZNUlRGQ1VWVXdjMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTAzV2pCS1FsRXhiM05STUVaQ1VYcDBibEZyUmtaU1EzaEtVVlZHU2t4RlRrSlJWVTF6VjFWR1FsZFRlRVJSVlVaR1RFVnNRbEZWYTNOU1ZVWkNVbE40VEZGVlJreE1SV1JDVVZWamMxSlZSa0pTVTNoRVVWVkdSa3hGVGtKUlZVMDNXakJLUWxFelVrUk1SVEZDVVZVd2MxRXdSa0pSZVhoTVVWVkdURXhGVGtKUlZVMDNWMVZHUkZwRGVFUlJWVVpFVHpGc1FsSlZVWE5TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZWYzFNd1JrSlRlWGhLVVZWR1NreEZkRUpSVlhOelUxVkdRbE5UZUV4UlZVWk1URVZzUWxGVmEzTlJNRVpDVWxONFNGRlZSa2hNUldSQ1VWVmpjMU13UmtKVGVYaEVVVlZHUkV4RlpFSlJWV056VVRCR1FsSlRlRXBSVlVaS1RFVldRbEZWVlhOVFZVWkNVMU40UkZGVlJrWk1SVTVDVVZWVmMxTXdSa0pUZVhoS1VWVkdURXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVHpKa1ExRlZUVE5TVTNoT1VWVkdUa3hGVGtKUlZVMXpVakJHUWxKNWVFUlJWVVpFVHpGc1FsRXhiM05STUVaQ1VYcDBXbEZWVmtWTVJXUkNVVlZqYzFJd1JrSlNlWGhPVVZWR1RreEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkVURVZzUWxGVmEzTlJNRVpDVWxONFNsRlZSa3BNUlZaQ1VWVlZjMU5WUmtKVFUzaEVVVlZHUmt4RlRrSlJWVTAzVjFWR1JtTnJUWE5oVlZaQ1VWZHNSazh4YkVKUk1uQkdURVV4UWxGVk1ITlJNRVpDVVhsNFNGRlZSa2hNUld4Q1VWVnJjMU5WUmtKVFUzaElVVlZHU0V4R1RrSlJWazF6VWpCR1FsSjVlRWhSVlVaSVRFVk9RbEZWVFRkVlZVWkVaRVZOYzFFd1JrSlJlblJTVVZWV1JVeEdUa0pSVmsxelVsVkdRbEpVZEZwUlZVNVhURVZzUWxGVmEzTlNWVVpDVWxSMGJsRnJSa1JVUTNoSVVWVkdTRXhGVmtKUlZWVnpWbFZHUWxaVGVFcFJWVVpLVEVWV1FsRlZWWE5UTUVaQ1UzcDBkbEZyUmtSbGEwbHpVbFZHUWxKVGVFUlJWVVpFVEVWT1FsRlZWWE5STUVaQ1VYbDRVRkZWUmxCTVJVNUNVVlZOYzFaVlJrSldVM2hLVVZWR1NreEZkRUpSVlhOelV6QkdRbE41ZUZCUlZVWlFUek5rUTFGVlRURlJlWGhTVVZWR1VreEZUa0pSVlZWelUxVkdRbE5UZUVaUlZVWkdURVU1UWxGVk9ITlJNRVpDVW5sNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUXpVV3RHUkU0d1NYTlRWVVpDVTFONFNGRlZSa2hNUldSQ1VWVmpjMU5WUmtKVFUzaEVVVlZHUkV4RmRFSlJWWE56VVRCR1FsRjZkRE5SYTBaRVkydEpjMU5WUmtKVFUzaEVVVlZHUkV4R2JFSlJWbXR6VVRCR1FsSlRlRTVSVlVaT1RFVldRbEZWVlhOVE1FWkNVM2w0UkZGVlJrWk1SVTVDVVZWTk4yUXdTa0pSTWpWRVRFVldRbEZWVlhOUk1FWkNVWGw0UkZGVlJrWk1SV1JDVVZWcmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMDNUa1ZLUWxFeFozTlRWVVpDVTFONFJGRlZSa1JNUlhSQ1VWVnpjMUl3UmtKU2VYaElVVlZHU0V4RlRrSlJWVTAzWkRCS1FsRXllRU5NUlU1Q1VWVk5OMlF3U2tKUk1GRnpWRlZHUWxSVGVFUlJWVVpFVEVWMFFsRlZjM05STUVaQ1VYcDBkbEZyUmtSYVEzaEVVVlZHUkU4eVpFTlJWVTVIVEVWT1FsRlZUVGRaVlVaRVVrUjBWRkZWVGtWUE1VWkNVbFZSYzFaVlJrSldVM2hHVVZWR1JreEdWa0pSVmxWelUxVkdRbE5UZUVaUlZVWkdURVYwUWxGVmN6ZFhWVVpFWVVWTmMxTlZSa0pUVTNoS1VWVkdTa3hGVmtKUk1VRnpVVEJHUWxGNWVFaFJWVVpJVEVWT1FsRlZUVGRYVlVaR1ZFTjNNbEpGUmtKT2ExRTNWMVZHUkU0d1VYTmhNRlpDVVZkMFJrOHhiRUpSTW5oR1RFWk9RbEZXVFhOU01FWkNVbmw0VEZGVlJreE1SV3hDVVZWcmMxTXdSa0pUZVhoRVVWVkdSRXhGZEVKUlZYTnpVVEJHUWxKVGVHaFJWVVpvVEVWT1FsRlZWWE5STUVaQ1VYcDBXbEZWVm5WU1EzaEdVVlZHUmt4RlRrSlJWVTF6VVRCR1FsSlRlRlJSVlVaVVRFVnNRbEZWYTNOVFZVWkNVMU40UkZGVlJrUk1Sa1pDVVZaRmMxTXdSa0pUZVhoRVVWVkdSa3hGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVHpKa1ExRlZUalJSZVhoUVVWVkdVa3hGVGtKUlZWVnpVMVZHUWxOVGVFaFJWVVpJVEVaT1FsRldUWE5STUVaQ1VsTjRSRkZWUmtSTVJWWkNVVlZWYzFFd1JrSlNVM2hFVVZWR1JreEZWa0pSVldOelVUQkdRbEY2ZEhaUmEwWkVaRVZOYzFOVlJrSlRVM2hFVVZWR1JFeEhWa0pSVjFWelVUQkdRbEpUZUVwUlZVWktURVZPUWxGVlZYTlJNRVpDVVhwMGJsRnJSa1JQVlVselVUQkdRbEY2ZEZwUlZVNUhURVZPUWxGVlRUZFZWVVpFVW1sNFJGRlZSa1JQTUhSQ1VUQlJjMUV3UmtKU1UzaEVVVlZHUkU4d2JFSlNWVzl6U3pCS1FsRlRkRU5QTUd4Q1VYazVRMHhHUmtKUlZrVnpVakJHUWxKNmRGSlJWVTVYVEVWa1FsRlZZM05TVlVaQ1VsTjRWbEZWUmxaTVJXeENVVlZyYzFKVlJrSlNVM2hNVVZWR1RFeEZWa0pSVlZWelUxVkdRbE5VZEZwUlZVMTJVV2w0UmxGVlJrWk1SVTVDVVZWTmMxRXdSa0pTVTNoTVVWVkdURXhGZEVKUlZYTnpVekJHUWxSVGVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBibEZyUmtaa2EwbHpUMFZPUWxGVWFFUlBNbVJEVVZWTk5WRjVlRTVSVlVaT1RFVk9RbEZWVFhOV1ZVWkNWbE40UkZGVlJrWk1SV3hDVVZWcmMxSlZSa0pTVTNoS1VWVkdTa3hGVGtKUlZWVnpVVEJHUWxGNmRGcFJWVTV4VVhsNFJGRlZSa1JQTVd4Q1VWVk5jMU5WUmtKVFUzaEVVVlZHUkV4RlRrSlJWVTAzV2pCS1FsRXhRWE5UVlVaQ1UxTjRSRkZWUmtSTVJteENVVlpyYzFFd1JrSlNVM2hLVVZWR1NreEZWa0pSVlZWelUxVkdRbE5UZUVSUlZVWkdURVZPUWxGVlRUZFhWVVpFWVd0TmMxRXdSa0pSZW5SYVVWVk9SVXhGTVVKUlZUQnpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUVGRWVlVaRVdXbDRSRkZWUmtSUE1IUkNVVEJSYzFFd1JrSlJlblJLVVZWV1IweEZNVUpSVlRCelVUQkdRbEY1ZUVwUlZVWktURVZPUWxGVlZYTlVWVVpDVkZONFJGRlZSa1JNUld4Q1VWVnJjMUV3UmtKUmVYaE1VVlZHVEV4RlRrSlJWVTF6VTFWR1FsTlRlRVJSVlVaRVRFVXhRbEZWTUhOUk1FWkNVWGw0VEZGVlJreE1SVTVDVVZWVmMxUlZSa0pVVTNoRVVWVkdSa3hGVmtKUlZWVnpWbFZHUWxaVGVFUlJWVVpFVEVWV1FsRlZWWE5UVlVaQ1UxUjBVbEZWVFRGU1UzaEtVVlZHU2t4Rk1VSlJWVEJ6VWpCR1FsSjVlRlpSVlVaV1RFVk9RbEZWVlhOVFZVWkNVMU40UkZGVlJrWk1SV3hDVVZWcmMxUlZSa0pVVTNoRVVWVkdSRXhGYkVKUlZXdHpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUVGRWVlVaR1kwVlJjMVpWUmtKV1UzaEVVVlZHUmt4RmJFSlJWV3R6VVRCR1FsSlRlRWhSVlVaSVRFWldRbEZXVlhOVFZVWkNVMU40UmxGVlJrWk1SV3hDVVZWcmMxSlZSa0pTVTNoTVVWVkdURTh4YkVKUmVUbEVURVZzUWxGVmEzTlNNRVpDVW5sNFJsRlZSa1pNUlRGQ1VWVXdjMUpWUmtSYVEzaG9VVlZHYUV4RlpFSlJWV056VTFWR1FsTlRlRVJSVlVaRVRFWmtRbEZXWTNOU1ZVWkNVbE40UkZGVlJrUlBNV3hDVWxoQ1JFeEZWa0pSVlZWelVUQkdRbEY1ZUVSUlZVWkdURVZPUWxGVlRYTlRNRVpDVkZONFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUnVVV3RHUmxwRGQzSlNWVVpDU3pCVk4xb3dTa0pSZVRsR1RFVXhRbEZWTUhOU01FWkNVbmw0VmxGVlJsWk1SVTVDVVZWVmMxbFZSa0paVTNoRVVWVkdSa3hGVGtKUlZVMDNXakJLUWxFelNrUk1SbFpDVVZaVmMxRXdSa0pTVTNob1VWVkdhRXhGVGtKUlZWVnpVakJHUWxKNWVFaFJWVVpJVEVWT1FsRlZUVGRhTUVwQ1VUSjRSRXhGWkVKUlZXTnpVakJHUWxKNWVFNVJWVVpPVEVWT1FsRlZWWE5UVlVaQ1UxTjRSbEZWUmtaTVJXeENVVlZyYzFKVlJrSlNVM2hNVVZWR1RFeEZUa0pSVlZWelUxVkdRbE5UZUVwUlZVWktUekk1UTFGVlRqUlJlWGhvVVZWR2FFOHlPVU5SVlU1cFRFVnNRbEZWYTNOUk1FWkNVWHAwYmxGclJrUlVhWGhXVVZWR1ZreEZUa0pSVlZWeldWVkdRbGxUZUVSUlZVWkdURVZrUWxGVlkzTlVWVVpDVkZONFJGRlZSa1JQTVd4Q1VUTlNSRXhGVGtKUlZVMDNWMVZHUkZKRGVFNVJWVVpPVEVWT1FsRlZUWE5TTUVaQ1VubDRSRkZWUmtSUE1VWkNVVEZ2YzFFd1JrSlJlWGhFVVZWR1JFOHdiRUpSTUdkelVUQkdRbEY1ZUVSUlZVWkdURVZPUWxGVlRUZFJWVVpHVTJsNFJGRlZSa1JNUlU1Q1VWVlZjMUV3UmtKUmVVbHpTVzFhY0dKSFZXbFBhVW96WkROamRtTkhSbXBoTTAxMllXNUdNVnBZU2pWTU0wNTVXWGs1YUdSSVVubGhWMG94WkVkV2Vrd3lSakJrU0VsMVlXNU5hVXhEU25waU0xWjVXVEpXZWxFeU9YVmtSMVoxWkVOSk5sZDVTbXRhVjFwd1ltMVZiMGxHZEdOaWJIZ3dXRU5KZFV4cE9XcGlNMHBzV0VOSmMxaEhOV05rUm5kcFRHazBkbGt5T1hsYVV6bG9XVEpPYkdNelRtTkphWGhqWW14NE1GaERTWFZNYVRscVlqTktiRXd5TlhaYVIxWlBXVmN4YkZoRFNYTllSelZqWkVaM2FVeHBPWHBrV0VKM1lqTktNRmhEU1hOWVJ6VmpaRVozYVV4cE5IWmtiVVo1VEROS2RXSXpVbTlrUnpGelpESm9jR1JIVm1OSmFYaGpZbXg0TUZoRFNYVk1hVGw2V2xkNGJGa3pVblpqYkhkcFdFYzFaRXhEUW0xa1Z6VnFaRWRzZG1KcFoyZGhiRVl4V2xoS05VeERRbWhaTWs1c1l6Tk5jMGxITlhaYVIxWlBXVmN4YkV4RFFucGtXRUozWWpOS01FeERRbmxpYlRrd1lVaFNkR0pJWkc5aFdGSnNTVU5yWjJVeGVIVllSelZqU1c1V2VscFRRbnBrU0Vwd1dUTlNZMGxxZEdOaWJIaDFaRzFHZVVsSFNuWmlNbmhKWWpJNWNreEdlSFZZU0ZKb1pFaFNlVk5IUm5WYVIzaHNTVVF3WjJGc1JqRmFXRW8xVEcxV05HTklTWFZaV0ZJd1kydG9hR0p0VW5OYVZIUmpZbXg0ZFdGc1JqRmFXRW8xVEcxYWRVeHRWalJrUjFaMVdrTm5aMlV4ZUhWWVNGSm9aRWhTZVU5cFFtMWtWelZxWkVkc2RtSnBaMmRpYlVaMFdsTjNaMlJ0Um5Oa1YxVm5TMU5DTjFoSE5XTmtSbmd3WTIxV01HUllTblZKUjBacVdUSldlbU41WjJka1IyaHdZM2wzWjJGc1JqRmFXRW8xVEcxR01HUklTWE5KUnpWb1lsZFZjMGxJV21oaVNGWnNURU5DYUdOdFpERmlWMVoxWkVoTmRXSkhWblZhTTFKdlNVUTBaMDFUUVhCUE1YaDFXRWhTT1V4R2VIVllSelZqWkVoS2JHSlhPVEphVlVZd1pFaEpOa2xIV2pGaWJVNHdZVmM1ZFV0RFFuVlpWekZzU1VOcloyVXhlSFZZU0ZKalpFaEtiR1JJVm5saWFVSXdZVWRzZWt4dFZtaFpNbWR2U1VkYU1XSnRUakJoVnpsMVMwTnJaMlV4ZUhWWVNGSmpaRVo0TUdGc1JqRmFXRW8xVEc1S2JHSlhPVEphVlVZd1pFaEpiMGxJVW05aFdFMXpTVWMxYUdKWFZXZExWSFJqWW14NE1GaElVamxKUTJzM1dFYzFZMlJJTVdOaWJqQm5TMVIwWTJKc2VIVmhiRVl4V2xoS05VeHRWalJrUjFaMVdrTm5aMlV4ZUhWWVNGSm9aRWhTZVU5cFFtMWtWelZxWkVkc2RtSnBaMmRhVjNoc1lsTjNaMkp0Um5SYVUzZG5aRzFHYzJSWFZXZExVMEkzV0VjMVkyUkdlREJrYlVaNVNVaEtiR1JEZDJkaFJ6bDJZVE5OYzFoSE5XTmtSbmd3V0VoU2RWWkliSGRhVTBFNVNVZFdjMXBYTUhWaWJUbHJXbFpTTldOSFZUZFlSelZqWW14NE1GaElVWFpNZVVKRllqSTBibVJEUW01YVdGRjJZekpXTUVsSFJqQmtTRXB3V1c1V01GcFlUV2RpTWpSblpFZFdOR1JEZDJkWk1qbDBZbGRXZFdSRFFtaGliVkZuV1ZoU01HTnRiR2xrV0ZKc1NVYzFkbHBIVm5wWVJ6VmpaRVo0TUdGWFdXZExRMEoxVmtoc2QxcFRRVGxRVkRCblRYbENPR1pEUW5WV1NHeDNXbE5CT1ZCVU1HZFBRMEk0WmtOQ2RWWkliSGRhVTBFNVVGUXdaMDFwUVhCSlNIUmpZbXg0TUZoSVVtTmtTRXBzWkVoV2VXSnFkR05pYkhnd1dFaFNPVmhITldOaWJIZ3dXRWhSZGt4NVFrZFpWM2h6V1cxR2FtRjVRakJpZVVKM1kyMDVkMGxJWkc5YVZ6Um5XVmhTTUdOdGJHbGtXRkpzWTNsQ2FHTnRWV2RpYlRrd1NVaE9NV05JUW5aamJsSnNXa1o0ZFZoSVVtTmtSMnh0U1VObloyUkliSGRhVnpsdFNVZFdjMXBYTUhWYU1sWXdVVmhTTUdOdGJHbGtXRkpzU1VRd09WQlRRbU5KYmxaMVdrZFdiV0ZYTld4YVJuZHBTVU5yWjJVeGVIVllTRkpqWkVaNE1HTnRWakJrV0VwMVNVZHdVbVJYVm5sbFV6VjNZMjA1ZDB0RFFteGlSMVowVEVOQ2RWbFhNV3hNUTBJeVdWZDRNVnBUUVhCUE1YaDFXRWhTWTJSSU1XTmliSGgxV0VoU1kyUkRPSFpKUlVZd1pFaEtjRmx1VmpCYVUwSnZZakk1Y21ONVFtaGpiVlZuV2tkV01GcFlTblJoVnpWc1drTkNhV1ZUUWpCaFIxVm5Za2M1TTFwWVNtcFpXRTVzU1VoYWJHTnVUbkJpTWpWallteDRNRmhJVVhaTWVVSklZMjFHYVVsSE5XeFpNbFo2WXpKR2VXVlRRbTlpTWpseVNVZHNiVWxIT1hWYVUwSndZM2xDYTFwWFduQmliVlpyV0VjMVkyUkdlREJoVjFsblMwTkNkVlpJYkhkYVUwRm9VRlF3WjAxVFFqaG1RMEZvWVd4R01WcFlTalZNYld4NlYwVXhUVkpIT1dwTFEwSnNZa2RXZEVsRGEyZExVMEkzV0VjMVkyUkdlREJZU0ZKdllqSTVjbU41UVRsSlIzQlNaRmRXZVdWVE5XaGtTRko1VTBjNWRtRXpUbUpKUnpWb1lsZFZkV1JIT1UxaU0yUnNZMnRPYUdNeVZXOUxVMEprU1VoNE9GaEhOV05rUm5nd1dFaFNZMlJEWjJkaGJFWXhXbGhLTlV4dFZqUmpTRWwxWWxkR01Ga3laM1ZaYlRsMllrTTFNRnBZVGpCTFEwSjFXVmN4YkVsRGEyZFFlVUpwWWpJNWMxTkhPWFpoZVVFMlNVaFdkVnBIVm0xaFZ6VnNXa05CY0U4eGVIVllTRkpqWkVneFkySnNlSFZZU0ZKalpFZHNiVWxEWjJka2JVWnpaRmRWWjBsVU1EbEpTRloxV2tkV2JXRlhOV3hhUTBGd1NVaDBZMkpzZURCWVNGSmpaRWRzYlVsRFoyZGtiVVp6WkZkVloxQlVNRGxKUnpVeFlrZDNaMHRUUWpkWVJ6VmpaRVo0TUZoSVVtTmtSM0JTWkZkV2VXVlROWGxhVnpGMlpHMVdRbVJJVW5sTFEwSnNZa2RXZEV4RFFuVlpWekZzU1VOck4xaEhOV05rUm5nd1dFaFNZMlJJU214a1NGWjVZbXAwWTJKc2VEQllTRkpqWkVneFkySnNlSFZZU0ZKalpFWjRNR0ZYV1dkTFEwSnZZakk1Y21ONVFXMUthVUpqU1c1T2JHUkdkMmxKUjJ4MVNVZG9kbUl5ZEhwSlExbHRXRWMxWTJSR2VEQllTRkpqWkVObloyTnRWakJKUkRCbllVYzVkbUV6VFhWak1sWXdTME5DYkdKSFZuUk1RMEl5V1ZkNE1WcFRkMmRpYlVaMFdsTkJjRWxEYTJkSlZEQTVTVWhXZFZwSFZtMWhWelZzV2tOQmNFbElkR05pYkhnd1dFaFNZMlJHZURCamJWWXdaRmhLZFVsSVNteGtSSFJqWW14NE1GaElVbU5rU0RGallteDRkVmhJVW1Oa1JuZ3dXbGQ0YkdKVE5YcGFXRkpDWkVoU2VXRlhTakZrUjFWdlNVYzFhR0pYVlhOSlNGcG9Za2hXYkVsRGMyZFlRMHBqU1dsQmNFOHhlSFZZU0ZKalpFWjRNR050VmpCa1dFcDFTVWhhYUdKSVZteFBNWGgxV0VoU1kyUklNV05pYkhoMVdFaFNZMlJIYkcxSlEyZG5ZVWM1ZG1FelRXZEthVmxuV0VOS2JscFlVbU5KYVVKd1ltbENiMkl5T1hKamVVRnRTbWxCYjBsSVNteGtRMEU1U1Vkb2RtSXlkSHBNYldSc1pFTm5aMXBYZUd4aVUzZG5ZbTFHZEZwVFFYQkpRMnRuU1ZRd09VbEhOVEZpUjNkblMxTkNOMWhITldOa1JuZ3dXRWhTZVZwWVVqRmpiVFJuWTIxV01FOHhlSFZZU0ZKalpFZ3hZMkpzZUhWWVNGSmpaRWhLYkdSRFFUbEpSM0JTWkZkV2VXVlROVzFoVnpWclRHMUdNR1JJU1c5SlIxWnpXbGN3YzBsSE5XaGlWMVZuUzFSMFkySnNlSFZZU0ZKalpFTTRka2xGTlhaaWFURnNaVWRzZW1SSFZuVmtRMEpvWkVoU2VXRlhTakZrUjFaNlNVaEtiR1JJVm5saWFVSjFaRmQ0YzB4RFFqTmFVMEoxWWpOS2RGbFhlSEJsYlZWblpFYzRaMlJYTld0YVYxcHdZbTFXYTFoSE5XTmtSbmd3WTIxV01HUllTblZKU0Vwc1pFTkJPVkJUUW5Wa1YzaHpTVVE0WjJSWE5XdGFWMXB3WW0xV2EwbEViMmRqYlZZd1R6RjRkVmhJVWpsTVJuaDFXRWMxWTJSSFJqQmtTRXBKWWpJNWNtTjZiMmRsTVhoMVdFaFNZMlJJVWpWalIxVTJTVWgwWTJKc2VEQllTRkpqWkVoT2JHUkViMmRhYmxaMVdUTlNjR0l5Tkc5SlIxWnpXbGN3YzBsSVdtaGlTRlpzU1VOcloyVXhlSFZZU0ZKalpFWjRNRmhJVW5CYWFVRnZTVU5HZW1SWVFuZGlNMG93VEc1S2FGcEhiSFpXYlVaelpGZFZaMHBwV1dka2JVWnpaRmRWWjFCVU1EbEpSbmRwWTIxR2EyRlhPV05KYVVGdFNteDRkVmhJVW1Oa1JuZ3dXRWhTWTJSSE5YWmFSMVpQV1ZjeGJFdERRbXhpUjFaMFRFTkNZMGx0YkhWalNGWXdXRU5KWjB0VFFYQkpTSFJqWW14NE1GaElVbU5rUm5nd1dFaFNNbGxZU1dka2JVWnpTVVF3WjFwWGVHeGlVelV5V1ZkNE1WcFVkR05pYkhnd1dFaFNZMlJHZURCWVNGSnNZa2RXZEV4dVRteGtSVVl3WkVoS2NGbHVWakJhVTJkbldFTktNR1ZZUW14WVEwbHpTVWhhYUdKSVZteEpRMnMzV0VjMVkyUkdlREJZU0ZKalpFWjRNR0ZYV1dkTFEwSXlXVmQzWjB0VFFqZFlSelZqWkVaNE1GaElVbU5rUm5nd1dFaFNiR0pIVm5STWJscG9Za2hXYkVsRU1HZGtiVVp6VHpGNGRWaElVbU5rUm5nd1dFaFNZMlJJTVdOaWJIZ3dXRWhTWTJSR2VEQllTRko1V2xoU01XTnROR2RrYlVaelpGZFZOMWhITldOa1JuZ3dXRWhTWTJSSU1XTmliSGd3V0VoU1kyUklNV05pYkhnd1dFaFNPVmhITldOa1NEQnpXRWMxWTJKc2VEQmpiVlowWWpOYWJGRllVakJqYW05bldtNVdkVmt6VW5CaU1qUnZTVWRXYzFwWE1ITkpTRnBvWWtoV2JFbERhMmRsTVhoMVdFaFNZMlJJV21oamFVSjFXVmN4YkV4R2VIVllTRkpqWkVaNE1HRlRRVGxKUkVGeldFYzFZMkpzZURCWVNGSmpaRU00ZGtsRlJqQmtTRXB3V1c1V01GcFRRblZaVnpGc1kzbENhbGxYTkdkWk1qbDFaRWRHY0dKcFFuVmlNalIwVTBaU1RsUkRRak5oUjJ3d1dsaE9kMWxYVG14SlIwNXZXVmhLYUZrelVteGpiazVqWW14NE1GaElVbU5rUXpoMlNVZG9NR1JJUW5wUGFUaDJZVWhTZEdKRE5YcGpSMVpxVEc1a2IxbFlVak5hZVRWMlkyMWpkbUpZVm5Oa1IyeDNXVmRrYkV3elRqVmlibEpvWlVNMWIyUkhNWE5KTWtZd1pFaEtjRmx1VmpCYVdFMTBUV3g0ZFZoSVVtTmtSbmd3V1ZoU01HTnJOV2hpVjFaNlNVUXdaMlJ0Um5Oa1YxVm5TbWxaWjJSdFJuTmtWMVYxWWxkR01Ga3laMjlKU0VwMVlqTlNiMlJITVhOa01taHdaRWRWWjB0VWRHTmliSGgxV0VoU1kyUkhiRzFKUTJkbldWaFNNR05yTldoaVYxWjZTVU5aYlVsSFZuTmFWekIxWW0wNWExcFdValZqUjFWblVGUXdPVWxFUldkTFUwSTNXRWMxWTJSR2VEQllTRkl6WVVkc2MxcFRRVzlKUTJkblltMUdkRnBUUVRsSlIwWXdaRWhLVDFsWE1XeGpNWE5uWVZOemNrbEdNR2RMVTBGd1NVaDBZMkpzZURCWVNGSmpaRVo0TUZwWGVHeGlVelY1V2xjeGRtUnRWa0prU0ZKNVlWZEtNV1JIVlc5SlJ6Vm9ZbGRWWjB0VWRHTmliSGd3V0VoU1kyUklNV05pYkhnd1dFaFNPVmhITldOa1NERmpZbTR3WjB0VWRHTmliSGgxVEhrNFoxTkhPWFpoTTAxbldtMDVlVWxIU25aaU1uaHNXVmMwWjFsWVVqQmpiV3hwWkZoU2JHTXhlSFZaYlRsMllrVm9kbUl5YzJkUVUwSTNXRWMxWTJSSVRteGtSRzluV201V2RWa3pVbkJpTWpSdlNVZFdjMXBYTUhOSlNGcG9Za2hXYkV4RFFuVlpWekZzU1VOcloyVXhlSFZZU0ZKalpFZHNiVWxEWjJka2JVWnpaRmRWWjFCVU1EbEpSMXBvWWtoT2JFbERhMmRsTVhoMVdFYzFZMlJHZURCWVNGRjJUSGxDVTFwWE1YWmtiVlZuV1cwNWRtSkhWbWhpYVVKb1pFaFNlV0ZYU2pGa1IxWjZTVWhrYjFwWE5HZGpNbFl3U1VoU2RrbEhXbWhpU0U1c1dFYzFZMlJHZURCWVNGSnhWVmhXYkdOdWEzVmpiVlowWWpOYWJGRllVakJqYVdkbldsZDRiR0pUZDJkaWJVWjBXbE5CY0U4eGVIVllTRkpqWkVnd1oxcFhlSHBhVTBJM1dFYzFZMlJHZURCWVNGSnNZa2RXZEV4dVRteGtSVVl3WkVoS2NGbHVWakJhVTJkblltMUdkRnBUZDJkaWJVWjBXbE5CY0U4eGVIVllTRkpqWkVneFkySnNlREJZU0ZKNVdsaFNNV050TkdkaWJVWjBXbFIwWTJKc2VEQm1WbmgxWmxSMFkySnNlSFZoYkVZeFdsaEtOVXh0Vm1oWk1tZHZTVWR3VW1SWFZubGxVelZzWlVoQ2VVeHRNV2hrUjA1dlRHMUtkbUl5ZDNWak1qa3hZMjFPYkV4dE1XaGtSMDV2UzBOQmRsaEdlRE5MZVRsdVNVTnJjMGxIV2pGaWJVNHdZVmM1ZFV0RFFuQk1RMEoxV1ZjeGJFbERhMmRsTVhoMVdFaFNNbGxZU1dkYU1sWXdaRWRXZVVsRU1HZFpXRkl3WTJ0b2FHSnRVbk5hVm5OblltMUdkRnBUUW1SSlNIZzRTVWR3VW1SWFZubGxVelZ0WVZjMWEweHRSakJrU0VrM1dFYzFZMkpzZURCWldGSXdZMnRvYUdKdFVuTmFWbk5uWW0xR2RGcFRRbVJKUkRCbldtNVdkVmt6VW5CaU1qUnZTVWRXYzFwWE1ITkpSelZvWWxkVmMwbEhiSHBYUlRGTlNVTnJaMlV4ZUhWWVNGSmpaRWhhYUdOcFFubGFXRkZ6U1Vkb2FHSnRVbk5hVTNoallteDRNRmhJVW1Oa1IzaDJaREpXZVZreVJucGFWVFZvWWxkVloxQlRRblZaVnpGc1RHNVNkbFJIT1ROYVdFcEVXVmhPYkV0RGF6ZFlSelZqWW14NE1GaElVbkJhYVVGdlNVTkdjR014YUU1VVEwRndTVWgwWTJKc2VIVllTRkpqWkVaNE1FeDVPR2RSV0ZwMllWZFJaMWxYTkdkaFZ6VnRZVmMxY0dSSFZXZGlSemwyWTBOQ2FXVlRRakJhVnpGM1lqTkthR050YkhObFUwSjVXbGN4ZG1SdGJIVmFlVUl3WVVkc2VrbEhXakZpYlU0d1lWYzVkVWxIV25saU1qQm5aRWRvYkVsSFpHeGtTRkpzWTJ4NGRWaElVbU5rUm5nd1lVZEdkVnBIZUd4SlJEQm5XVmhTTUdOcmFHaGliVkp6V2xaeloySkhPVE5hV0VwcVdWaE9iRlJ0Um5SYVUwSmtUekY0ZFZoSVVtTmtSbmd3V1ZoU01HTnJhR2hpYlZKeldsWnpaMkpIT1ROYVdFcHFXVmhPYkZSdFJuUmFVMEprU1VRd1oyTnRWakJQTVhoMVdFaFNZMlJHZURCamJWWXdTVVF3WjFveVZqQmtSMVo1UzBOQ2JHSkhWblJNUTBKMVdWY3hiRXhEUW5Cak1XaE9WRU5CY0VsRFJUbEpSelV4WWtkM1oxQXhlSFZZU0ZKalpFWjRNRmhJVW5OaU0yUnNZMjFPYUdNeVZrOVpWekZzU1VSd1kySnNlREJZU0ZKalpFWjRNR0p1Vm5OaVJIUmpZbXg0TUZoSVVtTmtSMFl3WkVoS1NWbFhOV3RpUjFaaVNVZDRkbVF5Vm5sWk1rWjZXbFUxYUdKWFZXZFlVMEU1U1Vkb2FHSnRVbk5hVkhSallteDRNRmhJVWpsWVJ6VmpaRVo0TUdOdFZqQmtXRXAxU1VoS2JHUkVkR05pYkhnd1psUjBZMkp1TUdkTFZIUmpZbXg0ZFdaVFFYQlBNWGgxU1d3eE9WeHVJbDE5XG4iXX0=
