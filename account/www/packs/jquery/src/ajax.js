define([
    "./core",
    "./var/document",
    "./var/rnothtmlwhite",
    "./ajax/var/location",
    "./ajax/var/nonce",
    "./ajax/var/rquery",
    "./core/init",
    "./ajax/parseXML",
    "./event/trigger",
    "./deferred",
    "./serialize" // jQuery.param
], function (jQuery, document, rnothtmlwhite, location, nonce, rquery) {
    "use strict";
    var r20 = /%20/g, rhash = /#.*$/, rantiCache = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg, 
    // #7653, #8125, #8152: local protocol detection
    rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, 
    /* Prefilters
     * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
     * 2) These are called:
     *    - BEFORE asking for a transport
     *    - AFTER param serialization (s.data is a string if s.processData is true)
     * 3) key is the dataType
     * 4) the catchall symbol "*" can be used
     * 5) execution will start with transport dataType and THEN continue down to "*" if needed
     */
    prefilters = {}, 
    /* Transports bindings
     * 1) key is the dataType
     * 2) the catchall symbol "*" can be used
     * 3) selection will start with transport dataType and THEN go to "*" if needed
     */
    transports = {}, 
    // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
    allTypes = "*/".concat("*"), 
    // Anchor tag for parsing the document origin
    originAnchor = document.createElement("a");
    originAnchor.href = location.href;
    // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
    function addToPrefiltersOrTransports(structure) {
        // dataTypeExpression is optional and defaults to "*"
        return function (dataTypeExpression, func) {
            if (typeof dataTypeExpression !== "string") {
                func = dataTypeExpression;
                dataTypeExpression = "*";
            }
            var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];
            if (jQuery.isFunction(func)) {
                // For each dataType in the dataTypeExpression
                while ((dataType = dataTypes[i++])) {
                    // Prepend if requested
                    if (dataType[0] === "+") {
                        dataType = dataType.slice(1) || "*";
                        (structure[dataType] = structure[dataType] || []).unshift(func);
                        // Otherwise append
                    }
                    else {
                        (structure[dataType] = structure[dataType] || []).push(func);
                    }
                }
            }
        };
    }
    // Base inspection function for prefilters and transports
    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {}, seekingTransport = (structure === transports);
        function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
                var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
                if (typeof dataTypeOrTransport === "string" &&
                    !seekingTransport && !inspected[dataTypeOrTransport]) {
                    options.dataTypes.unshift(dataTypeOrTransport);
                    inspect(dataTypeOrTransport);
                    return false;
                }
                else if (seekingTransport) {
                    return !(selected = dataTypeOrTransport);
                }
            });
            return selected;
        }
        return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
    }
    // A special extend for ajax options
    // that takes "flat" options (not to be deep extended)
    // Fixes #9887
    function ajaxExtend(target, src) {
        var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {};
        for (key in src) {
            if (src[key] !== undefined) {
                (flatOptions[key] ? target : (deep || (deep = {})))[key] = src[key];
            }
        }
        if (deep) {
            jQuery.extend(true, target, deep);
        }
        return target;
    }
    /* Handles responses to an ajax request:
     * - finds the right dataType (mediates between content-type and expected dataType)
     * - returns the corresponding response
     */
    function ajaxHandleResponses(s, jqXHR, responses) {
        var ct, type, finalDataType, firstDataType, contents = s.contents, dataTypes = s.dataTypes;
        // Remove auto dataType and get content-type in the process
        while (dataTypes[0] === "*") {
            dataTypes.shift();
            if (ct === undefined) {
                ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
            }
        }
        // Check if we're dealing with a known content-type
        if (ct) {
            for (type in contents) {
                if (contents[type] && contents[type].test(ct)) {
                    dataTypes.unshift(type);
                    break;
                }
            }
        }
        // Check to see if we have a response for the expected dataType
        if (dataTypes[0] in responses) {
            finalDataType = dataTypes[0];
        }
        else {
            // Try convertible dataTypes
            for (type in responses) {
                if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                    finalDataType = type;
                    break;
                }
                if (!firstDataType) {
                    firstDataType = type;
                }
            }
            // Or just use first one
            finalDataType = finalDataType || firstDataType;
        }
        // If we found a dataType
        // We add the dataType to the list if needed
        // and return the corresponding response
        if (finalDataType) {
            if (finalDataType !== dataTypes[0]) {
                dataTypes.unshift(finalDataType);
            }
            return responses[finalDataType];
        }
    }
    /* Chain conversions given the request and the original response
     * Also sets the responseXXX fields on the jqXHR instance
     */
    function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev, converters = {}, 
        // Work with a copy of dataTypes in case we need to modify it for conversion
        dataTypes = s.dataTypes.slice();
        // Create converters map with lowercased keys
        if (dataTypes[1]) {
            for (conv in s.converters) {
                converters[conv.toLowerCase()] = s.converters[conv];
            }
        }
        current = dataTypes.shift();
        // Convert to each sequential dataType
        while (current) {
            if (s.responseFields[current]) {
                jqXHR[s.responseFields[current]] = response;
            }
            // Apply the dataFilter if provided
            if (!prev && isSuccess && s.dataFilter) {
                response = s.dataFilter(response, s.dataType);
            }
            prev = current;
            current = dataTypes.shift();
            if (current) {
                // There's only work to do if current dataType is non-auto
                if (current === "*") {
                    current = prev;
                    // Convert response if prev dataType is non-auto and differs from current
                }
                else if (prev !== "*" && prev !== current) {
                    // Seek a direct converter
                    conv = converters[prev + " " + current] || converters["* " + current];
                    // If none found, seek a pair
                    if (!conv) {
                        for (conv2 in converters) {
                            // If conv2 outputs current
                            tmp = conv2.split(" ");
                            if (tmp[1] === current) {
                                // If prev can be converted to accepted input
                                conv = converters[prev + " " + tmp[0]] ||
                                    converters["* " + tmp[0]];
                                if (conv) {
                                    // Condense equivalence converters
                                    if (conv === true) {
                                        conv = converters[conv2];
                                        // Otherwise, insert the intermediate dataType
                                    }
                                    else if (converters[conv2] !== true) {
                                        current = tmp[0];
                                        dataTypes.unshift(tmp[1]);
                                    }
                                    break;
                                }
                            }
                        }
                    }
                    // Apply converter (if not an equivalence)
                    if (conv !== true) {
                        // Unless errors are allowed to bubble, catch and return them
                        if (conv && s.throws) {
                            response = conv(response);
                        }
                        else {
                            try {
                                response = conv(response);
                            }
                            catch (e) {
                                return {
                                    state: "parsererror",
                                    error: conv ? e : "No conversion from " + prev + " to " + current
                                };
                            }
                        }
                    }
                }
            }
        }
        return { state: "success", data: response };
    }
    jQuery.extend({
        // Counter for holding the number of active queries
        active: 0,
        // Last-Modified header cache for next request
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: location.href,
            type: "GET",
            isLocal: rlocalProtocol.test(location.protocol),
            global: true,
            processData: true,
            async: true,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            /*
            timeout: 0,
            data: null,
            dataType: null,
            username: null,
            password: null,
            cache: null,
            throws: false,
            traditional: false,
            headers: {},
            */
            accepts: {
                "*": allTypes,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: {
                xml: /\bxml\b/,
                html: /\bhtml/,
                json: /\bjson\b/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
            // Data converters
            // Keys separate source (or catchall "*") and destination types with a single space
            converters: {
                // Convert anything to text
                "* text": String,
                // Text to html (true = no transformation)
                "text html": true,
                // Evaluate text as a json expression
                "text json": JSON.parse,
                // Parse text as xml
                "text xml": jQuery.parseXML
            },
            // For options that shouldn't be deep extended:
            // you can add your own custom options here if
            // and when you create one that shouldn't be
            // deep extended (see ajaxExtend)
            flatOptions: {
                url: true,
                context: true
            }
        },
        // Creates a full fledged settings object into target
        // with both ajaxSettings and settings fields.
        // If target is omitted, writes into ajaxSettings.
        ajaxSetup: function (target, settings) {
            return settings ?
                // Building a settings object
                ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :
                // Extending ajaxSettings
                ajaxExtend(jQuery.ajaxSettings, target);
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        // Main method
        ajax: function (url, options) {
            // If url is an object, simulate pre-1.5 signature
            if (typeof url === "object") {
                options = url;
                url = undefined;
            }
            // Force options to be an object
            options = options || {};
            var transport, 
            // URL without anti-cache param
            cacheURL, 
            // Response headers
            responseHeadersString, responseHeaders, 
            // timeout handle
            timeoutTimer, 
            // Url cleanup var
            urlAnchor, 
            // Request state (becomes false upon send and true upon completion)
            completed, 
            // To know if global events are to be dispatched
            fireGlobals, 
            // Loop variable
            i, 
            // uncached part of the url
            uncached, 
            // Create the final options object
            s = jQuery.ajaxSetup({}, options), 
            // Callbacks context
            callbackContext = s.context || s, 
            // Context for global events is callbackContext if it is a DOM node or jQuery collection
            globalEventContext = s.context &&
                (callbackContext.nodeType || callbackContext.jquery) ?
                jQuery(callbackContext) :
                jQuery.event, 
            // Deferreds
            deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks("once memory"), 
            // Status-dependent callbacks
            statusCode = s.statusCode || {}, 
            // Headers (they are sent all at once)
            requestHeaders = {}, requestHeadersNames = {}, 
            // Default abort message
            strAbort = "canceled", 
            // Fake xhr
            jqXHR = {
                readyState: 0,
                // Builds headers hashtable if needed
                getResponseHeader: function (key) {
                    var match;
                    if (completed) {
                        if (!responseHeaders) {
                            responseHeaders = {};
                            while ((match = rheaders.exec(responseHeadersString))) {
                                responseHeaders[match[1].toLowerCase()] = match[2];
                            }
                        }
                        match = responseHeaders[key.toLowerCase()];
                    }
                    return match == null ? null : match;
                },
                // Raw string
                getAllResponseHeaders: function () {
                    return completed ? responseHeadersString : null;
                },
                // Caches the header
                setRequestHeader: function (name, value) {
                    if (completed == null) {
                        name = requestHeadersNames[name.toLowerCase()] =
                            requestHeadersNames[name.toLowerCase()] || name;
                        requestHeaders[name] = value;
                    }
                    return this;
                },
                // Overrides response content-type header
                overrideMimeType: function (type) {
                    if (completed == null) {
                        s.mimeType = type;
                    }
                    return this;
                },
                // Status-dependent callbacks
                statusCode: function (map) {
                    var code;
                    if (map) {
                        if (completed) {
                            // Execute the appropriate callbacks
                            jqXHR.always(map[jqXHR.status]);
                        }
                        else {
                            // Lazy-add the new callbacks in a way that preserves old ones
                            for (code in map) {
                                statusCode[code] = [statusCode[code], map[code]];
                            }
                        }
                    }
                    return this;
                },
                // Cancel the request
                abort: function (statusText) {
                    var finalText = statusText || strAbort;
                    if (transport) {
                        transport.abort(finalText);
                    }
                    done(0, finalText);
                    return this;
                }
            };
            // Attach deferreds
            deferred.promise(jqXHR);
            // Add protocol if not provided (prefilters might expect it)
            // Handle falsy url in the settings object (#10093: consistency with old signature)
            // We also use the url parameter if available
            s.url = ((url || s.url || location.href) + "")
                .replace(rprotocol, location.protocol + "//");
            // Alias method option to type as per ticket #12004
            s.type = options.method || options.type || s.method || s.type;
            // Extract dataTypes list
            s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""];
            // A cross-domain request is in order when the origin doesn't match the current origin.
            if (s.crossDomain == null) {
                urlAnchor = document.createElement("a");
                // Support: IE <=8 - 11, Edge 12 - 13
                // IE throws exception on accessing the href property if url is malformed,
                // e.g. http://example.com:80x/
                try {
                    urlAnchor.href = s.url;
                    // Support: IE <=8 - 11 only
                    // Anchor's host property isn't correctly set when s.url is relative
                    urlAnchor.href = urlAnchor.href;
                    s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
                        urlAnchor.protocol + "//" + urlAnchor.host;
                }
                catch (e) {
                    // If there is an error parsing the URL, assume it is crossDomain,
                    // it can be rejected by the transport if it is invalid
                    s.crossDomain = true;
                }
            }
            // Convert data if not already a string
            if (s.data && s.processData && typeof s.data !== "string") {
                s.data = jQuery.param(s.data, s.traditional);
            }
            // Apply prefilters
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
            // If request was aborted inside a prefilter, stop there
            if (completed) {
                return jqXHR;
            }
            // We can fire global events as of now if asked to
            // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
            fireGlobals = jQuery.event && s.global;
            // Watch for a new set of requests
            if (fireGlobals && jQuery.active++ === 0) {
                jQuery.event.trigger("ajaxStart");
            }
            // Uppercase the type
            s.type = s.type.toUpperCase();
            // Determine if request has content
            s.hasContent = !rnoContent.test(s.type);
            // Save the URL in case we're toying with the If-Modified-Since
            // and/or If-None-Match header later on
            // Remove hash to simplify url manipulation
            cacheURL = s.url.replace(rhash, "");
            // More options handling for requests with no content
            if (!s.hasContent) {
                // Remember the hash so we can put it back
                uncached = s.url.slice(cacheURL.length);
                // If data is available, append data to url
                if (s.data) {
                    cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;
                    // #9682: remove data so that it's not used in an eventual retry
                    delete s.data;
                }
                // Add or update anti-cache param if needed
                if (s.cache === false) {
                    cacheURL = cacheURL.replace(rantiCache, "$1");
                    uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + (nonce++) + uncached;
                }
                // Put hash and anti-cache on the URL that will be requested (gh-1732)
                s.url = cacheURL + uncached;
                // Change '%20' to '+' if this is encoded form body content (gh-2658)
            }
            else if (s.data && s.processData &&
                (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
                s.data = s.data.replace(r20, "+");
            }
            // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
            if (s.ifModified) {
                if (jQuery.lastModified[cacheURL]) {
                    jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
                }
                if (jQuery.etag[cacheURL]) {
                    jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
                }
            }
            // Set the correct header, if data is being sent
            if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
                jqXHR.setRequestHeader("Content-Type", s.contentType);
            }
            // Set the Accepts header for the server, depending on the dataType
            jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ?
                s.accepts[s.dataTypes[0]] +
                    (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") :
                s.accepts["*"]);
            // Check for headers option
            for (i in s.headers) {
                jqXHR.setRequestHeader(i, s.headers[i]);
            }
            // Allow custom headers/mimetypes and early abort
            if (s.beforeSend &&
                (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {
                // Abort if not done already and return
                return jqXHR.abort();
            }
            // Aborting is no longer a cancellation
            strAbort = "abort";
            // Install callbacks on deferreds
            completeDeferred.add(s.complete);
            jqXHR.done(s.success);
            jqXHR.fail(s.error);
            // Get transport
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
            // If no transport, we auto-abort
            if (!transport) {
                done(-1, "No Transport");
            }
            else {
                jqXHR.readyState = 1;
                // Send global event
                if (fireGlobals) {
                    globalEventContext.trigger("ajaxSend", [jqXHR, s]);
                }
                // If request was aborted inside ajaxSend, stop there
                if (completed) {
                    return jqXHR;
                }
                // Timeout
                if (s.async && s.timeout > 0) {
                    timeoutTimer = window.setTimeout(function () {
                        jqXHR.abort("timeout");
                    }, s.timeout);
                }
                try {
                    completed = false;
                    transport.send(requestHeaders, done);
                }
                catch (e) {
                    // Rethrow post-completion exceptions
                    if (completed) {
                        throw e;
                    }
                    // Propagate others as results
                    done(-1, e);
                }
            }
            // Callback for when everything is done
            function done(status, nativeStatusText, responses, headers) {
                var isSuccess, success, error, response, modified, statusText = nativeStatusText;
                // Ignore repeat invocations
                if (completed) {
                    return;
                }
                completed = true;
                // Clear timeout if it exists
                if (timeoutTimer) {
                    window.clearTimeout(timeoutTimer);
                }
                // Dereference transport for early garbage collection
                // (no matter how long the jqXHR object will be used)
                transport = undefined;
                // Cache response headers
                responseHeadersString = headers || "";
                // Set readyState
                jqXHR.readyState = status > 0 ? 4 : 0;
                // Determine if successful
                isSuccess = status >= 200 && status < 300 || status === 304;
                // Get response data
                if (responses) {
                    response = ajaxHandleResponses(s, jqXHR, responses);
                }
                // Convert no matter what (that way responseXXX fields are always set)
                response = ajaxConvert(s, response, jqXHR, isSuccess);
                // If successful, handle type chaining
                if (isSuccess) {
                    // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                    if (s.ifModified) {
                        modified = jqXHR.getResponseHeader("Last-Modified");
                        if (modified) {
                            jQuery.lastModified[cacheURL] = modified;
                        }
                        modified = jqXHR.getResponseHeader("etag");
                        if (modified) {
                            jQuery.etag[cacheURL] = modified;
                        }
                    }
                    // if no content
                    if (status === 204 || s.type === "HEAD") {
                        statusText = "nocontent";
                        // if not modified
                    }
                    else if (status === 304) {
                        statusText = "notmodified";
                        // If we have data, let's convert it
                    }
                    else {
                        statusText = response.state;
                        success = response.data;
                        error = response.error;
                        isSuccess = !error;
                    }
                }
                else {
                    // Extract error from statusText and normalize for non-aborts
                    error = statusText;
                    if (status || !statusText) {
                        statusText = "error";
                        if (status < 0) {
                            status = 0;
                        }
                    }
                }
                // Set data for the fake xhr object
                jqXHR.status = status;
                jqXHR.statusText = (nativeStatusText || statusText) + "";
                // Success/Error
                if (isSuccess) {
                    deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
                }
                else {
                    deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
                }
                // Status-dependent callbacks
                jqXHR.statusCode(statusCode);
                statusCode = undefined;
                if (fireGlobals) {
                    globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
                }
                // Complete
                completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);
                if (fireGlobals) {
                    globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
                    // Handle the global AJAX counter
                    if (!(--jQuery.active)) {
                        jQuery.event.trigger("ajaxStop");
                    }
                }
            }
            return jqXHR;
        },
        getJSON: function (url, data, callback) {
            return jQuery.get(url, data, callback, "json");
        },
        getScript: function (url, callback) {
            return jQuery.get(url, undefined, callback, "script");
        }
    });
    jQuery.each(["get", "post"], function (i, method) {
        jQuery[method] = function (url, data, callback, type) {
            // Shift arguments if data argument was omitted
            if (jQuery.isFunction(data)) {
                type = type || callback;
                callback = data;
                data = undefined;
            }
            // The url can be an options object (which then must have .url)
            return jQuery.ajax(jQuery.extend({
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
            }, jQuery.isPlainObject(url) && url));
        };
    });
    return jQuery;
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInd3dy9wYWNrcy9qcXVlcnkvc3JjL2FqYXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDO0lBQ0gsUUFBUTtJQUNSLGdCQUFnQjtJQUNoQixxQkFBcUI7SUFDckIscUJBQXFCO0lBQ3JCLGtCQUFrQjtJQUNsQixtQkFBbUI7SUFDbkIsYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixpQkFBaUI7SUFDakIsWUFBWTtJQUNaLGFBQWEsQ0FBQyxlQUFlO0NBQ2hDLEVBQUUsVUFBVSxNQUFNLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLE1BQU07SUFDakUsWUFBWSxDQUFDO0lBQ2IsSUFBSSxHQUFHLEdBQUcsTUFBTSxFQUFFLEtBQUssR0FBRyxNQUFNLEVBQUUsVUFBVSxHQUFHLGVBQWUsRUFBRSxRQUFRLEdBQUcsNEJBQTRCO0lBQ3ZHLGdEQUFnRDtJQUNoRCxjQUFjLEdBQUcsMkRBQTJELEVBQUUsVUFBVSxHQUFHLGdCQUFnQixFQUFFLFNBQVMsR0FBRyxPQUFPO0lBQ2hJOzs7Ozs7OztPQVFHO0lBQ0gsVUFBVSxHQUFHLEVBQUU7SUFDZjs7OztPQUlHO0lBQ0gsVUFBVSxHQUFHLEVBQUU7SUFDZix1RkFBdUY7SUFDdkYsUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO0lBQzNCLDZDQUE2QztJQUM3QyxZQUFZLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMzQyxZQUFZLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUM7SUFDbEMsdUVBQXVFO0lBQ3ZFLHFDQUFxQyxTQUFTO1FBQzFDLHFEQUFxRDtRQUNyRCxNQUFNLENBQUMsVUFBVSxrQkFBa0IsRUFBRSxJQUFJO1lBQ3JDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sa0JBQWtCLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDekMsSUFBSSxHQUFHLGtCQUFrQixDQUFDO2dCQUMx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UixJQUFJLEVBQUUsTUFBTTtnQkFDWixRQUFRLEVBQUUsSUFBSTtnQkFDZCxJQUFJLEVBQUUsSUFBSTtnQkFDVixPQUFPLEVBQUUsUUFBUTthQUNwQixFQUFFLE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMxQyxDQUFDLENBQUM7SUFDTixDQUFDLENBQUMsQ0FBQztJQUNILE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDbEIsQ0FBQyxDQUFDLENBQUM7QUFFSCx1NjREQUF1NjREIiwiZmlsZSI6Ind3dy9wYWNrcy9qcXVlcnkvc3JjL2FqYXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoW1xuICAgIFwiLi9jb3JlXCIsXG4gICAgXCIuL3Zhci9kb2N1bWVudFwiLFxuICAgIFwiLi92YXIvcm5vdGh0bWx3aGl0ZVwiLFxuICAgIFwiLi9hamF4L3Zhci9sb2NhdGlvblwiLFxuICAgIFwiLi9hamF4L3Zhci9ub25jZVwiLFxuICAgIFwiLi9hamF4L3Zhci9ycXVlcnlcIixcbiAgICBcIi4vY29yZS9pbml0XCIsXG4gICAgXCIuL2FqYXgvcGFyc2VYTUxcIixcbiAgICBcIi4vZXZlbnQvdHJpZ2dlclwiLFxuICAgIFwiLi9kZWZlcnJlZFwiLFxuICAgIFwiLi9zZXJpYWxpemVcIiAvLyBqUXVlcnkucGFyYW1cbl0sIGZ1bmN0aW9uIChqUXVlcnksIGRvY3VtZW50LCBybm90aHRtbHdoaXRlLCBsb2NhdGlvbiwgbm9uY2UsIHJxdWVyeSkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIHZhciByMjAgPSAvJTIwL2csIHJoYXNoID0gLyMuKiQvLCByYW50aUNhY2hlID0gLyhbPyZdKV89W14mXSovLCByaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsIFxuICAgIC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuICAgIHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sIHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLCBycHJvdG9jb2wgPSAvXlxcL1xcLy8sIFxuICAgIC8qIFByZWZpbHRlcnNcbiAgICAgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuICAgICAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG4gICAgICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuICAgICAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcbiAgICAgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG4gICAgICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuICAgICAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG4gICAgICovXG4gICAgcHJlZmlsdGVycyA9IHt9LCBcbiAgICAvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG4gICAgICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuICAgICAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcbiAgICAgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcbiAgICAgKi9cbiAgICB0cmFuc3BvcnRzID0ge30sIFxuICAgIC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuICAgIGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdChcIipcIiksIFxuICAgIC8vIEFuY2hvciB0YWcgZm9yIHBhcnNpbmcgdGhlIGRvY3VtZW50IG9yaWdpblxuICAgIG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xuICAgIG9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcbiAgICAvLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG4gICAgZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKHN0cnVjdHVyZSkge1xuICAgICAgICAvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG4gICAgICAgICAgICAgICAgZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZGF0YVR5cGUsIGkgPSAwLCBkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaChybm90aHRtbHdoaXRlKSB8fCBbXTtcbiAgICAgICAgICAgIGlmIChqUXVlcnkuaXNGdW5jdGlvbihmdW5jKSkge1xuICAgICAgICAgICAgICAgIC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cbiAgICAgICAgICAgICAgICB3aGlsZSAoKGRhdGFUeXBlID0gZGF0YVR5cGVzW2krK10pKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhVHlwZVswXSA9PT0gXCIrXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoMSkgfHwgXCIqXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAoc3RydWN0dXJlW2RhdGFUeXBlXSA9IHN0cnVjdHVyZVtkYXRhVHlwZV0gfHwgW10pLnVuc2hpZnQoZnVuYyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBPdGhlcndpc2UgYXBwZW5kXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAoc3RydWN0dXJlW2RhdGFUeXBlXSA9IHN0cnVjdHVyZVtkYXRhVHlwZV0gfHwgW10pLnB1c2goZnVuYyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuICAgIGZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUikge1xuICAgICAgICB2YXIgaW5zcGVjdGVkID0ge30sIHNlZWtpbmdUcmFuc3BvcnQgPSAoc3RydWN0dXJlID09PSB0cmFuc3BvcnRzKTtcbiAgICAgICAgZnVuY3Rpb24gaW5zcGVjdChkYXRhVHlwZSkge1xuICAgICAgICAgICAgdmFyIHNlbGVjdGVkO1xuICAgICAgICAgICAgaW5zcGVjdGVkW2RhdGFUeXBlXSA9IHRydWU7XG4gICAgICAgICAgICBqUXVlcnkuZWFjaChzdHJ1Y3R1cmVbZGF0YVR5cGVdIHx8IFtdLCBmdW5jdGlvbiAoXywgcHJlZmlsdGVyT3JGYWN0b3J5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3Rvcnkob3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUik7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICAgICAgICAgICFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbZGF0YVR5cGVPclRyYW5zcG9ydF0pIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdChkYXRhVHlwZU9yVHJhbnNwb3J0KTtcbiAgICAgICAgICAgICAgICAgICAgaW5zcGVjdChkYXRhVHlwZU9yVHJhbnNwb3J0KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzZWVraW5nVHJhbnNwb3J0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhKHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gc2VsZWN0ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluc3BlY3Qob3B0aW9ucy5kYXRhVHlwZXNbMF0pIHx8ICFpbnNwZWN0ZWRbXCIqXCJdICYmIGluc3BlY3QoXCIqXCIpO1xuICAgIH1cbiAgICAvLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbiAgICAvLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuICAgIC8vIEZpeGVzICM5ODg3XG4gICAgZnVuY3Rpb24gYWpheEV4dGVuZCh0YXJnZXQsIHNyYykge1xuICAgICAgICB2YXIga2V5LCBkZWVwLCBmbGF0T3B0aW9ucyA9IGpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307XG4gICAgICAgIGZvciAoa2V5IGluIHNyYykge1xuICAgICAgICAgICAgaWYgKHNyY1trZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAoZmxhdE9wdGlvbnNba2V5XSA/IHRhcmdldCA6IChkZWVwIHx8IChkZWVwID0ge30pKSlba2V5XSA9IHNyY1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChkZWVwKSB7XG4gICAgICAgICAgICBqUXVlcnkuZXh0ZW5kKHRydWUsIHRhcmdldCwgZGVlcCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG4gICAgLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICAgICAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpXG4gICAgICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyhzLCBqcVhIUiwgcmVzcG9uc2VzKSB7XG4gICAgICAgIHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSwgY29udGVudHMgPSBzLmNvbnRlbnRzLCBkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcbiAgICAgICAgLy8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3NcbiAgICAgICAgd2hpbGUgKGRhdGFUeXBlc1swXSA9PT0gXCIqXCIpIHtcbiAgICAgICAgICAgIGRhdGFUeXBlcy5zaGlmdCgpO1xuICAgICAgICAgICAgaWYgKGN0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJDb250ZW50LVR5cGVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG4gICAgICAgIGlmIChjdCkge1xuICAgICAgICAgICAgZm9yICh0eXBlIGluIGNvbnRlbnRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnRzW3R5cGVdICYmIGNvbnRlbnRzW3R5cGVdLnRlc3QoY3QpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlcy51bnNoaWZ0KHR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG4gICAgICAgIGlmIChkYXRhVHlwZXNbMF0gaW4gcmVzcG9uc2VzKSB7XG4gICAgICAgICAgICBmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWzBdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xuICAgICAgICAgICAgZm9yICh0eXBlIGluIHJlc3BvbnNlcykge1xuICAgICAgICAgICAgICAgIGlmICghZGF0YVR5cGVzWzBdIHx8IHMuY29udmVydGVyc1t0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbMF1dKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFmaXJzdERhdGFUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuICAgICAgICAgICAgZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG4gICAgICAgIC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG4gICAgICAgIC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcbiAgICAgICAgaWYgKGZpbmFsRGF0YVR5cGUpIHtcbiAgICAgICAgICAgIGlmIChmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbMF0pIHtcbiAgICAgICAgICAgICAgICBkYXRhVHlwZXMudW5zaGlmdChmaW5hbERhdGFUeXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZXNbZmluYWxEYXRhVHlwZV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICAgICAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFqYXhDb252ZXJ0KHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzKSB7XG4gICAgICAgIHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LCBjb252ZXJ0ZXJzID0ge30sIFxuICAgICAgICAvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG4gICAgICAgIGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG4gICAgICAgIC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xuICAgICAgICBpZiAoZGF0YVR5cGVzWzFdKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnYgaW4gcy5jb252ZXJ0ZXJzKSB7XG4gICAgICAgICAgICAgICAgY29udmVydGVyc1tjb252LnRvTG93ZXJDYXNlKCldID0gcy5jb252ZXJ0ZXJzW2NvbnZdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcbiAgICAgICAgLy8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcbiAgICAgICAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICAgICAgICAgIGlmIChzLnJlc3BvbnNlRmllbGRzW2N1cnJlbnRdKSB7XG4gICAgICAgICAgICAgICAganFYSFJbcy5yZXNwb25zZUZpZWxkc1tjdXJyZW50XV0gPSByZXNwb25zZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG4gICAgICAgICAgICBpZiAoIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlcikge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKHJlc3BvbnNlLCBzLmRhdGFUeXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByZXYgPSBjdXJyZW50O1xuICAgICAgICAgICAgY3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQgPT09IFwiKlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBwcmV2O1xuICAgICAgICAgICAgICAgICAgICAvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcbiAgICAgICAgICAgICAgICAgICAgY29udiA9IGNvbnZlcnRlcnNbcHJldiArIFwiIFwiICsgY3VycmVudF0gfHwgY29udmVydGVyc1tcIiogXCIgKyBjdXJyZW50XTtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb252KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnYyIGluIGNvbnZlcnRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXAgPSBjb252Mi5zcGxpdChcIiBcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRtcFsxXSA9PT0gY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udiA9IGNvbnZlcnRlcnNbcHJldiArIFwiIFwiICsgdG1wWzBdXSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udmVydGVyc1tcIiogXCIgKyB0bXBbMF1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnYgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb252ID0gY29udmVydGVyc1tjb252Ml07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoY29udmVydGVyc1tjb252Ml0gIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50ID0gdG1wWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlcy51bnNoaWZ0KHRtcFsxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnYgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb252ICYmIHMudGhyb3dzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBjb252KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gY29udihyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbiAgICB9XG4gICAgalF1ZXJ5LmV4dGVuZCh7XG4gICAgICAgIC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuICAgICAgICBhY3RpdmU6IDAsXG4gICAgICAgIC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3RcbiAgICAgICAgbGFzdE1vZGlmaWVkOiB7fSxcbiAgICAgICAgZXRhZzoge30sXG4gICAgICAgIGFqYXhTZXR0aW5nczoge1xuICAgICAgICAgICAgdXJsOiBsb2NhdGlvbi5ocmVmLFxuICAgICAgICAgICAgdHlwZTogXCJHRVRcIixcbiAgICAgICAgICAgIGlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QobG9jYXRpb24ucHJvdG9jb2wpLFxuICAgICAgICAgICAgZ2xvYmFsOiB0cnVlLFxuICAgICAgICAgICAgcHJvY2Vzc0RhdGE6IHRydWUsXG4gICAgICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgIHRpbWVvdXQ6IDAsXG4gICAgICAgICAgICBkYXRhOiBudWxsLFxuICAgICAgICAgICAgZGF0YVR5cGU6IG51bGwsXG4gICAgICAgICAgICB1c2VybmFtZTogbnVsbCxcbiAgICAgICAgICAgIHBhc3N3b3JkOiBudWxsLFxuICAgICAgICAgICAgY2FjaGU6IG51bGwsXG4gICAgICAgICAgICB0aHJvd3M6IGZhbHNlLFxuICAgICAgICAgICAgdHJhZGl0aW9uYWw6IGZhbHNlLFxuICAgICAgICAgICAgaGVhZGVyczoge30sXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgYWNjZXB0czoge1xuICAgICAgICAgICAgICAgIFwiKlwiOiBhbGxUeXBlcyxcbiAgICAgICAgICAgICAgICB0ZXh0OiBcInRleHQvcGxhaW5cIixcbiAgICAgICAgICAgICAgICBodG1sOiBcInRleHQvaHRtbFwiLFxuICAgICAgICAgICAgICAgIHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG4gICAgICAgICAgICAgICAganNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbnRlbnRzOiB7XG4gICAgICAgICAgICAgICAgeG1sOiAvXFxieG1sXFxiLyxcbiAgICAgICAgICAgICAgICBodG1sOiAvXFxiaHRtbC8sXG4gICAgICAgICAgICAgICAganNvbjogL1xcYmpzb25cXGIvXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVzcG9uc2VGaWVsZHM6IHtcbiAgICAgICAgICAgICAgICB4bWw6IFwicmVzcG9uc2VYTUxcIixcbiAgICAgICAgICAgICAgICB0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuICAgICAgICAgICAgICAgIGpzb246IFwicmVzcG9uc2VKU09OXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyBEYXRhIGNvbnZlcnRlcnNcbiAgICAgICAgICAgIC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2VcbiAgICAgICAgICAgIGNvbnZlcnRlcnM6IHtcbiAgICAgICAgICAgICAgICAvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcbiAgICAgICAgICAgICAgICBcIiogdGV4dFwiOiBTdHJpbmcsXG4gICAgICAgICAgICAgICAgLy8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG4gICAgICAgICAgICAgICAgXCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG4gICAgICAgICAgICAgICAgXCJ0ZXh0IGpzb25cIjogSlNPTi5wYXJzZSxcbiAgICAgICAgICAgICAgICAvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuICAgICAgICAgICAgICAgIFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcbiAgICAgICAgICAgIC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcbiAgICAgICAgICAgIC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG4gICAgICAgICAgICAvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcbiAgICAgICAgICAgIGZsYXRPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgdXJsOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbnRleHQ6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgLy8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcbiAgICAgICAgLy8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuICAgICAgICAvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuICAgICAgICBhamF4U2V0dXA6IGZ1bmN0aW9uICh0YXJnZXQsIHNldHRpbmdzKSB7XG4gICAgICAgICAgICByZXR1cm4gc2V0dGluZ3MgP1xuICAgICAgICAgICAgICAgIC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG4gICAgICAgICAgICAgICAgYWpheEV4dGVuZChhamF4RXh0ZW5kKHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyksIHNldHRpbmdzKSA6XG4gICAgICAgICAgICAgICAgLy8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuICAgICAgICAgICAgICAgIGFqYXhFeHRlbmQoalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0KTtcbiAgICAgICAgfSxcbiAgICAgICAgYWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKHByZWZpbHRlcnMpLFxuICAgICAgICBhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHModHJhbnNwb3J0cyksXG4gICAgICAgIC8vIE1haW4gbWV0aG9kXG4gICAgICAgIGFqYXg6IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG4gICAgICAgICAgICBpZiAodHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB1cmw7XG4gICAgICAgICAgICAgICAgdXJsID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3RcbiAgICAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICAgICAgdmFyIHRyYW5zcG9ydCwgXG4gICAgICAgICAgICAvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG4gICAgICAgICAgICBjYWNoZVVSTCwgXG4gICAgICAgICAgICAvLyBSZXNwb25zZSBoZWFkZXJzXG4gICAgICAgICAgICByZXNwb25zZUhlYWRlcnNTdHJpbmcsIHJlc3BvbnNlSGVhZGVycywgXG4gICAgICAgICAgICAvLyB0aW1lb3V0IGhhbmRsZVxuICAgICAgICAgICAgdGltZW91dFRpbWVyLCBcbiAgICAgICAgICAgIC8vIFVybCBjbGVhbnVwIHZhclxuICAgICAgICAgICAgdXJsQW5jaG9yLCBcbiAgICAgICAgICAgIC8vIFJlcXVlc3Qgc3RhdGUgKGJlY29tZXMgZmFsc2UgdXBvbiBzZW5kIGFuZCB0cnVlIHVwb24gY29tcGxldGlvbilcbiAgICAgICAgICAgIGNvbXBsZXRlZCwgXG4gICAgICAgICAgICAvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcbiAgICAgICAgICAgIGZpcmVHbG9iYWxzLCBcbiAgICAgICAgICAgIC8vIExvb3AgdmFyaWFibGVcbiAgICAgICAgICAgIGksIFxuICAgICAgICAgICAgLy8gdW5jYWNoZWQgcGFydCBvZiB0aGUgdXJsXG4gICAgICAgICAgICB1bmNhY2hlZCwgXG4gICAgICAgICAgICAvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG4gICAgICAgICAgICBzID0galF1ZXJ5LmFqYXhTZXR1cCh7fSwgb3B0aW9ucyksIFxuICAgICAgICAgICAgLy8gQ2FsbGJhY2tzIGNvbnRleHRcbiAgICAgICAgICAgIGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLCBcbiAgICAgICAgICAgIC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cbiAgICAgICAgICAgIGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuICAgICAgICAgICAgICAgIChjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSkgP1xuICAgICAgICAgICAgICAgIGpRdWVyeShjYWxsYmFja0NvbnRleHQpIDpcbiAgICAgICAgICAgICAgICBqUXVlcnkuZXZlbnQsIFxuICAgICAgICAgICAgLy8gRGVmZXJyZWRzXG4gICAgICAgICAgICBkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLCBjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLCBcbiAgICAgICAgICAgIC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG4gICAgICAgICAgICBzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LCBcbiAgICAgICAgICAgIC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG4gICAgICAgICAgICByZXF1ZXN0SGVhZGVycyA9IHt9LCByZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sIFxuICAgICAgICAgICAgLy8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG4gICAgICAgICAgICBzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIiwgXG4gICAgICAgICAgICAvLyBGYWtlIHhoclxuICAgICAgICAgICAganFYSFIgPSB7XG4gICAgICAgICAgICAgICAgcmVhZHlTdGF0ZTogMCxcbiAgICAgICAgICAgICAgICAvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG4gICAgICAgICAgICAgICAgZ2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29tcGxldGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlSGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgobWF0Y2ggPSByaGVhZGVycy5leGVjKHJlc3BvbnNlSGVhZGVyc1N0cmluZykpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlSGVhZGVyc1ttYXRjaFsxXS50b0xvd2VyQ2FzZSgpXSA9IG1hdGNoWzJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzW2tleS50b0xvd2VyQ2FzZSgpXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIC8vIFJhdyBzdHJpbmdcbiAgICAgICAgICAgICAgICBnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbXBsZXRlZCA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAvLyBDYWNoZXMgdGhlIGhlYWRlclxuICAgICAgICAgICAgICAgIHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29tcGxldGVkID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzW25hbWUudG9Mb3dlckNhc2UoKV0gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RIZWFkZXJzTmFtZXNbbmFtZS50b0xvd2VyQ2FzZSgpXSB8fCBuYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEhlYWRlcnNbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG4gICAgICAgICAgICAgICAgb3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBsZXRlZCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzLm1pbWVUeXBlID0gdHlwZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG4gICAgICAgICAgICAgICAgc3RhdHVzQ29kZTogZnVuY3Rpb24gKG1hcCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29kZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBsZXRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpxWEhSLmFsd2F5cyhtYXBbanFYSFIuc3RhdHVzXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrcyBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29kZSBpbiBtYXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzQ29kZVtjb2RlXSA9IFtzdGF0dXNDb2RlW2NvZGVdLCBtYXBbY29kZV1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuICAgICAgICAgICAgICAgIGFib3J0OiBmdW5jdGlvbiAoc3RhdHVzVGV4dCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zcG9ydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNwb3J0LmFib3J0KGZpbmFsVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZG9uZSgwLCBmaW5hbFRleHQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gQXR0YWNoIGRlZmVycmVkc1xuICAgICAgICAgICAgZGVmZXJyZWQucHJvbWlzZShqcVhIUik7XG4gICAgICAgICAgICAvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcbiAgICAgICAgICAgIC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG4gICAgICAgICAgICAvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcbiAgICAgICAgICAgIHMudXJsID0gKCh1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZikgKyBcIlwiKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIpO1xuICAgICAgICAgICAgLy8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XG4gICAgICAgICAgICBzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuICAgICAgICAgICAgLy8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuICAgICAgICAgICAgcy5kYXRhVHlwZXMgPSAocy5kYXRhVHlwZSB8fCBcIipcIikudG9Mb3dlckNhc2UoKS5tYXRjaChybm90aHRtbHdoaXRlKSB8fCBbXCJcIl07XG4gICAgICAgICAgICAvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cbiAgICAgICAgICAgIGlmIChzLmNyb3NzRG9tYWluID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbiAgICAgICAgICAgICAgICAvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSwgRWRnZSAxMiAtIDEzXG4gICAgICAgICAgICAgICAgLy8gSUUgdGhyb3dzIGV4Y2VwdGlvbiBvbiBhY2Nlc3NpbmcgdGhlIGhyZWYgcHJvcGVydHkgaWYgdXJsIGlzIG1hbGZvcm1lZCxcbiAgICAgICAgICAgICAgICAvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcbiAgICAgICAgICAgICAgICAgICAgLy8gU3VwcG9ydDogSUUgPD04IC0gMTEgb25seVxuICAgICAgICAgICAgICAgICAgICAvLyBBbmNob3IncyBob3N0IHByb3BlcnR5IGlzbid0IGNvcnJlY3RseSBzZXQgd2hlbiBzLnVybCBpcyByZWxhdGl2ZVxuICAgICAgICAgICAgICAgICAgICB1cmxBbmNob3IuaHJlZiA9IHVybEFuY2hvci5ocmVmO1xuICAgICAgICAgICAgICAgICAgICBzLmNyb3NzRG9tYWluID0gb3JpZ2luQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgb3JpZ2luQW5jaG9yLmhvc3QgIT09XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG4gICAgICAgICAgICAgICAgICAgIC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcbiAgICAgICAgICAgICAgICAgICAgcy5jcm9zc0RvbWFpbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG4gICAgICAgICAgICBpZiAocy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHMuZGF0YSA9IGpRdWVyeS5wYXJhbShzLmRhdGEsIHMudHJhZGl0aW9uYWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQXBwbHkgcHJlZmlsdGVyc1xuICAgICAgICAgICAgaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMocHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIpO1xuICAgICAgICAgICAgLy8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcbiAgICAgICAgICAgIGlmIChjb21wbGV0ZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ganFYSFI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuICAgICAgICAgICAgLy8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcbiAgICAgICAgICAgIGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuICAgICAgICAgICAgLy8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuICAgICAgICAgICAgaWYgKGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGpRdWVyeS5ldmVudC50cmlnZ2VyKFwiYWpheFN0YXJ0XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVXBwZXJjYXNlIHRoZSB0eXBlXG4gICAgICAgICAgICBzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgIC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG4gICAgICAgICAgICBzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KHMudHlwZSk7XG4gICAgICAgICAgICAvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2VcbiAgICAgICAgICAgIC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuICAgICAgICAgICAgLy8gUmVtb3ZlIGhhc2ggdG8gc2ltcGxpZnkgdXJsIG1hbmlwdWxhdGlvblxuICAgICAgICAgICAgY2FjaGVVUkwgPSBzLnVybC5yZXBsYWNlKHJoYXNoLCBcIlwiKTtcbiAgICAgICAgICAgIC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG4gICAgICAgICAgICBpZiAoIXMuaGFzQ29udGVudCkge1xuICAgICAgICAgICAgICAgIC8vIFJlbWVtYmVyIHRoZSBoYXNoIHNvIHdlIGNhbiBwdXQgaXQgYmFja1xuICAgICAgICAgICAgICAgIHVuY2FjaGVkID0gcy51cmwuc2xpY2UoY2FjaGVVUkwubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSwgYXBwZW5kIGRhdGEgdG8gdXJsXG4gICAgICAgICAgICAgICAgaWYgKHMuZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBjYWNoZVVSTCArPSAocnF1ZXJ5LnRlc3QoY2FjaGVVUkwpID8gXCImXCIgOiBcIj9cIikgKyBzLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHMuZGF0YTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxuICAgICAgICAgICAgICAgIGlmIChzLmNhY2hlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICBjYWNoZVVSTCA9IGNhY2hlVVJMLnJlcGxhY2UocmFudGlDYWNoZSwgXCIkMVwiKTtcbiAgICAgICAgICAgICAgICAgICAgdW5jYWNoZWQgPSAocnF1ZXJ5LnRlc3QoY2FjaGVVUkwpID8gXCImXCIgOiBcIj9cIikgKyBcIl89XCIgKyAobm9uY2UrKykgKyB1bmNhY2hlZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gUHV0IGhhc2ggYW5kIGFudGktY2FjaGUgb24gdGhlIFVSTCB0aGF0IHdpbGwgYmUgcmVxdWVzdGVkIChnaC0xNzMyKVxuICAgICAgICAgICAgICAgIHMudXJsID0gY2FjaGVVUkwgKyB1bmNhY2hlZDtcbiAgICAgICAgICAgICAgICAvLyBDaGFuZ2UgJyUyMCcgdG8gJysnIGlmIHRoaXMgaXMgZW5jb2RlZCBmb3JtIGJvZHkgY29udGVudCAoZ2gtMjY1OClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmXG4gICAgICAgICAgICAgICAgKHMuY29udGVudFR5cGUgfHwgXCJcIikuaW5kZXhPZihcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHMuZGF0YSA9IHMuZGF0YS5yZXBsYWNlKHIyMCwgXCIrXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cbiAgICAgICAgICAgIGlmIChzLmlmTW9kaWZpZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoalF1ZXJ5Lmxhc3RNb2RpZmllZFtjYWNoZVVSTF0pIHtcbiAgICAgICAgICAgICAgICAgICAganFYSFIuc2V0UmVxdWVzdEhlYWRlcihcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbY2FjaGVVUkxdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGpRdWVyeS5ldGFnW2NhY2hlVVJMXSkge1xuICAgICAgICAgICAgICAgICAgICBqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1tjYWNoZVVSTF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuICAgICAgICAgICAgaWYgKHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSkge1xuICAgICAgICAgICAgICAgIGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXG4gICAgICAgICAgICBqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFwiQWNjZXB0XCIsIHMuZGF0YVR5cGVzWzBdICYmIHMuYWNjZXB0c1tzLmRhdGFUeXBlc1swXV0gP1xuICAgICAgICAgICAgICAgIHMuYWNjZXB0c1tzLmRhdGFUeXBlc1swXV0gK1xuICAgICAgICAgICAgICAgICAgICAocy5kYXRhVHlwZXNbMF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiKSA6XG4gICAgICAgICAgICAgICAgcy5hY2NlcHRzW1wiKlwiXSk7XG4gICAgICAgICAgICAvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cbiAgICAgICAgICAgIGZvciAoaSBpbiBzLmhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICBqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKGksIHMuaGVhZGVyc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG4gICAgICAgICAgICBpZiAocy5iZWZvcmVTZW5kICYmXG4gICAgICAgICAgICAgICAgKHMuYmVmb3JlU2VuZC5jYWxsKGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMpID09PSBmYWxzZSB8fCBjb21wbGV0ZWQpKSB7XG4gICAgICAgICAgICAgICAgLy8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGpxWEhSLmFib3J0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cbiAgICAgICAgICAgIHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuICAgICAgICAgICAgLy8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG4gICAgICAgICAgICBjb21wbGV0ZURlZmVycmVkLmFkZChzLmNvbXBsZXRlKTtcbiAgICAgICAgICAgIGpxWEhSLmRvbmUocy5zdWNjZXNzKTtcbiAgICAgICAgICAgIGpxWEhSLmZhaWwocy5lcnJvcik7XG4gICAgICAgICAgICAvLyBHZXQgdHJhbnNwb3J0XG4gICAgICAgICAgICB0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyh0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUik7XG4gICAgICAgICAgICAvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcbiAgICAgICAgICAgIGlmICghdHJhbnNwb3J0KSB7XG4gICAgICAgICAgICAgICAgZG9uZSgtMSwgXCJObyBUcmFuc3BvcnRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBqcVhIUi5yZWFkeVN0YXRlID0gMTtcbiAgICAgICAgICAgICAgICAvLyBTZW5kIGdsb2JhbCBldmVudFxuICAgICAgICAgICAgICAgIGlmIChmaXJlR2xvYmFscykge1xuICAgICAgICAgICAgICAgICAgICBnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlcihcImFqYXhTZW5kXCIsIFtqcVhIUiwgc10pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhamF4U2VuZCwgc3RvcCB0aGVyZVxuICAgICAgICAgICAgICAgIGlmIChjb21wbGV0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGpxWEhSO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBUaW1lb3V0XG4gICAgICAgICAgICAgICAgaWYgKHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBqcVhIUi5hYm9ydChcInRpbWVvdXRcIik7XG4gICAgICAgICAgICAgICAgICAgIH0sIHMudGltZW91dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnQuc2VuZChyZXF1ZXN0SGVhZGVycywgZG9uZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJldGhyb3cgcG9zdC1jb21wbGV0aW9uIGV4Y2VwdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBsZXRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBQcm9wYWdhdGUgb3RoZXJzIGFzIHJlc3VsdHNcbiAgICAgICAgICAgICAgICAgICAgZG9uZSgtMSwgZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG4gICAgICAgICAgICBmdW5jdGlvbiBkb25lKHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCwgc3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG4gICAgICAgICAgICAgICAgLy8gSWdub3JlIHJlcGVhdCBpbnZvY2F0aW9uc1xuICAgICAgICAgICAgICAgIGlmIChjb21wbGV0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG4gICAgICAgICAgICAgICAgaWYgKHRpbWVvdXRUaW1lcikge1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVvdXRUaW1lcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG4gICAgICAgICAgICAgICAgLy8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcbiAgICAgICAgICAgICAgICB0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgLy8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcbiAgICAgICAgICAgICAgICAvLyBTZXQgcmVhZHlTdGF0ZVxuICAgICAgICAgICAgICAgIGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG4gICAgICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcbiAgICAgICAgICAgICAgICBpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcbiAgICAgICAgICAgICAgICAvLyBHZXQgcmVzcG9uc2UgZGF0YVxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKHMsIGpxWEhSLCByZXNwb25zZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG4gICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBhamF4Q29udmVydChzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2Vzcyk7XG4gICAgICAgICAgICAgICAgLy8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcbiAgICAgICAgICAgICAgICBpZiAoaXNTdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzLmlmTW9kaWZpZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJMYXN0LU1vZGlmaWVkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1vZGlmaWVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5Lmxhc3RNb2RpZmllZFtjYWNoZVVSTF0gPSBtb2RpZmllZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJldGFnXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1vZGlmaWVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LmV0YWdbY2FjaGVVUkxdID0gbW9kaWZpZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgbm8gY29udGVudFxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBub3QgbW9kaWZpZWRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzdGF0dXMgPT09IDMwNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNTdWNjZXNzID0gIWVycm9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG4gICAgICAgICAgICAgICAgICAgIGVycm9yID0gc3RhdHVzVGV4dDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXR1cyB8fCAhc3RhdHVzVGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuICAgICAgICAgICAgICAgIGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcbiAgICAgICAgICAgICAgICBqcVhIUi5zdGF0dXNUZXh0ID0gKG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCkgKyBcIlwiO1xuICAgICAgICAgICAgICAgIC8vIFN1Y2Nlc3MvRXJyb3JcbiAgICAgICAgICAgICAgICBpZiAoaXNTdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmVXaXRoKGNhbGxiYWNrQ29udGV4dCwgW3N1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3RXaXRoKGNhbGxiYWNrQ29udGV4dCwgW2pxWEhSLCBzdGF0dXNUZXh0LCBlcnJvcl0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuICAgICAgICAgICAgICAgIGpxWEhSLnN0YXR1c0NvZGUoc3RhdHVzQ29kZSk7XG4gICAgICAgICAgICAgICAgc3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBpZiAoZmlyZUdsb2JhbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIiwgW2pxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3JdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gQ29tcGxldGVcbiAgICAgICAgICAgICAgICBjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKGNhbGxiYWNrQ29udGV4dCwgW2pxWEhSLCBzdGF0dXNUZXh0XSk7XG4gICAgICAgICAgICAgICAgaWYgKGZpcmVHbG9iYWxzKSB7XG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKFwiYWpheENvbXBsZXRlXCIsIFtqcVhIUiwgc10pO1xuICAgICAgICAgICAgICAgICAgICAvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoLS1qUXVlcnkuYWN0aXZlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoXCJhamF4U3RvcFwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBqcVhIUjtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0SlNPTjogZnVuY3Rpb24gKHVybCwgZGF0YSwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJldHVybiBqUXVlcnkuZ2V0KHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0U2NyaXB0OiBmdW5jdGlvbiAodXJsLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgcmV0dXJuIGpRdWVyeS5nZXQodXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGpRdWVyeS5lYWNoKFtcImdldFwiLCBcInBvc3RcIl0sIGZ1bmN0aW9uIChpLCBtZXRob2QpIHtcbiAgICAgICAgalF1ZXJ5W21ldGhvZF0gPSBmdW5jdGlvbiAodXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSkge1xuICAgICAgICAgICAgLy8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcbiAgICAgICAgICAgIGlmIChqUXVlcnkuaXNGdW5jdGlvbihkYXRhKSkge1xuICAgICAgICAgICAgICAgIHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gZGF0YTtcbiAgICAgICAgICAgICAgICBkYXRhID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXG4gICAgICAgICAgICByZXR1cm4galF1ZXJ5LmFqYXgoalF1ZXJ5LmV4dGVuZCh7XG4gICAgICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICAgICAgdHlwZTogbWV0aG9kLFxuICAgICAgICAgICAgICAgIGRhdGFUeXBlOiB0eXBlLFxuICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgICAgICAgc3VjY2VzczogY2FsbGJhY2tcbiAgICAgICAgICAgIH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KHVybCkgJiYgdXJsKSk7XG4gICAgICAgIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIGpRdWVyeTtcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGY4O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZDNkeTl3WVdOcmN5OXFjWFZsY25rdmMzSmpMMkZxWVhndWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzVFVGQlRTeERRVUZGTzBsQlExQXNVVUZCVVR0SlFVTlNMR2RDUVVGblFqdEpRVU5vUWl4eFFrRkJjVUk3U1VGRGNrSXNjVUpCUVhGQ08wbEJRM0pDTEd0Q1FVRnJRanRKUVVOc1FpeHRRa0ZCYlVJN1NVRkZia0lzWVVGQllUdEpRVU5pTEdsQ1FVRnBRanRKUVVOcVFpeHBRa0ZCYVVJN1NVRkRha0lzV1VGQldUdEpRVU5hTEdGQlFXRXNRMEZCUXl4bFFVRmxPME5CUXpkQ0xFVkJRVVVzVlVGQlZTeE5RVUZOTEVWQlFVVXNVVUZCVVN4RlFVRkZMR0ZCUVdFc1JVRkJSU3hSUVVGUkxFVkJRVVVzUzBGQlN5eEZRVUZGTEUxQlFVMDdTVUZGY2tVc1dVRkJXU3hEUVVGRE8wbEJSV0lzU1VGRFF5eEhRVUZITEVkQlFVY3NUVUZCVFN4RlFVTmFMRXRCUVVzc1IwRkJSeXhOUVVGTkxFVkJRMlFzVlVGQlZTeEhRVUZITEdWQlFXVXNSVUZETlVJc1VVRkJVU3hIUVVGSExEUkNRVUUwUWp0SlFVVjJReXhuUkVGQlowUTdTVUZEYUVRc1kwRkJZeXhIUVVGSExESkVRVUV5UkN4RlFVTTFSU3hWUVVGVkxFZEJRVWNzWjBKQlFXZENMRVZCUXpkQ0xGTkJRVk1zUjBGQlJ5eFBRVUZQTzBsQlJXNUNPenM3T3pzN096dFBRVkZITzBsQlEwZ3NWVUZCVlN4SFFVRkhMRVZCUVVVN1NVRkZaanM3T3p0UFFVbEhPMGxCUTBnc1ZVRkJWU3hIUVVGSExFVkJRVVU3U1VGRlppeDFSa0ZCZFVZN1NVRkRka1lzVVVGQlVTeEhRVUZITEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVVc1IwRkJSeXhEUVVGRk8wbEJSVGRDTERaRFFVRTJRenRKUVVNM1F5eFpRVUZaTEVkQlFVY3NVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJSU3hIUVVGSExFTkJRVVVzUTBGQlF6dEpRVU0zUXl4WlFVRlpMRU5CUVVNc1NVRkJTU3hIUVVGSExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTTdTVUZGYmtNc2RVVkJRWFZGTzBsQlEzWkZMSEZEUVVGelF5eFRRVUZUTzFGQlJUbERMSEZFUVVGeFJEdFJRVU55UkN4TlFVRk5MRU5CUVVNc1ZVRkJWU3hyUWtGQmEwSXNSVUZCUlN4SlFVRkpPMWxCUlhoRExFVkJRVVVzUTBGQlF5eERRVUZGTEU5QlFVOHNhMEpCUVd0Q0xFdEJRVXNzVVVGQlV5eERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkRPVU1zU1VGQlNTeEhRVUZITEd0Q1FVRnJRaXhEUVVGRE8yZENRVU14UWl4clFrRkJhMElzUjBGQlJ5eEhRVUZITEVOQlFVTTdXVUZETVVJc1EwRkJRenRaUVVWRUxFbEJRVWtzVVVGQlVTeEZRVU5ZTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUTB3c1UwRkJVeXhIUVVGSExHdENRVUZyUWl4RFFVRkRMRmRCUVZjc1JVRkJSU3hEUVVGRExFdEJRVXNzUTBGQlJTeGhRVUZoTEVOQlFVVXNTVUZCU1N4RlFVRkZMRU5CUVVNN1dVRkZNMFVzUlVGQlJTeERRVUZETEVOQlFVVXNUVUZCVFN4RFFVRkRMRlZCUVZVc1EwRkJSU3hKUVVGSkxFTkJRVWNzUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUldwRExEaERRVUU0UXp0blFrRkRPVU1zVDBGQlVTeERRVUZGTEZGQlFWRXNSMEZCUnl4VFFVRlRMRU5CUVVVc1EwRkJReXhGUVVGRkxFTkJRVVVzUTBGQlJTeEZRVUZITEVOQlFVTTdiMEpCUlRGRExIVkNRVUYxUWp0dlFrRkRka0lzUlVGQlJTeERRVUZETEVOQlFVVXNVVUZCVVN4RFFVRkZMRU5CUVVNc1EwRkJSU3hMUVVGTExFZEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTTdkMEpCUXpkQ0xGRkJRVkVzUjBGQlJ5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkZMRU5CUVVNc1EwRkJSU3hKUVVGSkxFZEJRVWNzUTBGQlF6dDNRa0ZEZEVNc1EwRkJSU3hUUVVGVExFTkJRVVVzVVVGQlVTeERRVUZGTEVkQlFVY3NVMEZCVXl4RFFVRkZMRkZCUVZFc1EwRkJSU3hKUVVGSkxFVkJRVVVzUTBGQlJTeERRVUZETEU5QlFVOHNRMEZCUlN4SlFVRkpMRU5CUVVVc1EwRkJRenQzUWtGRmVrVXNiVUpCUVcxQ08yOUNRVU51UWl4RFFVRkRPMjlDUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzNkQ1FVTlFMRU5CUVVVc1UwRkJVeXhEUVVGRkxGRkJRVkVzUTBGQlJTeEhRVUZITEZOQlFWTXNRMEZCUlN4UlFVRlJMRU5CUVVVc1NVRkJTU3hGUVVGRkxFTkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVVXNTVUZCU1N4RFFVRkZMRU5CUVVNN2IwSkJRM1JGTEVOQlFVTTdaMEpCUTBZc1EwRkJRenRaUVVOR0xFTkJRVU03VVVGRFJpeERRVUZETEVOQlFVTTdTVUZEU0N4RFFVRkRPMGxCUlVRc2VVUkJRWGxFTzBsQlEzcEVMSFZEUVVGM1F5eFRRVUZUTEVWQlFVVXNUMEZCVHl4RlFVRkZMR1ZCUVdVc1JVRkJSU3hMUVVGTE8xRkJSV3BHTEVsQlFVa3NVMEZCVXl4SFFVRkhMRVZCUVVVc1JVRkRha0lzWjBKQlFXZENMRWRCUVVjc1EwRkJSU3hUUVVGVExFdEJRVXNzVlVGQlZTeERRVUZGTEVOQlFVTTdVVUZGYWtRc2FVSkJRV3RDTEZGQlFWRTdXVUZEZWtJc1NVRkJTU3hSUVVGUkxFTkJRVU03V1VGRFlpeFRRVUZUTEVOQlFVVXNVVUZCVVN4RFFVRkZMRWRCUVVjc1NVRkJTU3hEUVVGRE8xbEJRemRDTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVVc1UwRkJVeXhEUVVGRkxGRkJRVkVzUTBGQlJTeEpRVUZKTEVWQlFVVXNSVUZCUlN4VlFVRlZMRU5CUVVNc1JVRkJSU3hyUWtGQmEwSTdaMEpCUTNoRkxFbEJRVWtzYlVKQlFXMUNMRWRCUVVjc2EwSkJRV3RDTEVOQlFVVXNUMEZCVHl4RlFVRkZMR1ZCUVdVc1JVRkJSU3hMUVVGTExFTkJRVVVzUTBGQlF6dG5Ra0ZEYUVZc1JVRkJSU3hEUVVGRExFTkJRVVVzVDBGQlR5eHRRa0ZCYlVJc1MwRkJTeXhSUVVGUk8yOUNRVU16UXl4RFFVRkRMR2RDUVVGblFpeEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkZMRzFDUVVGdFFpeERRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRPMjlDUVVVeFJDeFBRVUZQTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTlCUVU4c1EwRkJSU3h0UWtGQmJVSXNRMEZCUlN4RFFVRkRPMjlDUVVOcVJDeFBRVUZQTEVOQlFVVXNiVUpCUVcxQ0xFTkJRVVVzUTBGQlF6dHZRa0ZETDBJc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF6dG5Ra0ZEWkN4RFFVRkRPMmRDUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUlN4blFrRkJhVUlzUTBGQlF5eERRVUZETEVOQlFVTTdiMEpCUXk5Q0xFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVVXNVVUZCVVN4SFFVRkhMRzFDUVVGdFFpeERRVUZGTEVOQlFVTTdaMEpCUXpWRExFTkJRVU03V1VGRFJpeERRVUZETEVOQlFVVXNRMEZCUXp0WlFVTktMRTFCUVUwc1EwRkJReXhSUVVGUkxFTkJRVU03VVVGRGFrSXNRMEZCUXp0UlFVVkVMRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVVVzVDBGQlR5eERRVUZETEZOQlFWTXNRMEZCUlN4RFFVRkRMRU5CUVVVc1EwRkJSU3hKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZGTEVkQlFVY3NRMEZCUlN4SlFVRkpMRTlCUVU4c1EwRkJSU3hIUVVGSExFTkJRVVVzUTBGQlF6dEpRVU5xUml4RFFVRkRPMGxCUlVRc2IwTkJRVzlETzBsQlEzQkRMSE5FUVVGelJEdEpRVU4wUkN4alFVRmpPMGxCUTJRc2IwSkJRWEZDTEUxQlFVMHNSVUZCUlN4SFFVRkhPMUZCUXk5Q0xFbEJRVWtzUjBGQlJ5eEZRVUZGTEVsQlFVa3NSVUZEV2l4WFFVRlhMRWRCUVVjc1RVRkJUU3hEUVVGRExGbEJRVmtzUTBGQlF5eFhRVUZYTEVsQlFVa3NSVUZCUlN4RFFVRkRPMUZCUlhKRUxFZEJRVWNzUTBGQlF5eERRVUZGTEVkQlFVY3NTVUZCU1N4SFFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRMjVDTEVWQlFVVXNRMEZCUXl4RFFVRkZMRWRCUVVjc1EwRkJSU3hIUVVGSExFTkJRVVVzUzBGQlN5eFRRVUZWTEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVOb1F5eERRVUZGTEZkQlFWY3NRMEZCUlN4SFFVRkhMRU5CUVVVc1IwRkJSeXhOUVVGTkxFZEJRVWNzUTBGQlJTeEpRVUZKTEVsQlFVa3NRMEZCUlN4SlFVRkpMRWRCUVVjc1JVRkJSU3hEUVVGRkxFTkJRVVVzUTBGQlJTeERRVUZGTEVkQlFVY3NRMEZCUlN4SFFVRkhMRWRCUVVjc1EwRkJSU3hIUVVGSExFTkJRVVVzUTBGQlF6dFpRVU5xUml4RFFVRkRPMUZCUTBZc1EwRkJRenRSUVVORUxFVkJRVVVzUTBGQlF5eERRVUZGTEVsQlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRXaXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZGTEVsQlFVa3NSVUZCUlN4TlFVRk5MRVZCUVVVc1NVRkJTU3hEUVVGRkxFTkJRVU03VVVGRGNrTXNRMEZCUXp0UlFVVkVMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU03U1VGRFppeERRVUZETzBsQlJVUTdPenRQUVVkSE8wbEJRMGdzTmtKQlFUaENMRU5CUVVNc1JVRkJSU3hMUVVGTExFVkJRVVVzVTBGQlV6dFJRVVZvUkN4SlFVRkpMRVZCUVVVc1JVRkJSU3hKUVVGSkxFVkJRVVVzWVVGQllTeEZRVUZGTEdGQlFXRXNSVUZEZWtNc1VVRkJVU3hIUVVGSExFTkJRVU1zUTBGQlF5eFJRVUZSTEVWQlEzSkNMRk5CUVZNc1IwRkJSeXhEUVVGRExFTkJRVU1zVTBGQlV5eERRVUZETzFGQlJYcENMREpFUVVFeVJEdFJRVU16UkN4UFFVRlJMRk5CUVZNc1EwRkJSU3hEUVVGRExFTkJRVVVzUzBGQlN5eEhRVUZITEVWQlFVY3NRMEZCUXp0WlFVTnFReXhUUVVGVExFTkJRVU1zUzBGQlN5eEZRVUZGTEVOQlFVTTdXVUZEYkVJc1JVRkJSU3hEUVVGRExFTkJRVVVzUlVGQlJTeExRVUZMTEZOQlFWVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRM2hDTEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNc1VVRkJVU3hKUVVGSkxFdEJRVXNzUTBGQlF5eHBRa0ZCYVVJc1EwRkJSU3hqUVVGakxFTkJRVVVzUTBGQlF6dFpRVU01UkN4RFFVRkRPMUZCUTBZc1EwRkJRenRSUVVWRUxHMUVRVUZ0UkR0UlFVTnVSQ3hGUVVGRkxFTkJRVU1zUTBGQlJTeEZRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTFZc1IwRkJSeXhEUVVGRExFTkJRVVVzU1VGQlNTeEpRVUZKTEZGQlFWTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRM3BDTEVWQlFVVXNRMEZCUXl4RFFVRkZMRkZCUVZFc1EwRkJSU3hKUVVGSkxFTkJRVVVzU1VGQlNTeFJRVUZSTEVOQlFVVXNTVUZCU1N4RFFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRkxFVkJRVVVzUTBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXp0dlFrRkRka1FzVTBGQlV5eERRVUZETEU5QlFVOHNRMEZCUlN4SlFVRkpMRU5CUVVVc1EwRkJRenR2UWtGRE1VSXNTMEZCU3l4RFFVRkRPMmRDUVVOUUxFTkJRVU03V1VGRFJpeERRVUZETzFGQlEwWXNRMEZCUXp0UlFVVkVMQ3RFUVVFclJEdFJRVU12UkN4RlFVRkZMRU5CUVVNc1EwRkJSU3hUUVVGVExFTkJRVVVzUTBGQlF5eERRVUZGTEVsQlFVa3NVMEZCVlN4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOdVF5eGhRVUZoTEVkQlFVY3NVMEZCVXl4RFFVRkZMRU5CUVVNc1EwRkJSU3hEUVVGRE8xRkJRMmhETEVOQlFVTTdVVUZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRaUVVWUUxEUkNRVUUwUWp0WlFVTTFRaXhIUVVGSExFTkJRVU1zUTBGQlJTeEpRVUZKTEVsQlFVa3NVMEZCVlN4RFFVRkRMRU5CUVVNc1EwRkJRenRuUWtGRE1VSXNSVUZCUlN4RFFVRkRMRU5CUVVVc1EwRkJReXhUUVVGVExFTkJRVVVzUTBGQlF5eERRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRMRlZCUVZVc1EwRkJSU3hKUVVGSkxFZEJRVWNzUjBGQlJ5eEhRVUZITEZOQlFWTXNRMEZCUlN4RFFVRkRMRU5CUVVVc1EwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF6dHZRa0ZEZEVVc1lVRkJZU3hIUVVGSExFbEJRVWtzUTBGQlF6dHZRa0ZEY2tJc1MwRkJTeXhEUVVGRE8yZENRVU5RTEVOQlFVTTdaMEpCUTBRc1JVRkJSU3hEUVVGRExFTkJRVVVzUTBGQlF5eGhRVUZqTEVOQlFVTXNRMEZCUXl4RFFVRkRPMjlDUVVOMFFpeGhRVUZoTEVkQlFVY3NTVUZCU1N4RFFVRkRPMmRDUVVOMFFpeERRVUZETzFsQlEwWXNRMEZCUXp0WlFVVkVMSGRDUVVGM1FqdFpRVU40UWl4aFFVRmhMRWRCUVVjc1lVRkJZU3hKUVVGSkxHRkJRV0VzUTBGQlF6dFJRVU5vUkN4RFFVRkRPMUZCUlVRc2VVSkJRWGxDTzFGQlEzcENMRFJEUVVFMFF6dFJRVU0xUXl4M1EwRkJkME03VVVGRGVFTXNSVUZCUlN4RFFVRkRMRU5CUVVVc1lVRkJZeXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU55UWl4RlFVRkZMRU5CUVVNc1EwRkJSU3hoUVVGaExFdEJRVXNzVTBGQlV5eERRVUZGTEVOQlFVTXNRMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRenRuUWtGRGVFTXNVMEZCVXl4RFFVRkRMRTlCUVU4c1EwRkJSU3hoUVVGaExFTkJRVVVzUTBGQlF6dFpRVU53UXl4RFFVRkRPMWxCUTBRc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlJTeGhRVUZoTEVOQlFVVXNRMEZCUXp0UlFVTnVReXhEUVVGRE8wbEJRMFlzUTBGQlF6dEpRVVZFT3p0UFFVVkhPMGxCUTBnc2NVSkJRWE5DTEVOQlFVTXNSVUZCUlN4UlFVRlJMRVZCUVVVc1MwRkJTeXhGUVVGRkxGTkJRVk03VVVGRGJFUXNTVUZCU1N4TFFVRkxMRVZCUVVVc1QwRkJUeXhGUVVGRkxFbEJRVWtzUlVGQlJTeEhRVUZITEVWQlFVVXNTVUZCU1N4RlFVTnNReXhWUVVGVkxFZEJRVWNzUlVGQlJUdFJRVVZtTERSRlFVRTBSVHRSUVVNMVJTeFRRVUZUTEVkQlFVY3NRMEZCUXl4RFFVRkRMRk5CUVZNc1EwRkJReXhMUVVGTExFVkJRVVVzUTBGQlF6dFJRVVZxUXl3MlEwRkJOa003VVVGRE4wTXNSVUZCUlN4RFFVRkRMRU5CUVVVc1UwRkJVeXhEUVVGRkxFTkJRVU1zUTBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTjBRaXhIUVVGSExFTkJRVU1zUTBGQlJTeEpRVUZKTEVsQlFVa3NRMEZCUXl4RFFVRkRMRlZCUVZjc1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlF6ZENMRlZCUVZVc1EwRkJSU3hKUVVGSkxFTkJRVU1zVjBGQlZ5eEZRVUZGTEVOQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNc1ZVRkJWU3hEUVVGRkxFbEJRVWtzUTBGQlJTeERRVUZETzFsQlEzcEVMRU5CUVVNN1VVRkRSaXhEUVVGRE8xRkJSVVFzVDBGQlR5eEhRVUZITEZOQlFWTXNRMEZCUXl4TFFVRkxMRVZCUVVVc1EwRkJRenRSUVVVMVFpeHpRMEZCYzBNN1VVRkRkRU1zVDBGQlVTeFBRVUZQTEVWQlFVY3NRMEZCUXp0WlFVVnNRaXhGUVVGRkxFTkJRVU1zUTBGQlJTeERRVUZETEVOQlFVTXNZMEZCWXl4RFFVRkZMRTlCUVU4c1EwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF6dG5Ra0ZEYmtNc1MwRkJTeXhEUVVGRkxFTkJRVU1zUTBGQlF5eGpRVUZqTEVOQlFVVXNUMEZCVHl4RFFVRkZMRU5CUVVVc1IwRkJSeXhSUVVGUkxFTkJRVU03V1VGRGFrUXNRMEZCUXp0WlFVVkVMRzFEUVVGdFF6dFpRVU51UXl4RlFVRkZMRU5CUVVNc1EwRkJSU3hEUVVGRExFbEJRVWtzU1VGQlNTeFRRVUZUTEVsQlFVa3NRMEZCUXl4RFFVRkRMRlZCUVZjc1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlF6RkRMRkZCUVZFc1IwRkJSeXhEUVVGRExFTkJRVU1zVlVGQlZTeERRVUZGTEZGQlFWRXNSVUZCUlN4RFFVRkRMRU5CUVVNc1VVRkJVU3hEUVVGRkxFTkJRVU03V1VGRGFrUXNRMEZCUXp0WlFVVkVMRWxCUVVrc1IwRkJSeXhQUVVGUExFTkJRVU03V1VGRFppeFBRVUZQTEVkQlFVY3NVMEZCVXl4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVGRE8xbEJSVFZDTEVWQlFVVXNRMEZCUXl4RFFVRkZMRTlCUVZFc1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlJXWXNNRVJCUVRCRU8yZENRVU14UkN4RlFVRkZMRU5CUVVNc1EwRkJSU3hQUVVGUExFdEJRVXNzUjBGQlNTeERRVUZETEVOQlFVTXNRMEZCUXp0dlFrRkZka0lzVDBGQlR5eEhRVUZITEVsQlFVa3NRMEZCUXp0dlFrRkZhRUlzZVVWQlFYbEZPMmRDUVVONlJTeERRVUZETzJkQ1FVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlJTeEpRVUZKTEV0QlFVc3NSMEZCUnl4SlFVRkpMRWxCUVVrc1MwRkJTeXhQUVVGUkxFTkJRVU1zUTBGQlF5eERRVUZETzI5Q1FVVXZReXd3UWtGQk1FSTdiMEpCUXpGQ0xFbEJRVWtzUjBGQlJ5eFZRVUZWTEVOQlFVVXNTVUZCU1N4SFFVRkhMRWRCUVVjc1IwRkJSeXhQUVVGUExFTkJRVVVzU1VGQlNTeFZRVUZWTEVOQlFVVXNTVUZCU1N4SFFVRkhMRTlCUVU4c1EwRkJSU3hEUVVGRE8yOUNRVVV4UlN3MlFrRkJOa0k3YjBKQlF6ZENMRVZCUVVVc1EwRkJReXhEUVVGRkxFTkJRVU1zU1VGQlN5eERRVUZETEVOQlFVTXNRMEZCUXp0M1FrRkRZaXhIUVVGSExFTkJRVU1zUTBGQlJTeExRVUZMTEVsQlFVa3NWVUZCVnl4RFFVRkRMRU5CUVVNc1EwRkJRenMwUWtGRk5VSXNNa0pCUVRKQ096UkNRVU16UWl4SFFVRkhMRWRCUVVjc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlJTeEhRVUZITEVOQlFVVXNRMEZCUXpzMFFrRkRla0lzUlVGQlJTeERRVUZETEVOQlFVVXNSMEZCUnl4RFFVRkZMRU5CUVVNc1EwRkJSU3hMUVVGTExFOUJRVkVzUTBGQlF5eERRVUZETEVOQlFVTTdaME5CUlRWQ0xEWkRRVUUyUXp0blEwRkROME1zU1VGQlNTeEhRVUZITEZWQlFWVXNRMEZCUlN4SlFVRkpMRWRCUVVjc1IwRkJSeXhIUVVGSExFZEJRVWNzUTBGQlJTeERRVUZETEVOQlFVVXNRMEZCUlR0dlEwRkRla01zVlVGQlZTeERRVUZGTEVsQlFVa3NSMEZCUnl4SFFVRkhMRU5CUVVVc1EwRkJReXhEUVVGRkxFTkJRVVVzUTBGQlF6dG5RMEZETDBJc1JVRkJSU3hEUVVGRExFTkJRVVVzU1VGQlN5eERRVUZETEVOQlFVTXNRMEZCUXp0dlEwRkZXaXhyUTBGQmEwTTdiME5CUTJ4RExFVkJRVVVzUTBGQlF5eERRVUZGTEVsQlFVa3NTMEZCU3l4SlFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRE8zZERRVU55UWl4SlFVRkpMRWRCUVVjc1ZVRkJWU3hEUVVGRkxFdEJRVXNzUTBGQlJTeERRVUZETzNkRFFVVTFRaXc0UTBGQk9FTTdiME5CUXpsRExFTkJRVU03YjBOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRkxGVkJRVlVzUTBGQlJTeExRVUZMTEVOQlFVVXNTMEZCU3l4SlFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRE8zZERRVU16UXl4UFFVRlBMRWRCUVVjc1IwRkJSeXhEUVVGRkxFTkJRVU1zUTBGQlJTeERRVUZETzNkRFFVTnVRaXhUUVVGVExFTkJRVU1zVDBGQlR5eERRVUZGTEVkQlFVY3NRMEZCUlN4RFFVRkRMRU5CUVVVc1EwRkJSU3hEUVVGRE8yOURRVU12UWl4RFFVRkRPMjlEUVVORUxFdEJRVXNzUTBGQlF6dG5RMEZEVUN4RFFVRkRPelJDUVVOR0xFTkJRVU03ZDBKQlEwWXNRMEZCUXp0dlFrRkRSaXhEUVVGRE8yOUNRVVZFTERCRFFVRXdRenR2UWtGRE1VTXNSVUZCUlN4RFFVRkRMRU5CUVVVc1NVRkJTU3hMUVVGTExFbEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTTdkMEpCUlhKQ0xEWkVRVUUyUkR0M1FrRkROMFFzUlVGQlJTeERRVUZETEVOQlFVVXNTVUZCU1N4SlFVRkpMRU5CUVVNc1EwRkJReXhOUVVGUExFTkJRVU1zUTBGQlF5eERRVUZET3pSQ1FVTjRRaXhSUVVGUkxFZEJRVWNzU1VGQlNTeERRVUZGTEZGQlFWRXNRMEZCUlN4RFFVRkRPM2RDUVVNM1FpeERRVUZETzNkQ1FVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE96UkNRVU5RTEVsQlFVa3NRMEZCUXp0blEwRkRTaXhSUVVGUkxFZEJRVWNzU1VGQlNTeERRVUZGTEZGQlFWRXNRMEZCUlN4RFFVRkRPelJDUVVNM1FpeERRVUZET3pSQ1FVRkRMRXRCUVVzc1EwRkJReXhEUVVGRkxFTkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdaME5CUTJRc1RVRkJUU3hEUVVGRE8yOURRVU5PTEV0QlFVc3NSVUZCUlN4aFFVRmhPMjlEUVVOd1FpeExRVUZMTEVWQlFVVXNTVUZCU1N4SFFVRkhMRU5CUVVNc1IwRkJSeXh4UWtGQmNVSXNSMEZCUnl4SlFVRkpMRWRCUVVjc1RVRkJUU3hIUVVGSExFOUJRVTg3YVVOQlEycEZMRU5CUVVNN05FSkJRMGdzUTBGQlF6dDNRa0ZEUml4RFFVRkRPMjlDUVVOR0xFTkJRVU03WjBKQlEwWXNRMEZCUXp0WlFVTkdMRU5CUVVNN1VVRkRSaXhEUVVGRE8xRkJSVVFzVFVGQlRTeERRVUZETEVWQlFVVXNTMEZCU3l4RlFVRkZMRk5CUVZNc1JVRkJSU3hKUVVGSkxFVkJRVVVzVVVGQlVTeEZRVUZGTEVOQlFVTTdTVUZETjBNc1EwRkJRenRKUVVWRUxFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVVTdVVUZGWkN4dFJFRkJiVVE3VVVGRGJrUXNUVUZCVFN4RlFVRkZMRU5CUVVNN1VVRkZWQ3c0UTBGQk9FTTdVVUZET1VNc1dVRkJXU3hGUVVGRkxFVkJRVVU3VVVGRGFFSXNTVUZCU1N4RlFVRkZMRVZCUVVVN1VVRkZVaXhaUVVGWkxFVkJRVVU3V1VGRFlpeEhRVUZITEVWQlFVVXNVVUZCVVN4RFFVRkRMRWxCUVVrN1dVRkRiRUlzU1VGQlNTeEZRVUZGTEV0QlFVczdXVUZEV0N4UFFVRlBMRVZCUVVVc1kwRkJZeXhEUVVGRExFbEJRVWtzUTBGQlJTeFJRVUZSTEVOQlFVTXNVVUZCVVN4RFFVRkZPMWxCUTJwRUxFMUJRVTBzUlVGQlJTeEpRVUZKTzFsQlExb3NWMEZCVnl4RlFVRkZMRWxCUVVrN1dVRkRha0lzUzBGQlN5eEZRVUZGTEVsQlFVazdXVUZEV0N4WFFVRlhMRVZCUVVVc2EwUkJRV3RFTzFsQlJTOUVPenM3T3pzN096czdPMk5CVlVVN1dVRkZSaXhQUVVGUExFVkJRVVU3WjBKQlExSXNSMEZCUnl4RlFVRkZMRkZCUVZFN1owSkJRMklzU1VGQlNTeEZRVUZGTEZsQlFWazdaMEpCUTJ4Q0xFbEJRVWtzUlVGQlJTeFhRVUZYTzJkQ1FVTnFRaXhIUVVGSExFVkJRVVVzTWtKQlFUSkNPMmRDUVVOb1F5eEpRVUZKTEVWQlFVVXNiVU5CUVcxRE8yRkJRM3BETzFsQlJVUXNVVUZCVVN4RlFVRkZPMmRDUVVOVUxFZEJRVWNzUlVGQlJTeFRRVUZUTzJkQ1FVTmtMRWxCUVVrc1JVRkJSU3hSUVVGUk8yZENRVU5rTEVsQlFVa3NSVUZCUlN4VlFVRlZPMkZCUTJoQ08xbEJSVVFzWTBGQll5eEZRVUZGTzJkQ1FVTm1MRWRCUVVjc1JVRkJSU3hoUVVGaE8yZENRVU5zUWl4SlFVRkpMRVZCUVVVc1kwRkJZenRuUWtGRGNFSXNTVUZCU1N4RlFVRkZMR05CUVdNN1lVRkRjRUk3V1VGRlJDeHJRa0ZCYTBJN1dVRkRiRUlzYlVaQlFXMUdPMWxCUTI1R0xGVkJRVlVzUlVGQlJUdG5Ra0ZGV0N3eVFrRkJNa0k3WjBKQlF6TkNMRkZCUVZFc1JVRkJSU3hOUVVGTk8yZENRVVZvUWl3d1EwRkJNRU03WjBKQlF6RkRMRmRCUVZjc1JVRkJSU3hKUVVGSk8yZENRVVZxUWl4eFEwRkJjVU03WjBKQlEzSkRMRmRCUVZjc1JVRkJSU3hKUVVGSkxFTkJRVU1zUzBGQlN6dG5Ra0ZGZGtJc2IwSkJRVzlDTzJkQ1FVTndRaXhWUVVGVkxFVkJRVVVzVFVGQlRTeERRVUZETEZGQlFWRTdZVUZETTBJN1dVRkZSQ3dyUTBGQkswTTdXVUZETDBNc09FTkJRVGhETzFsQlF6bERMRFJEUVVFMFF6dFpRVU0xUXl4cFEwRkJhVU03V1VGRGFrTXNWMEZCVnl4RlFVRkZPMmRDUVVOYUxFZEJRVWNzUlVGQlJTeEpRVUZKTzJkQ1FVTlVMRTlCUVU4c1JVRkJSU3hKUVVGSk8yRkJRMkk3VTBGRFJEdFJRVVZFTEhGRVFVRnhSRHRSUVVOeVJDdzRRMEZCT0VNN1VVRkRPVU1zYTBSQlFXdEVPMUZCUTJ4RUxGTkJRVk1zUlVGQlJTeFZRVUZWTEUxQlFVMHNSVUZCUlN4UlFVRlJPMWxCUTNCRExFMUJRVTBzUTBGQlF5eFJRVUZSTzJkQ1FVVmtMRFpDUVVFMlFqdG5Ra0ZETjBJc1ZVRkJWU3hEUVVGRkxGVkJRVlVzUTBGQlJTeE5RVUZOTEVWQlFVVXNUVUZCVFN4RFFVRkRMRmxCUVZrc1EwRkJSU3hGUVVGRkxGRkJRVkVzUTBGQlJUdG5Ra0ZGYWtVc2VVSkJRWGxDTzJkQ1FVTjZRaXhWUVVGVkxFTkJRVVVzVFVGQlRTeERRVUZETEZsQlFWa3NSVUZCUlN4TlFVRk5MRU5CUVVVc1EwRkJRenRSUVVNMVF5eERRVUZETzFGQlJVUXNZVUZCWVN4RlFVRkZMREpDUVVFeVFpeERRVUZGTEZWQlFWVXNRMEZCUlR0UlFVTjRSQ3hoUVVGaExFVkJRVVVzTWtKQlFUSkNMRU5CUVVVc1ZVRkJWU3hEUVVGRk8xRkJSWGhFTEdOQlFXTTdVVUZEWkN4SlFVRkpMRVZCUVVVc1ZVRkJWU3hIUVVGSExFVkJRVVVzVDBGQlR6dFpRVVV6UWl4clJFRkJhMFE3V1VGRGJFUXNSVUZCUlN4RFFVRkRMRU5CUVVVc1QwRkJUeXhIUVVGSExFdEJRVXNzVVVGQlV5eERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkRMMElzVDBGQlR5eEhRVUZITEVkQlFVY3NRMEZCUXp0blFrRkRaQ3hIUVVGSExFZEJRVWNzVTBGQlV5eERRVUZETzFsQlEycENMRU5CUVVNN1dVRkZSQ3huUTBGQlowTTdXVUZEYUVNc1QwRkJUeXhIUVVGSExFOUJRVThzU1VGQlNTeEZRVUZGTEVOQlFVTTdXVUZGZUVJc1NVRkJTU3hUUVVGVE8xbEJSVm9zSzBKQlFTdENPMWxCUXk5Q0xGRkJRVkU3V1VGRlVpeHRRa0ZCYlVJN1dVRkRia0lzY1VKQlFYRkNMRVZCUTNKQ0xHVkJRV1U3V1VGRlppeHBRa0ZCYVVJN1dVRkRha0lzV1VGQldUdFpRVVZhTEd0Q1FVRnJRanRaUVVOc1FpeFRRVUZUTzFsQlJWUXNiVVZCUVcxRk8xbEJRMjVGTEZOQlFWTTdXVUZGVkN4blJFRkJaMFE3V1VGRGFFUXNWMEZCVnp0WlFVVllMR2RDUVVGblFqdFpRVU5vUWl4RFFVRkRPMWxCUlVRc01rSkJRVEpDTzFsQlF6TkNMRkZCUVZFN1dVRkZVaXhyUTBGQmEwTTdXVUZEYkVNc1EwRkJReXhIUVVGSExFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVVXNSVUZCUlN4RlFVRkZMRTlCUVU4c1EwRkJSVHRaUVVWdVF5eHZRa0ZCYjBJN1dVRkRjRUlzWlVGQlpTeEhRVUZITEVOQlFVTXNRMEZCUXl4UFFVRlBMRWxCUVVrc1EwRkJRenRaUVVWb1F5eDNSa0ZCZDBZN1dVRkRlRVlzYTBKQlFXdENMRWRCUVVjc1EwRkJReXhEUVVGRExFOUJRVTg3WjBKQlF6ZENMRU5CUVVVc1pVRkJaU3hEUVVGRExGRkJRVkVzU1VGQlNTeGxRVUZsTEVOQlFVTXNUVUZCVFN4RFFVRkZPMmRDUVVOeVJDeE5RVUZOTEVOQlFVVXNaVUZCWlN4RFFVRkZPMmRDUVVONlFpeE5RVUZOTEVOQlFVTXNTMEZCU3p0WlFVVmtMRmxCUVZrN1dVRkRXaXhSUVVGUkxFZEJRVWNzVFVGQlRTeERRVUZETEZGQlFWRXNSVUZCUlN4RlFVTTFRaXhuUWtGQlowSXNSMEZCUnl4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRkxHRkJRV0VzUTBGQlJUdFpRVVZ3UkN3MlFrRkJOa0k3V1VGRE4wSXNWVUZCVlN4SFFVRkhMRU5CUVVNc1EwRkJReXhWUVVGVkxFbEJRVWtzUlVGQlJUdFpRVVV2UWl4elEwRkJjME03V1VGRGRFTXNZMEZCWXl4SFFVRkhMRVZCUVVVc1JVRkRia0lzYlVKQlFXMUNMRWRCUVVjc1JVRkJSVHRaUVVWNFFpeDNRa0ZCZDBJN1dVRkRlRUlzVVVGQlVTeEhRVUZITEZWQlFWVTdXVUZGY2tJc1YwRkJWenRaUVVOWUxFdEJRVXNzUjBGQlJ6dG5Ra0ZEVUN4VlFVRlZMRVZCUVVVc1EwRkJRenRuUWtGRllpeHhRMEZCY1VNN1owSkJRM0pETEdsQ1FVRnBRaXhGUVVGRkxGVkJRVlVzUjBGQlJ6dHZRa0ZETDBJc1NVRkJTU3hMUVVGTExFTkJRVU03YjBKQlExWXNSVUZCUlN4RFFVRkRMRU5CUVVVc1UwRkJWU3hEUVVGRExFTkJRVU1zUTBGQlF6dDNRa0ZEYWtJc1JVRkJSU3hEUVVGRExFTkJRVVVzUTBGQlF5eGxRVUZuUWl4RFFVRkRMRU5CUVVNc1EwRkJRenMwUWtGRGVFSXNaVUZCWlN4SFFVRkhMRVZCUVVVc1EwRkJRenMwUWtGRGNrSXNUMEZCVVN4RFFVRkZMRXRCUVVzc1IwRkJSeXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZGTEhGQ1FVRnhRaXhEUVVGRkxFTkJRVVVzUlVGQlJ5eERRVUZETzJkRFFVTTNSQ3hsUVVGbExFTkJRVVVzUzBGQlN5eERRVUZGTEVOQlFVTXNRMEZCUlN4RFFVRkRMRmRCUVZjc1JVRkJSU3hEUVVGRkxFZEJRVWNzUzBGQlN5eERRVUZGTEVOQlFVTXNRMEZCUlN4RFFVRkRPelJDUVVNeFJDeERRVUZETzNkQ1FVTkdMRU5CUVVNN2QwSkJRMFFzUzBGQlN5eEhRVUZITEdWQlFXVXNRMEZCUlN4SFFVRkhMRU5CUVVNc1YwRkJWeXhGUVVGRkxFTkJRVVVzUTBGQlF6dHZRa0ZET1VNc1EwRkJRenR2UWtGRFJDeE5RVUZOTEVOQlFVTXNTMEZCU3l4SlFVRkpMRWxCUVVrc1IwRkJSeXhKUVVGSkxFZEJRVWNzUzBGQlN5eERRVUZETzJkQ1FVTnlReXhEUVVGRE8yZENRVVZFTEdGQlFXRTdaMEpCUTJJc2NVSkJRWEZDTEVWQlFVVTdiMEpCUTNSQ0xFMUJRVTBzUTBGQlF5eFRRVUZUTEVkQlFVY3NjVUpCUVhGQ0xFZEJRVWNzU1VGQlNTeERRVUZETzJkQ1FVTnFSQ3hEUVVGRE8yZENRVVZFTEc5Q1FVRnZRanRuUWtGRGNFSXNaMEpCUVdkQ0xFVkJRVVVzVlVGQlZTeEpRVUZKTEVWQlFVVXNTMEZCU3p0dlFrRkRkRU1zUlVGQlJTeERRVUZETEVOQlFVVXNVMEZCVXl4SlFVRkpMRWxCUVVzc1EwRkJReXhEUVVGRExFTkJRVU03ZDBKQlEzcENMRWxCUVVrc1IwRkJSeXh0UWtGQmJVSXNRMEZCUlN4SlFVRkpMRU5CUVVNc1YwRkJWeXhGUVVGRkxFTkJRVVU3TkVKQlF5OURMRzFDUVVGdFFpeERRVUZGTEVsQlFVa3NRMEZCUXl4WFFVRlhMRVZCUVVVc1EwRkJSU3hKUVVGSkxFbEJRVWtzUTBGQlF6dDNRa0ZEYmtRc1kwRkJZeXhEUVVGRkxFbEJRVWtzUTBGQlJTeEhRVUZITEV0QlFVc3NRMEZCUXp0dlFrRkRhRU1zUTBGQlF6dHZRa0ZEUkN4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRE8yZENRVU5pTEVOQlFVTTdaMEpCUlVRc2VVTkJRWGxETzJkQ1FVTjZReXhuUWtGQlowSXNSVUZCUlN4VlFVRlZMRWxCUVVrN2IwSkJReTlDTEVWQlFVVXNRMEZCUXl4RFFVRkZMRk5CUVZNc1NVRkJTU3hKUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETzNkQ1FVTjZRaXhEUVVGRExFTkJRVU1zVVVGQlVTeEhRVUZITEVsQlFVa3NRMEZCUXp0dlFrRkRia0lzUTBGQlF6dHZRa0ZEUkN4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRE8yZENRVU5pTEVOQlFVTTdaMEpCUlVRc05rSkJRVFpDTzJkQ1FVTTNRaXhWUVVGVkxFVkJRVVVzVlVGQlZTeEhRVUZITzI5Q1FVTjRRaXhKUVVGSkxFbEJRVWtzUTBGQlF6dHZRa0ZEVkN4RlFVRkZMRU5CUVVNc1EwRkJSU3hIUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETzNkQ1FVTllMRVZCUVVVc1EwRkJReXhEUVVGRkxGTkJRVlVzUTBGQlF5eERRVUZETEVOQlFVTTdORUpCUldwQ0xHOURRVUZ2UXpzMFFrRkRjRU1zUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUlN4SFFVRkhMRU5CUVVVc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlJTeERRVUZGTEVOQlFVTTdkMEpCUTNKRExFTkJRVU03ZDBKQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN05FSkJSVkFzT0VSQlFUaEVPelJDUVVNNVJDeEhRVUZITEVOQlFVTXNRMEZCUlN4SlFVRkpMRWxCUVVrc1IwRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF6dG5RMEZEY0VJc1ZVRkJWU3hEUVVGRkxFbEJRVWtzUTBGQlJTeEhRVUZITEVOQlFVVXNWVUZCVlN4RFFVRkZMRWxCUVVrc1EwRkJSU3hGUVVGRkxFZEJRVWNzUTBGQlJTeEpRVUZKTEVOQlFVVXNRMEZCUlN4RFFVRkRPelJDUVVNeFJDeERRVUZETzNkQ1FVTkdMRU5CUVVNN2IwSkJRMFlzUTBGQlF6dHZRa0ZEUkN4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRE8yZENRVU5pTEVOQlFVTTdaMEpCUlVRc2NVSkJRWEZDTzJkQ1FVTnlRaXhMUVVGTExFVkJRVVVzVlVGQlZTeFZRVUZWTzI5Q1FVTXhRaXhKUVVGSkxGTkJRVk1zUjBGQlJ5eFZRVUZWTEVsQlFVa3NVVUZCVVN4RFFVRkRPMjlDUVVOMlF5eEZRVUZGTEVOQlFVTXNRMEZCUlN4VFFVRlZMRU5CUVVNc1EwRkJReXhEUVVGRE8zZENRVU5xUWl4VFFVRlRMRU5CUVVNc1MwRkJTeXhEUVVGRkxGTkJRVk1zUTBGQlJTeERRVUZETzI5Q1FVTTVRaXhEUVVGRE8yOUNRVU5FTEVsQlFVa3NRMEZCUlN4RFFVRkRMRVZCUVVVc1UwRkJVeXhEUVVGRkxFTkJRVU03YjBKQlEzSkNMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU03WjBKQlEySXNRMEZCUXp0aFFVTkVMRU5CUVVNN1dVRkZTQ3h0UWtGQmJVSTdXVUZEYmtJc1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlJTeExRVUZMTEVOQlFVVXNRMEZCUXp0WlFVVXhRaXcwUkVGQk5FUTdXVUZETlVRc2JVWkJRVzFHTzFsQlEyNUdMRFpEUVVFMlF6dFpRVU0zUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhIUVVGSExFTkJRVVVzUTBGQlJTeEhRVUZITEVsQlFVa3NRMEZCUXl4RFFVRkRMRWRCUVVjc1NVRkJTU3hSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZGTEVkQlFVY3NSVUZCUlN4RFFVRkZPMmxDUVVOb1JDeFBRVUZQTEVOQlFVVXNVMEZCVXl4RlFVRkZMRkZCUVZFc1EwRkJReXhSUVVGUkxFZEJRVWNzU1VGQlNTeERRVUZGTEVOQlFVTTdXVUZGYWtRc2JVUkJRVzFFTzFsQlEyNUVMRU5CUVVNc1EwRkJReXhKUVVGSkxFZEJRVWNzVDBGQlR5eERRVUZETEUxQlFVMHNTVUZCU1N4UFFVRlBMRU5CUVVNc1NVRkJTU3hKUVVGSkxFTkJRVU1zUTBGQlF5eE5RVUZOTEVsQlFVa3NRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJRenRaUVVVNVJDeDVRa0ZCZVVJN1dVRkRla0lzUTBGQlF5eERRVUZETEZOQlFWTXNSMEZCUnl4RFFVRkZMRU5CUVVNc1EwRkJReXhSUVVGUkxFbEJRVWtzUjBGQlJ5eERRVUZGTEVOQlFVTXNWMEZCVnl4RlFVRkZMRU5CUVVNc1MwRkJTeXhEUVVGRkxHRkJRV0VzUTBGQlJTeEpRVUZKTEVOQlFVVXNSVUZCUlN4RFFVRkZMRU5CUVVNN1dVRkZia1lzZFVaQlFYVkdPMWxCUTNaR0xFVkJRVVVzUTBGQlF5eERRVUZGTEVOQlFVTXNRMEZCUXl4WFFVRlhMRWxCUVVrc1NVRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF6dG5Ra0ZETjBJc1UwRkJVeXhIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlFVVXNSMEZCUnl4RFFVRkZMRU5CUVVNN1owSkJSVEZETEhGRFFVRnhRenRuUWtGRGNrTXNNRVZCUVRCRk8yZENRVU14UlN3clFrRkJLMEk3WjBKQlF5OUNMRWxCUVVrc1EwRkJRenR2UWtGRFNpeFRRVUZUTEVOQlFVTXNTVUZCU1N4SFFVRkhMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU03YjBKQlJYWkNMRFJDUVVFMFFqdHZRa0ZETlVJc2IwVkJRVzlGTzI5Q1FVTndSU3hUUVVGVExFTkJRVU1zU1VGQlNTeEhRVUZITEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNN2IwSkJRMmhETEVOQlFVTXNRMEZCUXl4WFFVRlhMRWRCUVVjc1dVRkJXU3hEUVVGRExGRkJRVkVzUjBGQlJ5eEpRVUZKTEVkQlFVY3NXVUZCV1N4RFFVRkRMRWxCUVVrN2QwSkJReTlFTEZOQlFWTXNRMEZCUXl4UlFVRlJMRWRCUVVjc1NVRkJTU3hIUVVGSExGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTTdaMEpCUXpkRExFTkJRVU03WjBKQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVVc1EwRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dHZRa0ZGWkN4clJVRkJhMFU3YjBKQlEyeEZMSFZFUVVGMVJEdHZRa0ZEZGtRc1EwRkJReXhEUVVGRExGZEJRVmNzUjBGQlJ5eEpRVUZKTEVOQlFVTTdaMEpCUTNSQ0xFTkJRVU03V1VGRFJpeERRVUZETzFsQlJVUXNkVU5CUVhWRE8xbEJRM1pETEVWQlFVVXNRMEZCUXl4RFFVRkZMRU5CUVVNc1EwRkJReXhKUVVGSkxFbEJRVWtzUTBGQlF5eERRVUZETEZkQlFWY3NTVUZCU1N4UFFVRlBMRU5CUVVNc1EwRkJReXhKUVVGSkxFdEJRVXNzVVVGQlV5eERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkROMFFzUTBGQlF5eERRVUZETEVsQlFVa3NSMEZCUnl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRkxFTkJRVU1zUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXl4RFFVRkRMRmRCUVZjc1EwRkJSU3hEUVVGRE8xbEJRMmhFTEVOQlFVTTdXVUZGUkN4dFFrRkJiVUk3V1VGRGJrSXNOa0pCUVRaQ0xFTkJRVVVzVlVGQlZTeEZRVUZGTEVOQlFVTXNSVUZCUlN4UFFVRlBMRVZCUVVVc1MwRkJTeXhEUVVGRkxFTkJRVU03V1VGRkwwUXNkMFJCUVhkRU8xbEJRM2hFTEVWQlFVVXNRMEZCUXl4RFFVRkZMRk5CUVZVc1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlEycENMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU03V1VGRFpDeERRVUZETzFsQlJVUXNhMFJCUVd0RU8xbEJRMnhFTEcxR1FVRnRSanRaUVVOdVJpeFhRVUZYTEVkQlFVY3NUVUZCVFN4RFFVRkRMRXRCUVVzc1NVRkJTU3hEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETzFsQlJYWkRMR3REUVVGclF6dFpRVU5zUXl4RlFVRkZMRU5CUVVNc1EwRkJSU3hYUVVGWExFbEJRVWtzVFVGQlRTeERRVUZETEUxQlFVMHNSVUZCUlN4TFFVRkxMRU5CUVVVc1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlF6VkRMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZGTEZkQlFWY3NRMEZCUlN4RFFVRkRPMWxCUTNKRExFTkJRVU03V1VGRlJDeHhRa0ZCY1VJN1dVRkRja0lzUTBGQlF5eERRVUZETEVsQlFVa3NSMEZCUnl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExGZEJRVmNzUlVGQlJTeERRVUZETzFsQlJUbENMRzFEUVVGdFF6dFpRVU51UXl4RFFVRkRMRU5CUVVNc1ZVRkJWU3hIUVVGSExFTkJRVU1zVlVGQlZTeERRVUZETEVsQlFVa3NRMEZCUlN4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRkxFTkJRVU03V1VGRk1VTXNLMFJCUVN0RU8xbEJReTlFTEhWRFFVRjFRenRaUVVOMlF5d3lRMEZCTWtNN1dVRkRNME1zVVVGQlVTeEhRVUZITEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1QwRkJUeXhEUVVGRkxFdEJRVXNzUlVGQlJTeEZRVUZGTEVOQlFVVXNRMEZCUXp0WlFVVjBReXh4UkVGQmNVUTdXVUZEY2tRc1JVRkJSU3hEUVVGRExFTkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNWVUZCVnl4RFFVRkRMRU5CUVVNc1EwRkJRenRuUWtGRmNrSXNNRU5CUVRCRE8yZENRVU14UXl4UlFVRlJMRWRCUVVjc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eExRVUZMTEVOQlFVVXNVVUZCVVN4RFFVRkRMRTFCUVUwc1EwRkJSU3hEUVVGRE8yZENRVVV4UXl3eVEwRkJNa003WjBKQlF6TkRMRVZCUVVVc1EwRkJReXhEUVVGRkxFTkJRVU1zUTBGQlF5eEpRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRPMjlDUVVOa0xGRkJRVkVzU1VGQlNTeERRVUZGTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVVc1VVRkJVU3hEUVVGRkxFZEJRVWNzUjBGQlJ5eEhRVUZITEVkQlFVY3NRMEZCUlN4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU03YjBKQlJUZEVMR2RGUVVGblJUdHZRa0ZEYUVVc1QwRkJUeXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETzJkQ1FVTm1MRU5CUVVNN1owSkJSVVFzTWtOQlFUSkRPMmRDUVVNelF5eEZRVUZGTEVOQlFVTXNRMEZCUlN4RFFVRkRMRU5CUVVNc1MwRkJTeXhMUVVGTExFdEJRVTBzUTBGQlF5eERRVUZETEVOQlFVTTdiMEpCUTNwQ0xGRkJRVkVzUjBGQlJ5eFJRVUZSTEVOQlFVTXNUMEZCVHl4RFFVRkZMRlZCUVZVc1JVRkJSU3hKUVVGSkxFTkJRVVVzUTBGQlF6dHZRa0ZEYUVRc1VVRkJVU3hIUVVGSExFTkJRVVVzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUlN4UlFVRlJMRU5CUVVVc1IwRkJSeXhIUVVGSExFZEJRVWNzUjBGQlJ5eERRVUZGTEVkQlFVY3NTVUZCU1N4SFFVRkhMRU5CUVVVc1MwRkJTeXhGUVVGRkxFTkJRVVVzUjBGQlJ5eFJRVUZSTEVOQlFVTTdaMEpCUTNCR0xFTkJRVU03WjBKQlJVUXNjMFZCUVhORk8yZENRVU4wUlN4RFFVRkRMRU5CUVVNc1IwRkJSeXhIUVVGSExGRkJRVkVzUjBGQlJ5eFJRVUZSTEVOQlFVTTdaMEpCUlRkQ0xIRkZRVUZ4UlR0WlFVTnlSU3hEUVVGRE8xbEJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkZMRU5CUVVNc1EwRkJReXhKUVVGSkxFbEJRVWtzUTBGQlF5eERRVUZETEZkQlFWYzdaMEpCUTJ4RExFTkJRVVVzUTBGQlF5eERRVUZETEZkQlFWY3NTVUZCU1N4RlFVRkZMRU5CUVVVc1EwRkJReXhQUVVGUExFTkJRVVVzYlVOQlFXMURMRU5CUVVVc1MwRkJTeXhEUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzJkQ1FVTm9SaXhEUVVGRExFTkJRVU1zU1VGQlNTeEhRVUZITEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRkxFZEJRVWNzUlVGQlJTeEhRVUZITEVOQlFVVXNRMEZCUXp0WlFVTnlReXhEUVVGRE8xbEJSVVFzWjBaQlFXZEdPMWxCUTJoR0xFVkJRVVVzUTBGQlF5eERRVUZGTEVOQlFVTXNRMEZCUXl4VlFVRlhMRU5CUVVNc1EwRkJReXhEUVVGRE8yZENRVU53UWl4RlFVRkZMRU5CUVVNc1EwRkJSU3hOUVVGTkxFTkJRVU1zV1VGQldTeERRVUZGTEZGQlFWRXNRMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRenR2UWtGRGRrTXNTMEZCU3l4RFFVRkRMR2RDUVVGblFpeERRVUZGTEcxQ1FVRnRRaXhGUVVGRkxFMUJRVTBzUTBGQlF5eFpRVUZaTEVOQlFVVXNVVUZCVVN4RFFVRkZMRU5CUVVVc1EwRkJRenRuUWtGRGFFWXNRMEZCUXp0blFrRkRSQ3hGUVVGRkxFTkJRVU1zUTBGQlJTeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkZMRkZCUVZFc1EwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF6dHZRa0ZETDBJc1MwRkJTeXhEUVVGRExHZENRVUZuUWl4RFFVRkZMR1ZCUVdVc1JVRkJSU3hOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZGTEZGQlFWRXNRMEZCUlN4RFFVRkZMRU5CUVVNN1owSkJRM0JGTEVOQlFVTTdXVUZEUml4RFFVRkRPMWxCUlVRc1owUkJRV2RFTzFsQlEyaEVMRVZCUVVVc1EwRkJReXhEUVVGRkxFTkJRVU1zUTBGQlF5eEpRVUZKTEVsQlFVa3NRMEZCUXl4RFFVRkRMRlZCUVZVc1NVRkJTU3hEUVVGRExFTkJRVU1zVjBGQlZ5eExRVUZMTEV0QlFVc3NTVUZCU1N4UFFVRlBMRU5CUVVNc1YwRkJXU3hEUVVGRExFTkJRVU1zUTBGQlF6dG5Ra0ZEYUVZc1MwRkJTeXhEUVVGRExHZENRVUZuUWl4RFFVRkZMR05CUVdNc1JVRkJSU3hEUVVGRExFTkJRVU1zVjBGQlZ5eERRVUZGTEVOQlFVTTdXVUZEZWtRc1EwRkJRenRaUVVWRUxHMUZRVUZ0UlR0WlFVTnVSU3hMUVVGTExFTkJRVU1zWjBKQlFXZENMRU5CUTNKQ0xGRkJRVkVzUlVGRFVpeERRVUZETEVOQlFVTXNVMEZCVXl4RFFVRkZMRU5CUVVNc1EwRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVVXNRMEZCUXl4RFFVRkRMRk5CUVZNc1EwRkJSU3hEUVVGRExFTkJRVVVzUTBGQlJUdG5Ra0ZEYUVRc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlJTeERRVUZETEVOQlFVTXNVMEZCVXl4RFFVRkZMRU5CUVVNc1EwRkJSU3hEUVVGRk8yOUNRVU0xUWl4RFFVRkZMRU5CUVVNc1EwRkJReXhUUVVGVExFTkJRVVVzUTBGQlF5eERRVUZGTEV0QlFVc3NSMEZCUnl4SFFVRkhMRWxCUVVrc1IwRkJSeXhSUVVGUkxFZEJRVWNzVlVGQlZTeEhRVUZITEVWQlFVVXNRMEZCUlR0blFrRkRha1VzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUlN4SFFVRkhMRU5CUVVVc1EwRkRha0lzUTBGQlF6dFpRVVZHTERKQ1FVRXlRanRaUVVNelFpeEhRVUZITEVOQlFVTXNRMEZCUlN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFOUJRVkVzUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUTNaQ0xFdEJRVXNzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUlN4RFFVRkRMRU5CUVVVc1EwRkJSU3hEUVVGRE8xbEJRemRETEVOQlFVTTdXVUZGUkN4cFJFRkJhVVE3V1VGRGFrUXNSVUZCUlN4RFFVRkRMRU5CUVVVc1EwRkJReXhEUVVGRExGVkJRVlU3WjBKQlEyaENMRU5CUVVVc1EwRkJReXhEUVVGRExGVkJRVlVzUTBGQlF5eEpRVUZKTEVOQlFVVXNaVUZCWlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hEUVVGRExFTkJRVVVzUzBGQlN5eExRVUZMTEVsQlFVa3NVMEZCVXl4RFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRE8yZENRVVUzUlN4MVEwRkJkVU03WjBKQlEzWkRMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eEZRVUZGTEVOQlFVTTdXVUZEZEVJc1EwRkJRenRaUVVWRUxIVkRRVUYxUXp0WlFVTjJReXhSUVVGUkxFZEJRVWNzVDBGQlR5eERRVUZETzFsQlJXNUNMR2xEUVVGcFF6dFpRVU5xUXl4blFrRkJaMElzUTBGQlF5eEhRVUZITEVOQlFVVXNRMEZCUXl4RFFVRkRMRkZCUVZFc1EwRkJSU3hEUVVGRE8xbEJRMjVETEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVVc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlJTeERRVUZETzFsQlEzaENMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVVVzUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUlN4RFFVRkRPMWxCUlhSQ0xHZENRVUZuUWp0WlFVTm9RaXhUUVVGVExFZEJRVWNzTmtKQlFUWkNMRU5CUVVVc1ZVRkJWU3hGUVVGRkxFTkJRVU1zUlVGQlJTeFBRVUZQTEVWQlFVVXNTMEZCU3l4RFFVRkZMRU5CUVVNN1dVRkZNMFVzYVVOQlFXbERPMWxCUTJwRExFVkJRVVVzUTBGQlF5eERRVUZGTEVOQlFVTXNVMEZCVlN4RFFVRkRMRU5CUVVNc1EwRkJRenRuUWtGRGJFSXNTVUZCU1N4RFFVRkZMRU5CUVVNc1EwRkJReXhGUVVGRkxHTkJRV01zUTBGQlJTeERRVUZETzFsQlF6VkNMRU5CUVVNN1dVRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dG5Ra0ZEVUN4TFFVRkxMRU5CUVVNc1ZVRkJWU3hIUVVGSExFTkJRVU1zUTBGQlF6dG5Ra0ZGY2tJc2IwSkJRVzlDTzJkQ1FVTndRaXhGUVVGRkxFTkJRVU1zUTBGQlJTeFhRVUZaTEVOQlFVTXNRMEZCUXl4RFFVRkRPMjlDUVVOdVFpeHJRa0ZCYTBJc1EwRkJReXhQUVVGUExFTkJRVVVzVlVGQlZTeEZRVUZGTEVOQlFVVXNTMEZCU3l4RlFVRkZMRU5CUVVNc1EwRkJSU3hEUVVGRkxFTkJRVU03WjBKQlEzaEVMRU5CUVVNN1owSkJSVVFzY1VSQlFYRkVPMmRDUVVOeVJDeEZRVUZGTEVOQlFVTXNRMEZCUlN4VFFVRlZMRU5CUVVNc1EwRkJReXhEUVVGRE8yOUNRVU5xUWl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRE8yZENRVU5rTEVOQlFVTTdaMEpCUlVRc1ZVRkJWVHRuUWtGRFZpeEZRVUZGTEVOQlFVTXNRMEZCUlN4RFFVRkRMRU5CUVVNc1MwRkJTeXhKUVVGSkxFTkJRVU1zUTBGQlF5eFBRVUZQTEVkQlFVY3NRMEZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenR2UWtGRGFFTXNXVUZCV1N4SFFVRkhMRTFCUVUwc1EwRkJReXhWUVVGVkxFTkJRVVU3ZDBKQlEycERMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVVVzVTBGQlV5eERRVUZGTEVOQlFVTTdiMEpCUXpGQ0xFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkZMRU5CUVVNN1owSkJRMmhDTEVOQlFVTTdaMEpCUlVRc1NVRkJTU3hEUVVGRE8yOUNRVU5LTEZOQlFWTXNSMEZCUnl4TFFVRkxMRU5CUVVNN2IwSkJRMnhDTEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVVc1kwRkJZeXhGUVVGRkxFbEJRVWtzUTBGQlJTeERRVUZETzJkQ1FVTjRReXhEUVVGRE8yZENRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkZMRU5CUVVVc1EwRkJReXhEUVVGRExFTkJRVU03YjBKQlJXUXNjVU5CUVhGRE8yOUNRVU55UXl4RlFVRkZMRU5CUVVNc1EwRkJSU3hUUVVGVkxFTkJRVU1zUTBGQlF5eERRVUZETzNkQ1FVTnFRaXhOUVVGTkxFTkJRVU1zUTBGQlF6dHZRa0ZEVkN4RFFVRkRPMjlDUVVWRUxEaENRVUU0UWp0dlFrRkRPVUlzU1VGQlNTeERRVUZGTEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJSU3hEUVVGRE8yZENRVU5tTEVOQlFVTTdXVUZEUml4RFFVRkRPMWxCUlVRc2RVTkJRWFZETzFsQlEzWkRMR05CUVdVc1RVRkJUU3hGUVVGRkxHZENRVUZuUWl4RlFVRkZMRk5CUVZNc1JVRkJSU3hQUVVGUE8yZENRVU14UkN4SlFVRkpMRk5CUVZNc1JVRkJSU3hQUVVGUExFVkJRVVVzUzBGQlN5eEZRVUZGTEZGQlFWRXNSVUZCUlN4UlFVRlJMRVZCUTJoRUxGVkJRVlVzUjBGQlJ5eG5Ra0ZCWjBJc1EwRkJRenRuUWtGRkwwSXNORUpCUVRSQ08yZENRVU0xUWl4RlFVRkZMRU5CUVVNc1EwRkJSU3hUUVVGVkxFTkJRVU1zUTBGQlF5eERRVUZETzI5Q1FVTnFRaXhOUVVGTkxFTkJRVU03WjBKQlExSXNRMEZCUXp0blFrRkZSQ3hUUVVGVExFZEJRVWNzU1VGQlNTeERRVUZETzJkQ1FVVnFRaXcyUWtGQk5rSTdaMEpCUXpkQ0xFVkJRVVVzUTBGQlF5eERRVUZGTEZsQlFXRXNRMEZCUXl4RFFVRkRMRU5CUVVNN2IwSkJRM0JDTEUxQlFVMHNRMEZCUXl4WlFVRlpMRU5CUVVVc1dVRkJXU3hEUVVGRkxFTkJRVU03WjBKQlEzSkRMRU5CUVVNN1owSkJSVVFzY1VSQlFYRkVPMmRDUVVOeVJDeHhSRUZCY1VRN1owSkJRM0pFTEZOQlFWTXNSMEZCUnl4VFFVRlRMRU5CUVVNN1owSkJSWFJDTEhsQ1FVRjVRanRuUWtGRGVrSXNjVUpCUVhGQ0xFZEJRVWNzVDBGQlR5eEpRVUZKTEVWQlFVVXNRMEZCUXp0blFrRkZkRU1zYVVKQlFXbENPMmRDUVVOcVFpeExRVUZMTEVOQlFVTXNWVUZCVlN4SFFVRkhMRTFCUVUwc1IwRkJSeXhEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0blFrRkZkRU1zTUVKQlFUQkNPMmRDUVVNeFFpeFRRVUZUTEVkQlFVY3NUVUZCVFN4SlFVRkpMRWRCUVVjc1NVRkJTU3hOUVVGTkxFZEJRVWNzUjBGQlJ5eEpRVUZKTEUxQlFVMHNTMEZCU3l4SFFVRkhMRU5CUVVNN1owSkJSVFZFTEc5Q1FVRnZRanRuUWtGRGNFSXNSVUZCUlN4RFFVRkRMRU5CUVVVc1UwRkJWU3hEUVVGRExFTkJRVU1zUTBGQlF6dHZRa0ZEYWtJc1VVRkJVU3hIUVVGSExHMUNRVUZ0UWl4RFFVRkZMRU5CUVVNc1JVRkJSU3hMUVVGTExFVkJRVVVzVTBGQlV5eERRVUZGTEVOQlFVTTdaMEpCUTNaRUxFTkJRVU03WjBKQlJVUXNjMFZCUVhORk8yZENRVU4wUlN4UlFVRlJMRWRCUVVjc1YwRkJWeXhEUVVGRkxFTkJRVU1zUlVGQlJTeFJRVUZSTEVWQlFVVXNTMEZCU3l4RlFVRkZMRk5CUVZNc1EwRkJSU3hEUVVGRE8yZENRVVY0UkN4elEwRkJjME03WjBKQlEzUkRMRVZCUVVVc1EwRkJReXhEUVVGRkxGTkJRVlVzUTBGQlF5eERRVUZETEVOQlFVTTdiMEpCUldwQ0xHZEdRVUZuUmp0dlFrRkRhRVlzUlVGQlJTeERRVUZETEVOQlFVVXNRMEZCUXl4RFFVRkRMRlZCUVZjc1EwRkJReXhEUVVGRExFTkJRVU03ZDBKQlEzQkNMRkZCUVZFc1IwRkJSeXhMUVVGTExFTkJRVU1zYVVKQlFXbENMRU5CUVVVc1pVRkJaU3hEUVVGRkxFTkJRVU03ZDBKQlEzUkVMRVZCUVVVc1EwRkJReXhEUVVGRkxGRkJRVk1zUTBGQlF5eERRVUZETEVOQlFVTTdORUpCUTJoQ0xFMUJRVTBzUTBGQlF5eFpRVUZaTEVOQlFVVXNVVUZCVVN4RFFVRkZMRWRCUVVjc1VVRkJVU3hEUVVGRE8zZENRVU0xUXl4RFFVRkRPM2RDUVVORUxGRkJRVkVzUjBGQlJ5eExRVUZMTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVVVzVFVGQlRTeERRVUZGTEVOQlFVTTdkMEpCUXpkRExFVkJRVVVzUTBGQlF5eERRVUZGTEZGQlFWTXNRMEZCUXl4RFFVRkRMRU5CUVVNN05FSkJRMmhDTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVVc1VVRkJVU3hEUVVGRkxFZEJRVWNzVVVGQlVTeERRVUZETzNkQ1FVTndReXhEUVVGRE8yOUNRVU5HTEVOQlFVTTdiMEpCUlVRc1owSkJRV2RDTzI5Q1FVTm9RaXhGUVVGRkxFTkJRVU1zUTBGQlJTeE5RVUZOTEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNc1EwRkJReXhKUVVGSkxFdEJRVXNzVFVGQlR5eERRVUZETEVOQlFVTXNRMEZCUXp0M1FrRkRNME1zVlVGQlZTeEhRVUZITEZkQlFWY3NRMEZCUXp0M1FrRkZNVUlzYTBKQlFXdENPMjlDUVVOc1FpeERRVUZETzI5Q1FVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlJTeE5RVUZOTEV0QlFVc3NSMEZCU1N4RFFVRkRMRU5CUVVNc1EwRkJRenQzUWtGRE4wSXNWVUZCVlN4SFFVRkhMR0ZCUVdFc1EwRkJRenQzUWtGRk5VSXNiME5CUVc5RE8yOUNRVU53UXl4RFFVRkRPMjlDUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzNkQ1FVTlFMRlZCUVZVc1IwRkJSeXhSUVVGUkxFTkJRVU1zUzBGQlN5eERRVUZETzNkQ1FVTTFRaXhQUVVGUExFZEJRVWNzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXp0M1FrRkRlRUlzUzBGQlN5eEhRVUZITEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNN2QwSkJRM1pDTEZOQlFWTXNSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJRenR2UWtGRGNFSXNRMEZCUXp0blFrRkRSaXhEUVVGRE8yZENRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMjlDUVVWUUxEWkVRVUUyUkR0dlFrRkROMFFzUzBGQlN5eEhRVUZITEZWQlFWVXNRMEZCUXp0dlFrRkRia0lzUlVGQlJTeERRVUZETEVOQlFVVXNUVUZCVFN4SlFVRkpMRU5CUVVNc1ZVRkJWeXhEUVVGRExFTkJRVU1zUTBGQlF6dDNRa0ZETjBJc1ZVRkJWU3hIUVVGSExFOUJRVThzUTBGQlF6dDNRa0ZEY2tJc1JVRkJSU3hEUVVGRExFTkJRVVVzVFVGQlRTeEhRVUZITEVOQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN05FSkJRMnhDTEUxQlFVMHNSMEZCUnl4RFFVRkRMRU5CUVVNN2QwSkJRMW9zUTBGQlF6dHZRa0ZEUml4RFFVRkRPMmRDUVVOR0xFTkJRVU03WjBKQlJVUXNiVU5CUVcxRE8yZENRVU51UXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hIUVVGSExFMUJRVTBzUTBGQlF6dG5Ra0ZEZEVJc1MwRkJTeXhEUVVGRExGVkJRVlVzUjBGQlJ5eERRVUZGTEdkQ1FVRm5RaXhKUVVGSkxGVkJRVlVzUTBGQlJTeEhRVUZITEVWQlFVVXNRMEZCUXp0blFrRkZNMFFzWjBKQlFXZENPMmRDUVVOb1FpeEZRVUZGTEVOQlFVTXNRMEZCUlN4VFFVRlZMRU5CUVVNc1EwRkJReXhEUVVGRE8yOUNRVU5xUWl4UlFVRlJMRU5CUVVNc1YwRkJWeXhEUVVGRkxHVkJRV1VzUlVGQlJTeERRVUZGTEU5QlFVOHNSVUZCUlN4VlFVRlZMRVZCUVVVc1MwRkJTeXhEUVVGRkxFTkJRVVVzUTBGQlF6dG5Ra0ZEZWtVc1EwRkJRenRuUWtGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0dlFrRkRVQ3hSUVVGUkxFTkJRVU1zVlVGQlZTeERRVUZGTEdWQlFXVXNSVUZCUlN4RFFVRkZMRXRCUVVzc1JVRkJSU3hWUVVGVkxFVkJRVVVzUzBGQlN5eERRVUZGTEVOQlFVVXNRMEZCUXp0blFrRkRkRVVzUTBGQlF6dG5Ra0ZGUkN3MlFrRkJOa0k3WjBKQlF6ZENMRXRCUVVzc1EwRkJReXhWUVVGVkxFTkJRVVVzVlVGQlZTeERRVUZGTEVOQlFVTTdaMEpCUXk5Q0xGVkJRVlVzUjBGQlJ5eFRRVUZUTEVOQlFVTTdaMEpCUlhaQ0xFVkJRVVVzUTBGQlF5eERRVUZGTEZkQlFWa3NRMEZCUXl4RFFVRkRMRU5CUVVNN2IwSkJRMjVDTEd0Q1FVRnJRaXhEUVVGRExFOUJRVThzUTBGQlJTeFRRVUZUTEVkQlFVY3NZVUZCWVN4SFFVRkhMRmRCUVZjc1JVRkRiRVVzUTBGQlJTeExRVUZMTEVWQlFVVXNRMEZCUXl4RlFVRkZMRk5CUVZNc1IwRkJSeXhQUVVGUExFZEJRVWNzUzBGQlN5eERRVUZGTEVOQlFVVXNRMEZCUXp0blFrRkRPVU1zUTBGQlF6dG5Ra0ZGUkN4WFFVRlhPMmRDUVVOWUxHZENRVUZuUWl4RFFVRkRMRkZCUVZFc1EwRkJSU3hsUVVGbExFVkJRVVVzUTBGQlJTeExRVUZMTEVWQlFVVXNWVUZCVlN4RFFVRkZMRU5CUVVVc1EwRkJRenRuUWtGRmNFVXNSVUZCUlN4RFFVRkRMRU5CUVVVc1YwRkJXU3hEUVVGRExFTkJRVU1zUTBGQlF6dHZRa0ZEYmtJc2EwSkJRV3RDTEVOQlFVTXNUMEZCVHl4RFFVRkZMR05CUVdNc1JVRkJSU3hEUVVGRkxFdEJRVXNzUlVGQlJTeERRVUZETEVOQlFVVXNRMEZCUlN4RFFVRkRPMjlDUVVVelJDeHBRMEZCYVVNN2IwSkJRMnBETEVWQlFVVXNRMEZCUXl4RFFVRkZMRU5CUVVNc1EwRkJSU3hGUVVGRkxFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNN2QwSkJRelZDTEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRkxGVkJRVlVzUTBGQlJTeERRVUZETzI5Q1FVTndReXhEUVVGRE8yZENRVU5HTEVOQlFVTTdXVUZEUml4RFFVRkRPMWxCUlVRc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF6dFJRVU5rTEVOQlFVTTdVVUZGUkN4UFFVRlBMRVZCUVVVc1ZVRkJWU3hIUVVGSExFVkJRVVVzU1VGQlNTeEZRVUZGTEZGQlFWRTdXVUZEY2tNc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVVXNSMEZCUnl4RlFVRkZMRWxCUVVrc1JVRkJSU3hSUVVGUkxFVkJRVVVzVFVGQlRTeERRVUZGTEVOQlFVTTdVVUZEYkVRc1EwRkJRenRSUVVWRUxGTkJRVk1zUlVGQlJTeFZRVUZWTEVkQlFVY3NSVUZCUlN4UlFVRlJPMWxCUTJwRExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkZMRWRCUVVjc1JVRkJSU3hUUVVGVExFVkJRVVVzVVVGQlVTeEZRVUZGTEZGQlFWRXNRMEZCUlN4RFFVRkRPMUZCUTNwRUxFTkJRVU03UzBGRFJDeERRVUZGTEVOQlFVTTdTVUZGU2l4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRkxFTkJRVVVzUzBGQlN5eEZRVUZGTEUxQlFVMHNRMEZCUlN4RlFVRkZMRlZCUVZVc1EwRkJReXhGUVVGRkxFMUJRVTA3VVVGRGJFUXNUVUZCVFN4RFFVRkZMRTFCUVUwc1EwRkJSU3hIUVVGSExGVkJRVlVzUjBGQlJ5eEZRVUZGTEVsQlFVa3NSVUZCUlN4UlFVRlJMRVZCUVVVc1NVRkJTVHRaUVVWeVJDd3JRMEZCSzBNN1dVRkRMME1zUlVGQlJTeERRVUZETEVOQlFVVXNUVUZCVFN4RFFVRkRMRlZCUVZVc1EwRkJSU3hKUVVGSkxFTkJRVWNzUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUTJwRExFbEJRVWtzUjBGQlJ5eEpRVUZKTEVsQlFVa3NVVUZCVVN4RFFVRkRPMmRDUVVONFFpeFJRVUZSTEVkQlFVY3NTVUZCU1N4RFFVRkRPMmRDUVVOb1FpeEpRVUZKTEVkQlFVY3NVMEZCVXl4RFFVRkRPMWxCUTJ4Q0xFTkJRVU03V1VGRlJDd3JSRUZCSzBRN1dVRkRMMFFzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVVc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlJUdG5Ra0ZEYkVNc1IwRkJSeXhGUVVGRkxFZEJRVWM3WjBKQlExSXNTVUZCU1N4RlFVRkZMRTFCUVUwN1owSkJRMW9zVVVGQlVTeEZRVUZGTEVsQlFVazdaMEpCUTJRc1NVRkJTU3hGUVVGRkxFbEJRVWs3WjBKQlExWXNUMEZCVHl4RlFVRkZMRkZCUVZFN1lVRkRha0lzUlVGQlJTeE5RVUZOTEVOQlFVTXNZVUZCWVN4RFFVRkZMRWRCUVVjc1EwRkJSU3hKUVVGSkxFZEJRVWNzUTBGQlJTeERRVUZGTEVOQlFVTTdVVUZETTBNc1EwRkJReXhEUVVGRE8wbEJRMGdzUTBGQlF5eERRVUZGTEVOQlFVTTdTVUZGU2l4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRE8wRkJRMlFzUTBGQlF5eERRVUZGTEVOQlFVTWlMQ0ptYVd4bElqb2lkM2QzTDNCaFkydHpMMnB4ZFdWeWVTOXpjbU12WVdwaGVDNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1SbFptbHVaU2dnVzF4dVhIUmNJaTR2WTI5eVpWd2lMRnh1WEhSY0lpNHZkbUZ5TDJSdlkzVnRaVzUwWENJc1hHNWNkRndpTGk5MllYSXZjbTV2ZEdoMGJXeDNhR2wwWlZ3aUxGeHVYSFJjSWk0dllXcGhlQzkyWVhJdmJHOWpZWFJwYjI1Y0lpeGNibHgwWENJdUwyRnFZWGd2ZG1GeUwyNXZibU5sWENJc1hHNWNkRndpTGk5aGFtRjRMM1poY2k5eWNYVmxjbmxjSWl4Y2JseHVYSFJjSWk0dlkyOXlaUzlwYm1sMFhDSXNYRzVjZEZ3aUxpOWhhbUY0TDNCaGNuTmxXRTFNWENJc1hHNWNkRndpTGk5bGRtVnVkQzkwY21sbloyVnlYQ0lzWEc1Y2RGd2lMaTlrWldabGNuSmxaRndpTEZ4dVhIUmNJaTR2YzJWeWFXRnNhWHBsWENJZ0x5OGdhbEYxWlhKNUxuQmhjbUZ0WEc1ZExDQm1kVzVqZEdsdmJpZ2dhbEYxWlhKNUxDQmtiMk4xYldWdWRDd2djbTV2ZEdoMGJXeDNhR2wwWlN3Z2JHOWpZWFJwYjI0c0lHNXZibU5sTENCeWNYVmxjbmtnS1NCN1hHNWNibHdpZFhObElITjBjbWxqZEZ3aU8xeHVYRzUyWVhKY2JseDBjakl3SUQwZ0x5VXlNQzluTEZ4dVhIUnlhR0Z6YUNBOUlDOGpMaW9rTHl4Y2JseDBjbUZ1ZEdsRFlXTm9aU0E5SUM4b1d6OG1YU2xmUFZ0ZUpsMHFMeXhjYmx4MGNtaGxZV1JsY25NZ1BTQXZYaWd1S2o4cE9sc2dYRngwWFNvb1cxNWNYSEpjWEc1ZEtpa2tMMjFuTEZ4dVhHNWNkQzh2SUNNM05qVXpMQ0FqT0RFeU5Td2dJemd4TlRJNklHeHZZMkZzSUhCeWIzUnZZMjlzSUdSbGRHVmpkR2x2Ymx4dVhIUnliRzlqWVd4UWNtOTBiMk52YkNBOUlDOWVLRDg2WVdKdmRYUjhZWEJ3ZkdGd2NDMXpkRzl5WVdkbGZDNHJMV1Y0ZEdWdWMybHZibnhtYVd4bGZISmxjM3gzYVdSblpYUXBPaVF2TEZ4dVhIUnlibTlEYjI1MFpXNTBJRDBnTDE0b1B6cEhSVlI4U0VWQlJDa2tMeXhjYmx4MGNuQnliM1J2WTI5c0lEMGdMMTVjWEM5Y1hDOHZMRnh1WEc1Y2RDOHFJRkJ5WldacGJIUmxjbk5jYmx4MElDb2dNU2tnVkdobGVTQmhjbVVnZFhObFpuVnNJSFJ2SUdsdWRISnZaSFZqWlNCamRYTjBiMjBnWkdGMFlWUjVjR1Z6SUNoelpXVWdZV3BoZUM5cWMyOXVjQzVxY3lCbWIzSWdZVzRnWlhoaGJYQnNaU2xjYmx4MElDb2dNaWtnVkdobGMyVWdZWEpsSUdOaGJHeGxaRHBjYmx4MElDb2dJQ0FnTFNCQ1JVWlBVa1VnWVhOcmFXNW5JR1p2Y2lCaElIUnlZVzV6Y0c5eWRGeHVYSFFnS2lBZ0lDQXRJRUZHVkVWU0lIQmhjbUZ0SUhObGNtbGhiR2w2WVhScGIyNGdLSE11WkdGMFlTQnBjeUJoSUhOMGNtbHVaeUJwWmlCekxuQnliMk5sYzNORVlYUmhJR2x6SUhSeWRXVXBYRzVjZENBcUlETXBJR3RsZVNCcGN5QjBhR1VnWkdGMFlWUjVjR1ZjYmx4MElDb2dOQ2tnZEdobElHTmhkR05vWVd4c0lITjViV0p2YkNCY0lpcGNJaUJqWVc0Z1ltVWdkWE5sWkZ4dVhIUWdLaUExS1NCbGVHVmpkWFJwYjI0Z2QybHNiQ0J6ZEdGeWRDQjNhWFJvSUhSeVlXNXpjRzl5ZENCa1lYUmhWSGx3WlNCaGJtUWdWRWhGVGlCamIyNTBhVzUxWlNCa2IzZHVJSFJ2SUZ3aUtsd2lJR2xtSUc1bFpXUmxaRnh1WEhRZ0tpOWNibHgwY0hKbFptbHNkR1Z5Y3lBOUlIdDlMRnh1WEc1Y2RDOHFJRlJ5WVc1emNHOXlkSE1nWW1sdVpHbHVaM05jYmx4MElDb2dNU2tnYTJWNUlHbHpJSFJvWlNCa1lYUmhWSGx3WlZ4dVhIUWdLaUF5S1NCMGFHVWdZMkYwWTJoaGJHd2djM2x0WW05c0lGd2lLbHdpSUdOaGJpQmlaU0IxYzJWa1hHNWNkQ0FxSURNcElITmxiR1ZqZEdsdmJpQjNhV3hzSUhOMFlYSjBJSGRwZEdnZ2RISmhibk53YjNKMElHUmhkR0ZVZVhCbElHRnVaQ0JVU0VWT0lHZHZJSFJ2SUZ3aUtsd2lJR2xtSUc1bFpXUmxaRnh1WEhRZ0tpOWNibHgwZEhKaGJuTndiM0owY3lBOUlIdDlMRnh1WEc1Y2RDOHZJRUYyYjJsa0lHTnZiVzFsYm5RdGNISnZiRzluSUdOb1lYSWdjMlZ4ZFdWdVkyVWdLQ014TURBNU9DazdJRzExYzNRZ1lYQndaV0Z6WlNCc2FXNTBJR0Z1WkNCbGRtRmtaU0JqYjIxd2NtVnpjMmx2Ymx4dVhIUmhiR3hVZVhCbGN5QTlJRndpS2k5Y0lpNWpiMjVqWVhRb0lGd2lLbHdpSUNrc1hHNWNibHgwTHk4Z1FXNWphRzl5SUhSaFp5Qm1iM0lnY0dGeWMybHVaeUIwYUdVZ1pHOWpkVzFsYm5RZ2IzSnBaMmx1WEc1Y2RHOXlhV2RwYmtGdVkyaHZjaUE5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9JRndpWVZ3aUlDazdYRzVjZEc5eWFXZHBia0Z1WTJodmNpNW9jbVZtSUQwZ2JHOWpZWFJwYjI0dWFISmxaanRjYmx4dUx5OGdRbUZ6WlNCY0ltTnZibk4wY25WamRHOXlYQ0lnWm05eUlHcFJkV1Z5ZVM1aGFtRjRVSEpsWm1sc2RHVnlJR0Z1WkNCcVVYVmxjbmt1WVdwaGVGUnlZVzV6Y0c5eWRGeHVablZ1WTNScGIyNGdZV1JrVkc5UWNtVm1hV3gwWlhKelQzSlVjbUZ1YzNCdmNuUnpLQ0J6ZEhKMVkzUjFjbVVnS1NCN1hHNWNibHgwTHk4Z1pHRjBZVlI1Y0dWRmVIQnlaWE56YVc5dUlHbHpJRzl3ZEdsdmJtRnNJR0Z1WkNCa1pXWmhkV3gwY3lCMGJ5QmNJaXBjSWx4dVhIUnlaWFIxY200Z1puVnVZM1JwYjI0b0lHUmhkR0ZVZVhCbFJYaHdjbVZ6YzJsdmJpd2dablZ1WXlBcElIdGNibHh1WEhSY2RHbG1JQ2dnZEhsd1pXOW1JR1JoZEdGVWVYQmxSWGh3Y21WemMybHZiaUFoUFQwZ1hDSnpkSEpwYm1kY0lpQXBJSHRjYmx4MFhIUmNkR1oxYm1NZ1BTQmtZWFJoVkhsd1pVVjRjSEpsYzNOcGIyNDdYRzVjZEZ4MFhIUmtZWFJoVkhsd1pVVjRjSEpsYzNOcGIyNGdQU0JjSWlwY0lqdGNibHgwWEhSOVhHNWNibHgwWEhSMllYSWdaR0YwWVZSNWNHVXNYRzVjZEZ4MFhIUnBJRDBnTUN4Y2JseDBYSFJjZEdSaGRHRlVlWEJsY3lBOUlHUmhkR0ZVZVhCbFJYaHdjbVZ6YzJsdmJpNTBiMHh2ZDJWeVEyRnpaU2dwTG0xaGRHTm9LQ0J5Ym05MGFIUnRiSGRvYVhSbElDa2dmSHdnVzEwN1hHNWNibHgwWEhScFppQW9JR3BSZFdWeWVTNXBjMFoxYm1OMGFXOXVLQ0JtZFc1aklDa2dLU0I3WEc1Y2JseDBYSFJjZEM4dklFWnZjaUJsWVdOb0lHUmhkR0ZVZVhCbElHbHVJSFJvWlNCa1lYUmhWSGx3WlVWNGNISmxjM05wYjI1Y2JseDBYSFJjZEhkb2FXeGxJQ2dnS0NCa1lYUmhWSGx3WlNBOUlHUmhkR0ZVZVhCbGMxc2dhU3NySUYwZ0tTQXBJSHRjYmx4dVhIUmNkRngwWEhRdkx5QlFjbVZ3Wlc1a0lHbG1JSEpsY1hWbGMzUmxaRnh1WEhSY2RGeDBYSFJwWmlBb0lHUmhkR0ZVZVhCbFd5QXdJRjBnUFQwOUlGd2lLMXdpSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkR1JoZEdGVWVYQmxJRDBnWkdGMFlWUjVjR1V1YzJ4cFkyVW9JREVnS1NCOGZDQmNJaXBjSWp0Y2JseDBYSFJjZEZ4MFhIUW9JSE4wY25WamRIVnlaVnNnWkdGMFlWUjVjR1VnWFNBOUlITjBjblZqZEhWeVpWc2daR0YwWVZSNWNHVWdYU0I4ZkNCYlhTQXBMblZ1YzJocFpuUW9JR1oxYm1NZ0tUdGNibHh1WEhSY2RGeDBYSFF2THlCUGRHaGxjbmRwYzJVZ1lYQndaVzVrWEc1Y2RGeDBYSFJjZEgwZ1pXeHpaU0I3WEc1Y2RGeDBYSFJjZEZ4MEtDQnpkSEoxWTNSMWNtVmJJR1JoZEdGVWVYQmxJRjBnUFNCemRISjFZM1IxY21WYklHUmhkR0ZVZVhCbElGMGdmSHdnVzEwZ0tTNXdkWE5vS0NCbWRXNWpJQ2s3WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEgxY2JseDBYSFI5WEc1Y2RIMDdYRzU5WEc1Y2JpOHZJRUpoYzJVZ2FXNXpjR1ZqZEdsdmJpQm1kVzVqZEdsdmJpQm1iM0lnY0hKbFptbHNkR1Z5Y3lCaGJtUWdkSEpoYm5Od2IzSjBjMXh1Wm5WdVkzUnBiMjRnYVc1emNHVmpkRkJ5WldacGJIUmxjbk5QY2xSeVlXNXpjRzl5ZEhNb0lITjBjblZqZEhWeVpTd2diM0IwYVc5dWN5d2diM0pwWjJsdVlXeFBjSFJwYjI1ekxDQnFjVmhJVWlBcElIdGNibHh1WEhSMllYSWdhVzV6Y0dWamRHVmtJRDBnZTMwc1hHNWNkRngwYzJWbGEybHVaMVJ5WVc1emNHOXlkQ0E5SUNnZ2MzUnlkV04wZFhKbElEMDlQU0IwY21GdWMzQnZjblJ6SUNrN1hHNWNibHgwWm5WdVkzUnBiMjRnYVc1emNHVmpkQ2dnWkdGMFlWUjVjR1VnS1NCN1hHNWNkRngwZG1GeUlITmxiR1ZqZEdWa08xeHVYSFJjZEdsdWMzQmxZM1JsWkZzZ1pHRjBZVlI1Y0dVZ1hTQTlJSFJ5ZFdVN1hHNWNkRngwYWxGMVpYSjVMbVZoWTJnb0lITjBjblZqZEhWeVpWc2daR0YwWVZSNWNHVWdYU0I4ZkNCYlhTd2dablZ1WTNScGIyNG9JRjhzSUhCeVpXWnBiSFJsY2s5eVJtRmpkRzl5ZVNBcElIdGNibHgwWEhSY2RIWmhjaUJrWVhSaFZIbHdaVTl5VkhKaGJuTndiM0owSUQwZ2NISmxabWxzZEdWeVQzSkdZV04wYjNKNUtDQnZjSFJwYjI1ekxDQnZjbWxuYVc1aGJFOXdkR2x2Ym5Nc0lHcHhXRWhTSUNrN1hHNWNkRngwWEhScFppQW9JSFI1Y0dWdlppQmtZWFJoVkhsd1pVOXlWSEpoYm5Od2IzSjBJRDA5UFNCY0luTjBjbWx1WjF3aUlDWW1YRzVjZEZ4MFhIUmNkQ0Z6WldWcmFXNW5WSEpoYm5Od2IzSjBJQ1ltSUNGcGJuTndaV04wWldSYklHUmhkR0ZVZVhCbFQzSlVjbUZ1YzNCdmNuUWdYU0FwSUh0Y2JseHVYSFJjZEZ4MFhIUnZjSFJwYjI1ekxtUmhkR0ZVZVhCbGN5NTFibk5vYVdaMEtDQmtZWFJoVkhsd1pVOXlWSEpoYm5Od2IzSjBJQ2s3WEc1Y2RGeDBYSFJjZEdsdWMzQmxZM1FvSUdSaGRHRlVlWEJsVDNKVWNtRnVjM0J2Y25RZ0tUdGNibHgwWEhSY2RGeDBjbVYwZFhKdUlHWmhiSE5sTzF4dVhIUmNkRngwZlNCbGJITmxJR2xtSUNnZ2MyVmxhMmx1WjFSeVlXNXpjRzl5ZENBcElIdGNibHgwWEhSY2RGeDBjbVYwZFhKdUlDRW9JSE5sYkdWamRHVmtJRDBnWkdGMFlWUjVjR1ZQY2xSeVlXNXpjRzl5ZENBcE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgwZ0tUdGNibHgwWEhSeVpYUjFjbTRnYzJWc1pXTjBaV1E3WEc1Y2RIMWNibHh1WEhSeVpYUjFjbTRnYVc1emNHVmpkQ2dnYjNCMGFXOXVjeTVrWVhSaFZIbHdaWE5iSURBZ1hTQXBJSHg4SUNGcGJuTndaV04wWldSYklGd2lLbHdpSUYwZ0ppWWdhVzV6Y0dWamRDZ2dYQ0lxWENJZ0tUdGNibjFjYmx4dUx5OGdRU0J6Y0dWamFXRnNJR1Y0ZEdWdVpDQm1iM0lnWVdwaGVDQnZjSFJwYjI1elhHNHZMeUIwYUdGMElIUmhhMlZ6SUZ3aVpteGhkRndpSUc5d2RHbHZibk1nS0c1dmRDQjBieUJpWlNCa1pXVndJR1Y0ZEdWdVpHVmtLVnh1THk4Z1JtbDRaWE1nSXprNE9EZGNibVoxYm1OMGFXOXVJR0ZxWVhoRmVIUmxibVFvSUhSaGNtZGxkQ3dnYzNKaklDa2dlMXh1WEhSMllYSWdhMlY1TENCa1pXVndMRnh1WEhSY2RHWnNZWFJQY0hScGIyNXpJRDBnYWxGMVpYSjVMbUZxWVhoVFpYUjBhVzVuY3k1bWJHRjBUM0IwYVc5dWN5QjhmQ0I3ZlR0Y2JseHVYSFJtYjNJZ0tDQnJaWGtnYVc0Z2MzSmpJQ2tnZTF4dVhIUmNkR2xtSUNnZ2MzSmpXeUJyWlhrZ1hTQWhQVDBnZFc1a1pXWnBibVZrSUNrZ2UxeHVYSFJjZEZ4MEtDQm1iR0YwVDNCMGFXOXVjMXNnYTJWNUlGMGdQeUIwWVhKblpYUWdPaUFvSUdSbFpYQWdmSHdnS0NCa1pXVndJRDBnZTMwZ0tTQXBJQ2xiSUd0bGVTQmRJRDBnYzNKald5QnJaWGtnWFR0Y2JseDBYSFI5WEc1Y2RIMWNibHgwYVdZZ0tDQmtaV1Z3SUNrZ2UxeHVYSFJjZEdwUmRXVnllUzVsZUhSbGJtUW9JSFJ5ZFdVc0lIUmhjbWRsZEN3Z1pHVmxjQ0FwTzF4dVhIUjlYRzVjYmx4MGNtVjBkWEp1SUhSaGNtZGxkRHRjYm4xY2JseHVMeW9nU0dGdVpHeGxjeUJ5WlhOd2IyNXpaWE1nZEc4Z1lXNGdZV3BoZUNCeVpYRjFaWE4wT2x4dUlDb2dMU0JtYVc1a2N5QjBhR1VnY21sbmFIUWdaR0YwWVZSNWNHVWdLRzFsWkdsaGRHVnpJR0psZEhkbFpXNGdZMjl1ZEdWdWRDMTBlWEJsSUdGdVpDQmxlSEJsWTNSbFpDQmtZWFJoVkhsd1pTbGNiaUFxSUMwZ2NtVjBkWEp1Y3lCMGFHVWdZMjl5Y21WemNHOXVaR2x1WnlCeVpYTndiMjV6WlZ4dUlDb3ZYRzVtZFc1amRHbHZiaUJoYW1GNFNHRnVaR3hsVW1WemNHOXVjMlZ6S0NCekxDQnFjVmhJVWl3Z2NtVnpjRzl1YzJWeklDa2dlMXh1WEc1Y2RIWmhjaUJqZEN3Z2RIbHdaU3dnWm1sdVlXeEVZWFJoVkhsd1pTd2dabWx5YzNSRVlYUmhWSGx3WlN4Y2JseDBYSFJqYjI1MFpXNTBjeUE5SUhNdVkyOXVkR1Z1ZEhNc1hHNWNkRngwWkdGMFlWUjVjR1Z6SUQwZ2N5NWtZWFJoVkhsd1pYTTdYRzVjYmx4MEx5OGdVbVZ0YjNabElHRjFkRzhnWkdGMFlWUjVjR1VnWVc1a0lHZGxkQ0JqYjI1MFpXNTBMWFI1Y0dVZ2FXNGdkR2hsSUhCeWIyTmxjM05jYmx4MGQyaHBiR1VnS0NCa1lYUmhWSGx3WlhOYklEQWdYU0E5UFQwZ1hDSXFYQ0lnS1NCN1hHNWNkRngwWkdGMFlWUjVjR1Z6TG5Ob2FXWjBLQ2s3WEc1Y2RGeDBhV1lnS0NCamRDQTlQVDBnZFc1a1pXWnBibVZrSUNrZ2UxeHVYSFJjZEZ4MFkzUWdQU0J6TG0xcGJXVlVlWEJsSUh4OElHcHhXRWhTTG1kbGRGSmxjM0J2Ym5ObFNHVmhaR1Z5S0NCY0lrTnZiblJsYm5RdFZIbHdaVndpSUNrN1hHNWNkRngwZlZ4dVhIUjlYRzVjYmx4MEx5OGdRMmhsWTJzZ2FXWWdkMlVuY21VZ1pHVmhiR2x1WnlCM2FYUm9JR0VnYTI1dmQyNGdZMjl1ZEdWdWRDMTBlWEJsWEc1Y2RHbG1JQ2dnWTNRZ0tTQjdYRzVjZEZ4MFptOXlJQ2dnZEhsd1pTQnBiaUJqYjI1MFpXNTBjeUFwSUh0Y2JseDBYSFJjZEdsbUlDZ2dZMjl1ZEdWdWRITmJJSFI1Y0dVZ1hTQW1KaUJqYjI1MFpXNTBjMXNnZEhsd1pTQmRMblJsYzNRb0lHTjBJQ2tnS1NCN1hHNWNkRngwWEhSY2RHUmhkR0ZVZVhCbGN5NTFibk5vYVdaMEtDQjBlWEJsSUNrN1hHNWNkRngwWEhSY2RHSnlaV0ZyTzF4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4MGZWeHVYRzVjZEM4dklFTm9aV05ySUhSdklITmxaU0JwWmlCM1pTQm9ZWFpsSUdFZ2NtVnpjRzl1YzJVZ1ptOXlJSFJvWlNCbGVIQmxZM1JsWkNCa1lYUmhWSGx3WlZ4dVhIUnBaaUFvSUdSaGRHRlVlWEJsYzFzZ01DQmRJR2x1SUhKbGMzQnZibk5sY3lBcElIdGNibHgwWEhSbWFXNWhiRVJoZEdGVWVYQmxJRDBnWkdGMFlWUjVjR1Z6V3lBd0lGMDdYRzVjZEgwZ1pXeHpaU0I3WEc1Y2JseDBYSFF2THlCVWNua2dZMjl1ZG1WeWRHbGliR1VnWkdGMFlWUjVjR1Z6WEc1Y2RGeDBabTl5SUNnZ2RIbHdaU0JwYmlCeVpYTndiMjV6WlhNZ0tTQjdYRzVjZEZ4MFhIUnBaaUFvSUNGa1lYUmhWSGx3WlhOYklEQWdYU0I4ZkNCekxtTnZiblpsY25SbGNuTmJJSFI1Y0dVZ0t5QmNJaUJjSWlBcklHUmhkR0ZVZVhCbGMxc2dNQ0JkSUYwZ0tTQjdYRzVjZEZ4MFhIUmNkR1pwYm1Gc1JHRjBZVlI1Y0dVZ1BTQjBlWEJsTzF4dVhIUmNkRngwWEhSaWNtVmhhenRjYmx4MFhIUmNkSDFjYmx4MFhIUmNkR2xtSUNnZ0lXWnBjbk4wUkdGMFlWUjVjR1VnS1NCN1hHNWNkRngwWEhSY2RHWnBjbk4wUkdGMFlWUjVjR1VnUFNCMGVYQmxPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMWNibHh1WEhSY2RDOHZJRTl5SUdwMWMzUWdkWE5sSUdacGNuTjBJRzl1WlZ4dVhIUmNkR1pwYm1Gc1JHRjBZVlI1Y0dVZ1BTQm1hVzVoYkVSaGRHRlVlWEJsSUh4OElHWnBjbk4wUkdGMFlWUjVjR1U3WEc1Y2RIMWNibHh1WEhRdkx5QkpaaUIzWlNCbWIzVnVaQ0JoSUdSaGRHRlVlWEJsWEc1Y2RDOHZJRmRsSUdGa1pDQjBhR1VnWkdGMFlWUjVjR1VnZEc4Z2RHaGxJR3hwYzNRZ2FXWWdibVZsWkdWa1hHNWNkQzh2SUdGdVpDQnlaWFIxY200Z2RHaGxJR052Y25KbGMzQnZibVJwYm1jZ2NtVnpjRzl1YzJWY2JseDBhV1lnS0NCbWFXNWhiRVJoZEdGVWVYQmxJQ2tnZTF4dVhIUmNkR2xtSUNnZ1ptbHVZV3hFWVhSaFZIbHdaU0FoUFQwZ1pHRjBZVlI1Y0dWeld5QXdJRjBnS1NCN1hHNWNkRngwWEhSa1lYUmhWSGx3WlhNdWRXNXphR2xtZENnZ1ptbHVZV3hFWVhSaFZIbHdaU0FwTzF4dVhIUmNkSDFjYmx4MFhIUnlaWFIxY200Z2NtVnpjRzl1YzJWeld5Qm1hVzVoYkVSaGRHRlVlWEJsSUYwN1hHNWNkSDFjYm4xY2JseHVMeW9nUTJoaGFXNGdZMjl1ZG1WeWMybHZibk1nWjJsMlpXNGdkR2hsSUhKbGNYVmxjM1FnWVc1a0lIUm9aU0J2Y21sbmFXNWhiQ0J5WlhOd2IyNXpaVnh1SUNvZ1FXeHpieUJ6WlhSeklIUm9aU0J5WlhOd2IyNXpaVmhZV0NCbWFXVnNaSE1nYjI0Z2RHaGxJR3B4V0VoU0lHbHVjM1JoYm1ObFhHNGdLaTljYm1aMWJtTjBhVzl1SUdGcVlYaERiMjUyWlhKMEtDQnpMQ0J5WlhOd2IyNXpaU3dnYW5GWVNGSXNJR2x6VTNWalkyVnpjeUFwSUh0Y2JseDBkbUZ5SUdOdmJuWXlMQ0JqZFhKeVpXNTBMQ0JqYjI1MkxDQjBiWEFzSUhCeVpYWXNYRzVjZEZ4MFkyOXVkbVZ5ZEdWeWN5QTlJSHQ5TEZ4dVhHNWNkRngwTHk4Z1YyOXlheUIzYVhSb0lHRWdZMjl3ZVNCdlppQmtZWFJoVkhsd1pYTWdhVzRnWTJGelpTQjNaU0J1WldWa0lIUnZJRzF2WkdsbWVTQnBkQ0JtYjNJZ1kyOXVkbVZ5YzJsdmJseHVYSFJjZEdSaGRHRlVlWEJsY3lBOUlITXVaR0YwWVZSNWNHVnpMbk5zYVdObEtDazdYRzVjYmx4MEx5OGdRM0psWVhSbElHTnZiblpsY25SbGNuTWdiV0Z3SUhkcGRHZ2diRzkzWlhKallYTmxaQ0JyWlhselhHNWNkR2xtSUNnZ1pHRjBZVlI1Y0dWeld5QXhJRjBnS1NCN1hHNWNkRngwWm05eUlDZ2dZMjl1ZGlCcGJpQnpMbU52Ym5abGNuUmxjbk1nS1NCN1hHNWNkRngwWEhSamIyNTJaWEowWlhKeld5QmpiMjUyTG5SdlRHOTNaWEpEWVhObEtDa2dYU0E5SUhNdVkyOXVkbVZ5ZEdWeWMxc2dZMjl1ZGlCZE8xeHVYSFJjZEgxY2JseDBmVnh1WEc1Y2RHTjFjbkpsYm5RZ1BTQmtZWFJoVkhsd1pYTXVjMmhwWm5Rb0tUdGNibHh1WEhRdkx5QkRiMjUyWlhKMElIUnZJR1ZoWTJnZ2MyVnhkV1Z1ZEdsaGJDQmtZWFJoVkhsd1pWeHVYSFIzYUdsc1pTQW9JR04xY25KbGJuUWdLU0I3WEc1Y2JseDBYSFJwWmlBb0lITXVjbVZ6Y0c5dWMyVkdhV1ZzWkhOYklHTjFjbkpsYm5RZ1hTQXBJSHRjYmx4MFhIUmNkR3B4V0VoU1d5QnpMbkpsYzNCdmJuTmxSbWxsYkdSeld5QmpkWEp5Wlc1MElGMGdYU0E5SUhKbGMzQnZibk5sTzF4dVhIUmNkSDFjYmx4dVhIUmNkQzh2SUVGd2NHeDVJSFJvWlNCa1lYUmhSbWxzZEdWeUlHbG1JSEJ5YjNacFpHVmtYRzVjZEZ4MGFXWWdLQ0FoY0hKbGRpQW1KaUJwYzFOMVkyTmxjM01nSmlZZ2N5NWtZWFJoUm1sc2RHVnlJQ2tnZTF4dVhIUmNkRngwY21WemNHOXVjMlVnUFNCekxtUmhkR0ZHYVd4MFpYSW9JSEpsYzNCdmJuTmxMQ0J6TG1SaGRHRlVlWEJsSUNrN1hHNWNkRngwZlZ4dVhHNWNkRngwY0hKbGRpQTlJR04xY25KbGJuUTdYRzVjZEZ4MFkzVnljbVZ1ZENBOUlHUmhkR0ZVZVhCbGN5NXphR2xtZENncE8xeHVYRzVjZEZ4MGFXWWdLQ0JqZFhKeVpXNTBJQ2tnZTF4dVhHNWNkRngwWEhRdkx5QlVhR1Z5WlNkeklHOXViSGtnZDI5eWF5QjBieUJrYnlCcFppQmpkWEp5Wlc1MElHUmhkR0ZVZVhCbElHbHpJRzV2YmkxaGRYUnZYRzVjZEZ4MFhIUnBaaUFvSUdOMWNuSmxiblFnUFQwOUlGd2lLbHdpSUNrZ2UxeHVYRzVjZEZ4MFhIUmNkR04xY25KbGJuUWdQU0J3Y21WMk8xeHVYRzVjZEZ4MFhIUXZMeUJEYjI1MlpYSjBJSEpsYzNCdmJuTmxJR2xtSUhCeVpYWWdaR0YwWVZSNWNHVWdhWE1nYm05dUxXRjFkRzhnWVc1a0lHUnBabVpsY25NZ1puSnZiU0JqZFhKeVpXNTBYRzVjZEZ4MFhIUjlJR1ZzYzJVZ2FXWWdLQ0J3Y21WMklDRTlQU0JjSWlwY0lpQW1KaUJ3Y21WMklDRTlQU0JqZFhKeVpXNTBJQ2tnZTF4dVhHNWNkRngwWEhSY2RDOHZJRk5sWldzZ1lTQmthWEpsWTNRZ1kyOXVkbVZ5ZEdWeVhHNWNkRngwWEhSY2RHTnZibllnUFNCamIyNTJaWEowWlhKeld5QndjbVYySUNzZ1hDSWdYQ0lnS3lCamRYSnlaVzUwSUYwZ2ZId2dZMjl1ZG1WeWRHVnljMXNnWENJcUlGd2lJQ3NnWTNWeWNtVnVkQ0JkTzF4dVhHNWNkRngwWEhSY2RDOHZJRWxtSUc1dmJtVWdabTkxYm1Rc0lITmxaV3NnWVNCd1lXbHlYRzVjZEZ4MFhIUmNkR2xtSUNnZ0lXTnZibllnS1NCN1hHNWNkRngwWEhSY2RGeDBabTl5SUNnZ1kyOXVkaklnYVc0Z1kyOXVkbVZ5ZEdWeWN5QXBJSHRjYmx4dVhIUmNkRngwWEhSY2RGeDBMeThnU1dZZ1kyOXVkaklnYjNWMGNIVjBjeUJqZFhKeVpXNTBYRzVjZEZ4MFhIUmNkRngwWEhSMGJYQWdQU0JqYjI1Mk1pNXpjR3hwZENnZ1hDSWdYQ0lnS1R0Y2JseDBYSFJjZEZ4MFhIUmNkR2xtSUNnZ2RHMXdXeUF4SUYwZ1BUMDlJR04xY25KbGJuUWdLU0I3WEc1Y2JseDBYSFJjZEZ4MFhIUmNkRngwTHk4Z1NXWWdjSEpsZGlCallXNGdZbVVnWTI5dWRtVnlkR1ZrSUhSdklHRmpZMlZ3ZEdWa0lHbHVjSFYwWEc1Y2RGeDBYSFJjZEZ4MFhIUmNkR052Ym5ZZ1BTQmpiMjUyWlhKMFpYSnpXeUJ3Y21WMklDc2dYQ0lnWENJZ0t5QjBiWEJiSURBZ1hTQmRJSHg4WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWTI5dWRtVnlkR1Z5YzFzZ1hDSXFJRndpSUNzZ2RHMXdXeUF3SUYwZ1hUdGNibHgwWEhSY2RGeDBYSFJjZEZ4MGFXWWdLQ0JqYjI1MklDa2dlMXh1WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwTHk4Z1EyOXVaR1Z1YzJVZ1pYRjFhWFpoYkdWdVkyVWdZMjl1ZG1WeWRHVnljMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkR2xtSUNnZ1kyOXVkaUE5UFQwZ2RISjFaU0FwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RHTnZibllnUFNCamIyNTJaWEowWlhKeld5QmpiMjUyTWlCZE8xeHVYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBMeThnVDNSb1pYSjNhWE5sTENCcGJuTmxjblFnZEdobElHbHVkR1Z5YldWa2FXRjBaU0JrWVhSaFZIbHdaVnh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkSDBnWld4elpTQnBaaUFvSUdOdmJuWmxjblJsY25OYklHTnZibll5SUYwZ0lUMDlJSFJ5ZFdVZ0tTQjdYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJqZFhKeVpXNTBJRDBnZEcxd1d5QXdJRjA3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSa1lYUmhWSGx3WlhNdWRXNXphR2xtZENnZ2RHMXdXeUF4SUYwZ0tUdGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBZbkpsWVdzN1hHNWNkRngwWEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RIMWNibHh1WEhSY2RGeDBYSFF2THlCQmNIQnNlU0JqYjI1MlpYSjBaWElnS0dsbUlHNXZkQ0JoYmlCbGNYVnBkbUZzWlc1alpTbGNibHgwWEhSY2RGeDBhV1lnS0NCamIyNTJJQ0U5UFNCMGNuVmxJQ2tnZTF4dVhHNWNkRngwWEhSY2RGeDBMeThnVlc1c1pYTnpJR1Z5Y205eWN5QmhjbVVnWVd4c2IzZGxaQ0IwYnlCaWRXSmliR1VzSUdOaGRHTm9JR0Z1WkNCeVpYUjFjbTRnZEdobGJWeHVYSFJjZEZ4MFhIUmNkR2xtSUNnZ1kyOXVkaUFtSmlCekxuUm9jbTkzY3lBcElIdGNibHgwWEhSY2RGeDBYSFJjZEhKbGMzQnZibk5sSUQwZ1kyOXVkaWdnY21WemNHOXVjMlVnS1R0Y2JseDBYSFJjZEZ4MFhIUjlJR1ZzYzJVZ2UxeHVYSFJjZEZ4MFhIUmNkRngwZEhKNUlIdGNibHgwWEhSY2RGeDBYSFJjZEZ4MGNtVnpjRzl1YzJVZ1BTQmpiMjUyS0NCeVpYTndiMjV6WlNBcE8xeHVYSFJjZEZ4MFhIUmNkRngwZlNCallYUmphQ0FvSUdVZ0tTQjdYRzVjZEZ4MFhIUmNkRngwWEhSY2RISmxkSFZ5YmlCN1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MGMzUmhkR1U2SUZ3aWNHRnljMlZ5WlhKeWIzSmNJaXhjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJsY25KdmNqb2dZMjl1ZGlBL0lHVWdPaUJjSWs1dklHTnZiblpsY25OcGIyNGdabkp2YlNCY0lpQXJJSEJ5WlhZZ0t5QmNJaUIwYnlCY0lpQXJJR04xY25KbGJuUmNibHgwWEhSY2RGeDBYSFJjZEZ4MGZUdGNibHgwWEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkSDFjYmx4MFhIUjlYRzVjZEgxY2JseHVYSFJ5WlhSMWNtNGdleUJ6ZEdGMFpUb2dYQ0p6ZFdOalpYTnpYQ0lzSUdSaGRHRTZJSEpsYzNCdmJuTmxJSDA3WEc1OVhHNWNibXBSZFdWeWVTNWxlSFJsYm1Rb0lIdGNibHh1WEhRdkx5QkRiM1Z1ZEdWeUlHWnZjaUJvYjJ4a2FXNW5JSFJvWlNCdWRXMWlaWElnYjJZZ1lXTjBhWFpsSUhGMVpYSnBaWE5jYmx4MFlXTjBhWFpsT2lBd0xGeHVYRzVjZEM4dklFeGhjM1F0VFc5a2FXWnBaV1FnYUdWaFpHVnlJR05oWTJobElHWnZjaUJ1WlhoMElISmxjWFZsYzNSY2JseDBiR0Z6ZEUxdlpHbG1hV1ZrT2lCN2ZTeGNibHgwWlhSaFp6b2dlMzBzWEc1Y2JseDBZV3BoZUZObGRIUnBibWR6T2lCN1hHNWNkRngwZFhKc09pQnNiMk5oZEdsdmJpNW9jbVZtTEZ4dVhIUmNkSFI1Y0dVNklGd2lSMFZVWENJc1hHNWNkRngwYVhOTWIyTmhiRG9nY214dlkyRnNVSEp2ZEc5amIyd3VkR1Z6ZENnZ2JHOWpZWFJwYjI0dWNISnZkRzlqYjJ3Z0tTeGNibHgwWEhSbmJHOWlZV3c2SUhSeWRXVXNYRzVjZEZ4MGNISnZZMlZ6YzBSaGRHRTZJSFJ5ZFdVc1hHNWNkRngwWVhONWJtTTZJSFJ5ZFdVc1hHNWNkRngwWTI5dWRHVnVkRlI1Y0dVNklGd2lZWEJ3YkdsallYUnBiMjR2ZUMxM2QzY3RabTl5YlMxMWNteGxibU52WkdWa095QmphR0Z5YzJWMFBWVlVSaTA0WENJc1hHNWNibHgwWEhRdktseHVYSFJjZEhScGJXVnZkWFE2SURBc1hHNWNkRngwWkdGMFlUb2diblZzYkN4Y2JseDBYSFJrWVhSaFZIbHdaVG9nYm5Wc2JDeGNibHgwWEhSMWMyVnlibUZ0WlRvZ2JuVnNiQ3hjYmx4MFhIUndZWE56ZDI5eVpEb2diblZzYkN4Y2JseDBYSFJqWVdOb1pUb2diblZzYkN4Y2JseDBYSFIwYUhKdmQzTTZJR1poYkhObExGeHVYSFJjZEhSeVlXUnBkR2x2Ym1Gc09pQm1ZV3h6WlN4Y2JseDBYSFJvWldGa1pYSnpPaUI3ZlN4Y2JseDBYSFFxTDF4dVhHNWNkRngwWVdOalpYQjBjem9nZTF4dVhIUmNkRngwWENJcVhDSTZJR0ZzYkZSNWNHVnpMRnh1WEhSY2RGeDBkR1Y0ZERvZ1hDSjBaWGgwTDNCc1lXbHVYQ0lzWEc1Y2RGeDBYSFJvZEcxc09pQmNJblJsZUhRdmFIUnRiRndpTEZ4dVhIUmNkRngwZUcxc09pQmNJbUZ3Y0d4cFkyRjBhVzl1TDNodGJDd2dkR1Y0ZEM5NGJXeGNJaXhjYmx4MFhIUmNkR3B6YjI0NklGd2lZWEJ3YkdsallYUnBiMjR2YW5OdmJpd2dkR1Y0ZEM5cVlYWmhjMk55YVhCMFhDSmNibHgwWEhSOUxGeHVYRzVjZEZ4MFkyOXVkR1Z1ZEhNNklIdGNibHgwWEhSY2RIaHRiRG9nTDF4Y1luaHRiRnhjWWk4c1hHNWNkRngwWEhSb2RHMXNPaUF2WEZ4aWFIUnRiQzhzWEc1Y2RGeDBYSFJxYzI5dU9pQXZYRnhpYW5OdmJseGNZaTljYmx4MFhIUjlMRnh1WEc1Y2RGeDBjbVZ6Y0c5dWMyVkdhV1ZzWkhNNklIdGNibHgwWEhSY2RIaHRiRG9nWENKeVpYTndiMjV6WlZoTlRGd2lMRnh1WEhSY2RGeDBkR1Y0ZERvZ1hDSnlaWE53YjI1elpWUmxlSFJjSWl4Y2JseDBYSFJjZEdwemIyNDZJRndpY21WemNHOXVjMlZLVTA5T1hDSmNibHgwWEhSOUxGeHVYRzVjZEZ4MEx5OGdSR0YwWVNCamIyNTJaWEowWlhKelhHNWNkRngwTHk4Z1MyVjVjeUJ6WlhCaGNtRjBaU0J6YjNWeVkyVWdLRzl5SUdOaGRHTm9ZV3hzSUZ3aUtsd2lLU0JoYm1RZ1pHVnpkR2x1WVhScGIyNGdkSGx3WlhNZ2QybDBhQ0JoSUhOcGJtZHNaU0J6Y0dGalpWeHVYSFJjZEdOdmJuWmxjblJsY25NNklIdGNibHh1WEhSY2RGeDBMeThnUTI5dWRtVnlkQ0JoYm5sMGFHbHVaeUIwYnlCMFpYaDBYRzVjZEZ4MFhIUmNJaW9nZEdWNGRGd2lPaUJUZEhKcGJtY3NYRzVjYmx4MFhIUmNkQzh2SUZSbGVIUWdkRzhnYUhSdGJDQW9kSEoxWlNBOUlHNXZJSFJ5WVc1elptOXliV0YwYVc5dUtWeHVYSFJjZEZ4MFhDSjBaWGgwSUdoMGJXeGNJam9nZEhKMVpTeGNibHh1WEhSY2RGeDBMeThnUlhaaGJIVmhkR1VnZEdWNGRDQmhjeUJoSUdwemIyNGdaWGh3Y21WemMybHZibHh1WEhSY2RGeDBYQ0owWlhoMElHcHpiMjVjSWpvZ1NsTlBUaTV3WVhKelpTeGNibHh1WEhSY2RGeDBMeThnVUdGeWMyVWdkR1Y0ZENCaGN5QjRiV3hjYmx4MFhIUmNkRndpZEdWNGRDQjRiV3hjSWpvZ2FsRjFaWEo1TG5CaGNuTmxXRTFNWEc1Y2RGeDBmU3hjYmx4dVhIUmNkQzh2SUVadmNpQnZjSFJwYjI1eklIUm9ZWFFnYzJodmRXeGtiaWQwSUdKbElHUmxaWEFnWlhoMFpXNWtaV1E2WEc1Y2RGeDBMeThnZVc5MUlHTmhiaUJoWkdRZ2VXOTFjaUJ2ZDI0Z1kzVnpkRzl0SUc5d2RHbHZibk1nYUdWeVpTQnBabHh1WEhSY2RDOHZJR0Z1WkNCM2FHVnVJSGx2ZFNCamNtVmhkR1VnYjI1bElIUm9ZWFFnYzJodmRXeGtiaWQwSUdKbFhHNWNkRngwTHk4Z1pHVmxjQ0JsZUhSbGJtUmxaQ0FvYzJWbElHRnFZWGhGZUhSbGJtUXBYRzVjZEZ4MFpteGhkRTl3ZEdsdmJuTTZJSHRjYmx4MFhIUmNkSFZ5YkRvZ2RISjFaU3hjYmx4MFhIUmNkR052Ym5SbGVIUTZJSFJ5ZFdWY2JseDBYSFI5WEc1Y2RIMHNYRzVjYmx4MEx5OGdRM0psWVhSbGN5QmhJR1oxYkd3Z1pteGxaR2RsWkNCelpYUjBhVzVuY3lCdlltcGxZM1FnYVc1MGJ5QjBZWEpuWlhSY2JseDBMeThnZDJsMGFDQmliM1JvSUdGcVlYaFRaWFIwYVc1bmN5QmhibVFnYzJWMGRHbHVaM01nWm1sbGJHUnpMbHh1WEhRdkx5QkpaaUIwWVhKblpYUWdhWE1nYjIxcGRIUmxaQ3dnZDNKcGRHVnpJR2x1ZEc4Z1lXcGhlRk5sZEhScGJtZHpMbHh1WEhSaGFtRjRVMlYwZFhBNklHWjFibU4wYVc5dUtDQjBZWEpuWlhRc0lITmxkSFJwYm1keklDa2dlMXh1WEhSY2RISmxkSFZ5YmlCelpYUjBhVzVuY3lBL1hHNWNibHgwWEhSY2RDOHZJRUoxYVd4a2FXNW5JR0VnYzJWMGRHbHVaM01nYjJKcVpXTjBYRzVjZEZ4MFhIUmhhbUY0UlhoMFpXNWtLQ0JoYW1GNFJYaDBaVzVrS0NCMFlYSm5aWFFzSUdwUmRXVnllUzVoYW1GNFUyVjBkR2x1WjNNZ0tTd2djMlYwZEdsdVozTWdLU0E2WEc1Y2JseDBYSFJjZEM4dklFVjRkR1Z1WkdsdVp5QmhhbUY0VTJWMGRHbHVaM05jYmx4MFhIUmNkR0ZxWVhoRmVIUmxibVFvSUdwUmRXVnllUzVoYW1GNFUyVjBkR2x1WjNNc0lIUmhjbWRsZENBcE8xeHVYSFI5TEZ4dVhHNWNkR0ZxWVhoUWNtVm1hV3gwWlhJNklHRmtaRlJ2VUhKbFptbHNkR1Z5YzA5eVZISmhibk53YjNKMGN5Z2djSEpsWm1sc2RHVnljeUFwTEZ4dVhIUmhhbUY0VkhKaGJuTndiM0owT2lCaFpHUlViMUJ5WldacGJIUmxjbk5QY2xSeVlXNXpjRzl5ZEhNb0lIUnlZVzV6Y0c5eWRITWdLU3hjYmx4dVhIUXZMeUJOWVdsdUlHMWxkR2h2WkZ4dVhIUmhhbUY0T2lCbWRXNWpkR2x2YmlnZ2RYSnNMQ0J2Y0hScGIyNXpJQ2tnZTF4dVhHNWNkRngwTHk4Z1NXWWdkWEpzSUdseklHRnVJRzlpYW1WamRDd2djMmx0ZFd4aGRHVWdjSEpsTFRFdU5TQnphV2R1WVhSMWNtVmNibHgwWEhScFppQW9JSFI1Y0dWdlppQjFjbXdnUFQwOUlGd2liMkpxWldOMFhDSWdLU0I3WEc1Y2RGeDBYSFJ2Y0hScGIyNXpJRDBnZFhKc08xeHVYSFJjZEZ4MGRYSnNJRDBnZFc1a1pXWnBibVZrTzF4dVhIUmNkSDFjYmx4dVhIUmNkQzh2SUVadmNtTmxJRzl3ZEdsdmJuTWdkRzhnWW1VZ1lXNGdiMkpxWldOMFhHNWNkRngwYjNCMGFXOXVjeUE5SUc5d2RHbHZibk1nZkh3Z2UzMDdYRzVjYmx4MFhIUjJZWElnZEhKaGJuTndiM0owTEZ4dVhHNWNkRngwWEhRdkx5QlZVa3dnZDJsMGFHOTFkQ0JoYm5ScExXTmhZMmhsSUhCaGNtRnRYRzVjZEZ4MFhIUmpZV05vWlZWU1RDeGNibHh1WEhSY2RGeDBMeThnVW1WemNHOXVjMlVnYUdWaFpHVnljMXh1WEhSY2RGeDBjbVZ6Y0c5dWMyVklaV0ZrWlhKelUzUnlhVzVuTEZ4dVhIUmNkRngwY21WemNHOXVjMlZJWldGa1pYSnpMRnh1WEc1Y2RGeDBYSFF2THlCMGFXMWxiM1YwSUdoaGJtUnNaVnh1WEhSY2RGeDBkR2x0Wlc5MWRGUnBiV1Z5TEZ4dVhHNWNkRngwWEhRdkx5QlZjbXdnWTJ4bFlXNTFjQ0IyWVhKY2JseDBYSFJjZEhWeWJFRnVZMmh2Y2l4Y2JseHVYSFJjZEZ4MEx5OGdVbVZ4ZFdWemRDQnpkR0YwWlNBb1ltVmpiMjFsY3lCbVlXeHpaU0IxY0c5dUlITmxibVFnWVc1a0lIUnlkV1VnZFhCdmJpQmpiMjF3YkdWMGFXOXVLVnh1WEhSY2RGeDBZMjl0Y0d4bGRHVmtMRnh1WEc1Y2RGeDBYSFF2THlCVWJ5QnJibTkzSUdsbUlHZHNiMkpoYkNCbGRtVnVkSE1nWVhKbElIUnZJR0psSUdScGMzQmhkR05vWldSY2JseDBYSFJjZEdacGNtVkhiRzlpWVd4ekxGeHVYRzVjZEZ4MFhIUXZMeUJNYjI5d0lIWmhjbWxoWW14bFhHNWNkRngwWEhScExGeHVYRzVjZEZ4MFhIUXZMeUIxYm1OaFkyaGxaQ0J3WVhKMElHOW1JSFJvWlNCMWNteGNibHgwWEhSY2RIVnVZMkZqYUdWa0xGeHVYRzVjZEZ4MFhIUXZMeUJEY21WaGRHVWdkR2hsSUdacGJtRnNJRzl3ZEdsdmJuTWdiMkpxWldOMFhHNWNkRngwWEhSeklEMGdhbEYxWlhKNUxtRnFZWGhUWlhSMWNDZ2dlMzBzSUc5d2RHbHZibk1nS1N4Y2JseHVYSFJjZEZ4MEx5OGdRMkZzYkdKaFkydHpJR052Ym5SbGVIUmNibHgwWEhSY2RHTmhiR3hpWVdOclEyOXVkR1Y0ZENBOUlITXVZMjl1ZEdWNGRDQjhmQ0J6TEZ4dVhHNWNkRngwWEhRdkx5QkRiMjUwWlhoMElHWnZjaUJuYkc5aVlXd2daWFpsYm5SeklHbHpJR05oYkd4aVlXTnJRMjl1ZEdWNGRDQnBaaUJwZENCcGN5QmhJRVJQVFNCdWIyUmxJRzl5SUdwUmRXVnllU0JqYjJ4c1pXTjBhVzl1WEc1Y2RGeDBYSFJuYkc5aVlXeEZkbVZ1ZEVOdmJuUmxlSFFnUFNCekxtTnZiblJsZUhRZ0ppWmNibHgwWEhSY2RGeDBLQ0JqWVd4c1ltRmphME52Ym5SbGVIUXVibTlrWlZSNWNHVWdmSHdnWTJGc2JHSmhZMnREYjI1MFpYaDBMbXB4ZFdWeWVTQXBJRDljYmx4MFhIUmNkRngwWEhScVVYVmxjbmtvSUdOaGJHeGlZV05yUTI5dWRHVjRkQ0FwSURwY2JseDBYSFJjZEZ4MFhIUnFVWFZsY25rdVpYWmxiblFzWEc1Y2JseDBYSFJjZEM4dklFUmxabVZ5Y21Wa2MxeHVYSFJjZEZ4MFpHVm1aWEp5WldRZ1BTQnFVWFZsY25rdVJHVm1aWEp5WldRb0tTeGNibHgwWEhSY2RHTnZiWEJzWlhSbFJHVm1aWEp5WldRZ1BTQnFVWFZsY25rdVEyRnNiR0poWTJ0ektDQmNJbTl1WTJVZ2JXVnRiM0o1WENJZ0tTeGNibHh1WEhSY2RGeDBMeThnVTNSaGRIVnpMV1JsY0dWdVpHVnVkQ0JqWVd4c1ltRmphM05jYmx4MFhIUmNkSE4wWVhSMWMwTnZaR1VnUFNCekxuTjBZWFIxYzBOdlpHVWdmSHdnZTMwc1hHNWNibHgwWEhSY2RDOHZJRWhsWVdSbGNuTWdLSFJvWlhrZ1lYSmxJSE5sYm5RZ1lXeHNJR0YwSUc5dVkyVXBYRzVjZEZ4MFhIUnlaWEYxWlhOMFNHVmhaR1Z5Y3lBOUlIdDlMRnh1WEhSY2RGeDBjbVZ4ZFdWemRFaGxZV1JsY25OT1lXMWxjeUE5SUh0OUxGeHVYRzVjZEZ4MFhIUXZMeUJFWldaaGRXeDBJR0ZpYjNKMElHMWxjM05oWjJWY2JseDBYSFJjZEhOMGNrRmliM0owSUQwZ1hDSmpZVzVqWld4bFpGd2lMRnh1WEc1Y2RGeDBYSFF2THlCR1lXdGxJSGhvY2x4dVhIUmNkRngwYW5GWVNGSWdQU0I3WEc1Y2RGeDBYSFJjZEhKbFlXUjVVM1JoZEdVNklEQXNYRzVjYmx4MFhIUmNkRngwTHk4Z1FuVnBiR1J6SUdobFlXUmxjbk1nYUdGemFIUmhZbXhsSUdsbUlHNWxaV1JsWkZ4dVhIUmNkRngwWEhSblpYUlNaWE53YjI1elpVaGxZV1JsY2pvZ1puVnVZM1JwYjI0b0lHdGxlU0FwSUh0Y2JseDBYSFJjZEZ4MFhIUjJZWElnYldGMFkyZzdYRzVjZEZ4MFhIUmNkRngwYVdZZ0tDQmpiMjF3YkdWMFpXUWdLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUnBaaUFvSUNGeVpYTndiMjV6WlVobFlXUmxjbk1nS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJjZEhKbGMzQnZibk5sU0dWaFpHVnljeUE5SUh0OU8xeHVYSFJjZEZ4MFhIUmNkRngwWEhSM2FHbHNaU0FvSUNnZ2JXRjBZMmdnUFNCeWFHVmhaR1Z5Y3k1bGVHVmpLQ0J5WlhOd2IyNXpaVWhsWVdSbGNuTlRkSEpwYm1jZ0tTQXBJQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEhKbGMzQnZibk5sU0dWaFpHVnljMXNnYldGMFkyaGJJREVnWFM1MGIweHZkMlZ5UTJGelpTZ3BJRjBnUFNCdFlYUmphRnNnTWlCZE8xeHVYSFJjZEZ4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEZ4MFhIUnRZWFJqYUNBOUlISmxjM0J2Ym5ObFNHVmhaR1Z5YzFzZ2EyVjVMblJ2VEc5M1pYSkRZWE5sS0NrZ1hUdGNibHgwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEZ4MGNtVjBkWEp1SUcxaGRHTm9JRDA5SUc1MWJHd2dQeUJ1ZFd4c0lEb2diV0YwWTJnN1hHNWNkRngwWEhSY2RIMHNYRzVjYmx4MFhIUmNkRngwTHk4Z1VtRjNJSE4wY21sdVoxeHVYSFJjZEZ4MFhIUm5aWFJCYkd4U1pYTndiMjV6WlVobFlXUmxjbk02SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEZ4MFhIUmNkSEpsZEhWeWJpQmpiMjF3YkdWMFpXUWdQeUJ5WlhOd2IyNXpaVWhsWVdSbGNuTlRkSEpwYm1jZ09pQnVkV3hzTzF4dVhIUmNkRngwWEhSOUxGeHVYRzVjZEZ4MFhIUmNkQzh2SUVOaFkyaGxjeUIwYUdVZ2FHVmhaR1Z5WEc1Y2RGeDBYSFJjZEhObGRGSmxjWFZsYzNSSVpXRmtaWEk2SUdaMWJtTjBhVzl1S0NCdVlXMWxMQ0IyWVd4MVpTQXBJSHRjYmx4MFhIUmNkRngwWEhScFppQW9JR052YlhCc1pYUmxaQ0E5UFNCdWRXeHNJQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBibUZ0WlNBOUlISmxjWFZsYzNSSVpXRmtaWEp6VG1GdFpYTmJJRzVoYldVdWRHOU1iM2RsY2tOaGMyVW9LU0JkSUQxY2JseDBYSFJjZEZ4MFhIUmNkRngwY21WeGRXVnpkRWhsWVdSbGNuTk9ZVzFsYzFzZ2JtRnRaUzUwYjB4dmQyVnlRMkZ6WlNncElGMGdmSHdnYm1GdFpUdGNibHgwWEhSY2RGeDBYSFJjZEhKbGNYVmxjM1JJWldGa1pYSnpXeUJ1WVcxbElGMGdQU0IyWVd4MVpUdGNibHgwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEZ4MGNtVjBkWEp1SUhSb2FYTTdYRzVjZEZ4MFhIUmNkSDBzWEc1Y2JseDBYSFJjZEZ4MEx5OGdUM1psY25KcFpHVnpJSEpsYzNCdmJuTmxJR052Ym5SbGJuUXRkSGx3WlNCb1pXRmtaWEpjYmx4MFhIUmNkRngwYjNabGNuSnBaR1ZOYVcxbFZIbHdaVG9nWm5WdVkzUnBiMjRvSUhSNWNHVWdLU0I3WEc1Y2RGeDBYSFJjZEZ4MGFXWWdLQ0JqYjIxd2JHVjBaV1FnUFQwZ2JuVnNiQ0FwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkSE11YldsdFpWUjVjR1VnUFNCMGVYQmxPMXh1WEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MFhIUnlaWFIxY200Z2RHaHBjenRjYmx4MFhIUmNkRngwZlN4Y2JseHVYSFJjZEZ4MFhIUXZMeUJUZEdGMGRYTXRaR1Z3Wlc1a1pXNTBJR05oYkd4aVlXTnJjMXh1WEhSY2RGeDBYSFJ6ZEdGMGRYTkRiMlJsT2lCbWRXNWpkR2x2YmlnZ2JXRndJQ2tnZTF4dVhIUmNkRngwWEhSY2RIWmhjaUJqYjJSbE8xeHVYSFJjZEZ4MFhIUmNkR2xtSUNnZ2JXRndJQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBhV1lnS0NCamIyMXdiR1YwWldRZ0tTQjdYRzVjYmx4MFhIUmNkRngwWEhSY2RGeDBMeThnUlhobFkzVjBaU0IwYUdVZ1lYQndjbTl3Y21saGRHVWdZMkZzYkdKaFkydHpYRzVjZEZ4MFhIUmNkRngwWEhSY2RHcHhXRWhTTG1Gc2QyRjVjeWdnYldGd1d5QnFjVmhJVWk1emRHRjBkWE1nWFNBcE8xeHVYSFJjZEZ4MFhIUmNkRngwZlNCbGJITmxJSHRjYmx4dVhIUmNkRngwWEhSY2RGeDBYSFF2THlCTVlYcDVMV0ZrWkNCMGFHVWdibVYzSUdOaGJHeGlZV05yY3lCcGJpQmhJSGRoZVNCMGFHRjBJSEJ5WlhObGNuWmxjeUJ2YkdRZ2IyNWxjMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUm1iM0lnS0NCamIyUmxJR2x1SUcxaGNDQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJ6ZEdGMGRYTkRiMlJsV3lCamIyUmxJRjBnUFNCYklITjBZWFIxYzBOdlpHVmJJR052WkdVZ1hTd2diV0Z3V3lCamIyUmxJRjBnWFR0Y2JseDBYSFJjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MFhIUnlaWFIxY200Z2RHaHBjenRjYmx4MFhIUmNkRngwZlN4Y2JseHVYSFJjZEZ4MFhIUXZMeUJEWVc1alpXd2dkR2hsSUhKbGNYVmxjM1JjYmx4MFhIUmNkRngwWVdKdmNuUTZJR1oxYm1OMGFXOXVLQ0J6ZEdGMGRYTlVaWGgwSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkSFpoY2lCbWFXNWhiRlJsZUhRZ1BTQnpkR0YwZFhOVVpYaDBJSHg4SUhOMGNrRmliM0owTzF4dVhIUmNkRngwWEhSY2RHbG1JQ2dnZEhKaGJuTndiM0owSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwZEhKaGJuTndiM0owTG1GaWIzSjBLQ0JtYVc1aGJGUmxlSFFnS1R0Y2JseDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkRngwWkc5dVpTZ2dNQ3dnWm1sdVlXeFVaWGgwSUNrN1hHNWNkRngwWEhSY2RGeDBjbVYwZFhKdUlIUm9hWE03WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEgwN1hHNWNibHgwWEhRdkx5QkJkSFJoWTJnZ1pHVm1aWEp5WldSelhHNWNkRngwWkdWbVpYSnlaV1F1Y0hKdmJXbHpaU2dnYW5GWVNGSWdLVHRjYmx4dVhIUmNkQzh2SUVGa1pDQndjbTkwYjJOdmJDQnBaaUJ1YjNRZ2NISnZkbWxrWldRZ0tIQnlaV1pwYkhSbGNuTWdiV2xuYUhRZ1pYaHdaV04wSUdsMEtWeHVYSFJjZEM4dklFaGhibVJzWlNCbVlXeHplU0IxY213Z2FXNGdkR2hsSUhObGRIUnBibWR6SUc5aWFtVmpkQ0FvSXpFd01Ea3pPaUJqYjI1emFYTjBaVzVqZVNCM2FYUm9JRzlzWkNCemFXZHVZWFIxY21VcFhHNWNkRngwTHk4Z1YyVWdZV3h6YnlCMWMyVWdkR2hsSUhWeWJDQndZWEpoYldWMFpYSWdhV1lnWVhaaGFXeGhZbXhsWEc1Y2RGeDBjeTUxY213Z1BTQW9JQ2dnZFhKc0lIeDhJSE11ZFhKc0lIeDhJR3h2WTJGMGFXOXVMbWh5WldZZ0tTQXJJRndpWENJZ0tWeHVYSFJjZEZ4MExuSmxjR3hoWTJVb0lISndjbTkwYjJOdmJDd2diRzlqWVhScGIyNHVjSEp2ZEc5amIyd2dLeUJjSWk4dlhDSWdLVHRjYmx4dVhIUmNkQzh2SUVGc2FXRnpJRzFsZEdodlpDQnZjSFJwYjI0Z2RHOGdkSGx3WlNCaGN5QndaWElnZEdsamEyVjBJQ014TWpBd05GeHVYSFJjZEhNdWRIbHdaU0E5SUc5d2RHbHZibk11YldWMGFHOWtJSHg4SUc5d2RHbHZibk11ZEhsd1pTQjhmQ0J6TG0xbGRHaHZaQ0I4ZkNCekxuUjVjR1U3WEc1Y2JseDBYSFF2THlCRmVIUnlZV04wSUdSaGRHRlVlWEJsY3lCc2FYTjBYRzVjZEZ4MGN5NWtZWFJoVkhsd1pYTWdQU0FvSUhNdVpHRjBZVlI1Y0dVZ2ZId2dYQ0lxWENJZ0tTNTBiMHh2ZDJWeVEyRnpaU2dwTG0xaGRHTm9LQ0J5Ym05MGFIUnRiSGRvYVhSbElDa2dmSHdnV3lCY0lsd2lJRjA3WEc1Y2JseDBYSFF2THlCQklHTnliM056TFdSdmJXRnBiaUJ5WlhGMVpYTjBJR2x6SUdsdUlHOXlaR1Z5SUhkb1pXNGdkR2hsSUc5eWFXZHBiaUJrYjJWemJpZDBJRzFoZEdOb0lIUm9aU0JqZFhKeVpXNTBJRzl5YVdkcGJpNWNibHgwWEhScFppQW9JSE11WTNKdmMzTkViMjFoYVc0Z1BUMGdiblZzYkNBcElIdGNibHgwWEhSY2RIVnliRUZ1WTJodmNpQTlJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0lGd2lZVndpSUNrN1hHNWNibHgwWEhSY2RDOHZJRk4xY0hCdmNuUTZJRWxGSUR3OU9DQXRJREV4TENCRlpHZGxJREV5SUMwZ01UTmNibHgwWEhSY2RDOHZJRWxGSUhSb2NtOTNjeUJsZUdObGNIUnBiMjRnYjI0Z1lXTmpaWE56YVc1bklIUm9aU0JvY21WbUlIQnliM0JsY25SNUlHbG1JSFZ5YkNCcGN5QnRZV3htYjNKdFpXUXNYRzVjZEZ4MFhIUXZMeUJsTG1jdUlHaDBkSEE2THk5bGVHRnRjR3hsTG1OdmJUbzRNSGd2WEc1Y2RGeDBYSFIwY25rZ2UxeHVYSFJjZEZ4MFhIUjFjbXhCYm1Ob2IzSXVhSEpsWmlBOUlITXVkWEpzTzF4dVhHNWNkRngwWEhSY2RDOHZJRk4xY0hCdmNuUTZJRWxGSUR3OU9DQXRJREV4SUc5dWJIbGNibHgwWEhSY2RGeDBMeThnUVc1amFHOXlKM01nYUc5emRDQndjbTl3WlhKMGVTQnBjMjRuZENCamIzSnlaV04wYkhrZ2MyVjBJSGRvWlc0Z2N5NTFjbXdnYVhNZ2NtVnNZWFJwZG1WY2JseDBYSFJjZEZ4MGRYSnNRVzVqYUc5eUxtaHlaV1lnUFNCMWNteEJibU5vYjNJdWFISmxaanRjYmx4MFhIUmNkRngwY3k1amNtOXpjMFJ2YldGcGJpQTlJRzl5YVdkcGJrRnVZMmh2Y2k1d2NtOTBiMk52YkNBcklGd2lMeTljSWlBcklHOXlhV2RwYmtGdVkyaHZjaTVvYjNOMElDRTlQVnh1WEhSY2RGeDBYSFJjZEhWeWJFRnVZMmh2Y2k1d2NtOTBiMk52YkNBcklGd2lMeTljSWlBcklIVnliRUZ1WTJodmNpNW9iM04wTzF4dVhIUmNkRngwZlNCallYUmphQ0FvSUdVZ0tTQjdYRzVjYmx4MFhIUmNkRngwTHk4Z1NXWWdkR2hsY21VZ2FYTWdZVzRnWlhKeWIzSWdjR0Z5YzJsdVp5QjBhR1VnVlZKTUxDQmhjM04xYldVZ2FYUWdhWE1nWTNKdmMzTkViMjFoYVc0c1hHNWNkRngwWEhSY2RDOHZJR2wwSUdOaGJpQmlaU0J5WldwbFkzUmxaQ0JpZVNCMGFHVWdkSEpoYm5Od2IzSjBJR2xtSUdsMElHbHpJR2x1ZG1Gc2FXUmNibHgwWEhSY2RGeDBjeTVqY205emMwUnZiV0ZwYmlBOUlIUnlkV1U3WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmVnh1WEc1Y2RGeDBMeThnUTI5dWRtVnlkQ0JrWVhSaElHbG1JRzV2ZENCaGJISmxZV1I1SUdFZ2MzUnlhVzVuWEc1Y2RGeDBhV1lnS0NCekxtUmhkR0VnSmlZZ2N5NXdjbTlqWlhOelJHRjBZU0FtSmlCMGVYQmxiMllnY3k1a1lYUmhJQ0U5UFNCY0luTjBjbWx1WjF3aUlDa2dlMXh1WEhSY2RGeDBjeTVrWVhSaElEMGdhbEYxWlhKNUxuQmhjbUZ0S0NCekxtUmhkR0VzSUhNdWRISmhaR2wwYVc5dVlXd2dLVHRjYmx4MFhIUjlYRzVjYmx4MFhIUXZMeUJCY0hCc2VTQndjbVZtYVd4MFpYSnpYRzVjZEZ4MGFXNXpjR1ZqZEZCeVpXWnBiSFJsY25OUGNsUnlZVzV6Y0c5eWRITW9JSEJ5WldacGJIUmxjbk1zSUhNc0lHOXdkR2x2Ym5Nc0lHcHhXRWhTSUNrN1hHNWNibHgwWEhRdkx5QkpaaUJ5WlhGMVpYTjBJSGRoY3lCaFltOXlkR1ZrSUdsdWMybGtaU0JoSUhCeVpXWnBiSFJsY2l3Z2MzUnZjQ0IwYUdWeVpWeHVYSFJjZEdsbUlDZ2dZMjl0Y0d4bGRHVmtJQ2tnZTF4dVhIUmNkRngwY21WMGRYSnVJR3B4V0VoU08xeHVYSFJjZEgxY2JseHVYSFJjZEM4dklGZGxJR05oYmlCbWFYSmxJR2RzYjJKaGJDQmxkbVZ1ZEhNZ1lYTWdiMllnYm05M0lHbG1JR0Z6YTJWa0lIUnZYRzVjZEZ4MEx5OGdSRzl1SjNRZ1ptbHlaU0JsZG1WdWRITWdhV1lnYWxGMVpYSjVMbVYyWlc1MElHbHpJSFZ1WkdWbWFXNWxaQ0JwYmlCaGJpQkJUVVF0ZFhOaFoyVWdjMk5sYm1GeWFXOGdLQ014TlRFeE9DbGNibHgwWEhSbWFYSmxSMnh2WW1Gc2N5QTlJR3BSZFdWeWVTNWxkbVZ1ZENBbUppQnpMbWRzYjJKaGJEdGNibHh1WEhSY2RDOHZJRmRoZEdOb0lHWnZjaUJoSUc1bGR5QnpaWFFnYjJZZ2NtVnhkV1Z6ZEhOY2JseDBYSFJwWmlBb0lHWnBjbVZIYkc5aVlXeHpJQ1ltSUdwUmRXVnllUzVoWTNScGRtVXJLeUE5UFQwZ01DQXBJSHRjYmx4MFhIUmNkR3BSZFdWeWVTNWxkbVZ1ZEM1MGNtbG5aMlZ5S0NCY0ltRnFZWGhUZEdGeWRGd2lJQ2s3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBMeThnVlhCd1pYSmpZWE5sSUhSb1pTQjBlWEJsWEc1Y2RGeDBjeTUwZVhCbElEMGdjeTUwZVhCbExuUnZWWEJ3WlhKRFlYTmxLQ2s3WEc1Y2JseDBYSFF2THlCRVpYUmxjbTFwYm1VZ2FXWWdjbVZ4ZFdWemRDQm9ZWE1nWTI5dWRHVnVkRnh1WEhSY2RITXVhR0Z6UTI5dWRHVnVkQ0E5SUNGeWJtOURiMjUwWlc1MExuUmxjM1FvSUhNdWRIbHdaU0FwTzF4dVhHNWNkRngwTHk4Z1UyRjJaU0IwYUdVZ1ZWSk1JR2x1SUdOaGMyVWdkMlVuY21VZ2RHOTVhVzVuSUhkcGRHZ2dkR2hsSUVsbUxVMXZaR2xtYVdWa0xWTnBibU5sWEc1Y2RGeDBMeThnWVc1a0wyOXlJRWxtTFU1dmJtVXRUV0YwWTJnZ2FHVmhaR1Z5SUd4aGRHVnlJRzl1WEc1Y2RGeDBMeThnVW1WdGIzWmxJR2hoYzJnZ2RHOGdjMmx0Y0d4cFpua2dkWEpzSUcxaGJtbHdkV3hoZEdsdmJseHVYSFJjZEdOaFkyaGxWVkpNSUQwZ2N5NTFjbXd1Y21Wd2JHRmpaU2dnY21oaGMyZ3NJRndpWENJZ0tUdGNibHh1WEhSY2RDOHZJRTF2Y21VZ2IzQjBhVzl1Y3lCb1lXNWtiR2x1WnlCbWIzSWdjbVZ4ZFdWemRITWdkMmwwYUNCdWJ5QmpiMjUwWlc1MFhHNWNkRngwYVdZZ0tDQWhjeTVvWVhORGIyNTBaVzUwSUNrZ2UxeHVYRzVjZEZ4MFhIUXZMeUJTWlcxbGJXSmxjaUIwYUdVZ2FHRnphQ0J6YnlCM1pTQmpZVzRnY0hWMElHbDBJR0poWTJ0Y2JseDBYSFJjZEhWdVkyRmphR1ZrSUQwZ2N5NTFjbXd1YzJ4cFkyVW9JR05oWTJobFZWSk1MbXhsYm1kMGFDQXBPMXh1WEc1Y2RGeDBYSFF2THlCSlppQmtZWFJoSUdseklHRjJZV2xzWVdKc1pTd2dZWEJ3Wlc1a0lHUmhkR0VnZEc4Z2RYSnNYRzVjZEZ4MFhIUnBaaUFvSUhNdVpHRjBZU0FwSUh0Y2JseDBYSFJjZEZ4MFkyRmphR1ZWVWt3Z0t6MGdLQ0J5Y1hWbGNua3VkR1Z6ZENnZ1kyRmphR1ZWVWt3Z0tTQS9JRndpSmx3aUlEb2dYQ0kvWENJZ0tTQXJJSE11WkdGMFlUdGNibHh1WEhSY2RGeDBYSFF2THlBak9UWTRNam9nY21WdGIzWmxJR1JoZEdFZ2MyOGdkR2hoZENCcGRDZHpJRzV2ZENCMWMyVmtJR2x1SUdGdUlHVjJaVzUwZFdGc0lISmxkSEo1WEc1Y2RGeDBYSFJjZEdSbGJHVjBaU0J6TG1SaGRHRTdYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkQzh2SUVGa1pDQnZjaUIxY0dSaGRHVWdZVzUwYVMxallXTm9aU0J3WVhKaGJTQnBaaUJ1WldWa1pXUmNibHgwWEhSY2RHbG1JQ2dnY3k1allXTm9aU0E5UFQwZ1ptRnNjMlVnS1NCN1hHNWNkRngwWEhSY2RHTmhZMmhsVlZKTUlEMGdZMkZqYUdWVlVrd3VjbVZ3YkdGalpTZ2djbUZ1ZEdsRFlXTm9aU3dnWENJa01Wd2lJQ2s3WEc1Y2RGeDBYSFJjZEhWdVkyRmphR1ZrSUQwZ0tDQnljWFZsY25rdWRHVnpkQ2dnWTJGamFHVlZVa3dnS1NBL0lGd2lKbHdpSURvZ1hDSS9YQ0lnS1NBcklGd2lYejFjSWlBcklDZ2dibTl1WTJVckt5QXBJQ3NnZFc1allXTm9aV1E3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEM4dklGQjFkQ0JvWVhOb0lHRnVaQ0JoYm5ScExXTmhZMmhsSUc5dUlIUm9aU0JWVWt3Z2RHaGhkQ0IzYVd4c0lHSmxJSEpsY1hWbGMzUmxaQ0FvWjJndE1UY3pNaWxjYmx4MFhIUmNkSE11ZFhKc0lEMGdZMkZqYUdWVlVrd2dLeUIxYm1OaFkyaGxaRHRjYmx4dVhIUmNkQzh2SUVOb1lXNW5aU0FuSlRJd0p5QjBieUFuS3ljZ2FXWWdkR2hwY3lCcGN5QmxibU52WkdWa0lHWnZjbTBnWW05a2VTQmpiMjUwWlc1MElDaG5hQzB5TmpVNEtWeHVYSFJjZEgwZ1pXeHpaU0JwWmlBb0lITXVaR0YwWVNBbUppQnpMbkJ5YjJObGMzTkVZWFJoSUNZbVhHNWNkRngwWEhRb0lITXVZMjl1ZEdWdWRGUjVjR1VnZkh3Z1hDSmNJaUFwTG1sdVpHVjRUMllvSUZ3aVlYQndiR2xqWVhScGIyNHZlQzEzZDNjdFptOXliUzExY214bGJtTnZaR1ZrWENJZ0tTQTlQVDBnTUNBcElIdGNibHgwWEhSY2RITXVaR0YwWVNBOUlITXVaR0YwWVM1eVpYQnNZV05sS0NCeU1qQXNJRndpSzF3aUlDazdYRzVjZEZ4MGZWeHVYRzVjZEZ4MEx5OGdVMlYwSUhSb1pTQkpaaTFOYjJScFptbGxaQzFUYVc1alpTQmhibVF2YjNJZ1NXWXRUbTl1WlMxTllYUmphQ0JvWldGa1pYSXNJR2xtSUdsdUlHbG1UVzlrYVdacFpXUWdiVzlrWlM1Y2JseDBYSFJwWmlBb0lITXVhV1pOYjJScFptbGxaQ0FwSUh0Y2JseDBYSFJjZEdsbUlDZ2dhbEYxWlhKNUxteGhjM1JOYjJScFptbGxaRnNnWTJGamFHVlZVa3dnWFNBcElIdGNibHgwWEhSY2RGeDBhbkZZU0ZJdWMyVjBVbVZ4ZFdWemRFaGxZV1JsY2lnZ1hDSkpaaTFOYjJScFptbGxaQzFUYVc1alpWd2lMQ0JxVVhWbGNua3ViR0Z6ZEUxdlpHbG1hV1ZrV3lCallXTm9aVlZTVENCZElDazdYRzVjZEZ4MFhIUjlYRzVjZEZ4MFhIUnBaaUFvSUdwUmRXVnllUzVsZEdGbld5QmpZV05vWlZWU1RDQmRJQ2tnZTF4dVhIUmNkRngwWEhScWNWaElVaTV6WlhSU1pYRjFaWE4wU0dWaFpHVnlLQ0JjSWtsbUxVNXZibVV0VFdGMFkyaGNJaXdnYWxGMVpYSjVMbVYwWVdkYklHTmhZMmhsVlZKTUlGMGdLVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlYRzVjYmx4MFhIUXZMeUJUWlhRZ2RHaGxJR052Y25KbFkzUWdhR1ZoWkdWeUxDQnBaaUJrWVhSaElHbHpJR0psYVc1bklITmxiblJjYmx4MFhIUnBaaUFvSUhNdVpHRjBZU0FtSmlCekxtaGhjME52Ym5SbGJuUWdKaVlnY3k1amIyNTBaVzUwVkhsd1pTQWhQVDBnWm1Gc2MyVWdmSHdnYjNCMGFXOXVjeTVqYjI1MFpXNTBWSGx3WlNBcElIdGNibHgwWEhSY2RHcHhXRWhTTG5ObGRGSmxjWFZsYzNSSVpXRmtaWElvSUZ3aVEyOXVkR1Z1ZEMxVWVYQmxYQ0lzSUhNdVkyOXVkR1Z1ZEZSNWNHVWdLVHRjYmx4MFhIUjlYRzVjYmx4MFhIUXZMeUJUWlhRZ2RHaGxJRUZqWTJWd2RITWdhR1ZoWkdWeUlHWnZjaUIwYUdVZ2MyVnlkbVZ5TENCa1pYQmxibVJwYm1jZ2IyNGdkR2hsSUdSaGRHRlVlWEJsWEc1Y2RGeDBhbkZZU0ZJdWMyVjBVbVZ4ZFdWemRFaGxZV1JsY2loY2JseDBYSFJjZEZ3aVFXTmpaWEIwWENJc1hHNWNkRngwWEhSekxtUmhkR0ZVZVhCbGMxc2dNQ0JkSUNZbUlITXVZV05qWlhCMGMxc2djeTVrWVhSaFZIbHdaWE5iSURBZ1hTQmRJRDljYmx4MFhIUmNkRngwY3k1aFkyTmxjSFJ6V3lCekxtUmhkR0ZVZVhCbGMxc2dNQ0JkSUYwZ0sxeHVYSFJjZEZ4MFhIUmNkQ2dnY3k1a1lYUmhWSGx3WlhOYklEQWdYU0FoUFQwZ1hDSXFYQ0lnUHlCY0lpd2dYQ0lnS3lCaGJHeFVlWEJsY3lBcklGd2lPeUJ4UFRBdU1ERmNJaUE2SUZ3aVhDSWdLU0E2WEc1Y2RGeDBYSFJjZEhNdVlXTmpaWEIwYzFzZ1hDSXFYQ0lnWFZ4dVhIUmNkQ2s3WEc1Y2JseDBYSFF2THlCRGFHVmpheUJtYjNJZ2FHVmhaR1Z5Y3lCdmNIUnBiMjVjYmx4MFhIUm1iM0lnS0NCcElHbHVJSE11YUdWaFpHVnljeUFwSUh0Y2JseDBYSFJjZEdweFdFaFNMbk5sZEZKbGNYVmxjM1JJWldGa1pYSW9JR2tzSUhNdWFHVmhaR1Z5YzFzZ2FTQmRJQ2s3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBMeThnUVd4c2IzY2dZM1Z6ZEc5dElHaGxZV1JsY25NdmJXbHRaWFI1Y0dWeklHRnVaQ0JsWVhKc2VTQmhZbTl5ZEZ4dVhIUmNkR2xtSUNnZ2N5NWlaV1p2Y21WVFpXNWtJQ1ltWEc1Y2RGeDBYSFFvSUhNdVltVm1iM0psVTJWdVpDNWpZV3hzS0NCallXeHNZbUZqYTBOdmJuUmxlSFFzSUdweFdFaFNMQ0J6SUNrZ1BUMDlJR1poYkhObElIeDhJR052YlhCc1pYUmxaQ0FwSUNrZ2UxeHVYRzVjZEZ4MFhIUXZMeUJCWW05eWRDQnBaaUJ1YjNRZ1pHOXVaU0JoYkhKbFlXUjVJR0Z1WkNCeVpYUjFjbTVjYmx4MFhIUmNkSEpsZEhWeWJpQnFjVmhJVWk1aFltOXlkQ2dwTzF4dVhIUmNkSDFjYmx4dVhIUmNkQzh2SUVGaWIzSjBhVzVuSUdseklHNXZJR3h2Ym1kbGNpQmhJR05oYm1ObGJHeGhkR2x2Ymx4dVhIUmNkSE4wY2tGaWIzSjBJRDBnWENKaFltOXlkRndpTzF4dVhHNWNkRngwTHk4Z1NXNXpkR0ZzYkNCallXeHNZbUZqYTNNZ2IyNGdaR1ZtWlhKeVpXUnpYRzVjZEZ4MFkyOXRjR3hsZEdWRVpXWmxjbkpsWkM1aFpHUW9JSE11WTI5dGNHeGxkR1VnS1R0Y2JseDBYSFJxY1ZoSVVpNWtiMjVsS0NCekxuTjFZMk5sYzNNZ0tUdGNibHgwWEhScWNWaElVaTVtWVdsc0tDQnpMbVZ5Y205eUlDazdYRzVjYmx4MFhIUXZMeUJIWlhRZ2RISmhibk53YjNKMFhHNWNkRngwZEhKaGJuTndiM0owSUQwZ2FXNXpjR1ZqZEZCeVpXWnBiSFJsY25OUGNsUnlZVzV6Y0c5eWRITW9JSFJ5WVc1emNHOXlkSE1zSUhNc0lHOXdkR2x2Ym5Nc0lHcHhXRWhTSUNrN1hHNWNibHgwWEhRdkx5QkpaaUJ1YnlCMGNtRnVjM0J2Y25Rc0lIZGxJR0YxZEc4dFlXSnZjblJjYmx4MFhIUnBaaUFvSUNGMGNtRnVjM0J2Y25RZ0tTQjdYRzVjZEZ4MFhIUmtiMjVsS0NBdE1Td2dYQ0pPYnlCVWNtRnVjM0J2Y25SY0lpQXBPMXh1WEhSY2RIMGdaV3h6WlNCN1hHNWNkRngwWEhScWNWaElVaTV5WldGa2VWTjBZWFJsSUQwZ01UdGNibHh1WEhSY2RGeDBMeThnVTJWdVpDQm5iRzlpWVd3Z1pYWmxiblJjYmx4MFhIUmNkR2xtSUNnZ1ptbHlaVWRzYjJKaGJITWdLU0I3WEc1Y2RGeDBYSFJjZEdkc2IySmhiRVYyWlc1MFEyOXVkR1Y0ZEM1MGNtbG5aMlZ5S0NCY0ltRnFZWGhUWlc1a1hDSXNJRnNnYW5GWVNGSXNJSE1nWFNBcE8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUXZMeUJKWmlCeVpYRjFaWE4wSUhkaGN5QmhZbTl5ZEdWa0lHbHVjMmxrWlNCaGFtRjRVMlZ1WkN3Z2MzUnZjQ0IwYUdWeVpWeHVYSFJjZEZ4MGFXWWdLQ0JqYjIxd2JHVjBaV1FnS1NCN1hHNWNkRngwWEhSY2RISmxkSFZ5YmlCcWNWaElVanRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwTHk4Z1ZHbHRaVzkxZEZ4dVhIUmNkRngwYVdZZ0tDQnpMbUZ6ZVc1aklDWW1JSE11ZEdsdFpXOTFkQ0ErSURBZ0tTQjdYRzVjZEZ4MFhIUmNkSFJwYldWdmRYUlVhVzFsY2lBOUlIZHBibVJ2ZHk1elpYUlVhVzFsYjNWMEtDQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUmNkRngwWEhScWNWaElVaTVoWW05eWRDZ2dYQ0owYVcxbGIzVjBYQ0lnS1R0Y2JseDBYSFJjZEZ4MGZTd2djeTUwYVcxbGIzVjBJQ2s3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEhSeWVTQjdYRzVjZEZ4MFhIUmNkR052YlhCc1pYUmxaQ0E5SUdaaGJITmxPMXh1WEhSY2RGeDBYSFIwY21GdWMzQnZjblF1YzJWdVpDZ2djbVZ4ZFdWemRFaGxZV1JsY25Nc0lHUnZibVVnS1R0Y2JseDBYSFJjZEgwZ1kyRjBZMmdnS0NCbElDa2dlMXh1WEc1Y2RGeDBYSFJjZEM4dklGSmxkR2h5YjNjZ2NHOXpkQzFqYjIxd2JHVjBhVzl1SUdWNFkyVndkR2x2Ym5OY2JseDBYSFJjZEZ4MGFXWWdLQ0JqYjIxd2JHVjBaV1FnS1NCN1hHNWNkRngwWEhSY2RGeDBkR2h5YjNjZ1pUdGNibHgwWEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJjZEM4dklGQnliM0JoWjJGMFpTQnZkR2hsY25NZ1lYTWdjbVZ6ZFd4MGMxeHVYSFJjZEZ4MFhIUmtiMjVsS0NBdE1Td2daU0FwTzF4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4dVhIUmNkQzh2SUVOaGJHeGlZV05ySUdadmNpQjNhR1Z1SUdWMlpYSjVkR2hwYm1jZ2FYTWdaRzl1WlZ4dVhIUmNkR1oxYm1OMGFXOXVJR1J2Ym1Vb0lITjBZWFIxY3l3Z2JtRjBhWFpsVTNSaGRIVnpWR1Y0ZEN3Z2NtVnpjRzl1YzJWekxDQm9aV0ZrWlhKeklDa2dlMXh1WEhSY2RGeDBkbUZ5SUdselUzVmpZMlZ6Y3l3Z2MzVmpZMlZ6Y3l3Z1pYSnliM0lzSUhKbGMzQnZibk5sTENCdGIyUnBabWxsWkN4Y2JseDBYSFJjZEZ4MGMzUmhkSFZ6VkdWNGRDQTlJRzVoZEdsMlpWTjBZWFIxYzFSbGVIUTdYRzVjYmx4MFhIUmNkQzh2SUVsbmJtOXlaU0J5WlhCbFlYUWdhVzUyYjJOaGRHbHZibk5jYmx4MFhIUmNkR2xtSUNnZ1kyOXRjR3hsZEdWa0lDa2dlMXh1WEhSY2RGeDBYSFJ5WlhSMWNtNDdYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkR052YlhCc1pYUmxaQ0E5SUhSeWRXVTdYRzVjYmx4MFhIUmNkQzh2SUVOc1pXRnlJSFJwYldWdmRYUWdhV1lnYVhRZ1pYaHBjM1J6WEc1Y2RGeDBYSFJwWmlBb0lIUnBiV1Z2ZFhSVWFXMWxjaUFwSUh0Y2JseDBYSFJjZEZ4MGQybHVaRzkzTG1Oc1pXRnlWR2x0Wlc5MWRDZ2dkR2x0Wlc5MWRGUnBiV1Z5SUNrN1hHNWNkRngwWEhSOVhHNWNibHgwWEhSY2RDOHZJRVJsY21WbVpYSmxibU5sSUhSeVlXNXpjRzl5ZENCbWIzSWdaV0Z5YkhrZ1oyRnlZbUZuWlNCamIyeHNaV04wYVc5dVhHNWNkRngwWEhRdkx5QW9ibThnYldGMGRHVnlJR2h2ZHlCc2IyNW5JSFJvWlNCcWNWaElVaUJ2WW1wbFkzUWdkMmxzYkNCaVpTQjFjMlZrS1Z4dVhIUmNkRngwZEhKaGJuTndiM0owSUQwZ2RXNWtaV1pwYm1Wa08xeHVYRzVjZEZ4MFhIUXZMeUJEWVdOb1pTQnlaWE53YjI1elpTQm9aV0ZrWlhKelhHNWNkRngwWEhSeVpYTndiMjV6WlVobFlXUmxjbk5UZEhKcGJtY2dQU0JvWldGa1pYSnpJSHg4SUZ3aVhDSTdYRzVjYmx4MFhIUmNkQzh2SUZObGRDQnlaV0ZrZVZOMFlYUmxYRzVjZEZ4MFhIUnFjVmhJVWk1eVpXRmtlVk4wWVhSbElEMGdjM1JoZEhWeklENGdNQ0EvSURRZ09pQXdPMXh1WEc1Y2RGeDBYSFF2THlCRVpYUmxjbTFwYm1VZ2FXWWdjM1ZqWTJWemMyWjFiRnh1WEhSY2RGeDBhWE5UZFdOalpYTnpJRDBnYzNSaGRIVnpJRDQ5SURJd01DQW1KaUJ6ZEdGMGRYTWdQQ0F6TURBZ2ZId2djM1JoZEhWeklEMDlQU0F6TURRN1hHNWNibHgwWEhSY2RDOHZJRWRsZENCeVpYTndiMjV6WlNCa1lYUmhYRzVjZEZ4MFhIUnBaaUFvSUhKbGMzQnZibk5sY3lBcElIdGNibHgwWEhSY2RGeDBjbVZ6Y0c5dWMyVWdQU0JoYW1GNFNHRnVaR3hsVW1WemNHOXVjMlZ6S0NCekxDQnFjVmhJVWl3Z2NtVnpjRzl1YzJWeklDazdYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkQzh2SUVOdmJuWmxjblFnYm04Z2JXRjBkR1Z5SUhkb1lYUWdLSFJvWVhRZ2QyRjVJSEpsYzNCdmJuTmxXRmhZSUdacFpXeGtjeUJoY21VZ1lXeDNZWGx6SUhObGRDbGNibHgwWEhSY2RISmxjM0J2Ym5ObElEMGdZV3BoZUVOdmJuWmxjblFvSUhNc0lISmxjM0J2Ym5ObExDQnFjVmhJVWl3Z2FYTlRkV05qWlhOeklDazdYRzVjYmx4MFhIUmNkQzh2SUVsbUlITjFZMk5sYzNObWRXd3NJR2hoYm1Sc1pTQjBlWEJsSUdOb1lXbHVhVzVuWEc1Y2RGeDBYSFJwWmlBb0lHbHpVM1ZqWTJWemN5QXBJSHRjYmx4dVhIUmNkRngwWEhRdkx5QlRaWFFnZEdobElFbG1MVTF2WkdsbWFXVmtMVk5wYm1ObElHRnVaQzl2Y2lCSlppMU9iMjVsTFUxaGRHTm9JR2hsWVdSbGNpd2dhV1lnYVc0Z2FXWk5iMlJwWm1sbFpDQnRiMlJsTGx4dVhIUmNkRngwWEhScFppQW9JSE11YVdaTmIyUnBabWxsWkNBcElIdGNibHgwWEhSY2RGeDBYSFJ0YjJScFptbGxaQ0E5SUdweFdFaFNMbWRsZEZKbGMzQnZibk5sU0dWaFpHVnlLQ0JjSWt4aGMzUXRUVzlrYVdacFpXUmNJaUFwTzF4dVhIUmNkRngwWEhSY2RHbG1JQ2dnYlc5a2FXWnBaV1FnS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJxVVhWbGNua3ViR0Z6ZEUxdlpHbG1hV1ZrV3lCallXTm9aVlZTVENCZElEMGdiVzlrYVdacFpXUTdYRzVjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSY2RHMXZaR2xtYVdWa0lEMGdhbkZZU0ZJdVoyVjBVbVZ6Y0c5dWMyVklaV0ZrWlhJb0lGd2laWFJoWjF3aUlDazdYRzVjZEZ4MFhIUmNkRngwYVdZZ0tDQnRiMlJwWm1sbFpDQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RHcFJkV1Z5ZVM1bGRHRm5XeUJqWVdOb1pWVlNUQ0JkSUQwZ2JXOWthV1pwWldRN1hHNWNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFI5WEc1Y2JseDBYSFJjZEZ4MEx5OGdhV1lnYm04Z1kyOXVkR1Z1ZEZ4dVhIUmNkRngwWEhScFppQW9JSE4wWVhSMWN5QTlQVDBnTWpBMElIeDhJSE11ZEhsd1pTQTlQVDBnWENKSVJVRkVYQ0lnS1NCN1hHNWNkRngwWEhSY2RGeDBjM1JoZEhWelZHVjRkQ0E5SUZ3aWJtOWpiMjUwWlc1MFhDSTdYRzVjYmx4MFhIUmNkRngwTHk4Z2FXWWdibTkwSUcxdlpHbG1hV1ZrWEc1Y2RGeDBYSFJjZEgwZ1pXeHpaU0JwWmlBb0lITjBZWFIxY3lBOVBUMGdNekEwSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkSE4wWVhSMWMxUmxlSFFnUFNCY0ltNXZkRzF2WkdsbWFXVmtYQ0k3WEc1Y2JseDBYSFJjZEZ4MEx5OGdTV1lnZDJVZ2FHRjJaU0JrWVhSaExDQnNaWFFuY3lCamIyNTJaWEowSUdsMFhHNWNkRngwWEhSY2RIMGdaV3h6WlNCN1hHNWNkRngwWEhSY2RGeDBjM1JoZEhWelZHVjRkQ0E5SUhKbGMzQnZibk5sTG5OMFlYUmxPMXh1WEhSY2RGeDBYSFJjZEhOMVkyTmxjM01nUFNCeVpYTndiMjV6WlM1a1lYUmhPMXh1WEhSY2RGeDBYSFJjZEdWeWNtOXlJRDBnY21WemNHOXVjMlV1WlhKeWIzSTdYRzVjZEZ4MFhIUmNkRngwYVhOVGRXTmpaWE56SUQwZ0lXVnljbTl5TzF4dVhIUmNkRngwWEhSOVhHNWNkRngwWEhSOUlHVnNjMlVnZTF4dVhHNWNkRngwWEhSY2RDOHZJRVY0ZEhKaFkzUWdaWEp5YjNJZ1puSnZiU0J6ZEdGMGRYTlVaWGgwSUdGdVpDQnViM0p0WVd4cGVtVWdabTl5SUc1dmJpMWhZbTl5ZEhOY2JseDBYSFJjZEZ4MFpYSnliM0lnUFNCemRHRjBkWE5VWlhoME8xeHVYSFJjZEZ4MFhIUnBaaUFvSUhOMFlYUjFjeUI4ZkNBaGMzUmhkSFZ6VkdWNGRDQXBJSHRjYmx4MFhIUmNkRngwWEhSemRHRjBkWE5VWlhoMElEMGdYQ0psY25KdmNsd2lPMXh1WEhSY2RGeDBYSFJjZEdsbUlDZ2djM1JoZEhWeklEd2dNQ0FwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkSE4wWVhSMWN5QTlJREE3WEc1Y2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkQzh2SUZObGRDQmtZWFJoSUdadmNpQjBhR1VnWm1GclpTQjRhSElnYjJKcVpXTjBYRzVjZEZ4MFhIUnFjVmhJVWk1emRHRjBkWE1nUFNCemRHRjBkWE03WEc1Y2RGeDBYSFJxY1ZoSVVpNXpkR0YwZFhOVVpYaDBJRDBnS0NCdVlYUnBkbVZUZEdGMGRYTlVaWGgwSUh4OElITjBZWFIxYzFSbGVIUWdLU0FySUZ3aVhDSTdYRzVjYmx4MFhIUmNkQzh2SUZOMVkyTmxjM012UlhKeWIzSmNibHgwWEhSY2RHbG1JQ2dnYVhOVGRXTmpaWE56SUNrZ2UxeHVYSFJjZEZ4MFhIUmtaV1psY25KbFpDNXlaWE52YkhabFYybDBhQ2dnWTJGc2JHSmhZMnREYjI1MFpYaDBMQ0JiSUhOMVkyTmxjM01zSUhOMFlYUjFjMVJsZUhRc0lHcHhXRWhTSUYwZ0tUdGNibHgwWEhSY2RIMGdaV3h6WlNCN1hHNWNkRngwWEhSY2RHUmxabVZ5Y21Wa0xuSmxhbVZqZEZkcGRHZ29JR05oYkd4aVlXTnJRMjl1ZEdWNGRDd2dXeUJxY1ZoSVVpd2djM1JoZEhWelZHVjRkQ3dnWlhKeWIzSWdYU0FwTzF4dVhIUmNkRngwZlZ4dVhHNWNkRngwWEhRdkx5QlRkR0YwZFhNdFpHVndaVzVrWlc1MElHTmhiR3hpWVdOcmMxeHVYSFJjZEZ4MGFuRllTRkl1YzNSaGRIVnpRMjlrWlNnZ2MzUmhkSFZ6UTI5a1pTQXBPMXh1WEhSY2RGeDBjM1JoZEhWelEyOWtaU0E5SUhWdVpHVm1hVzVsWkR0Y2JseHVYSFJjZEZ4MGFXWWdLQ0JtYVhKbFIyeHZZbUZzY3lBcElIdGNibHgwWEhSY2RGeDBaMnh2WW1Gc1JYWmxiblJEYjI1MFpYaDBMblJ5YVdkblpYSW9JR2x6VTNWalkyVnpjeUEvSUZ3aVlXcGhlRk4xWTJObGMzTmNJaUE2SUZ3aVlXcGhlRVZ5Y205eVhDSXNYRzVjZEZ4MFhIUmNkRngwV3lCcWNWaElVaXdnY3l3Z2FYTlRkV05qWlhOeklEOGdjM1ZqWTJWemN5QTZJR1Z5Y205eUlGMGdLVHRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwTHk4Z1EyOXRjR3hsZEdWY2JseDBYSFJjZEdOdmJYQnNaWFJsUkdWbVpYSnlaV1F1Wm1seVpWZHBkR2dvSUdOaGJHeGlZV05yUTI5dWRHVjRkQ3dnV3lCcWNWaElVaXdnYzNSaGRIVnpWR1Y0ZENCZElDazdYRzVjYmx4MFhIUmNkR2xtSUNnZ1ptbHlaVWRzYjJKaGJITWdLU0I3WEc1Y2RGeDBYSFJjZEdkc2IySmhiRVYyWlc1MFEyOXVkR1Y0ZEM1MGNtbG5aMlZ5S0NCY0ltRnFZWGhEYjIxd2JHVjBaVndpTENCYklHcHhXRWhTTENCeklGMGdLVHRjYmx4dVhIUmNkRngwWEhRdkx5QklZVzVrYkdVZ2RHaGxJR2RzYjJKaGJDQkJTa0ZZSUdOdmRXNTBaWEpjYmx4MFhIUmNkRngwYVdZZ0tDQWhLQ0F0TFdwUmRXVnllUzVoWTNScGRtVWdLU0FwSUh0Y2JseDBYSFJjZEZ4MFhIUnFVWFZsY25rdVpYWmxiblF1ZEhKcFoyZGxjaWdnWENKaGFtRjRVM1J2Y0Z3aUlDazdYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkSDFjYmx4MFhIUjlYRzVjYmx4MFhIUnlaWFIxY200Z2FuRllTRkk3WEc1Y2RIMHNYRzVjYmx4MFoyVjBTbE5QVGpvZ1puVnVZM1JwYjI0b0lIVnliQ3dnWkdGMFlTd2dZMkZzYkdKaFkyc2dLU0I3WEc1Y2RGeDBjbVYwZFhKdUlHcFJkV1Z5ZVM1blpYUW9JSFZ5YkN3Z1pHRjBZU3dnWTJGc2JHSmhZMnNzSUZ3aWFuTnZibHdpSUNrN1hHNWNkSDBzWEc1Y2JseDBaMlYwVTJOeWFYQjBPaUJtZFc1amRHbHZiaWdnZFhKc0xDQmpZV3hzWW1GamF5QXBJSHRjYmx4MFhIUnlaWFIxY200Z2FsRjFaWEo1TG1kbGRDZ2dkWEpzTENCMWJtUmxabWx1WldRc0lHTmhiR3hpWVdOckxDQmNJbk5qY21sd2RGd2lJQ2s3WEc1Y2RIMWNibjBnS1R0Y2JseHVhbEYxWlhKNUxtVmhZMmdvSUZzZ1hDSm5aWFJjSWl3Z1hDSndiM04wWENJZ1hTd2dablZ1WTNScGIyNG9JR2tzSUcxbGRHaHZaQ0FwSUh0Y2JseDBhbEYxWlhKNVd5QnRaWFJvYjJRZ1hTQTlJR1oxYm1OMGFXOXVLQ0IxY213c0lHUmhkR0VzSUdOaGJHeGlZV05yTENCMGVYQmxJQ2tnZTF4dVhHNWNkRngwTHk4Z1UyaHBablFnWVhKbmRXMWxiblJ6SUdsbUlHUmhkR0VnWVhKbmRXMWxiblFnZDJGeklHOXRhWFIwWldSY2JseDBYSFJwWmlBb0lHcFJkV1Z5ZVM1cGMwWjFibU4wYVc5dUtDQmtZWFJoSUNrZ0tTQjdYRzVjZEZ4MFhIUjBlWEJsSUQwZ2RIbHdaU0I4ZkNCallXeHNZbUZqYXp0Y2JseDBYSFJjZEdOaGJHeGlZV05ySUQwZ1pHRjBZVHRjYmx4MFhIUmNkR1JoZEdFZ1BTQjFibVJsWm1sdVpXUTdYRzVjZEZ4MGZWeHVYRzVjZEZ4MEx5OGdWR2hsSUhWeWJDQmpZVzRnWW1VZ1lXNGdiM0IwYVc5dWN5QnZZbXBsWTNRZ0tIZG9hV05vSUhSb1pXNGdiWFZ6ZENCb1lYWmxJQzUxY213cFhHNWNkRngwY21WMGRYSnVJR3BSZFdWeWVTNWhhbUY0S0NCcVVYVmxjbmt1WlhoMFpXNWtLQ0I3WEc1Y2RGeDBYSFIxY213NklIVnliQ3hjYmx4MFhIUmNkSFI1Y0dVNklHMWxkR2h2WkN4Y2JseDBYSFJjZEdSaGRHRlVlWEJsT2lCMGVYQmxMRnh1WEhSY2RGeDBaR0YwWVRvZ1pHRjBZU3hjYmx4MFhIUmNkSE4xWTJObGMzTTZJR05oYkd4aVlXTnJYRzVjZEZ4MGZTd2dhbEYxWlhKNUxtbHpVR3hoYVc1UFltcGxZM1FvSUhWeWJDQXBJQ1ltSUhWeWJDQXBJQ2s3WEc1Y2RIMDdYRzU5SUNrN1hHNWNibkpsZEhWeWJpQnFVWFZsY25rN1hHNTlJQ2s3WEc0aVhYMD1cbiJdfQ==

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInd3dy9wYWNrcy9qcXVlcnkvc3JjL2FqYXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDO0lBQ0gsUUFBUTtJQUNSLGdCQUFnQjtJQUNoQixxQkFBcUI7SUFDckIscUJBQXFCO0lBQ3JCLGtCQUFrQjtJQUNsQixtQkFBbUI7SUFDbkIsYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixpQkFBaUI7SUFDakIsWUFBWTtJQUNaLGFBQWEsQ0FBQyxlQUFlO0NBQ2hDLEVBQUUsVUFBVSxNQUFNLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLE1BQU07SUFDakUsWUFBWSxDQUFDO0lBQ2IsSUFBSSxHQUFHLEdBQUcsTUFBTSxFQUFFLEtBQUssR0FBRyxNQUFNLEVBQUUsVUFBVSxHQUFHLGVBQWUsRUFBRSxRQUFRLEdBQUcsNEJBQTRCO0lBQ3ZHLGdEQUFnRDtJQUNoRCxjQUFjLEdBQUcsMkRBQTJELEVBQUUsVUFBVSxHQUFHLGdCQUFnQixFQUFFLFNBQVMsR0FBRyxPQUFPO0lBQ2hJOzs7Ozs7OztPQVFHO0lBQ0gsVUFBVSxHQUFHLEVBQUU7SUFDZjs7OztPQUlHO0lBQ0gsVUFBVSxHQUFHLEVBQUU7SUFDZix1RkFBdUY7SUFDdkYsUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO0lBQzNCLDZDQUE2QztJQUM3QyxZQUFZLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMzQyxZQUFZLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUM7SUFDbEMsdUVBQXVFO0lBQ3ZFLHFDQUFxQyxTQUFTO1FBQzFDLHFEQUFxRDtRQUNyRCxNQUFNLENBQUMsVUFBVSxrQkFBa0IsRUFBRSxJQUFJO1lBQ3JDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sa0JBQWtCLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDekMsSUFBSSxHQUFHLGtCQUFrQixDQUFDO2dCQUMx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UixJQUFJLEVBQUUsTUFBTTtnQkFDWixRQUFRLEVBQUUsSUFBSTtnQkFDZCxJQUFJLEVBQUUsSUFBSTtnQkFDVixPQUFPLEVBQUUsUUFBUTthQUNwQixFQUFFLE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMxQyxDQUFDLENBQUM7SUFDTixDQUFDLENBQUMsQ0FBQztJQUNILE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDbEIsQ0FBQyxDQUFDLENBQUM7QUFDSCx1NjREQUF1NjREO0FBRXY2NEQsbTduSkFBbTduSiIsImZpbGUiOiJ3d3cvcGFja3MvanF1ZXJ5L3NyYy9hamF4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKFtcbiAgICBcIi4vY29yZVwiLFxuICAgIFwiLi92YXIvZG9jdW1lbnRcIixcbiAgICBcIi4vdmFyL3Jub3RodG1sd2hpdGVcIixcbiAgICBcIi4vYWpheC92YXIvbG9jYXRpb25cIixcbiAgICBcIi4vYWpheC92YXIvbm9uY2VcIixcbiAgICBcIi4vYWpheC92YXIvcnF1ZXJ5XCIsXG4gICAgXCIuL2NvcmUvaW5pdFwiLFxuICAgIFwiLi9hamF4L3BhcnNlWE1MXCIsXG4gICAgXCIuL2V2ZW50L3RyaWdnZXJcIixcbiAgICBcIi4vZGVmZXJyZWRcIixcbiAgICBcIi4vc2VyaWFsaXplXCIgLy8galF1ZXJ5LnBhcmFtXG5dLCBmdW5jdGlvbiAoalF1ZXJ5LCBkb2N1bWVudCwgcm5vdGh0bWx3aGl0ZSwgbG9jYXRpb24sIG5vbmNlLCBycXVlcnkpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICB2YXIgcjIwID0gLyUyMC9nLCByaGFzaCA9IC8jLiokLywgcmFudGlDYWNoZSA9IC8oWz8mXSlfPVteJl0qLywgcmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLCBcbiAgICAvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cbiAgICBybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLCBybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLywgcnByb3RvY29sID0gL15cXC9cXC8vLCBcbiAgICAvKiBQcmVmaWx0ZXJzXG4gICAgICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcbiAgICAgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuICAgICAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcbiAgICAgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG4gICAgICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuICAgICAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcbiAgICAgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuICAgICAqL1xuICAgIHByZWZpbHRlcnMgPSB7fSwgXG4gICAgLyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuICAgICAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcbiAgICAgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG4gICAgICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG4gICAgICovXG4gICAgdHJhbnNwb3J0cyA9IHt9LCBcbiAgICAvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cbiAgICBhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoXCIqXCIpLCBcbiAgICAvLyBBbmNob3IgdGFnIGZvciBwYXJzaW5nIHRoZSBkb2N1bWVudCBvcmlnaW5cbiAgICBvcmlnaW5BbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbiAgICBvcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG4gICAgLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuICAgIGZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyhzdHJ1Y3R1cmUpIHtcbiAgICAgICAgLy8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xuICAgICAgICAgICAgICAgIGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGRhdGFUeXBlLCBpID0gMCwgZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2gocm5vdGh0bWx3aGl0ZSkgfHwgW107XG4gICAgICAgICAgICBpZiAoalF1ZXJ5LmlzRnVuY3Rpb24oZnVuYykpIHtcbiAgICAgICAgICAgICAgICAvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXG4gICAgICAgICAgICAgICAgd2hpbGUgKChkYXRhVHlwZSA9IGRhdGFUeXBlc1tpKytdKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVR5cGVbMF0gPT09IFwiK1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKDEpIHx8IFwiKlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgKHN0cnVjdHVyZVtkYXRhVHlwZV0gPSBzdHJ1Y3R1cmVbZGF0YVR5cGVdIHx8IFtdKS51bnNoaWZ0KGZ1bmMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlIGFwcGVuZFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgKHN0cnVjdHVyZVtkYXRhVHlwZV0gPSBzdHJ1Y3R1cmVbZGF0YVR5cGVdIHx8IFtdKS5wdXNoKGZ1bmMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICAvLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcbiAgICBmdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyhzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIpIHtcbiAgICAgICAgdmFyIGluc3BlY3RlZCA9IHt9LCBzZWVraW5nVHJhbnNwb3J0ID0gKHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyk7XG4gICAgICAgIGZ1bmN0aW9uIGluc3BlY3QoZGF0YVR5cGUpIHtcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZDtcbiAgICAgICAgICAgIGluc3BlY3RlZFtkYXRhVHlwZV0gPSB0cnVlO1xuICAgICAgICAgICAgalF1ZXJ5LmVhY2goc3RydWN0dXJlW2RhdGFUeXBlXSB8fCBbXSwgZnVuY3Rpb24gKF8sIHByZWZpbHRlck9yRmFjdG9yeSkge1xuICAgICAgICAgICAgICAgIHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgICAgICAgICAhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkW2RhdGFUeXBlT3JUcmFuc3BvcnRdKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoZGF0YVR5cGVPclRyYW5zcG9ydCk7XG4gICAgICAgICAgICAgICAgICAgIGluc3BlY3QoZGF0YVR5cGVPclRyYW5zcG9ydCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc2Vla2luZ1RyYW5zcG9ydCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIShzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnNwZWN0KG9wdGlvbnMuZGF0YVR5cGVzWzBdKSB8fCAhaW5zcGVjdGVkW1wiKlwiXSAmJiBpbnNwZWN0KFwiKlwiKTtcbiAgICB9XG4gICAgLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4gICAgLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcbiAgICAvLyBGaXhlcyAjOTg4N1xuICAgIGZ1bmN0aW9uIGFqYXhFeHRlbmQodGFyZ2V0LCBzcmMpIHtcbiAgICAgICAgdmFyIGtleSwgZGVlcCwgZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuICAgICAgICBmb3IgKGtleSBpbiBzcmMpIHtcbiAgICAgICAgICAgIGlmIChzcmNba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgKGZsYXRPcHRpb25zW2tleV0gPyB0YXJnZXQgOiAoZGVlcCB8fCAoZGVlcCA9IHt9KSkpW2tleV0gPSBzcmNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVlcCkge1xuICAgICAgICAgICAgalF1ZXJ5LmV4dGVuZCh0cnVlLCB0YXJnZXQsIGRlZXApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuICAgIC8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcbiAgICAgKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICAgICAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMocywganFYSFIsIHJlc3BvbnNlcykge1xuICAgICAgICB2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsIGNvbnRlbnRzID0gcy5jb250ZW50cywgZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG4gICAgICAgIC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXG4gICAgICAgIHdoaWxlIChkYXRhVHlwZXNbMF0gPT09IFwiKlwiKSB7XG4gICAgICAgICAgICBkYXRhVHlwZXMuc2hpZnQoKTtcbiAgICAgICAgICAgIGlmIChjdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1UeXBlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuICAgICAgICBpZiAoY3QpIHtcbiAgICAgICAgICAgIGZvciAodHlwZSBpbiBjb250ZW50cykge1xuICAgICAgICAgICAgICAgIGlmIChjb250ZW50c1t0eXBlXSAmJiBjb250ZW50c1t0eXBlXS50ZXN0KGN0KSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZXMudW5zaGlmdCh0eXBlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuICAgICAgICBpZiAoZGF0YVR5cGVzWzBdIGluIHJlc3BvbnNlcykge1xuICAgICAgICAgICAgZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1swXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcbiAgICAgICAgICAgIGZvciAodHlwZSBpbiByZXNwb25zZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWRhdGFUeXBlc1swXSB8fCBzLmNvbnZlcnRlcnNbdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWzBdXSkge1xuICAgICAgICAgICAgICAgICAgICBmaW5hbERhdGFUeXBlID0gdHlwZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghZmlyc3REYXRhVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBmaXJzdERhdGFUeXBlID0gdHlwZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcbiAgICAgICAgICAgIGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuICAgICAgICAvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxuICAgICAgICAvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gICAgICAgIGlmIChmaW5hbERhdGFUeXBlKSB7XG4gICAgICAgICAgICBpZiAoZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWzBdKSB7XG4gICAgICAgICAgICAgICAgZGF0YVR5cGVzLnVuc2hpZnQoZmluYWxEYXRhVHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2VzW2ZpbmFsRGF0YVR5cGVdO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcbiAgICAgKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhamF4Q29udmVydChzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2Vzcykge1xuICAgICAgICB2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldiwgY29udmVydGVycyA9IHt9LCBcbiAgICAgICAgLy8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuICAgICAgICBkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpO1xuICAgICAgICAvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcbiAgICAgICAgaWYgKGRhdGFUeXBlc1sxXSkge1xuICAgICAgICAgICAgZm9yIChjb252IGluIHMuY29udmVydGVycykge1xuICAgICAgICAgICAgICAgIGNvbnZlcnRlcnNbY29udi50b0xvd2VyQ2FzZSgpXSA9IHMuY29udmVydGVyc1tjb252XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG4gICAgICAgIC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG4gICAgICAgIHdoaWxlIChjdXJyZW50KSB7XG4gICAgICAgICAgICBpZiAocy5yZXNwb25zZUZpZWxkc1tjdXJyZW50XSkge1xuICAgICAgICAgICAgICAgIGpxWEhSW3MucmVzcG9uc2VGaWVsZHNbY3VycmVudF1dID0gcmVzcG9uc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBBcHBseSB0aGUgZGF0YUZpbHRlciBpZiBwcm92aWRlZFxuICAgICAgICAgICAgaWYgKCFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIpIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZSA9IHMuZGF0YUZpbHRlcihyZXNwb25zZSwgcy5kYXRhVHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcmV2ID0gY3VycmVudDtcbiAgICAgICAgICAgIGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcbiAgICAgICAgICAgIGlmIChjdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50ID09PSBcIipcIikge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50ID0gcHJldjtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG4gICAgICAgICAgICAgICAgICAgIGNvbnYgPSBjb252ZXJ0ZXJzW3ByZXYgKyBcIiBcIiArIGN1cnJlbnRdIHx8IGNvbnZlcnRlcnNbXCIqIFwiICsgY3VycmVudF07XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG4gICAgICAgICAgICAgICAgICAgIGlmICghY29udikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb252MiBpbiBjb252ZXJ0ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wID0gY29udjIuc3BsaXQoXCIgXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0bXBbMV0gPT09IGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnYgPSBjb252ZXJ0ZXJzW3ByZXYgKyBcIiBcIiArIHRtcFswXV0gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnRlcnNbXCIqIFwiICsgdG1wWzBdXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb252ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udiA9IGNvbnZlcnRlcnNbY29udjJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNvbnZlcnRlcnNbY29udjJdICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IHRtcFswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZXMudW5zaGlmdCh0bXBbMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb252ICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udiAmJiBzLnRocm93cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gY29udihyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IGNvbnYocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6IFwicGFyc2VyZXJyb3JcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG4gICAgfVxuICAgIGpRdWVyeS5leHRlbmQoe1xuICAgICAgICAvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcbiAgICAgICAgYWN0aXZlOiAwLFxuICAgICAgICAvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XG4gICAgICAgIGxhc3RNb2RpZmllZDoge30sXG4gICAgICAgIGV0YWc6IHt9LFxuICAgICAgICBhamF4U2V0dGluZ3M6IHtcbiAgICAgICAgICAgIHVybDogbG9jYXRpb24uaHJlZixcbiAgICAgICAgICAgIHR5cGU6IFwiR0VUXCIsXG4gICAgICAgICAgICBpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KGxvY2F0aW9uLnByb3RvY29sKSxcbiAgICAgICAgICAgIGdsb2JhbDogdHJ1ZSxcbiAgICAgICAgICAgIHByb2Nlc3NEYXRhOiB0cnVlLFxuICAgICAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgICAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICB0aW1lb3V0OiAwLFxuICAgICAgICAgICAgZGF0YTogbnVsbCxcbiAgICAgICAgICAgIGRhdGFUeXBlOiBudWxsLFxuICAgICAgICAgICAgdXNlcm5hbWU6IG51bGwsXG4gICAgICAgICAgICBwYXNzd29yZDogbnVsbCxcbiAgICAgICAgICAgIGNhY2hlOiBudWxsLFxuICAgICAgICAgICAgdGhyb3dzOiBmYWxzZSxcbiAgICAgICAgICAgIHRyYWRpdGlvbmFsOiBmYWxzZSxcbiAgICAgICAgICAgIGhlYWRlcnM6IHt9LFxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGFjY2VwdHM6IHtcbiAgICAgICAgICAgICAgICBcIipcIjogYWxsVHlwZXMsXG4gICAgICAgICAgICAgICAgdGV4dDogXCJ0ZXh0L3BsYWluXCIsXG4gICAgICAgICAgICAgICAgaHRtbDogXCJ0ZXh0L2h0bWxcIixcbiAgICAgICAgICAgICAgICB4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuICAgICAgICAgICAgICAgIGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb250ZW50czoge1xuICAgICAgICAgICAgICAgIHhtbDogL1xcYnhtbFxcYi8sXG4gICAgICAgICAgICAgICAgaHRtbDogL1xcYmh0bWwvLFxuICAgICAgICAgICAgICAgIGpzb246IC9cXGJqc29uXFxiL1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlc3BvbnNlRmllbGRzOiB7XG4gICAgICAgICAgICAgICAgeG1sOiBcInJlc3BvbnNlWE1MXCIsXG4gICAgICAgICAgICAgICAgdGV4dDogXCJyZXNwb25zZVRleHRcIixcbiAgICAgICAgICAgICAgICBqc29uOiBcInJlc3BvbnNlSlNPTlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8gRGF0YSBjb252ZXJ0ZXJzXG4gICAgICAgICAgICAvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG4gICAgICAgICAgICBjb252ZXJ0ZXJzOiB7XG4gICAgICAgICAgICAgICAgLy8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG4gICAgICAgICAgICAgICAgXCIqIHRleHRcIjogU3RyaW5nLFxuICAgICAgICAgICAgICAgIC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuICAgICAgICAgICAgICAgIFwidGV4dCBodG1sXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgLy8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuICAgICAgICAgICAgICAgIFwidGV4dCBqc29uXCI6IEpTT04ucGFyc2UsXG4gICAgICAgICAgICAgICAgLy8gUGFyc2UgdGV4dCBhcyB4bWxcbiAgICAgICAgICAgICAgICBcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG4gICAgICAgICAgICAvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG4gICAgICAgICAgICAvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxuICAgICAgICAgICAgLy8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG4gICAgICAgICAgICBmbGF0T3B0aW9uczoge1xuICAgICAgICAgICAgICAgIHVybDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjb250ZXh0OiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG4gICAgICAgIC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cbiAgICAgICAgLy8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cbiAgICAgICAgYWpheFNldHVwOiBmdW5jdGlvbiAodGFyZ2V0LCBzZXR0aW5ncykge1xuICAgICAgICAgICAgcmV0dXJuIHNldHRpbmdzID9cbiAgICAgICAgICAgICAgICAvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxuICAgICAgICAgICAgICAgIGFqYXhFeHRlbmQoYWpheEV4dGVuZCh0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MpLCBzZXR0aW5ncykgOlxuICAgICAgICAgICAgICAgIC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3NcbiAgICAgICAgICAgICAgICBhamF4RXh0ZW5kKGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCk7XG4gICAgICAgIH0sXG4gICAgICAgIGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyhwcmVmaWx0ZXJzKSxcbiAgICAgICAgYWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKHRyYW5zcG9ydHMpLFxuICAgICAgICAvLyBNYWluIG1ldGhvZFxuICAgICAgICBhamF4OiBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XG4gICAgICAgICAgICAvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuICAgICAgICAgICAgaWYgKHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zID0gdXJsO1xuICAgICAgICAgICAgICAgIHVybCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG4gICAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgICAgIHZhciB0cmFuc3BvcnQsIFxuICAgICAgICAgICAgLy8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuICAgICAgICAgICAgY2FjaGVVUkwsIFxuICAgICAgICAgICAgLy8gUmVzcG9uc2UgaGVhZGVyc1xuICAgICAgICAgICAgcmVzcG9uc2VIZWFkZXJzU3RyaW5nLCByZXNwb25zZUhlYWRlcnMsIFxuICAgICAgICAgICAgLy8gdGltZW91dCBoYW5kbGVcbiAgICAgICAgICAgIHRpbWVvdXRUaW1lciwgXG4gICAgICAgICAgICAvLyBVcmwgY2xlYW51cCB2YXJcbiAgICAgICAgICAgIHVybEFuY2hvciwgXG4gICAgICAgICAgICAvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXG4gICAgICAgICAgICBjb21wbGV0ZWQsIFxuICAgICAgICAgICAgLy8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkXG4gICAgICAgICAgICBmaXJlR2xvYmFscywgXG4gICAgICAgICAgICAvLyBMb29wIHZhcmlhYmxlXG4gICAgICAgICAgICBpLCBcbiAgICAgICAgICAgIC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxuICAgICAgICAgICAgdW5jYWNoZWQsIFxuICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxuICAgICAgICAgICAgcyA9IGpRdWVyeS5hamF4U2V0dXAoe30sIG9wdGlvbnMpLCBcbiAgICAgICAgICAgIC8vIENhbGxiYWNrcyBjb250ZXh0XG4gICAgICAgICAgICBjYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcywgXG4gICAgICAgICAgICAvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG4gICAgICAgICAgICBnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcbiAgICAgICAgICAgICAgICAoY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkpID9cbiAgICAgICAgICAgICAgICBqUXVlcnkoY2FsbGJhY2tDb250ZXh0KSA6XG4gICAgICAgICAgICAgICAgalF1ZXJ5LmV2ZW50LCBcbiAgICAgICAgICAgIC8vIERlZmVycmVkc1xuICAgICAgICAgICAgZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSwgY29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSwgXG4gICAgICAgICAgICAvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuICAgICAgICAgICAgc3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSwgXG4gICAgICAgICAgICAvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuICAgICAgICAgICAgcmVxdWVzdEhlYWRlcnMgPSB7fSwgcmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LCBcbiAgICAgICAgICAgIC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuICAgICAgICAgICAgc3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsIFxuICAgICAgICAgICAgLy8gRmFrZSB4aHJcbiAgICAgICAgICAgIGpxWEhSID0ge1xuICAgICAgICAgICAgICAgIHJlYWR5U3RhdGU6IDAsXG4gICAgICAgICAgICAgICAgLy8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuICAgICAgICAgICAgICAgIGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBsZXRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXNwb25zZUhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZUhlYWRlcnMgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoKG1hdGNoID0gcmhlYWRlcnMuZXhlYyhyZXNwb25zZUhlYWRlcnNTdHJpbmcpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZUhlYWRlcnNbbWF0Y2hbMV0udG9Mb3dlckNhc2UoKV0gPSBtYXRjaFsyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1trZXkudG9Mb3dlckNhc2UoKV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2g7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAvLyBSYXcgc3RyaW5nXG4gICAgICAgICAgICAgICAgZ2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb21wbGV0ZWQgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgLy8gQ2FjaGVzIHRoZSBoZWFkZXJcbiAgICAgICAgICAgICAgICBzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBsZXRlZCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1tuYW1lLnRvTG93ZXJDYXNlKCldID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0SGVhZGVyc05hbWVzW25hbWUudG9Mb3dlckNhc2UoKV0gfHwgbmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RIZWFkZXJzW25hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuICAgICAgICAgICAgICAgIG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21wbGV0ZWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcy5taW1lVHlwZSA9IHR5cGU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuICAgICAgICAgICAgICAgIHN0YXR1c0NvZGU6IGZ1bmN0aW9uIChtYXApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvZGU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb21wbGV0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcVhIUi5hbHdheXMobWFwW2pxWEhSLnN0YXR1c10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFja3MgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvZGUgaW4gbWFwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c0NvZGVbY29kZV0gPSBbc3RhdHVzQ29kZVtjb2RlXSwgbWFwW2NvZGVdXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAvLyBDYW5jZWwgdGhlIHJlcXVlc3RcbiAgICAgICAgICAgICAgICBhYm9ydDogZnVuY3Rpb24gKHN0YXR1c1RleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc3BvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zcG9ydC5hYm9ydChmaW5hbFRleHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGRvbmUoMCwgZmluYWxUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIEF0dGFjaCBkZWZlcnJlZHNcbiAgICAgICAgICAgIGRlZmVycmVkLnByb21pc2UoanFYSFIpO1xuICAgICAgICAgICAgLy8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG4gICAgICAgICAgICAvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxuICAgICAgICAgICAgLy8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG4gICAgICAgICAgICBzLnVybCA9ICgodXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYpICsgXCJcIilcbiAgICAgICAgICAgICAgICAucmVwbGFjZShycHJvdG9jb2wsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiKTtcbiAgICAgICAgICAgIC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuICAgICAgICAgICAgcy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcbiAgICAgICAgICAgIC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3RcbiAgICAgICAgICAgIHMuZGF0YVR5cGVzID0gKHMuZGF0YVR5cGUgfHwgXCIqXCIpLnRvTG93ZXJDYXNlKCkubWF0Y2gocm5vdGh0bWx3aGl0ZSkgfHwgW1wiXCJdO1xuICAgICAgICAgICAgLy8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHRoZSBvcmlnaW4gZG9lc24ndCBtYXRjaCB0aGUgY3VycmVudCBvcmlnaW4uXG4gICAgICAgICAgICBpZiAocy5jcm9zc0RvbWFpbiA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdXJsQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG4gICAgICAgICAgICAgICAgLy8gU3VwcG9ydDogSUUgPD04IC0gMTEsIEVkZ2UgMTIgLSAxM1xuICAgICAgICAgICAgICAgIC8vIElFIHRocm93cyBleGNlcHRpb24gb24gYWNjZXNzaW5nIHRoZSBocmVmIHByb3BlcnR5IGlmIHVybCBpcyBtYWxmb3JtZWQsXG4gICAgICAgICAgICAgICAgLy8gZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHVybEFuY2hvci5ocmVmID0gcy51cmw7XG4gICAgICAgICAgICAgICAgICAgIC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExIG9ubHlcbiAgICAgICAgICAgICAgICAgICAgLy8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcbiAgICAgICAgICAgICAgICAgICAgdXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcbiAgICAgICAgICAgICAgICAgICAgcy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgdXJsQW5jaG9yLmhvc3Q7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxuICAgICAgICAgICAgICAgICAgICAvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXG4gICAgICAgICAgICAgICAgICAgIHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuICAgICAgICAgICAgaWYgKHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBzLmRhdGEgPSBqUXVlcnkucGFyYW0ocy5kYXRhLCBzLnRyYWRpdGlvbmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEFwcGx5IHByZWZpbHRlcnNcbiAgICAgICAgICAgIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSKTtcbiAgICAgICAgICAgIC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG4gICAgICAgICAgICBpZiAoY29tcGxldGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGpxWEhSO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cbiAgICAgICAgICAgIC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXG4gICAgICAgICAgICBmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcbiAgICAgICAgICAgIC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcbiAgICAgICAgICAgIGlmIChmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDApIHtcbiAgICAgICAgICAgICAgICBqUXVlcnkuZXZlbnQudHJpZ2dlcihcImFqYXhTdGFydFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuICAgICAgICAgICAgcy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuICAgICAgICAgICAgcy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdChzLnR5cGUpO1xuICAgICAgICAgICAgLy8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG4gICAgICAgICAgICAvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cbiAgICAgICAgICAgIC8vIFJlbW92ZSBoYXNoIHRvIHNpbXBsaWZ5IHVybCBtYW5pcHVsYXRpb25cbiAgICAgICAgICAgIGNhY2hlVVJMID0gcy51cmwucmVwbGFjZShyaGFzaCwgXCJcIik7XG4gICAgICAgICAgICAvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuICAgICAgICAgICAgaWYgKCFzLmhhc0NvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBSZW1lbWJlciB0aGUgaGFzaCBzbyB3ZSBjYW4gcHV0IGl0IGJhY2tcbiAgICAgICAgICAgICAgICB1bmNhY2hlZCA9IHMudXJsLnNsaWNlKGNhY2hlVVJMLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgLy8gSWYgZGF0YSBpcyBhdmFpbGFibGUsIGFwcGVuZCBkYXRhIHRvIHVybFxuICAgICAgICAgICAgICAgIGlmIChzLmRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FjaGVVUkwgKz0gKHJxdWVyeS50ZXN0KGNhY2hlVVJMKSA/IFwiJlwiIDogXCI/XCIpICsgcy5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzLmRhdGE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEFkZCBvciB1cGRhdGUgYW50aS1jYWNoZSBwYXJhbSBpZiBuZWVkZWRcbiAgICAgICAgICAgICAgICBpZiAocy5jYWNoZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKHJhbnRpQ2FjaGUsIFwiJDFcIik7XG4gICAgICAgICAgICAgICAgICAgIHVuY2FjaGVkID0gKHJxdWVyeS50ZXN0KGNhY2hlVVJMKSA/IFwiJlwiIDogXCI/XCIpICsgXCJfPVwiICsgKG5vbmNlKyspICsgdW5jYWNoZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFB1dCBoYXNoIGFuZCBhbnRpLWNhY2hlIG9uIHRoZSBVUkwgdGhhdCB3aWxsIGJlIHJlcXVlc3RlZCAoZ2gtMTczMilcbiAgICAgICAgICAgICAgICBzLnVybCA9IGNhY2hlVVJMICsgdW5jYWNoZWQ7XG4gICAgICAgICAgICAgICAgLy8gQ2hhbmdlICclMjAnIHRvICcrJyBpZiB0aGlzIGlzIGVuY29kZWQgZm9ybSBib2R5IGNvbnRlbnQgKGdoLTI2NTgpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJlxuICAgICAgICAgICAgICAgIChzLmNvbnRlbnRUeXBlIHx8IFwiXCIpLmluZGV4T2YoXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIikgPT09IDApIHtcbiAgICAgICAgICAgICAgICBzLmRhdGEgPSBzLmRhdGEucmVwbGFjZShyMjAsIFwiK1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG4gICAgICAgICAgICBpZiAocy5pZk1vZGlmaWVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGpRdWVyeS5sYXN0TW9kaWZpZWRbY2FjaGVVUkxdKSB7XG4gICAgICAgICAgICAgICAgICAgIGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkW2NhY2hlVVJMXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChqUXVlcnkuZXRhZ1tjYWNoZVVSTF0pIHtcbiAgICAgICAgICAgICAgICAgICAganFYSFIuc2V0UmVxdWVzdEhlYWRlcihcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbY2FjaGVVUkxdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcbiAgICAgICAgICAgIGlmIChzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUpIHtcbiAgICAgICAgICAgICAgICBqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuICAgICAgICAgICAganFYSFIuc2V0UmVxdWVzdEhlYWRlcihcIkFjY2VwdFwiLCBzLmRhdGFUeXBlc1swXSAmJiBzLmFjY2VwdHNbcy5kYXRhVHlwZXNbMF1dID9cbiAgICAgICAgICAgICAgICBzLmFjY2VwdHNbcy5kYXRhVHlwZXNbMF1dICtcbiAgICAgICAgICAgICAgICAgICAgKHMuZGF0YVR5cGVzWzBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIikgOlxuICAgICAgICAgICAgICAgIHMuYWNjZXB0c1tcIipcIl0pO1xuICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG4gICAgICAgICAgICBmb3IgKGkgaW4gcy5oZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAganFYSFIuc2V0UmVxdWVzdEhlYWRlcihpLCBzLmhlYWRlcnNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuICAgICAgICAgICAgaWYgKHMuYmVmb3JlU2VuZCAmJlxuICAgICAgICAgICAgICAgIChzLmJlZm9yZVNlbmQuY2FsbChjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzKSA9PT0gZmFsc2UgfHwgY29tcGxldGVkKSkge1xuICAgICAgICAgICAgICAgIC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuICAgICAgICAgICAgICAgIHJldHVybiBqcVhIUi5hYm9ydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG4gICAgICAgICAgICBzdHJBYm9ydCA9IFwiYWJvcnRcIjtcbiAgICAgICAgICAgIC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuICAgICAgICAgICAgY29tcGxldGVEZWZlcnJlZC5hZGQocy5jb21wbGV0ZSk7XG4gICAgICAgICAgICBqcVhIUi5kb25lKHMuc3VjY2Vzcyk7XG4gICAgICAgICAgICBqcVhIUi5mYWlsKHMuZXJyb3IpO1xuICAgICAgICAgICAgLy8gR2V0IHRyYW5zcG9ydFxuICAgICAgICAgICAgdHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHModHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIpO1xuICAgICAgICAgICAgLy8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG4gICAgICAgICAgICBpZiAoIXRyYW5zcG9ydCkge1xuICAgICAgICAgICAgICAgIGRvbmUoLTEsIFwiTm8gVHJhbnNwb3J0XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAganFYSFIucmVhZHlTdGF0ZSA9IDE7XG4gICAgICAgICAgICAgICAgLy8gU2VuZCBnbG9iYWwgZXZlbnRcbiAgICAgICAgICAgICAgICBpZiAoZmlyZUdsb2JhbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoXCJhamF4U2VuZFwiLCBbanFYSFIsIHNdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcbiAgICAgICAgICAgICAgICBpZiAoY29tcGxldGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBqcVhIUjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gVGltZW91dFxuICAgICAgICAgICAgICAgIGlmIChzLmFzeW5jICYmIHMudGltZW91dCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAganFYSFIuYWJvcnQoXCJ0aW1lb3V0XCIpO1xuICAgICAgICAgICAgICAgICAgICB9LCBzLnRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNwb3J0LnNlbmQocmVxdWVzdEhlYWRlcnMsIGRvbmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBSZXRocm93IHBvc3QtY29tcGxldGlvbiBleGNlcHRpb25zXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21wbGV0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gUHJvcGFnYXRlIG90aGVycyBhcyByZXN1bHRzXG4gICAgICAgICAgICAgICAgICAgIGRvbmUoLTEsIGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuICAgICAgICAgICAgZnVuY3Rpb24gZG9uZShzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycykge1xuICAgICAgICAgICAgICAgIHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsIHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuICAgICAgICAgICAgICAgIC8vIElnbm9yZSByZXBlYXQgaW52b2NhdGlvbnNcbiAgICAgICAgICAgICAgICBpZiAoY29tcGxldGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuICAgICAgICAgICAgICAgIGlmICh0aW1lb3V0VGltZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aW1lb3V0VGltZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuICAgICAgICAgICAgICAgIC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG4gICAgICAgICAgICAgICAgdHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcbiAgICAgICAgICAgICAgICByZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG4gICAgICAgICAgICAgICAgLy8gU2V0IHJlYWR5U3RhdGVcbiAgICAgICAgICAgICAgICBqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xuICAgICAgICAgICAgICAgIC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG4gICAgICAgICAgICAgICAgaXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XG4gICAgICAgICAgICAgICAgLy8gR2V0IHJlc3BvbnNlIGRhdGFcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2VzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyhzLCBqcVhIUiwgcmVzcG9uc2VzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gYWpheENvbnZlcnQocywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MpO1xuICAgICAgICAgICAgICAgIC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXG4gICAgICAgICAgICAgICAgaWYgKGlzU3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuICAgICAgICAgICAgICAgICAgICBpZiAocy5pZk1vZGlmaWVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKFwiTGFzdC1Nb2RpZmllZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtb2RpZmllZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeS5sYXN0TW9kaWZpZWRbY2FjaGVVUkxdID0gbW9kaWZpZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKFwiZXRhZ1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtb2RpZmllZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeS5ldGFnW2NhY2hlVVJMXSA9IG1vZGlmaWVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIG5vIGNvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgbm90IG1vZGlmaWVkXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoc3RhdHVzID09PSAzMDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzU3VjY2VzcyA9ICFlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuICAgICAgICAgICAgICAgICAgICBlcnJvciA9IHN0YXR1c1RleHQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgfHwgIXN0YXR1c1RleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdHVzIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cyA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3RcbiAgICAgICAgICAgICAgICBqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG4gICAgICAgICAgICAgICAganFYSFIuc3RhdHVzVGV4dCA9IChuYXRpdmVTdGF0dXNUZXh0IHx8IHN0YXR1c1RleHQpICsgXCJcIjtcbiAgICAgICAgICAgICAgICAvLyBTdWNjZXNzL0Vycm9yXG4gICAgICAgICAgICAgICAgaWYgKGlzU3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlV2l0aChjYWxsYmFja0NvbnRleHQsIFtzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUl0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0V2l0aChjYWxsYmFja0NvbnRleHQsIFtqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3JdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3NcbiAgICAgICAgICAgICAgICBqcVhIUi5zdGF0dXNDb2RlKHN0YXR1c0NvZGUpO1xuICAgICAgICAgICAgICAgIHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgaWYgKGZpcmVHbG9iYWxzKSB7XG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsIFtqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIENvbXBsZXRlXG4gICAgICAgICAgICAgICAgY29tcGxldGVEZWZlcnJlZC5maXJlV2l0aChjYWxsYmFja0NvbnRleHQsIFtqcVhIUiwgc3RhdHVzVGV4dF0pO1xuICAgICAgICAgICAgICAgIGlmIChmaXJlR2xvYmFscykge1xuICAgICAgICAgICAgICAgICAgICBnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlcihcImFqYXhDb21wbGV0ZVwiLCBbanFYSFIsIHNdKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKC0talF1ZXJ5LmFjdGl2ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeS5ldmVudC50cmlnZ2VyKFwiYWpheFN0b3BcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ganFYSFI7XG4gICAgICAgIH0sXG4gICAgICAgIGdldEpTT046IGZ1bmN0aW9uICh1cmwsIGRhdGEsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4galF1ZXJ5LmdldCh1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIik7XG4gICAgICAgIH0sXG4gICAgICAgIGdldFNjcmlwdDogZnVuY3Rpb24gKHVybCwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJldHVybiBqUXVlcnkuZ2V0KHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIik7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBqUXVlcnkuZWFjaChbXCJnZXRcIiwgXCJwb3N0XCJdLCBmdW5jdGlvbiAoaSwgbWV0aG9kKSB7XG4gICAgICAgIGpRdWVyeVttZXRob2RdID0gZnVuY3Rpb24gKHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUpIHtcbiAgICAgICAgICAgIC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG4gICAgICAgICAgICBpZiAoalF1ZXJ5LmlzRnVuY3Rpb24oZGF0YSkpIHtcbiAgICAgICAgICAgICAgICB0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcbiAgICAgICAgICAgICAgICBjYWxsYmFjayA9IGRhdGE7XG4gICAgICAgICAgICAgICAgZGF0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuICAgICAgICAgICAgcmV0dXJuIGpRdWVyeS5hamF4KGpRdWVyeS5leHRlbmQoe1xuICAgICAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgICAgICAgIHR5cGU6IG1ldGhvZCxcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogdHlwZSxcbiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGNhbGxiYWNrXG4gICAgICAgICAgICB9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCh1cmwpICYmIHVybCkpO1xuICAgICAgICB9O1xuICAgIH0pO1xuICAgIHJldHVybiBqUXVlcnk7XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zjg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kM2R5OXdZV05yY3k5cWNYVmxjbmt2YzNKakwyRnFZWGd1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNUVUZCVFN4RFFVRkZPMGxCUTFBc1VVRkJVVHRKUVVOU0xHZENRVUZuUWp0SlFVTm9RaXh4UWtGQmNVSTdTVUZEY2tJc2NVSkJRWEZDTzBsQlEzSkNMR3RDUVVGclFqdEpRVU5zUWl4dFFrRkJiVUk3U1VGRmJrSXNZVUZCWVR0SlFVTmlMR2xDUVVGcFFqdEpRVU5xUWl4cFFrRkJhVUk3U1VGRGFrSXNXVUZCV1R0SlFVTmFMR0ZCUVdFc1EwRkJReXhsUVVGbE8wTkJRemRDTEVWQlFVVXNWVUZCVlN4TlFVRk5MRVZCUVVVc1VVRkJVU3hGUVVGRkxHRkJRV0VzUlVGQlJTeFJRVUZSTEVWQlFVVXNTMEZCU3l4RlFVRkZMRTFCUVUwN1NVRkZja1VzV1VGQldTeERRVUZETzBsQlJXSXNTVUZEUXl4SFFVRkhMRWRCUVVjc1RVRkJUU3hGUVVOYUxFdEJRVXNzUjBGQlJ5eE5RVUZOTEVWQlEyUXNWVUZCVlN4SFFVRkhMR1ZCUVdVc1JVRkROVUlzVVVGQlVTeEhRVUZITERSQ1FVRTBRanRKUVVWMlF5eG5SRUZCWjBRN1NVRkRhRVFzWTBGQll5eEhRVUZITERKRVFVRXlSQ3hGUVVNMVJTeFZRVUZWTEVkQlFVY3NaMEpCUVdkQ0xFVkJRemRDTEZOQlFWTXNSMEZCUnl4UFFVRlBPMGxCUlc1Q096czdPenM3T3p0UFFWRkhPMGxCUTBnc1ZVRkJWU3hIUVVGSExFVkJRVVU3U1VGRlpqczdPenRQUVVsSE8wbEJRMGdzVlVGQlZTeEhRVUZITEVWQlFVVTdTVUZGWml4MVJrRkJkVVk3U1VGRGRrWXNVVUZCVVN4SFFVRkhMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVVVzUjBGQlJ5eERRVUZGTzBsQlJUZENMRFpEUVVFMlF6dEpRVU0zUXl4WlFVRlpMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlJTeEhRVUZITEVOQlFVVXNRMEZCUXp0SlFVTTNReXhaUVVGWkxFTkJRVU1zU1VGQlNTeEhRVUZITEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNN1NVRkZia01zZFVWQlFYVkZPMGxCUTNaRkxIRkRRVUZ6UXl4VFFVRlRPMUZCUlRsRExIRkVRVUZ4UkR0UlFVTnlSQ3hOUVVGTkxFTkJRVU1zVlVGQlZTeHJRa0ZCYTBJc1JVRkJSU3hKUVVGSk8xbEJSWGhETEVWQlFVVXNRMEZCUXl4RFFVRkZMRTlCUVU4c2EwSkJRV3RDTEV0QlFVc3NVVUZCVXl4RFFVRkRMRU5CUVVNc1EwRkJRenRuUWtGRE9VTXNTVUZCU1N4SFFVRkhMR3RDUVVGclFpeERRVUZETzJkQ1FVTXhRaXhyUWtGQmEwSXNSMEZCUnl4SFFVRkhMRU5CUVVNN1dVRkRNVUlzUTBGQlF6dFpRVVZFTEVsQlFVa3NVVUZCVVN4RlFVTllMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRMHdzVTBGQlV5eEhRVUZITEd0Q1FVRnJRaXhEUVVGRExGZEJRVmNzUlVGQlJTeERRVUZETEV0QlFVc3NRMEZCUlN4aFFVRmhMRU5CUVVVc1NVRkJTU3hGUVVGRkxFTkJRVU03V1VGRk0wVXNSVUZCUlN4RFFVRkRMRU5CUVVVc1RVRkJUU3hEUVVGRExGVkJRVlVzUTBGQlJTeEpRVUZKTEVOQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJSV3BETERoRFFVRTRRenRuUWtGRE9VTXNUMEZCVVN4RFFVRkZMRkZCUVZFc1IwRkJSeXhUUVVGVExFTkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVVXNRMEZCUlN4RlFVRkhMRU5CUVVNN2IwSkJSVEZETEhWQ1FVRjFRanR2UWtGRGRrSXNSVUZCUlN4RFFVRkRMRU5CUVVVc1VVRkJVU3hEUVVGRkxFTkJRVU1zUTBGQlJTeExRVUZMTEVkQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNN2QwSkJRemRDTEZGQlFWRXNSMEZCUnl4UlFVRlJMRU5CUVVNc1MwRkJTeXhEUVVGRkxFTkJRVU1zUTBGQlJTeEpRVUZKTEVkQlFVY3NRMEZCUXp0M1FrRkRkRU1zUTBGQlJTeFRRVUZUTEVOQlFVVXNVVUZCVVN4RFFVRkZMRWRCUVVjc1UwRkJVeXhEUVVGRkxGRkJRVkVzUTBGQlJTeEpRVUZKTEVWQlFVVXNRMEZCUlN4RFFVRkRMRTlCUVU4c1EwRkJSU3hKUVVGSkxFTkJRVVVzUTBGQlF6dDNRa0ZGZWtVc2JVSkJRVzFDTzI5Q1FVTnVRaXhEUVVGRE8yOUNRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPM2RDUVVOUUxFTkJRVVVzVTBGQlV5eERRVUZGTEZGQlFWRXNRMEZCUlN4SFFVRkhMRk5CUVZNc1EwRkJSU3hSUVVGUkxFTkJRVVVzU1VGQlNTeEZRVUZGTEVOQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVVc1NVRkJTU3hEUVVGRkxFTkJRVU03YjBKQlEzUkZMRU5CUVVNN1owSkJRMFlzUTBGQlF6dFpRVU5HTEVOQlFVTTdVVUZEUml4RFFVRkRMRU5CUVVNN1NVRkRTQ3hEUVVGRE8wbEJSVVFzZVVSQlFYbEVPMGxCUTNwRUxIVkRRVUYzUXl4VFFVRlRMRVZCUVVVc1QwRkJUeXhGUVVGRkxHVkJRV1VzUlVGQlJTeExRVUZMTzFGQlJXcEdMRWxCUVVrc1UwRkJVeXhIUVVGSExFVkJRVVVzUlVGRGFrSXNaMEpCUVdkQ0xFZEJRVWNzUTBGQlJTeFRRVUZUTEV0QlFVc3NWVUZCVlN4RFFVRkZMRU5CUVVNN1VVRkZha1FzYVVKQlFXdENMRkZCUVZFN1dVRkRla0lzU1VGQlNTeFJRVUZSTEVOQlFVTTdXVUZEWWl4VFFVRlRMRU5CUVVVc1VVRkJVU3hEUVVGRkxFZEJRVWNzU1VGQlNTeERRVUZETzFsQlF6ZENMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVVVzVTBGQlV5eERRVUZGTEZGQlFWRXNRMEZCUlN4SlFVRkpMRVZCUVVVc1JVRkJSU3hWUVVGVkxFTkJRVU1zUlVGQlJTeHJRa0ZCYTBJN1owSkJRM2hGTEVsQlFVa3NiVUpCUVcxQ0xFZEJRVWNzYTBKQlFXdENMRU5CUVVVc1QwRkJUeXhGUVVGRkxHVkJRV1VzUlVGQlJTeExRVUZMTEVOQlFVVXNRMEZCUXp0blFrRkRhRVlzUlVGQlJTeERRVUZETEVOQlFVVXNUMEZCVHl4dFFrRkJiVUlzUzBGQlN5eFJRVUZSTzI5Q1FVTXpReXhEUVVGRExHZENRVUZuUWl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRkxHMUNRVUZ0UWl4RFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRE8yOUNRVVV4UkN4UFFVRlBMRU5CUVVNc1UwRkJVeXhEUVVGRExFOUJRVThzUTBGQlJTeHRRa0ZCYlVJc1EwRkJSU3hEUVVGRE8yOUNRVU5xUkN4UFFVRlBMRU5CUVVVc2JVSkJRVzFDTEVOQlFVVXNRMEZCUXp0dlFrRkRMMElzVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXp0blFrRkRaQ3hEUVVGRE8yZENRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJSU3huUWtGQmFVSXNRMEZCUXl4RFFVRkRMRU5CUVVNN2IwSkJReTlDTEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVVc1VVRkJVU3hIUVVGSExHMUNRVUZ0UWl4RFFVRkZMRU5CUVVNN1owSkJRelZETEVOQlFVTTdXVUZEUml4RFFVRkRMRU5CUVVVc1EwRkJRenRaUVVOS0xFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTTdVVUZEYWtJc1EwRkJRenRSUVVWRUxFMUJRVTBzUTBGQlF5eFBRVUZQTEVOQlFVVXNUMEZCVHl4RFFVRkRMRk5CUVZNc1EwRkJSU3hEUVVGRExFTkJRVVVzUTBGQlJTeEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkZMRWRCUVVjc1EwRkJSU3hKUVVGSkxFOUJRVThzUTBGQlJTeEhRVUZITEVOQlFVVXNRMEZCUXp0SlFVTnFSaXhEUVVGRE8wbEJSVVFzYjBOQlFXOURPMGxCUTNCRExITkVRVUZ6UkR0SlFVTjBSQ3hqUVVGak8wbEJRMlFzYjBKQlFYRkNMRTFCUVUwc1JVRkJSU3hIUVVGSE8xRkJReTlDTEVsQlFVa3NSMEZCUnl4RlFVRkZMRWxCUVVrc1JVRkRXaXhYUVVGWExFZEJRVWNzVFVGQlRTeERRVUZETEZsQlFWa3NRMEZCUXl4WFFVRlhMRWxCUVVrc1JVRkJSU3hEUVVGRE8xRkJSWEpFTEVkQlFVY3NRMEZCUXl4RFFVRkZMRWRCUVVjc1NVRkJTU3hIUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEyNUNMRVZCUVVVc1EwRkJReXhEUVVGRkxFZEJRVWNzUTBGQlJTeEhRVUZITEVOQlFVVXNTMEZCU3l4VFFVRlZMRU5CUVVNc1EwRkJReXhEUVVGRE8yZENRVU5vUXl4RFFVRkZMRmRCUVZjc1EwRkJSU3hIUVVGSExFTkJRVVVzUjBGQlJ5eE5RVUZOTEVkQlFVY3NRMEZCUlN4SlFVRkpMRWxCUVVrc1EwRkJSU3hKUVVGSkxFZEJRVWNzUlVGQlJTeERRVUZGTEVOQlFVVXNRMEZCUlN4RFFVRkZMRWRCUVVjc1EwRkJSU3hIUVVGSExFZEJRVWNzUTBGQlJTeEhRVUZITEVOQlFVVXNRMEZCUXp0WlFVTnFSaXhEUVVGRE8xRkJRMFlzUTBGQlF6dFJRVU5FTEVWQlFVVXNRMEZCUXl4RFFVRkZMRWxCUVVzc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRFdpeE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkZMRWxCUVVrc1JVRkJSU3hOUVVGTkxFVkJRVVVzU1VGQlNTeERRVUZGTEVOQlFVTTdVVUZEY2tNc1EwRkJRenRSUVVWRUxFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTTdTVUZEWml4RFFVRkRPMGxCUlVRN096dFBRVWRITzBsQlEwZ3NOa0pCUVRoQ0xFTkJRVU1zUlVGQlJTeExRVUZMTEVWQlFVVXNVMEZCVXp0UlFVVm9SQ3hKUVVGSkxFVkJRVVVzUlVGQlJTeEpRVUZKTEVWQlFVVXNZVUZCWVN4RlFVRkZMR0ZCUVdFc1JVRkRla01zVVVGQlVTeEhRVUZITEVOQlFVTXNRMEZCUXl4UlFVRlJMRVZCUTNKQ0xGTkJRVk1zUjBGQlJ5eERRVUZETEVOQlFVTXNVMEZCVXl4RFFVRkRPMUZCUlhwQ0xESkVRVUV5UkR0UlFVTXpSQ3hQUVVGUkxGTkJRVk1zUTBGQlJTeERRVUZETEVOQlFVVXNTMEZCU3l4SFFVRkhMRVZCUVVjc1EwRkJRenRaUVVOcVF5eFRRVUZUTEVOQlFVTXNTMEZCU3l4RlFVRkZMRU5CUVVNN1dVRkRiRUlzUlVGQlJTeERRVUZETEVOQlFVVXNSVUZCUlN4TFFVRkxMRk5CUVZVc1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlEzaENMRVZCUVVVc1IwRkJSeXhEUVVGRExFTkJRVU1zVVVGQlVTeEpRVUZKTEV0QlFVc3NRMEZCUXl4cFFrRkJhVUlzUTBGQlJTeGpRVUZqTEVOQlFVVXNRMEZCUXp0WlFVTTVSQ3hEUVVGRE8xRkJRMFlzUTBGQlF6dFJRVVZFTEcxRVFVRnRSRHRSUVVOdVJDeEZRVUZGTEVOQlFVTXNRMEZCUlN4RlFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRMVlzUjBGQlJ5eERRVUZETEVOQlFVVXNTVUZCU1N4SlFVRkpMRkZCUVZNc1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlEzcENMRVZCUVVVc1EwRkJReXhEUVVGRkxGRkJRVkVzUTBGQlJTeEpRVUZKTEVOQlFVVXNTVUZCU1N4UlFVRlJMRU5CUVVVc1NVRkJTU3hEUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZGTEVWQlFVVXNRMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRenR2UWtGRGRrUXNVMEZCVXl4RFFVRkRMRTlCUVU4c1EwRkJSU3hKUVVGSkxFTkJRVVVzUTBGQlF6dHZRa0ZETVVJc1MwRkJTeXhEUVVGRE8yZENRVU5RTEVOQlFVTTdXVUZEUml4RFFVRkRPMUZCUTBZc1EwRkJRenRSUVVWRUxDdEVRVUVyUkR0UlFVTXZSQ3hGUVVGRkxFTkJRVU1zUTBGQlJTeFRRVUZUTEVOQlFVVXNRMEZCUXl4RFFVRkZMRWxCUVVrc1UwRkJWU3hEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU51UXl4aFFVRmhMRWRCUVVjc1UwRkJVeXhEUVVGRkxFTkJRVU1zUTBGQlJTeERRVUZETzFGQlEyaERMRU5CUVVNN1VVRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFpRVVZRTERSQ1FVRTBRanRaUVVNMVFpeEhRVUZITEVOQlFVTXNRMEZCUlN4SlFVRkpMRWxCUVVrc1UwRkJWU3hEUVVGRExFTkJRVU1zUTBGQlF6dG5Ra0ZETVVJc1JVRkJSU3hEUVVGRExFTkJRVVVzUTBGQlF5eFRRVUZUTEVOQlFVVXNRMEZCUXl4RFFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRExGVkJRVlVzUTBGQlJTeEpRVUZKTEVkQlFVY3NSMEZCUnl4SFFVRkhMRk5CUVZNc1EwRkJSU3hEUVVGRExFTkJRVVVzUTBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXp0dlFrRkRkRVVzWVVGQllTeEhRVUZITEVsQlFVa3NRMEZCUXp0dlFrRkRja0lzUzBGQlN5eERRVUZETzJkQ1FVTlFMRU5CUVVNN1owSkJRMFFzUlVGQlJTeERRVUZETEVOQlFVVXNRMEZCUXl4aFFVRmpMRU5CUVVNc1EwRkJReXhEUVVGRE8yOUNRVU4wUWl4aFFVRmhMRWRCUVVjc1NVRkJTU3hEUVVGRE8yZENRVU4wUWl4RFFVRkRPMWxCUTBZc1EwRkJRenRaUVVWRUxIZENRVUYzUWp0WlFVTjRRaXhoUVVGaExFZEJRVWNzWVVGQllTeEpRVUZKTEdGQlFXRXNRMEZCUXp0UlFVTm9SQ3hEUVVGRE8xRkJSVVFzZVVKQlFYbENPMUZCUTNwQ0xEUkRRVUUwUXp0UlFVTTFReXgzUTBGQmQwTTdVVUZEZUVNc1JVRkJSU3hEUVVGRExFTkJRVVVzWVVGQll5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTnlRaXhGUVVGRkxFTkJRVU1zUTBGQlJTeGhRVUZoTEV0QlFVc3NVMEZCVXl4RFFVRkZMRU5CUVVNc1EwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF6dG5Ra0ZEZUVNc1UwRkJVeXhEUVVGRExFOUJRVThzUTBGQlJTeGhRVUZoTEVOQlFVVXNRMEZCUXp0WlFVTndReXhEUVVGRE8xbEJRMFFzVFVGQlRTeERRVUZETEZOQlFWTXNRMEZCUlN4aFFVRmhMRU5CUVVVc1EwRkJRenRSUVVOdVF5eERRVUZETzBsQlEwWXNRMEZCUXp0SlFVVkVPenRQUVVWSE8wbEJRMGdzY1VKQlFYTkNMRU5CUVVNc1JVRkJSU3hSUVVGUkxFVkJRVVVzUzBGQlN5eEZRVUZGTEZOQlFWTTdVVUZEYkVRc1NVRkJTU3hMUVVGTExFVkJRVVVzVDBGQlR5eEZRVUZGTEVsQlFVa3NSVUZCUlN4SFFVRkhMRVZCUVVVc1NVRkJTU3hGUVVOc1F5eFZRVUZWTEVkQlFVY3NSVUZCUlR0UlFVVm1MRFJGUVVFMFJUdFJRVU0xUlN4VFFVRlRMRWRCUVVjc1EwRkJReXhEUVVGRExGTkJRVk1zUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXp0UlFVVnFReXcyUTBGQk5rTTdVVUZETjBNc1JVRkJSU3hEUVVGRExFTkJRVVVzVTBGQlV5eERRVUZGTEVOQlFVTXNRMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOMFFpeEhRVUZITEVOQlFVTXNRMEZCUlN4SlFVRkpMRWxCUVVrc1EwRkJReXhEUVVGRExGVkJRVmNzUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUXpkQ0xGVkJRVlVzUTBGQlJTeEpRVUZKTEVOQlFVTXNWMEZCVnl4RlFVRkZMRU5CUVVVc1IwRkJSeXhEUVVGRExFTkJRVU1zVlVGQlZTeERRVUZGTEVsQlFVa3NRMEZCUlN4RFFVRkRPMWxCUTNwRUxFTkJRVU03VVVGRFJpeERRVUZETzFGQlJVUXNUMEZCVHl4SFFVRkhMRk5CUVZNc1EwRkJReXhMUVVGTExFVkJRVVVzUTBGQlF6dFJRVVUxUWl4elEwRkJjME03VVVGRGRFTXNUMEZCVVN4UFFVRlBMRVZCUVVjc1EwRkJRenRaUVVWc1FpeEZRVUZGTEVOQlFVTXNRMEZCUlN4RFFVRkRMRU5CUVVNc1kwRkJZeXhEUVVGRkxFOUJRVThzUTBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkRia01zUzBGQlN5eERRVUZGTEVOQlFVTXNRMEZCUXl4alFVRmpMRU5CUVVVc1QwRkJUeXhEUVVGRkxFTkJRVVVzUjBGQlJ5eFJRVUZSTEVOQlFVTTdXVUZEYWtRc1EwRkJRenRaUVVWRUxHMURRVUZ0UXp0WlFVTnVReXhGUVVGRkxFTkJRVU1zUTBGQlJTeERRVUZETEVsQlFVa3NTVUZCU1N4VFFVRlRMRWxCUVVrc1EwRkJReXhEUVVGRExGVkJRVmNzUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUXpGRExGRkJRVkVzUjBGQlJ5eERRVUZETEVOQlFVTXNWVUZCVlN4RFFVRkZMRkZCUVZFc1JVRkJSU3hEUVVGRExFTkJRVU1zVVVGQlVTeERRVUZGTEVOQlFVTTdXVUZEYWtRc1EwRkJRenRaUVVWRUxFbEJRVWtzUjBGQlJ5eFBRVUZQTEVOQlFVTTdXVUZEWml4UFFVRlBMRWRCUVVjc1UwRkJVeXhEUVVGRExFdEJRVXNzUlVGQlJTeERRVUZETzFsQlJUVkNMRVZCUVVVc1EwRkJReXhEUVVGRkxFOUJRVkVzUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUldZc01FUkJRVEJFTzJkQ1FVTXhSQ3hGUVVGRkxFTkJRVU1zUTBGQlJTeFBRVUZQTEV0QlFVc3NSMEZCU1N4RFFVRkRMRU5CUVVNc1EwRkJRenR2UWtGRmRrSXNUMEZCVHl4SFFVRkhMRWxCUVVrc1EwRkJRenR2UWtGRmFFSXNlVVZCUVhsRk8yZENRVU42UlN4RFFVRkRPMmRDUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUlN4SlFVRkpMRXRCUVVzc1IwRkJSeXhKUVVGSkxFbEJRVWtzUzBGQlN5eFBRVUZSTEVOQlFVTXNRMEZCUXl4RFFVRkRPMjlDUVVVdlF5d3dRa0ZCTUVJN2IwSkJRekZDTEVsQlFVa3NSMEZCUnl4VlFVRlZMRU5CUVVVc1NVRkJTU3hIUVVGSExFZEJRVWNzUjBGQlJ5eFBRVUZQTEVOQlFVVXNTVUZCU1N4VlFVRlZMRU5CUVVVc1NVRkJTU3hIUVVGSExFOUJRVThzUTBGQlJTeERRVUZETzI5Q1FVVXhSU3cyUWtGQk5rSTdiMEpCUXpkQ0xFVkJRVVVzUTBGQlF5eERRVUZGTEVOQlFVTXNTVUZCU3l4RFFVRkRMRU5CUVVNc1EwRkJRenQzUWtGRFlpeEhRVUZITEVOQlFVTXNRMEZCUlN4TFFVRkxMRWxCUVVrc1ZVRkJWeXhEUVVGRExFTkJRVU1zUTBGQlF6czBRa0ZGTlVJc01rSkJRVEpDT3pSQ1FVTXpRaXhIUVVGSExFZEJRVWNzUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUlN4SFFVRkhMRU5CUVVVc1EwRkJRenMwUWtGRGVrSXNSVUZCUlN4RFFVRkRMRU5CUVVVc1IwRkJSeXhEUVVGRkxFTkJRVU1zUTBGQlJTeExRVUZMTEU5QlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owTkJSVFZDTERaRFFVRTJRenRuUTBGRE4wTXNTVUZCU1N4SFFVRkhMRlZCUVZVc1EwRkJSU3hKUVVGSkxFZEJRVWNzUjBGQlJ5eEhRVUZITEVkQlFVY3NRMEZCUlN4RFFVRkRMRU5CUVVVc1EwRkJSVHR2UTBGRGVrTXNWVUZCVlN4RFFVRkZMRWxCUVVrc1IwRkJSeXhIUVVGSExFTkJRVVVzUTBGQlF5eERRVUZGTEVOQlFVVXNRMEZCUXp0blEwRkRMMElzUlVGQlJTeERRVUZETEVOQlFVVXNTVUZCU3l4RFFVRkRMRU5CUVVNc1EwRkJRenR2UTBGRldpeHJRMEZCYTBNN2IwTkJRMnhETEVWQlFVVXNRMEZCUXl4RFFVRkZMRWxCUVVrc1MwRkJTeXhKUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETzNkRFFVTnlRaXhKUVVGSkxFZEJRVWNzVlVGQlZTeERRVUZGTEV0QlFVc3NRMEZCUlN4RFFVRkRPM2REUVVVMVFpdzRRMEZCT0VNN2IwTkJRemxETEVOQlFVTTdiME5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZGTEZWQlFWVXNRMEZCUlN4TFFVRkxMRU5CUVVVc1MwRkJTeXhKUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETzNkRFFVTXpReXhQUVVGUExFZEJRVWNzUjBGQlJ5eERRVUZGTEVOQlFVTXNRMEZCUlN4RFFVRkRPM2REUVVOdVFpeFRRVUZUTEVOQlFVTXNUMEZCVHl4RFFVRkZMRWRCUVVjc1EwRkJSU3hEUVVGRExFTkJRVVVzUTBGQlJTeERRVUZETzI5RFFVTXZRaXhEUVVGRE8yOURRVU5FTEV0QlFVc3NRMEZCUXp0blEwRkRVQ3hEUVVGRE96UkNRVU5HTEVOQlFVTTdkMEpCUTBZc1EwRkJRenR2UWtGRFJpeERRVUZETzI5Q1FVVkVMREJEUVVFd1F6dHZRa0ZETVVNc1JVRkJSU3hEUVVGRExFTkJRVVVzU1VGQlNTeExRVUZMTEVsQlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNN2QwSkJSWEpDTERaRVFVRTJSRHQzUWtGRE4wUXNSVUZCUlN4RFFVRkRMRU5CUVVVc1NVRkJTU3hKUVVGSkxFTkJRVU1zUTBGQlF5eE5RVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRPelJDUVVONFFpeFJRVUZSTEVkQlFVY3NTVUZCU1N4RFFVRkZMRkZCUVZFc1EwRkJSU3hEUVVGRE8zZENRVU0zUWl4RFFVRkRPM2RDUVVGRExFbEJRVWtzUTBGQlF5eERRVUZET3pSQ1FVTlFMRWxCUVVrc1EwRkJRenRuUTBGRFNpeFJRVUZSTEVkQlFVY3NTVUZCU1N4RFFVRkZMRkZCUVZFc1EwRkJSU3hEUVVGRE96UkNRVU0zUWl4RFFVRkRPelJDUVVGRExFdEJRVXNzUTBGQlF5eERRVUZGTEVOQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owTkJRMlFzVFVGQlRTeERRVUZETzI5RFFVTk9MRXRCUVVzc1JVRkJSU3hoUVVGaE8yOURRVU53UWl4TFFVRkxMRVZCUVVVc1NVRkJTU3hIUVVGSExFTkJRVU1zUjBGQlJ5eHhRa0ZCY1VJc1IwRkJSeXhKUVVGSkxFZEJRVWNzVFVGQlRTeEhRVUZITEU5QlFVODdhVU5CUTJwRkxFTkJRVU03TkVKQlEwZ3NRMEZCUXp0M1FrRkRSaXhEUVVGRE8yOUNRVU5HTEVOQlFVTTdaMEpCUTBZc1EwRkJRenRaUVVOR0xFTkJRVU03VVVGRFJpeERRVUZETzFGQlJVUXNUVUZCVFN4RFFVRkRMRVZCUVVVc1MwRkJTeXhGUVVGRkxGTkJRVk1zUlVGQlJTeEpRVUZKTEVWQlFVVXNVVUZCVVN4RlFVRkZMRU5CUVVNN1NVRkROME1zUTBGQlF6dEpRVVZFTEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVVN1VVRkZaQ3h0UkVGQmJVUTdVVUZEYmtRc1RVRkJUU3hGUVVGRkxFTkJRVU03VVVGRlZDdzRRMEZCT0VNN1VVRkRPVU1zV1VGQldTeEZRVUZGTEVWQlFVVTdVVUZEYUVJc1NVRkJTU3hGUVVGRkxFVkJRVVU3VVVGRlVpeFpRVUZaTEVWQlFVVTdXVUZEWWl4SFFVRkhMRVZCUVVVc1VVRkJVU3hEUVVGRExFbEJRVWs3V1VGRGJFSXNTVUZCU1N4RlFVRkZMRXRCUVVzN1dVRkRXQ3hQUVVGUExFVkJRVVVzWTBGQll5eERRVUZETEVsQlFVa3NRMEZCUlN4UlFVRlJMRU5CUVVNc1VVRkJVU3hEUVVGRk8xbEJRMnBFTEUxQlFVMHNSVUZCUlN4SlFVRkpPMWxCUTFvc1YwRkJWeXhGUVVGRkxFbEJRVWs3V1VGRGFrSXNTMEZCU3l4RlFVRkZMRWxCUVVrN1dVRkRXQ3hYUVVGWExFVkJRVVVzYTBSQlFXdEVPMWxCUlM5RU96czdPenM3T3pzN08yTkJWVVU3V1VGRlJpeFBRVUZQTEVWQlFVVTdaMEpCUTFJc1IwRkJSeXhGUVVGRkxGRkJRVkU3WjBKQlEySXNTVUZCU1N4RlFVRkZMRmxCUVZrN1owSkJRMnhDTEVsQlFVa3NSVUZCUlN4WFFVRlhPMmRDUVVOcVFpeEhRVUZITEVWQlFVVXNNa0pCUVRKQ08yZENRVU5vUXl4SlFVRkpMRVZCUVVVc2JVTkJRVzFETzJGQlEzcERPMWxCUlVRc1VVRkJVU3hGUVVGRk8yZENRVU5VTEVkQlFVY3NSVUZCUlN4VFFVRlRPMmRDUVVOa0xFbEJRVWtzUlVGQlJTeFJRVUZSTzJkQ1FVTmtMRWxCUVVrc1JVRkJSU3hWUVVGVk8yRkJRMmhDTzFsQlJVUXNZMEZCWXl4RlFVRkZPMmRDUVVObUxFZEJRVWNzUlVGQlJTeGhRVUZoTzJkQ1FVTnNRaXhKUVVGSkxFVkJRVVVzWTBGQll6dG5Ra0ZEY0VJc1NVRkJTU3hGUVVGRkxHTkJRV003WVVGRGNFSTdXVUZGUkN4clFrRkJhMEk3V1VGRGJFSXNiVVpCUVcxR08xbEJRMjVHTEZWQlFWVXNSVUZCUlR0blFrRkZXQ3d5UWtGQk1rSTdaMEpCUXpOQ0xGRkJRVkVzUlVGQlJTeE5RVUZOTzJkQ1FVVm9RaXd3UTBGQk1FTTdaMEpCUXpGRExGZEJRVmNzUlVGQlJTeEpRVUZKTzJkQ1FVVnFRaXh4UTBGQmNVTTdaMEpCUTNKRExGZEJRVmNzUlVGQlJTeEpRVUZKTEVOQlFVTXNTMEZCU3p0blFrRkZka0lzYjBKQlFXOUNPMmRDUVVOd1FpeFZRVUZWTEVWQlFVVXNUVUZCVFN4RFFVRkRMRkZCUVZFN1lVRkRNMEk3V1VGRlJDd3JRMEZCSzBNN1dVRkRMME1zT0VOQlFUaERPMWxCUXpsRExEUkRRVUUwUXp0WlFVTTFReXhwUTBGQmFVTTdXVUZEYWtNc1YwRkJWeXhGUVVGRk8yZENRVU5hTEVkQlFVY3NSVUZCUlN4SlFVRkpPMmRDUVVOVUxFOUJRVThzUlVGQlJTeEpRVUZKTzJGQlEySTdVMEZEUkR0UlFVVkVMSEZFUVVGeFJEdFJRVU55UkN3NFEwRkJPRU03VVVGRE9VTXNhMFJCUVd0RU8xRkJRMnhFTEZOQlFWTXNSVUZCUlN4VlFVRlZMRTFCUVUwc1JVRkJSU3hSUVVGUk8xbEJRM0JETEUxQlFVMHNRMEZCUXl4UlFVRlJPMmRDUVVWa0xEWkNRVUUyUWp0blFrRkROMElzVlVGQlZTeERRVUZGTEZWQlFWVXNRMEZCUlN4TlFVRk5MRVZCUVVVc1RVRkJUU3hEUVVGRExGbEJRVmtzUTBGQlJTeEZRVUZGTEZGQlFWRXNRMEZCUlR0blFrRkZha1VzZVVKQlFYbENPMmRDUVVONlFpeFZRVUZWTEVOQlFVVXNUVUZCVFN4RFFVRkRMRmxCUVZrc1JVRkJSU3hOUVVGTkxFTkJRVVVzUTBGQlF6dFJRVU0xUXl4RFFVRkRPMUZCUlVRc1lVRkJZU3hGUVVGRkxESkNRVUV5UWl4RFFVRkZMRlZCUVZVc1EwRkJSVHRSUVVONFJDeGhRVUZoTEVWQlFVVXNNa0pCUVRKQ0xFTkJRVVVzVlVGQlZTeERRVUZGTzFGQlJYaEVMR05CUVdNN1VVRkRaQ3hKUVVGSkxFVkJRVVVzVlVGQlZTeEhRVUZITEVWQlFVVXNUMEZCVHp0WlFVVXpRaXhyUkVGQmEwUTdXVUZEYkVRc1JVRkJSU3hEUVVGRExFTkJRVVVzVDBGQlR5eEhRVUZITEV0QlFVc3NVVUZCVXl4RFFVRkRMRU5CUVVNc1EwRkJRenRuUWtGREwwSXNUMEZCVHl4SFFVRkhMRWRCUVVjc1EwRkJRenRuUWtGRFpDeEhRVUZITEVkQlFVY3NVMEZCVXl4RFFVRkRPMWxCUTJwQ0xFTkJRVU03V1VGRlJDeG5RMEZCWjBNN1dVRkRhRU1zVDBGQlR5eEhRVUZITEU5QlFVOHNTVUZCU1N4RlFVRkZMRU5CUVVNN1dVRkZlRUlzU1VGQlNTeFRRVUZUTzFsQlJWb3NLMEpCUVN0Q08xbEJReTlDTEZGQlFWRTdXVUZGVWl4dFFrRkJiVUk3V1VGRGJrSXNjVUpCUVhGQ0xFVkJRM0pDTEdWQlFXVTdXVUZGWml4cFFrRkJhVUk3V1VGRGFrSXNXVUZCV1R0WlFVVmFMR3RDUVVGclFqdFpRVU5zUWl4VFFVRlRPMWxCUlZRc2JVVkJRVzFGTzFsQlEyNUZMRk5CUVZNN1dVRkZWQ3huUkVGQlowUTdXVUZEYUVRc1YwRkJWenRaUVVWWUxHZENRVUZuUWp0WlFVTm9RaXhEUVVGRE8xbEJSVVFzTWtKQlFUSkNPMWxCUXpOQ0xGRkJRVkU3V1VGRlVpeHJRMEZCYTBNN1dVRkRiRU1zUTBGQlF5eEhRVUZITEUxQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVVc1JVRkJSU3hGUVVGRkxFOUJRVThzUTBGQlJUdFpRVVZ1UXl4dlFrRkJiMEk3V1VGRGNFSXNaVUZCWlN4SFFVRkhMRU5CUVVNc1EwRkJReXhQUVVGUExFbEJRVWtzUTBGQlF6dFpRVVZvUXl4M1JrRkJkMFk3V1VGRGVFWXNhMEpCUVd0Q0xFZEJRVWNzUTBGQlF5eERRVUZETEU5QlFVODdaMEpCUXpkQ0xFTkJRVVVzWlVGQlpTeERRVUZETEZGQlFWRXNTVUZCU1N4bFFVRmxMRU5CUVVNc1RVRkJUU3hEUVVGRk8yZENRVU55UkN4TlFVRk5MRU5CUVVVc1pVRkJaU3hEUVVGRk8yZENRVU42UWl4TlFVRk5MRU5CUVVNc1MwRkJTenRaUVVWa0xGbEJRVms3V1VGRFdpeFJRVUZSTEVkQlFVY3NUVUZCVFN4RFFVRkRMRkZCUVZFc1JVRkJSU3hGUVVNMVFpeG5Ra0ZCWjBJc1IwRkJSeXhOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZGTEdGQlFXRXNRMEZCUlR0WlFVVndSQ3cyUWtGQk5rSTdXVUZETjBJc1ZVRkJWU3hIUVVGSExFTkJRVU1zUTBGQlF5eFZRVUZWTEVsQlFVa3NSVUZCUlR0WlFVVXZRaXh6UTBGQmMwTTdXVUZEZEVNc1kwRkJZeXhIUVVGSExFVkJRVVVzUlVGRGJrSXNiVUpCUVcxQ0xFZEJRVWNzUlVGQlJUdFpRVVY0UWl4M1FrRkJkMEk3V1VGRGVFSXNVVUZCVVN4SFFVRkhMRlZCUVZVN1dVRkZja0lzVjBGQlZ6dFpRVU5ZTEV0QlFVc3NSMEZCUnp0blFrRkRVQ3hWUVVGVkxFVkJRVVVzUTBGQlF6dG5Ra0ZGWWl4eFEwRkJjVU03WjBKQlEzSkRMR2xDUVVGcFFpeEZRVUZGTEZWQlFWVXNSMEZCUnp0dlFrRkRMMElzU1VGQlNTeExRVUZMTEVOQlFVTTdiMEpCUTFZc1JVRkJSU3hEUVVGRExFTkJRVVVzVTBGQlZTeERRVUZETEVOQlFVTXNRMEZCUXp0M1FrRkRha0lzUlVGQlJTeERRVUZETEVOQlFVVXNRMEZCUXl4bFFVRm5RaXhEUVVGRExFTkJRVU1zUTBGQlF6czBRa0ZEZUVJc1pVRkJaU3hIUVVGSExFVkJRVVVzUTBGQlF6czBRa0ZEY2tJc1QwRkJVU3hEUVVGRkxFdEJRVXNzUjBGQlJ5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkZMSEZDUVVGeFFpeERRVUZGTEVOQlFVVXNSVUZCUnl4RFFVRkRPMmREUVVNM1JDeGxRVUZsTEVOQlFVVXNTMEZCU3l4RFFVRkZMRU5CUVVNc1EwRkJSU3hEUVVGRExGZEJRVmNzUlVGQlJTeERRVUZGTEVkQlFVY3NTMEZCU3l4RFFVRkZMRU5CUVVNc1EwRkJSU3hEUVVGRE96UkNRVU14UkN4RFFVRkRPM2RDUVVOR0xFTkJRVU03ZDBKQlEwUXNTMEZCU3l4SFFVRkhMR1ZCUVdVc1EwRkJSU3hIUVVGSExFTkJRVU1zVjBGQlZ5eEZRVUZGTEVOQlFVVXNRMEZCUXp0dlFrRkRPVU1zUTBGQlF6dHZRa0ZEUkN4TlFVRk5MRU5CUVVNc1MwRkJTeXhKUVVGSkxFbEJRVWtzUjBGQlJ5eEpRVUZKTEVkQlFVY3NTMEZCU3l4RFFVRkRPMmRDUVVOeVF5eERRVUZETzJkQ1FVVkVMR0ZCUVdFN1owSkJRMklzY1VKQlFYRkNMRVZCUVVVN2IwSkJRM1JDTEUxQlFVMHNRMEZCUXl4VFFVRlRMRWRCUVVjc2NVSkJRWEZDTEVkQlFVY3NTVUZCU1N4RFFVRkRPMmRDUVVOcVJDeERRVUZETzJkQ1FVVkVMRzlDUVVGdlFqdG5Ra0ZEY0VJc1owSkJRV2RDTEVWQlFVVXNWVUZCVlN4SlFVRkpMRVZCUVVVc1MwRkJTenR2UWtGRGRFTXNSVUZCUlN4RFFVRkRMRU5CUVVVc1UwRkJVeXhKUVVGSkxFbEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTTdkMEpCUTNwQ0xFbEJRVWtzUjBGQlJ5eHRRa0ZCYlVJc1EwRkJSU3hKUVVGSkxFTkJRVU1zVjBGQlZ5eEZRVUZGTEVOQlFVVTdORUpCUXk5RExHMUNRVUZ0UWl4RFFVRkZMRWxCUVVrc1EwRkJReXhYUVVGWExFVkJRVVVzUTBGQlJTeEpRVUZKTEVsQlFVa3NRMEZCUXp0M1FrRkRia1FzWTBGQll5eERRVUZGTEVsQlFVa3NRMEZCUlN4SFFVRkhMRXRCUVVzc1EwRkJRenR2UWtGRGFFTXNRMEZCUXp0dlFrRkRSQ3hOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETzJkQ1FVTmlMRU5CUVVNN1owSkJSVVFzZVVOQlFYbERPMmRDUVVONlF5eG5Ra0ZCWjBJc1JVRkJSU3hWUVVGVkxFbEJRVWs3YjBKQlF5OUNMRVZCUVVVc1EwRkJReXhEUVVGRkxGTkJRVk1zU1VGQlNTeEpRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRPM2RDUVVONlFpeERRVUZETEVOQlFVTXNVVUZCVVN4SFFVRkhMRWxCUVVrc1EwRkJRenR2UWtGRGJrSXNRMEZCUXp0dlFrRkRSQ3hOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETzJkQ1FVTmlMRU5CUVVNN1owSkJSVVFzTmtKQlFUWkNPMmRDUVVNM1FpeFZRVUZWTEVWQlFVVXNWVUZCVlN4SFFVRkhPMjlDUVVONFFpeEpRVUZKTEVsQlFVa3NRMEZCUXp0dlFrRkRWQ3hGUVVGRkxFTkJRVU1zUTBGQlJTeEhRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRPM2RDUVVOWUxFVkJRVVVzUTBGQlF5eERRVUZGTEZOQlFWVXNRMEZCUXl4RFFVRkRMRU5CUVVNN05FSkJSV3BDTEc5RFFVRnZRenMwUWtGRGNFTXNTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJSU3hIUVVGSExFTkJRVVVzUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUlN4RFFVRkZMRU5CUVVNN2QwSkJRM0pETEVOQlFVTTdkMEpCUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03TkVKQlJWQXNPRVJCUVRoRU96UkNRVU01UkN4SFFVRkhMRU5CUVVNc1EwRkJSU3hKUVVGSkxFbEJRVWtzUjBGQlNTeERRVUZETEVOQlFVTXNRMEZCUXp0blEwRkRjRUlzVlVGQlZTeERRVUZGTEVsQlFVa3NRMEZCUlN4SFFVRkhMRU5CUVVVc1ZVRkJWU3hEUVVGRkxFbEJRVWtzUTBGQlJTeEZRVUZGTEVkQlFVY3NRMEZCUlN4SlFVRkpMRU5CUVVVc1EwRkJSU3hEUVVGRE96UkNRVU14UkN4RFFVRkRPM2RDUVVOR0xFTkJRVU03YjBKQlEwWXNRMEZCUXp0dlFrRkRSQ3hOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETzJkQ1FVTmlMRU5CUVVNN1owSkJSVVFzY1VKQlFYRkNPMmRDUVVOeVFpeExRVUZMTEVWQlFVVXNWVUZCVlN4VlFVRlZPMjlDUVVNeFFpeEpRVUZKTEZOQlFWTXNSMEZCUnl4VlFVRlZMRWxCUVVrc1VVRkJVU3hEUVVGRE8yOUNRVU4yUXl4RlFVRkZMRU5CUVVNc1EwRkJSU3hUUVVGVkxFTkJRVU1zUTBGQlF5eERRVUZETzNkQ1FVTnFRaXhUUVVGVExFTkJRVU1zUzBGQlN5eERRVUZGTEZOQlFWTXNRMEZCUlN4RFFVRkRPMjlDUVVNNVFpeERRVUZETzI5Q1FVTkVMRWxCUVVrc1EwRkJSU3hEUVVGRExFVkJRVVVzVTBGQlV5eERRVUZGTEVOQlFVTTdiMEpCUTNKQ0xFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTTdaMEpCUTJJc1EwRkJRenRoUVVORUxFTkJRVU03V1VGRlNDeHRRa0ZCYlVJN1dVRkRia0lzVVVGQlVTeERRVUZETEU5QlFVOHNRMEZCUlN4TFFVRkxMRU5CUVVVc1EwRkJRenRaUVVVeFFpdzBSRUZCTkVRN1dVRkROVVFzYlVaQlFXMUdPMWxCUTI1R0xEWkRRVUUyUXp0WlFVTTNReXhEUVVGRExFTkJRVU1zUjBGQlJ5eEhRVUZITEVOQlFVVXNRMEZCUlN4SFFVRkhMRWxCUVVrc1EwRkJReXhEUVVGRExFZEJRVWNzU1VGQlNTeFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkZMRWRCUVVjc1JVRkJSU3hEUVVGRk8ybENRVU5vUkN4UFFVRlBMRU5CUVVVc1UwRkJVeXhGUVVGRkxGRkJRVkVzUTBGQlF5eFJRVUZSTEVkQlFVY3NTVUZCU1N4RFFVRkZMRU5CUVVNN1dVRkZha1FzYlVSQlFXMUVPMWxCUTI1RUxFTkJRVU1zUTBGQlF5eEpRVUZKTEVkQlFVY3NUMEZCVHl4RFFVRkRMRTFCUVUwc1NVRkJTU3hQUVVGUExFTkJRVU1zU1VGQlNTeEpRVUZKTEVOQlFVTXNRMEZCUXl4TlFVRk5MRWxCUVVrc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF6dFpRVVU1UkN4NVFrRkJlVUk3V1VGRGVrSXNRMEZCUXl4RFFVRkRMRk5CUVZNc1IwRkJSeXhEUVVGRkxFTkJRVU1zUTBGQlF5eFJRVUZSTEVsQlFVa3NSMEZCUnl4RFFVRkZMRU5CUVVNc1YwRkJWeXhGUVVGRkxFTkJRVU1zUzBGQlN5eERRVUZGTEdGQlFXRXNRMEZCUlN4SlFVRkpMRU5CUVVVc1JVRkJSU3hEUVVGRkxFTkJRVU03V1VGRmJrWXNkVVpCUVhWR08xbEJRM1pHTEVWQlFVVXNRMEZCUXl4RFFVRkZMRU5CUVVNc1EwRkJReXhYUVVGWExFbEJRVWtzU1VGQlN5eERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkROMElzVTBGQlV5eEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVVVc1IwRkJSeXhEUVVGRkxFTkJRVU03WjBKQlJURkRMSEZEUVVGeFF6dG5Ra0ZEY2tNc01FVkJRVEJGTzJkQ1FVTXhSU3dyUWtGQkswSTdaMEpCUXk5Q0xFbEJRVWtzUTBGQlF6dHZRa0ZEU2l4VFFVRlRMRU5CUVVNc1NVRkJTU3hIUVVGSExFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTTdiMEpCUlhaQ0xEUkNRVUUwUWp0dlFrRkROVUlzYjBWQlFXOUZPMjlDUVVOd1JTeFRRVUZUTEVOQlFVTXNTVUZCU1N4SFFVRkhMRk5CUVZNc1EwRkJReXhKUVVGSkxFTkJRVU03YjBKQlEyaERMRU5CUVVNc1EwRkJReXhYUVVGWExFZEJRVWNzV1VGQldTeERRVUZETEZGQlFWRXNSMEZCUnl4SlFVRkpMRWRCUVVjc1dVRkJXU3hEUVVGRExFbEJRVWs3ZDBKQlF5OUVMRk5CUVZNc1EwRkJReXhSUVVGUkxFZEJRVWNzU1VGQlNTeEhRVUZITEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNN1owSkJRemRETEVOQlFVTTdaMEpCUVVNc1MwRkJTeXhEUVVGRExFTkJRVVVzUTBGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0dlFrRkZaQ3hyUlVGQmEwVTdiMEpCUTJ4RkxIVkVRVUYxUkR0dlFrRkRka1FzUTBGQlF5eERRVUZETEZkQlFWY3NSMEZCUnl4SlFVRkpMRU5CUVVNN1owSkJRM1JDTEVOQlFVTTdXVUZEUml4RFFVRkRPMWxCUlVRc2RVTkJRWFZETzFsQlEzWkRMRVZCUVVVc1EwRkJReXhEUVVGRkxFTkJRVU1zUTBGQlF5eEpRVUZKTEVsQlFVa3NRMEZCUXl4RFFVRkRMRmRCUVZjc1NVRkJTU3hQUVVGUExFTkJRVU1zUTBGQlF5eEpRVUZKTEV0QlFVc3NVVUZCVXl4RFFVRkRMRU5CUVVNc1EwRkJRenRuUWtGRE4wUXNRMEZCUXl4RFFVRkRMRWxCUVVrc1IwRkJSeXhOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZGTEVOQlFVTXNRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJReXhEUVVGRExGZEJRVmNzUTBGQlJTeERRVUZETzFsQlEyaEVMRU5CUVVNN1dVRkZSQ3h0UWtGQmJVSTdXVUZEYmtJc05rSkJRVFpDTEVOQlFVVXNWVUZCVlN4RlFVRkZMRU5CUVVNc1JVRkJSU3hQUVVGUExFVkJRVVVzUzBGQlN5eERRVUZGTEVOQlFVTTdXVUZGTDBRc2QwUkJRWGRFTzFsQlEzaEVMRVZCUVVVc1EwRkJReXhEUVVGRkxGTkJRVlVzUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUTJwQ0xFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTTdXVUZEWkN4RFFVRkRPMWxCUlVRc2EwUkJRV3RFTzFsQlEyeEVMRzFHUVVGdFJqdFpRVU51Uml4WFFVRlhMRWRCUVVjc1RVRkJUU3hEUVVGRExFdEJRVXNzU1VGQlNTeERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRPMWxCUlhaRExHdERRVUZyUXp0WlFVTnNReXhGUVVGRkxFTkJRVU1zUTBGQlJTeFhRVUZYTEVsQlFVa3NUVUZCVFN4RFFVRkRMRTFCUVUwc1JVRkJSU3hMUVVGTExFTkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUXpWRExFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkZMRmRCUVZjc1EwRkJSU3hEUVVGRE8xbEJRM0pETEVOQlFVTTdXVUZGUkN4eFFrRkJjVUk3V1VGRGNrSXNRMEZCUXl4RFFVRkRMRWxCUVVrc1IwRkJSeXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEZkQlFWY3NSVUZCUlN4RFFVRkRPMWxCUlRsQ0xHMURRVUZ0UXp0WlFVTnVReXhEUVVGRExFTkJRVU1zVlVGQlZTeEhRVUZITEVOQlFVTXNWVUZCVlN4RFFVRkRMRWxCUVVrc1EwRkJSU3hEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZGTEVOQlFVTTdXVUZGTVVNc0swUkJRU3RFTzFsQlF5OUVMSFZEUVVGMVF6dFpRVU4yUXl3eVEwRkJNa003V1VGRE0wTXNVVUZCVVN4SFFVRkhMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zVDBGQlR5eERRVUZGTEV0QlFVc3NSVUZCUlN4RlFVRkZMRU5CUVVVc1EwRkJRenRaUVVWMFF5eHhSRUZCY1VRN1dVRkRja1FzUlVGQlJTeERRVUZETEVOQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1ZVRkJWeXhEUVVGRExFTkJRVU1zUTBGQlF6dG5Ra0ZGY2tJc01FTkJRVEJETzJkQ1FVTXhReXhSUVVGUkxFZEJRVWNzUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4TFFVRkxMRU5CUVVVc1VVRkJVU3hEUVVGRExFMUJRVTBzUTBGQlJTeERRVUZETzJkQ1FVVXhReXd5UTBGQk1rTTdaMEpCUXpORExFVkJRVVVzUTBGQlF5eERRVUZGTEVOQlFVTXNRMEZCUXl4SlFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRE8yOUNRVU5rTEZGQlFWRXNTVUZCU1N4RFFVRkZMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVVVzVVVGQlVTeERRVUZGTEVkQlFVY3NSMEZCUnl4SFFVRkhMRWRCUVVjc1EwRkJSU3hIUVVGSExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTTdiMEpCUlRkRUxHZEZRVUZuUlR0dlFrRkRhRVVzVDBGQlR5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRPMmRDUVVObUxFTkJRVU03WjBKQlJVUXNNa05CUVRKRE8yZENRVU16UXl4RlFVRkZMRU5CUVVNc1EwRkJSU3hEUVVGRExFTkJRVU1zUzBGQlN5eExRVUZMTEV0QlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNN2IwSkJRM3BDTEZGQlFWRXNSMEZCUnl4UlFVRlJMRU5CUVVNc1QwRkJUeXhEUVVGRkxGVkJRVlVzUlVGQlJTeEpRVUZKTEVOQlFVVXNRMEZCUXp0dlFrRkRhRVFzVVVGQlVTeEhRVUZITEVOQlFVVXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJSU3hSUVVGUkxFTkJRVVVzUjBGQlJ5eEhRVUZITEVkQlFVY3NSMEZCUnl4RFFVRkZMRWRCUVVjc1NVRkJTU3hIUVVGSExFTkJRVVVzUzBGQlN5eEZRVUZGTEVOQlFVVXNSMEZCUnl4UlFVRlJMRU5CUVVNN1owSkJRM0JHTEVOQlFVTTdaMEpCUlVRc2MwVkJRWE5GTzJkQ1FVTjBSU3hEUVVGRExFTkJRVU1zUjBGQlJ5eEhRVUZITEZGQlFWRXNSMEZCUnl4UlFVRlJMRU5CUVVNN1owSkJSVGRDTEhGRlFVRnhSVHRaUVVOeVJTeERRVUZETzFsQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRkxFTkJRVU1zUTBGQlF5eEpRVUZKTEVsQlFVa3NRMEZCUXl4RFFVRkRMRmRCUVZjN1owSkJRMnhETEVOQlFVVXNRMEZCUXl4RFFVRkRMRmRCUVZjc1NVRkJTU3hGUVVGRkxFTkJRVVVzUTBGQlF5eFBRVUZQTEVOQlFVVXNiVU5CUVcxRExFTkJRVVVzUzBGQlN5eERRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVOb1JpeERRVUZETEVOQlFVTXNTVUZCU1N4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZGTEVkQlFVY3NSVUZCUlN4SFFVRkhMRU5CUVVVc1EwRkJRenRaUVVOeVF5eERRVUZETzFsQlJVUXNaMFpCUVdkR08xbEJRMmhHTEVWQlFVVXNRMEZCUXl4RFFVRkZMRU5CUVVNc1EwRkJReXhWUVVGWExFTkJRVU1zUTBGQlF5eERRVUZETzJkQ1FVTndRaXhGUVVGRkxFTkJRVU1zUTBGQlJTeE5RVUZOTEVOQlFVTXNXVUZCV1N4RFFVRkZMRkZCUVZFc1EwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF6dHZRa0ZEZGtNc1MwRkJTeXhEUVVGRExHZENRVUZuUWl4RFFVRkZMRzFDUVVGdFFpeEZRVUZGTEUxQlFVMHNRMEZCUXl4WlFVRlpMRU5CUVVVc1VVRkJVU3hEUVVGRkxFTkJRVVVzUTBGQlF6dG5Ra0ZEYUVZc1EwRkJRenRuUWtGRFJDeEZRVUZGTEVOQlFVTXNRMEZCUlN4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRkxGRkJRVkVzUTBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXp0dlFrRkRMMElzUzBGQlN5eERRVUZETEdkQ1FVRm5RaXhEUVVGRkxHVkJRV1VzUlVGQlJTeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkZMRkZCUVZFc1EwRkJSU3hEUVVGRkxFTkJRVU03WjBKQlEzQkZMRU5CUVVNN1dVRkRSaXhEUVVGRE8xbEJSVVFzWjBSQlFXZEVPMWxCUTJoRUxFVkJRVVVzUTBGQlF5eERRVUZGTEVOQlFVTXNRMEZCUXl4SlFVRkpMRWxCUVVrc1EwRkJReXhEUVVGRExGVkJRVlVzU1VGQlNTeERRVUZETEVOQlFVTXNWMEZCVnl4TFFVRkxMRXRCUVVzc1NVRkJTU3hQUVVGUExFTkJRVU1zVjBGQldTeERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkRhRVlzUzBGQlN5eERRVUZETEdkQ1FVRm5RaXhEUVVGRkxHTkJRV01zUlVGQlJTeERRVUZETEVOQlFVTXNWMEZCVnl4RFFVRkZMRU5CUVVNN1dVRkRla1FzUTBGQlF6dFpRVVZFTEcxRlFVRnRSVHRaUVVOdVJTeExRVUZMTEVOQlFVTXNaMEpCUVdkQ0xFTkJRM0pDTEZGQlFWRXNSVUZEVWl4RFFVRkRMRU5CUVVNc1UwRkJVeXhEUVVGRkxFTkJRVU1zUTBGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVVc1EwRkJReXhEUVVGRExGTkJRVk1zUTBGQlJTeERRVUZETEVOQlFVVXNRMEZCUlR0blFrRkRhRVFzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUlN4RFFVRkRMRU5CUVVNc1UwRkJVeXhEUVVGRkxFTkJRVU1zUTBGQlJTeERRVUZGTzI5Q1FVTTFRaXhEUVVGRkxFTkJRVU1zUTBGQlF5eFRRVUZUTEVOQlFVVXNRMEZCUXl4RFFVRkZMRXRCUVVzc1IwRkJSeXhIUVVGSExFbEJRVWtzUjBGQlJ5eFJRVUZSTEVkQlFVY3NWVUZCVlN4SFFVRkhMRVZCUVVVc1EwRkJSVHRuUWtGRGFrVXNRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJSU3hIUVVGSExFTkJRVVVzUTBGRGFrSXNRMEZCUXp0WlFVVkdMREpDUVVFeVFqdFpRVU16UWl4SFFVRkhMRU5CUVVNc1EwRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEU5QlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRM1pDTEV0QlFVc3NRMEZCUXl4blFrRkJaMElzUTBGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJSU3hEUVVGRExFTkJRVVVzUTBGQlJTeERRVUZETzFsQlF6ZERMRU5CUVVNN1dVRkZSQ3hwUkVGQmFVUTdXVUZEYWtRc1JVRkJSU3hEUVVGRExFTkJRVVVzUTBGQlF5eERRVUZETEZWQlFWVTdaMEpCUTJoQ0xFTkJRVVVzUTBGQlF5eERRVUZETEZWQlFWVXNRMEZCUXl4SlFVRkpMRU5CUVVVc1pVRkJaU3hGUVVGRkxFdEJRVXNzUlVGQlJTeERRVUZETEVOQlFVVXNTMEZCU3l4TFFVRkxMRWxCUVVrc1UwRkJVeXhEUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETzJkQ1FVVTNSU3gxUTBGQmRVTTdaMEpCUTNaRExFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4RlFVRkZMRU5CUVVNN1dVRkRkRUlzUTBGQlF6dFpRVVZFTEhWRFFVRjFRenRaUVVOMlF5eFJRVUZSTEVkQlFVY3NUMEZCVHl4RFFVRkRPMWxCUlc1Q0xHbERRVUZwUXp0WlFVTnFReXhuUWtGQlowSXNRMEZCUXl4SFFVRkhMRU5CUVVVc1EwRkJReXhEUVVGRExGRkJRVkVzUTBGQlJTeERRVUZETzFsQlEyNURMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVVVzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUlN4RFFVRkRPMWxCUTNoQ0xFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVVXNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJSU3hEUVVGRE8xbEJSWFJDTEdkQ1FVRm5RanRaUVVOb1FpeFRRVUZUTEVkQlFVY3NOa0pCUVRaQ0xFTkJRVVVzVlVGQlZTeEZRVUZGTEVOQlFVTXNSVUZCUlN4UFFVRlBMRVZCUVVVc1MwRkJTeXhEUVVGRkxFTkJRVU03V1VGRk0wVXNhVU5CUVdsRE8xbEJRMnBETEVWQlFVVXNRMEZCUXl4RFFVRkZMRU5CUVVNc1UwRkJWU3hEUVVGRExFTkJRVU1zUTBGQlF6dG5Ra0ZEYkVJc1NVRkJTU3hEUVVGRkxFTkJRVU1zUTBGQlF5eEZRVUZGTEdOQlFXTXNRMEZCUlN4RFFVRkRPMWxCUXpWQ0xFTkJRVU03V1VGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0blFrRkRVQ3hMUVVGTExFTkJRVU1zVlVGQlZTeEhRVUZITEVOQlFVTXNRMEZCUXp0blFrRkZja0lzYjBKQlFXOUNPMmRDUVVOd1FpeEZRVUZGTEVOQlFVTXNRMEZCUlN4WFFVRlpMRU5CUVVNc1EwRkJReXhEUVVGRE8yOUNRVU51UWl4clFrRkJhMElzUTBGQlF5eFBRVUZQTEVOQlFVVXNWVUZCVlN4RlFVRkZMRU5CUVVVc1MwRkJTeXhGUVVGRkxFTkJRVU1zUTBGQlJTeERRVUZGTEVOQlFVTTdaMEpCUTNoRUxFTkJRVU03WjBKQlJVUXNjVVJCUVhGRU8yZENRVU55UkN4RlFVRkZMRU5CUVVNc1EwRkJSU3hUUVVGVkxFTkJRVU1zUTBGQlF5eERRVUZETzI5Q1FVTnFRaXhOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETzJkQ1FVTmtMRU5CUVVNN1owSkJSVVFzVlVGQlZUdG5Ra0ZEVml4RlFVRkZMRU5CUVVNc1EwRkJSU3hEUVVGRExFTkJRVU1zUzBGQlN5eEpRVUZKTEVOQlFVTXNRMEZCUXl4UFFVRlBMRWRCUVVjc1EwRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dHZRa0ZEYUVNc1dVRkJXU3hIUVVGSExFMUJRVTBzUTBGQlF5eFZRVUZWTEVOQlFVVTdkMEpCUTJwRExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVVXNVMEZCVXl4RFFVRkZMRU5CUVVNN2IwSkJRekZDTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRkxFTkJRVU03WjBKQlEyaENMRU5CUVVNN1owSkJSVVFzU1VGQlNTeERRVUZETzI5Q1FVTktMRk5CUVZNc1IwRkJSeXhMUVVGTExFTkJRVU03YjBKQlEyeENMRk5CUVZNc1EwRkJReXhKUVVGSkxFTkJRVVVzWTBGQll5eEZRVUZGTEVsQlFVa3NRMEZCUlN4RFFVRkRPMmRDUVVONFF5eERRVUZETzJkQ1FVRkRMRXRCUVVzc1EwRkJReXhEUVVGRkxFTkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdiMEpCUldRc2NVTkJRWEZETzI5Q1FVTnlReXhGUVVGRkxFTkJRVU1zUTBGQlJTeFRRVUZWTEVOQlFVTXNRMEZCUXl4RFFVRkRPM2RDUVVOcVFpeE5RVUZOTEVOQlFVTXNRMEZCUXp0dlFrRkRWQ3hEUVVGRE8yOUNRVVZFTERoQ1FVRTRRanR2UWtGRE9VSXNTVUZCU1N4RFFVRkZMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlJTeERRVUZETzJkQ1FVTm1MRU5CUVVNN1dVRkRSaXhEUVVGRE8xbEJSVVFzZFVOQlFYVkRPMWxCUTNaRExHTkJRV1VzVFVGQlRTeEZRVUZGTEdkQ1FVRm5RaXhGUVVGRkxGTkJRVk1zUlVGQlJTeFBRVUZQTzJkQ1FVTXhSQ3hKUVVGSkxGTkJRVk1zUlVGQlJTeFBRVUZQTEVWQlFVVXNTMEZCU3l4RlFVRkZMRkZCUVZFc1JVRkJSU3hSUVVGUkxFVkJRMmhFTEZWQlFWVXNSMEZCUnl4blFrRkJaMElzUTBGQlF6dG5Ra0ZGTDBJc05FSkJRVFJDTzJkQ1FVTTFRaXhGUVVGRkxFTkJRVU1zUTBGQlJTeFRRVUZWTEVOQlFVTXNRMEZCUXl4RFFVRkRPMjlDUVVOcVFpeE5RVUZOTEVOQlFVTTdaMEpCUTFJc1EwRkJRenRuUWtGRlJDeFRRVUZUTEVkQlFVY3NTVUZCU1N4RFFVRkRPMmRDUVVWcVFpdzJRa0ZCTmtJN1owSkJRemRDTEVWQlFVVXNRMEZCUXl4RFFVRkZMRmxCUVdFc1EwRkJReXhEUVVGRExFTkJRVU03YjBKQlEzQkNMRTFCUVUwc1EwRkJReXhaUVVGWkxFTkJRVVVzV1VGQldTeERRVUZGTEVOQlFVTTdaMEpCUTNKRExFTkJRVU03WjBKQlJVUXNjVVJCUVhGRU8yZENRVU55UkN4eFJFRkJjVVE3WjBKQlEzSkVMRk5CUVZNc1IwRkJSeXhUUVVGVExFTkJRVU03WjBKQlJYUkNMSGxDUVVGNVFqdG5Ra0ZEZWtJc2NVSkJRWEZDTEVkQlFVY3NUMEZCVHl4SlFVRkpMRVZCUVVVc1EwRkJRenRuUWtGRmRFTXNhVUpCUVdsQ08yZENRVU5xUWl4TFFVRkxMRU5CUVVNc1ZVRkJWU3hIUVVGSExFMUJRVTBzUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRuUWtGRmRFTXNNRUpCUVRCQ08yZENRVU14UWl4VFFVRlRMRWRCUVVjc1RVRkJUU3hKUVVGSkxFZEJRVWNzU1VGQlNTeE5RVUZOTEVkQlFVY3NSMEZCUnl4SlFVRkpMRTFCUVUwc1MwRkJTeXhIUVVGSExFTkJRVU03WjBKQlJUVkVMRzlDUVVGdlFqdG5Ra0ZEY0VJc1JVRkJSU3hEUVVGRExFTkJRVVVzVTBGQlZTeERRVUZETEVOQlFVTXNRMEZCUXp0dlFrRkRha0lzVVVGQlVTeEhRVUZITEcxQ1FVRnRRaXhEUVVGRkxFTkJRVU1zUlVGQlJTeExRVUZMTEVWQlFVVXNVMEZCVXl4RFFVRkZMRU5CUVVNN1owSkJRM1pFTEVOQlFVTTdaMEpCUlVRc2MwVkJRWE5GTzJkQ1FVTjBSU3hSUVVGUkxFZEJRVWNzVjBGQlZ5eERRVUZGTEVOQlFVTXNSVUZCUlN4UlFVRlJMRVZCUVVVc1MwRkJTeXhGUVVGRkxGTkJRVk1zUTBGQlJTeERRVUZETzJkQ1FVVjRSQ3h6UTBGQmMwTTdaMEpCUTNSRExFVkJRVVVzUTBGQlF5eERRVUZGTEZOQlFWVXNRMEZCUXl4RFFVRkRMRU5CUVVNN2IwSkJSV3BDTEdkR1FVRm5SanR2UWtGRGFFWXNSVUZCUlN4RFFVRkRMRU5CUVVVc1EwRkJReXhEUVVGRExGVkJRVmNzUTBGQlF5eERRVUZETEVOQlFVTTdkMEpCUTNCQ0xGRkJRVkVzUjBGQlJ5eExRVUZMTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVVVzWlVGQlpTeERRVUZGTEVOQlFVTTdkMEpCUTNSRUxFVkJRVVVzUTBGQlF5eERRVUZGTEZGQlFWTXNRMEZCUXl4RFFVRkRMRU5CUVVNN05FSkJRMmhDTEUxQlFVMHNRMEZCUXl4WlFVRlpMRU5CUVVVc1VVRkJVU3hEUVVGRkxFZEJRVWNzVVVGQlVTeERRVUZETzNkQ1FVTTFReXhEUVVGRE8zZENRVU5FTEZGQlFWRXNSMEZCUnl4TFFVRkxMRU5CUVVNc2FVSkJRV2xDTEVOQlFVVXNUVUZCVFN4RFFVRkZMRU5CUVVNN2QwSkJRemRETEVWQlFVVXNRMEZCUXl4RFFVRkZMRkZCUVZNc1EwRkJReXhEUVVGRExFTkJRVU03TkVKQlEyaENMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVVVzVVVGQlVTeERRVUZGTEVkQlFVY3NVVUZCVVN4RFFVRkRPM2RDUVVOd1F5eERRVUZETzI5Q1FVTkdMRU5CUVVNN2IwSkJSVVFzWjBKQlFXZENPMjlDUVVOb1FpeEZRVUZGTEVOQlFVTXNRMEZCUlN4TlFVRk5MRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zUTBGQlF5eEpRVUZKTEV0QlFVc3NUVUZCVHl4RFFVRkRMRU5CUVVNc1EwRkJRenQzUWtGRE0wTXNWVUZCVlN4SFFVRkhMRmRCUVZjc1EwRkJRenQzUWtGRk1VSXNhMEpCUVd0Q08yOUNRVU5zUWl4RFFVRkRPMjlDUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUlN4TlFVRk5MRXRCUVVzc1IwRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF6dDNRa0ZETjBJc1ZVRkJWU3hIUVVGSExHRkJRV0VzUTBGQlF6dDNRa0ZGTlVJc2IwTkJRVzlETzI5Q1FVTndReXhEUVVGRE8yOUNRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPM2RDUVVOUUxGVkJRVlVzUjBGQlJ5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRPM2RDUVVNMVFpeFBRVUZQTEVkQlFVY3NVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJRenQzUWtGRGVFSXNTMEZCU3l4SFFVRkhMRkZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU03ZDBKQlEzWkNMRk5CUVZNc1IwRkJSeXhEUVVGRExFdEJRVXNzUTBGQlF6dHZRa0ZEY0VJc1EwRkJRenRuUWtGRFJpeERRVUZETzJkQ1FVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8yOUNRVVZRTERaRVFVRTJSRHR2UWtGRE4wUXNTMEZCU3l4SFFVRkhMRlZCUVZVc1EwRkJRenR2UWtGRGJrSXNSVUZCUlN4RFFVRkRMRU5CUVVVc1RVRkJUU3hKUVVGSkxFTkJRVU1zVlVGQlZ5eERRVUZETEVOQlFVTXNRMEZCUXp0M1FrRkROMElzVlVGQlZTeEhRVUZITEU5QlFVOHNRMEZCUXp0M1FrRkRja0lzUlVGQlJTeERRVUZETEVOQlFVVXNUVUZCVFN4SFFVRkhMRU5CUVVVc1EwRkJReXhEUVVGRExFTkJRVU03TkVKQlEyeENMRTFCUVUwc1IwRkJSeXhEUVVGRExFTkJRVU03ZDBKQlExb3NRMEZCUXp0dlFrRkRSaXhEUVVGRE8yZENRVU5HTEVOQlFVTTdaMEpCUlVRc2JVTkJRVzFETzJkQ1FVTnVReXhMUVVGTExFTkJRVU1zVFVGQlRTeEhRVUZITEUxQlFVMHNRMEZCUXp0blFrRkRkRUlzUzBGQlN5eERRVUZETEZWQlFWVXNSMEZCUnl4RFFVRkZMR2RDUVVGblFpeEpRVUZKTEZWQlFWVXNRMEZCUlN4SFFVRkhMRVZCUVVVc1EwRkJRenRuUWtGRk0wUXNaMEpCUVdkQ08yZENRVU5vUWl4RlFVRkZMRU5CUVVNc1EwRkJSU3hUUVVGVkxFTkJRVU1zUTBGQlF5eERRVUZETzI5Q1FVTnFRaXhSUVVGUkxFTkJRVU1zVjBGQlZ5eERRVUZGTEdWQlFXVXNSVUZCUlN4RFFVRkZMRTlCUVU4c1JVRkJSU3hWUVVGVkxFVkJRVVVzUzBGQlN5eERRVUZGTEVOQlFVVXNRMEZCUXp0blFrRkRla1VzUTBGQlF6dG5Ra0ZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenR2UWtGRFVDeFJRVUZSTEVOQlFVTXNWVUZCVlN4RFFVRkZMR1ZCUVdVc1JVRkJSU3hEUVVGRkxFdEJRVXNzUlVGQlJTeFZRVUZWTEVWQlFVVXNTMEZCU3l4RFFVRkZMRU5CUVVVc1EwRkJRenRuUWtGRGRFVXNRMEZCUXp0blFrRkZSQ3cyUWtGQk5rSTdaMEpCUXpkQ0xFdEJRVXNzUTBGQlF5eFZRVUZWTEVOQlFVVXNWVUZCVlN4RFFVRkZMRU5CUVVNN1owSkJReTlDTEZWQlFWVXNSMEZCUnl4VFFVRlRMRU5CUVVNN1owSkJSWFpDTEVWQlFVVXNRMEZCUXl4RFFVRkZMRmRCUVZrc1EwRkJReXhEUVVGRExFTkJRVU03YjBKQlEyNUNMR3RDUVVGclFpeERRVUZETEU5QlFVOHNRMEZCUlN4VFFVRlRMRWRCUVVjc1lVRkJZU3hIUVVGSExGZEJRVmNzUlVGRGJFVXNRMEZCUlN4TFFVRkxMRVZCUVVVc1EwRkJReXhGUVVGRkxGTkJRVk1zUjBGQlJ5eFBRVUZQTEVkQlFVY3NTMEZCU3l4RFFVRkZMRU5CUVVVc1EwRkJRenRuUWtGRE9VTXNRMEZCUXp0blFrRkZSQ3hYUVVGWE8yZENRVU5ZTEdkQ1FVRm5RaXhEUVVGRExGRkJRVkVzUTBGQlJTeGxRVUZsTEVWQlFVVXNRMEZCUlN4TFFVRkxMRVZCUVVVc1ZVRkJWU3hEUVVGRkxFTkJRVVVzUTBGQlF6dG5Ra0ZGY0VVc1JVRkJSU3hEUVVGRExFTkJRVVVzVjBGQldTeERRVUZETEVOQlFVTXNRMEZCUXp0dlFrRkRia0lzYTBKQlFXdENMRU5CUVVNc1QwRkJUeXhEUVVGRkxHTkJRV01zUlVGQlJTeERRVUZGTEV0QlFVc3NSVUZCUlN4RFFVRkRMRU5CUVVVc1EwRkJSU3hEUVVGRE8yOUNRVVV6UkN4cFEwRkJhVU03YjBKQlEycERMRVZCUVVVc1EwRkJReXhEUVVGRkxFTkJRVU1zUTBGQlJTeEZRVUZGTEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVjc1EwRkJReXhEUVVGRExFTkJRVU03ZDBKQlF6VkNMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZGTEZWQlFWVXNRMEZCUlN4RFFVRkRPMjlDUVVOd1F5eERRVUZETzJkQ1FVTkdMRU5CUVVNN1dVRkRSaXhEUVVGRE8xbEJSVVFzVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXp0UlFVTmtMRU5CUVVNN1VVRkZSQ3hQUVVGUExFVkJRVVVzVlVGQlZTeEhRVUZITEVWQlFVVXNTVUZCU1N4RlFVRkZMRkZCUVZFN1dVRkRja01zVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVVc1IwRkJSeXhGUVVGRkxFbEJRVWtzUlVGQlJTeFJRVUZSTEVWQlFVVXNUVUZCVFN4RFFVRkZMRU5CUVVNN1VVRkRiRVFzUTBGQlF6dFJRVVZFTEZOQlFWTXNSVUZCUlN4VlFVRlZMRWRCUVVjc1JVRkJSU3hSUVVGUk8xbEJRMnBETEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRkxFZEJRVWNzUlVGQlJTeFRRVUZUTEVWQlFVVXNVVUZCVVN4RlFVRkZMRkZCUVZFc1EwRkJSU3hEUVVGRE8xRkJRM3BFTEVOQlFVTTdTMEZEUkN4RFFVRkZMRU5CUVVNN1NVRkZTaXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZGTEVOQlFVVXNTMEZCU3l4RlFVRkZMRTFCUVUwc1EwRkJSU3hGUVVGRkxGVkJRVlVzUTBGQlF5eEZRVUZGTEUxQlFVMDdVVUZEYkVRc1RVRkJUU3hEUVVGRkxFMUJRVTBzUTBGQlJTeEhRVUZITEZWQlFWVXNSMEZCUnl4RlFVRkZMRWxCUVVrc1JVRkJSU3hSUVVGUkxFVkJRVVVzU1VGQlNUdFpRVVZ5UkN3clEwRkJLME03V1VGREwwTXNSVUZCUlN4RFFVRkRMRU5CUVVVc1RVRkJUU3hEUVVGRExGVkJRVlVzUTBGQlJTeEpRVUZKTEVOQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRMnBETEVsQlFVa3NSMEZCUnl4SlFVRkpMRWxCUVVrc1VVRkJVU3hEUVVGRE8yZENRVU40UWl4UlFVRlJMRWRCUVVjc1NVRkJTU3hEUVVGRE8yZENRVU5vUWl4SlFVRkpMRWRCUVVjc1UwRkJVeXhEUVVGRE8xbEJRMnhDTEVOQlFVTTdXVUZGUkN3clJFRkJLMFE3V1VGREwwUXNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVVVzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUlR0blFrRkRiRU1zUjBGQlJ5eEZRVUZGTEVkQlFVYzdaMEpCUTFJc1NVRkJTU3hGUVVGRkxFMUJRVTA3WjBKQlExb3NVVUZCVVN4RlFVRkZMRWxCUVVrN1owSkJRMlFzU1VGQlNTeEZRVUZGTEVsQlFVazdaMEpCUTFZc1QwRkJUeXhGUVVGRkxGRkJRVkU3WVVGRGFrSXNSVUZCUlN4TlFVRk5MRU5CUVVNc1lVRkJZU3hEUVVGRkxFZEJRVWNzUTBGQlJTeEpRVUZKTEVkQlFVY3NRMEZCUlN4RFFVRkZMRU5CUVVNN1VVRkRNME1zUTBGQlF5eERRVUZETzBsQlEwZ3NRMEZCUXl4RFFVRkZMRU5CUVVNN1NVRkZTaXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETzBGQlEyUXNRMEZCUXl4RFFVRkZMRU5CUVVNaUxDSm1hV3hsSWpvaWQzZDNMM0JoWTJ0ekwycHhkV1Z5ZVM5emNtTXZZV3BoZUM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbVJsWm1sdVpTZ2dXMXh1WEhSY0lpNHZZMjl5WlZ3aUxGeHVYSFJjSWk0dmRtRnlMMlJ2WTNWdFpXNTBYQ0lzWEc1Y2RGd2lMaTkyWVhJdmNtNXZkR2gwYld4M2FHbDBaVndpTEZ4dVhIUmNJaTR2WVdwaGVDOTJZWEl2Ykc5allYUnBiMjVjSWl4Y2JseDBYQ0l1TDJGcVlYZ3ZkbUZ5TDI1dmJtTmxYQ0lzWEc1Y2RGd2lMaTloYW1GNEwzWmhjaTl5Y1hWbGNubGNJaXhjYmx4dVhIUmNJaTR2WTI5eVpTOXBibWwwWENJc1hHNWNkRndpTGk5aGFtRjRMM0JoY25ObFdFMU1YQ0lzWEc1Y2RGd2lMaTlsZG1WdWRDOTBjbWxuWjJWeVhDSXNYRzVjZEZ3aUxpOWtaV1psY25KbFpGd2lMRnh1WEhSY0lpNHZjMlZ5YVdGc2FYcGxYQ0lnTHk4Z2FsRjFaWEo1TG5CaGNtRnRYRzVkTENCbWRXNWpkR2x2YmlnZ2FsRjFaWEo1TENCa2IyTjFiV1Z1ZEN3Z2NtNXZkR2gwYld4M2FHbDBaU3dnYkc5allYUnBiMjRzSUc1dmJtTmxMQ0J5Y1hWbGNua2dLU0I3WEc1Y2Jsd2lkWE5sSUhOMGNtbGpkRndpTzF4dVhHNTJZWEpjYmx4MGNqSXdJRDBnTHlVeU1DOW5MRnh1WEhSeWFHRnphQ0E5SUM4akxpb2tMeXhjYmx4MGNtRnVkR2xEWVdOb1pTQTlJQzhvV3o4bVhTbGZQVnRlSmwwcUx5eGNibHgwY21obFlXUmxjbk1nUFNBdlhpZ3VLajhwT2xzZ1hGeDBYU29vVzE1Y1hISmNYRzVkS2lra0wyMW5MRnh1WEc1Y2RDOHZJQ00zTmpVekxDQWpPREV5TlN3Z0l6Z3hOVEk2SUd4dlkyRnNJSEJ5YjNSdlkyOXNJR1JsZEdWamRHbHZibHh1WEhSeWJHOWpZV3hRY205MGIyTnZiQ0E5SUM5ZUtEODZZV0p2ZFhSOFlYQndmR0Z3Y0MxemRHOXlZV2RsZkM0ckxXVjRkR1Z1YzJsdmJueG1hV3hsZkhKbGMzeDNhV1JuWlhRcE9pUXZMRnh1WEhSeWJtOURiMjUwWlc1MElEMGdMMTRvUHpwSFJWUjhTRVZCUkNra0x5eGNibHgwY25CeWIzUnZZMjlzSUQwZ0wxNWNYQzljWEM4dkxGeHVYRzVjZEM4cUlGQnlaV1pwYkhSbGNuTmNibHgwSUNvZ01Ta2dWR2hsZVNCaGNtVWdkWE5sWm5Wc0lIUnZJR2x1ZEhKdlpIVmpaU0JqZFhOMGIyMGdaR0YwWVZSNWNHVnpJQ2h6WldVZ1lXcGhlQzlxYzI5dWNDNXFjeUJtYjNJZ1lXNGdaWGhoYlhCc1pTbGNibHgwSUNvZ01pa2dWR2hsYzJVZ1lYSmxJR05oYkd4bFpEcGNibHgwSUNvZ0lDQWdMU0JDUlVaUFVrVWdZWE5yYVc1bklHWnZjaUJoSUhSeVlXNXpjRzl5ZEZ4dVhIUWdLaUFnSUNBdElFRkdWRVZTSUhCaGNtRnRJSE5sY21saGJHbDZZWFJwYjI0Z0tITXVaR0YwWVNCcGN5QmhJSE4wY21sdVp5QnBaaUJ6TG5CeWIyTmxjM05FWVhSaElHbHpJSFJ5ZFdVcFhHNWNkQ0FxSURNcElHdGxlU0JwY3lCMGFHVWdaR0YwWVZSNWNHVmNibHgwSUNvZ05Da2dkR2hsSUdOaGRHTm9ZV3hzSUhONWJXSnZiQ0JjSWlwY0lpQmpZVzRnWW1VZ2RYTmxaRnh1WEhRZ0tpQTFLU0JsZUdWamRYUnBiMjRnZDJsc2JDQnpkR0Z5ZENCM2FYUm9JSFJ5WVc1emNHOXlkQ0JrWVhSaFZIbHdaU0JoYm1RZ1ZFaEZUaUJqYjI1MGFXNTFaU0JrYjNkdUlIUnZJRndpS2x3aUlHbG1JRzVsWldSbFpGeHVYSFFnS2k5Y2JseDBjSEpsWm1sc2RHVnljeUE5SUh0OUxGeHVYRzVjZEM4cUlGUnlZVzV6Y0c5eWRITWdZbWx1WkdsdVozTmNibHgwSUNvZ01Ta2dhMlY1SUdseklIUm9aU0JrWVhSaFZIbHdaVnh1WEhRZ0tpQXlLU0IwYUdVZ1kyRjBZMmhoYkd3Z2MzbHRZbTlzSUZ3aUtsd2lJR05oYmlCaVpTQjFjMlZrWEc1Y2RDQXFJRE1wSUhObGJHVmpkR2x2YmlCM2FXeHNJSE4wWVhKMElIZHBkR2dnZEhKaGJuTndiM0owSUdSaGRHRlVlWEJsSUdGdVpDQlVTRVZPSUdkdklIUnZJRndpS2x3aUlHbG1JRzVsWldSbFpGeHVYSFFnS2k5Y2JseDBkSEpoYm5Od2IzSjBjeUE5SUh0OUxGeHVYRzVjZEM4dklFRjJiMmxrSUdOdmJXMWxiblF0Y0hKdmJHOW5JR05vWVhJZ2MyVnhkV1Z1WTJVZ0tDTXhNREE1T0NrN0lHMTFjM1FnWVhCd1pXRnpaU0JzYVc1MElHRnVaQ0JsZG1Ga1pTQmpiMjF3Y21WemMybHZibHh1WEhSaGJHeFVlWEJsY3lBOUlGd2lLaTljSWk1amIyNWpZWFFvSUZ3aUtsd2lJQ2tzWEc1Y2JseDBMeThnUVc1amFHOXlJSFJoWnlCbWIzSWdjR0Z5YzJsdVp5QjBhR1VnWkc5amRXMWxiblFnYjNKcFoybHVYRzVjZEc5eWFXZHBia0Z1WTJodmNpQTlJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0lGd2lZVndpSUNrN1hHNWNkRzl5YVdkcGJrRnVZMmh2Y2k1b2NtVm1JRDBnYkc5allYUnBiMjR1YUhKbFpqdGNibHh1THk4Z1FtRnpaU0JjSW1OdmJuTjBjblZqZEc5eVhDSWdabTl5SUdwUmRXVnllUzVoYW1GNFVISmxabWxzZEdWeUlHRnVaQ0JxVVhWbGNua3VZV3BoZUZSeVlXNXpjRzl5ZEZ4dVpuVnVZM1JwYjI0Z1lXUmtWRzlRY21WbWFXeDBaWEp6VDNKVWNtRnVjM0J2Y25SektDQnpkSEoxWTNSMWNtVWdLU0I3WEc1Y2JseDBMeThnWkdGMFlWUjVjR1ZGZUhCeVpYTnphVzl1SUdseklHOXdkR2x2Ym1Gc0lHRnVaQ0JrWldaaGRXeDBjeUIwYnlCY0lpcGNJbHh1WEhSeVpYUjFjbTRnWm5WdVkzUnBiMjRvSUdSaGRHRlVlWEJsUlhod2NtVnpjMmx2Yml3Z1puVnVZeUFwSUh0Y2JseHVYSFJjZEdsbUlDZ2dkSGx3Wlc5bUlHUmhkR0ZVZVhCbFJYaHdjbVZ6YzJsdmJpQWhQVDBnWENKemRISnBibWRjSWlBcElIdGNibHgwWEhSY2RHWjFibU1nUFNCa1lYUmhWSGx3WlVWNGNISmxjM05wYjI0N1hHNWNkRngwWEhSa1lYUmhWSGx3WlVWNGNISmxjM05wYjI0Z1BTQmNJaXBjSWp0Y2JseDBYSFI5WEc1Y2JseDBYSFIyWVhJZ1pHRjBZVlI1Y0dVc1hHNWNkRngwWEhScElEMGdNQ3hjYmx4MFhIUmNkR1JoZEdGVWVYQmxjeUE5SUdSaGRHRlVlWEJsUlhod2NtVnpjMmx2Ymk1MGIweHZkMlZ5UTJGelpTZ3BMbTFoZEdOb0tDQnlibTkwYUhSdGJIZG9hWFJsSUNrZ2ZId2dXMTA3WEc1Y2JseDBYSFJwWmlBb0lHcFJkV1Z5ZVM1cGMwWjFibU4wYVc5dUtDQm1kVzVqSUNrZ0tTQjdYRzVjYmx4MFhIUmNkQzh2SUVadmNpQmxZV05vSUdSaGRHRlVlWEJsSUdsdUlIUm9aU0JrWVhSaFZIbHdaVVY0Y0hKbGMzTnBiMjVjYmx4MFhIUmNkSGRvYVd4bElDZ2dLQ0JrWVhSaFZIbHdaU0E5SUdSaGRHRlVlWEJsYzFzZ2FTc3JJRjBnS1NBcElIdGNibHh1WEhSY2RGeDBYSFF2THlCUWNtVndaVzVrSUdsbUlISmxjWFZsYzNSbFpGeHVYSFJjZEZ4MFhIUnBaaUFvSUdSaGRHRlVlWEJsV3lBd0lGMGdQVDA5SUZ3aUsxd2lJQ2tnZTF4dVhIUmNkRngwWEhSY2RHUmhkR0ZVZVhCbElEMGdaR0YwWVZSNWNHVXVjMnhwWTJVb0lERWdLU0I4ZkNCY0lpcGNJanRjYmx4MFhIUmNkRngwWEhRb0lITjBjblZqZEhWeVpWc2daR0YwWVZSNWNHVWdYU0E5SUhOMGNuVmpkSFZ5WlZzZ1pHRjBZVlI1Y0dVZ1hTQjhmQ0JiWFNBcExuVnVjMmhwWm5Rb0lHWjFibU1nS1R0Y2JseHVYSFJjZEZ4MFhIUXZMeUJQZEdobGNuZHBjMlVnWVhCd1pXNWtYRzVjZEZ4MFhIUmNkSDBnWld4elpTQjdYRzVjZEZ4MFhIUmNkRngwS0NCemRISjFZM1IxY21WYklHUmhkR0ZVZVhCbElGMGdQU0J6ZEhKMVkzUjFjbVZiSUdSaGRHRlVlWEJsSUYwZ2ZId2dXMTBnS1M1d2RYTm9LQ0JtZFc1aklDazdYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkSDFjYmx4MFhIUjlYRzVjZEgwN1hHNTlYRzVjYmk4dklFSmhjMlVnYVc1emNHVmpkR2x2YmlCbWRXNWpkR2x2YmlCbWIzSWdjSEpsWm1sc2RHVnljeUJoYm1RZ2RISmhibk53YjNKMGMxeHVablZ1WTNScGIyNGdhVzV6Y0dWamRGQnlaV1pwYkhSbGNuTlBjbFJ5WVc1emNHOXlkSE1vSUhOMGNuVmpkSFZ5WlN3Z2IzQjBhVzl1Y3l3Z2IzSnBaMmx1WVd4UGNIUnBiMjV6TENCcWNWaElVaUFwSUh0Y2JseHVYSFIyWVhJZ2FXNXpjR1ZqZEdWa0lEMGdlMzBzWEc1Y2RGeDBjMlZsYTJsdVoxUnlZVzV6Y0c5eWRDQTlJQ2dnYzNSeWRXTjBkWEpsSUQwOVBTQjBjbUZ1YzNCdmNuUnpJQ2s3WEc1Y2JseDBablZ1WTNScGIyNGdhVzV6Y0dWamRDZ2daR0YwWVZSNWNHVWdLU0I3WEc1Y2RGeDBkbUZ5SUhObGJHVmpkR1ZrTzF4dVhIUmNkR2x1YzNCbFkzUmxaRnNnWkdGMFlWUjVjR1VnWFNBOUlIUnlkV1U3WEc1Y2RGeDBhbEYxWlhKNUxtVmhZMmdvSUhOMGNuVmpkSFZ5WlZzZ1pHRjBZVlI1Y0dVZ1hTQjhmQ0JiWFN3Z1puVnVZM1JwYjI0b0lGOHNJSEJ5WldacGJIUmxjazl5Um1GamRHOXllU0FwSUh0Y2JseDBYSFJjZEhaaGNpQmtZWFJoVkhsd1pVOXlWSEpoYm5Od2IzSjBJRDBnY0hKbFptbHNkR1Z5VDNKR1lXTjBiM0o1S0NCdmNIUnBiMjV6TENCdmNtbG5hVzVoYkU5d2RHbHZibk1zSUdweFdFaFNJQ2s3WEc1Y2RGeDBYSFJwWmlBb0lIUjVjR1Z2WmlCa1lYUmhWSGx3WlU5eVZISmhibk53YjNKMElEMDlQU0JjSW5OMGNtbHVaMXdpSUNZbVhHNWNkRngwWEhSY2RDRnpaV1ZyYVc1blZISmhibk53YjNKMElDWW1JQ0ZwYm5Od1pXTjBaV1JiSUdSaGRHRlVlWEJsVDNKVWNtRnVjM0J2Y25RZ1hTQXBJSHRjYmx4dVhIUmNkRngwWEhSdmNIUnBiMjV6TG1SaGRHRlVlWEJsY3k1MWJuTm9hV1owS0NCa1lYUmhWSGx3WlU5eVZISmhibk53YjNKMElDazdYRzVjZEZ4MFhIUmNkR2x1YzNCbFkzUW9JR1JoZEdGVWVYQmxUM0pVY21GdWMzQnZjblFnS1R0Y2JseDBYSFJjZEZ4MGNtVjBkWEp1SUdaaGJITmxPMXh1WEhSY2RGeDBmU0JsYkhObElHbG1JQ2dnYzJWbGEybHVaMVJ5WVc1emNHOXlkQ0FwSUh0Y2JseDBYSFJjZEZ4MGNtVjBkWEp1SUNFb0lITmxiR1ZqZEdWa0lEMGdaR0YwWVZSNWNHVlBjbFJ5WVc1emNHOXlkQ0FwTzF4dVhIUmNkRngwZlZ4dVhIUmNkSDBnS1R0Y2JseDBYSFJ5WlhSMWNtNGdjMlZzWldOMFpXUTdYRzVjZEgxY2JseHVYSFJ5WlhSMWNtNGdhVzV6Y0dWamRDZ2diM0IwYVc5dWN5NWtZWFJoVkhsd1pYTmJJREFnWFNBcElIeDhJQ0ZwYm5Od1pXTjBaV1JiSUZ3aUtsd2lJRjBnSmlZZ2FXNXpjR1ZqZENnZ1hDSXFYQ0lnS1R0Y2JuMWNibHh1THk4Z1FTQnpjR1ZqYVdGc0lHVjRkR1Z1WkNCbWIzSWdZV3BoZUNCdmNIUnBiMjV6WEc0dkx5QjBhR0YwSUhSaGEyVnpJRndpWm14aGRGd2lJRzl3ZEdsdmJuTWdLRzV2ZENCMGJ5QmlaU0JrWldWd0lHVjRkR1Z1WkdWa0tWeHVMeThnUm1sNFpYTWdJems0T0RkY2JtWjFibU4wYVc5dUlHRnFZWGhGZUhSbGJtUW9JSFJoY21kbGRDd2djM0pqSUNrZ2UxeHVYSFIyWVhJZ2EyVjVMQ0JrWldWd0xGeHVYSFJjZEdac1lYUlBjSFJwYjI1eklEMGdhbEYxWlhKNUxtRnFZWGhUWlhSMGFXNW5jeTVtYkdGMFQzQjBhVzl1Y3lCOGZDQjdmVHRjYmx4dVhIUm1iM0lnS0NCclpYa2dhVzRnYzNKaklDa2dlMXh1WEhSY2RHbG1JQ2dnYzNKald5QnJaWGtnWFNBaFBUMGdkVzVrWldacGJtVmtJQ2tnZTF4dVhIUmNkRngwS0NCbWJHRjBUM0IwYVc5dWMxc2dhMlY1SUYwZ1B5QjBZWEpuWlhRZ09pQW9JR1JsWlhBZ2ZId2dLQ0JrWldWd0lEMGdlMzBnS1NBcElDbGJJR3RsZVNCZElEMGdjM0pqV3lCclpYa2dYVHRjYmx4MFhIUjlYRzVjZEgxY2JseDBhV1lnS0NCa1pXVndJQ2tnZTF4dVhIUmNkR3BSZFdWeWVTNWxlSFJsYm1Rb0lIUnlkV1VzSUhSaGNtZGxkQ3dnWkdWbGNDQXBPMXh1WEhSOVhHNWNibHgwY21WMGRYSnVJSFJoY21kbGREdGNibjFjYmx4dUx5b2dTR0Z1Wkd4bGN5QnlaWE53YjI1elpYTWdkRzhnWVc0Z1lXcGhlQ0J5WlhGMVpYTjBPbHh1SUNvZ0xTQm1hVzVrY3lCMGFHVWdjbWxuYUhRZ1pHRjBZVlI1Y0dVZ0tHMWxaR2xoZEdWeklHSmxkSGRsWlc0Z1kyOXVkR1Z1ZEMxMGVYQmxJR0Z1WkNCbGVIQmxZM1JsWkNCa1lYUmhWSGx3WlNsY2JpQXFJQzBnY21WMGRYSnVjeUIwYUdVZ1kyOXljbVZ6Y0c5dVpHbHVaeUJ5WlhOd2IyNXpaVnh1SUNvdlhHNW1kVzVqZEdsdmJpQmhhbUY0U0dGdVpHeGxVbVZ6Y0c5dWMyVnpLQ0J6TENCcWNWaElVaXdnY21WemNHOXVjMlZ6SUNrZ2UxeHVYRzVjZEhaaGNpQmpkQ3dnZEhsd1pTd2dabWx1WVd4RVlYUmhWSGx3WlN3Z1ptbHljM1JFWVhSaFZIbHdaU3hjYmx4MFhIUmpiMjUwWlc1MGN5QTlJSE11WTI5dWRHVnVkSE1zWEc1Y2RGeDBaR0YwWVZSNWNHVnpJRDBnY3k1a1lYUmhWSGx3WlhNN1hHNWNibHgwTHk4Z1VtVnRiM1psSUdGMWRHOGdaR0YwWVZSNWNHVWdZVzVrSUdkbGRDQmpiMjUwWlc1MExYUjVjR1VnYVc0Z2RHaGxJSEJ5YjJObGMzTmNibHgwZDJocGJHVWdLQ0JrWVhSaFZIbHdaWE5iSURBZ1hTQTlQVDBnWENJcVhDSWdLU0I3WEc1Y2RGeDBaR0YwWVZSNWNHVnpMbk5vYVdaMEtDazdYRzVjZEZ4MGFXWWdLQ0JqZENBOVBUMGdkVzVrWldacGJtVmtJQ2tnZTF4dVhIUmNkRngwWTNRZ1BTQnpMbTFwYldWVWVYQmxJSHg4SUdweFdFaFNMbWRsZEZKbGMzQnZibk5sU0dWaFpHVnlLQ0JjSWtOdmJuUmxiblF0Vkhsd1pWd2lJQ2s3WEc1Y2RGeDBmVnh1WEhSOVhHNWNibHgwTHk4Z1EyaGxZMnNnYVdZZ2QyVW5jbVVnWkdWaGJHbHVaeUIzYVhSb0lHRWdhMjV2ZDI0Z1kyOXVkR1Z1ZEMxMGVYQmxYRzVjZEdsbUlDZ2dZM1FnS1NCN1hHNWNkRngwWm05eUlDZ2dkSGx3WlNCcGJpQmpiMjUwWlc1MGN5QXBJSHRjYmx4MFhIUmNkR2xtSUNnZ1kyOXVkR1Z1ZEhOYklIUjVjR1VnWFNBbUppQmpiMjUwWlc1MGMxc2dkSGx3WlNCZExuUmxjM1FvSUdOMElDa2dLU0I3WEc1Y2RGeDBYSFJjZEdSaGRHRlVlWEJsY3k1MWJuTm9hV1owS0NCMGVYQmxJQ2s3WEc1Y2RGeDBYSFJjZEdKeVpXRnJPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMWNibHgwZlZ4dVhHNWNkQzh2SUVOb1pXTnJJSFJ2SUhObFpTQnBaaUIzWlNCb1lYWmxJR0VnY21WemNHOXVjMlVnWm05eUlIUm9aU0JsZUhCbFkzUmxaQ0JrWVhSaFZIbHdaVnh1WEhScFppQW9JR1JoZEdGVWVYQmxjMXNnTUNCZElHbHVJSEpsYzNCdmJuTmxjeUFwSUh0Y2JseDBYSFJtYVc1aGJFUmhkR0ZVZVhCbElEMGdaR0YwWVZSNWNHVnpXeUF3SUYwN1hHNWNkSDBnWld4elpTQjdYRzVjYmx4MFhIUXZMeUJVY25rZ1kyOXVkbVZ5ZEdsaWJHVWdaR0YwWVZSNWNHVnpYRzVjZEZ4MFptOXlJQ2dnZEhsd1pTQnBiaUJ5WlhOd2IyNXpaWE1nS1NCN1hHNWNkRngwWEhScFppQW9JQ0ZrWVhSaFZIbHdaWE5iSURBZ1hTQjhmQ0J6TG1OdmJuWmxjblJsY25OYklIUjVjR1VnS3lCY0lpQmNJaUFySUdSaGRHRlVlWEJsYzFzZ01DQmRJRjBnS1NCN1hHNWNkRngwWEhSY2RHWnBibUZzUkdGMFlWUjVjR1VnUFNCMGVYQmxPMXh1WEhSY2RGeDBYSFJpY21WaGF6dGNibHgwWEhSY2RIMWNibHgwWEhSY2RHbG1JQ2dnSVdacGNuTjBSR0YwWVZSNWNHVWdLU0I3WEc1Y2RGeDBYSFJjZEdacGNuTjBSR0YwWVZSNWNHVWdQU0IwZVhCbE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgxY2JseHVYSFJjZEM4dklFOXlJR3AxYzNRZ2RYTmxJR1pwY25OMElHOXVaVnh1WEhSY2RHWnBibUZzUkdGMFlWUjVjR1VnUFNCbWFXNWhiRVJoZEdGVWVYQmxJSHg4SUdacGNuTjBSR0YwWVZSNWNHVTdYRzVjZEgxY2JseHVYSFF2THlCSlppQjNaU0JtYjNWdVpDQmhJR1JoZEdGVWVYQmxYRzVjZEM4dklGZGxJR0ZrWkNCMGFHVWdaR0YwWVZSNWNHVWdkRzhnZEdobElHeHBjM1FnYVdZZ2JtVmxaR1ZrWEc1Y2RDOHZJR0Z1WkNCeVpYUjFjbTRnZEdobElHTnZjbkpsYzNCdmJtUnBibWNnY21WemNHOXVjMlZjYmx4MGFXWWdLQ0JtYVc1aGJFUmhkR0ZVZVhCbElDa2dlMXh1WEhSY2RHbG1JQ2dnWm1sdVlXeEVZWFJoVkhsd1pTQWhQVDBnWkdGMFlWUjVjR1Z6V3lBd0lGMGdLU0I3WEc1Y2RGeDBYSFJrWVhSaFZIbHdaWE11ZFc1emFHbG1kQ2dnWm1sdVlXeEVZWFJoVkhsd1pTQXBPMXh1WEhSY2RIMWNibHgwWEhSeVpYUjFjbTRnY21WemNHOXVjMlZ6V3lCbWFXNWhiRVJoZEdGVWVYQmxJRjA3WEc1Y2RIMWNibjFjYmx4dUx5b2dRMmhoYVc0Z1kyOXVkbVZ5YzJsdmJuTWdaMmwyWlc0Z2RHaGxJSEpsY1hWbGMzUWdZVzVrSUhSb1pTQnZjbWxuYVc1aGJDQnlaWE53YjI1elpWeHVJQ29nUVd4emJ5QnpaWFJ6SUhSb1pTQnlaWE53YjI1elpWaFlXQ0JtYVdWc1pITWdiMjRnZEdobElHcHhXRWhTSUdsdWMzUmhibU5sWEc0Z0tpOWNibVoxYm1OMGFXOXVJR0ZxWVhoRGIyNTJaWEowS0NCekxDQnlaWE53YjI1elpTd2dhbkZZU0ZJc0lHbHpVM1ZqWTJWemN5QXBJSHRjYmx4MGRtRnlJR052Ym5ZeUxDQmpkWEp5Wlc1MExDQmpiMjUyTENCMGJYQXNJSEJ5WlhZc1hHNWNkRngwWTI5dWRtVnlkR1Z5Y3lBOUlIdDlMRnh1WEc1Y2RGeDBMeThnVjI5eWF5QjNhWFJvSUdFZ1kyOXdlU0J2WmlCa1lYUmhWSGx3WlhNZ2FXNGdZMkZ6WlNCM1pTQnVaV1ZrSUhSdklHMXZaR2xtZVNCcGRDQm1iM0lnWTI5dWRtVnljMmx2Ymx4dVhIUmNkR1JoZEdGVWVYQmxjeUE5SUhNdVpHRjBZVlI1Y0dWekxuTnNhV05sS0NrN1hHNWNibHgwTHk4Z1EzSmxZWFJsSUdOdmJuWmxjblJsY25NZ2JXRndJSGRwZEdnZ2JHOTNaWEpqWVhObFpDQnJaWGx6WEc1Y2RHbG1JQ2dnWkdGMFlWUjVjR1Z6V3lBeElGMGdLU0I3WEc1Y2RGeDBabTl5SUNnZ1kyOXVkaUJwYmlCekxtTnZiblpsY25SbGNuTWdLU0I3WEc1Y2RGeDBYSFJqYjI1MlpYSjBaWEp6V3lCamIyNTJMblJ2VEc5M1pYSkRZWE5sS0NrZ1hTQTlJSE11WTI5dWRtVnlkR1Z5YzFzZ1kyOXVkaUJkTzF4dVhIUmNkSDFjYmx4MGZWeHVYRzVjZEdOMWNuSmxiblFnUFNCa1lYUmhWSGx3WlhNdWMyaHBablFvS1R0Y2JseHVYSFF2THlCRGIyNTJaWEowSUhSdklHVmhZMmdnYzJWeGRXVnVkR2xoYkNCa1lYUmhWSGx3WlZ4dVhIUjNhR2xzWlNBb0lHTjFjbkpsYm5RZ0tTQjdYRzVjYmx4MFhIUnBaaUFvSUhNdWNtVnpjRzl1YzJWR2FXVnNaSE5iSUdOMWNuSmxiblFnWFNBcElIdGNibHgwWEhSY2RHcHhXRWhTV3lCekxuSmxjM0J2Ym5ObFJtbGxiR1J6V3lCamRYSnlaVzUwSUYwZ1hTQTlJSEpsYzNCdmJuTmxPMXh1WEhSY2RIMWNibHh1WEhSY2RDOHZJRUZ3Y0d4NUlIUm9aU0JrWVhSaFJtbHNkR1Z5SUdsbUlIQnliM1pwWkdWa1hHNWNkRngwYVdZZ0tDQWhjSEpsZGlBbUppQnBjMU4xWTJObGMzTWdKaVlnY3k1a1lYUmhSbWxzZEdWeUlDa2dlMXh1WEhSY2RGeDBjbVZ6Y0c5dWMyVWdQU0J6TG1SaGRHRkdhV3gwWlhJb0lISmxjM0J2Ym5ObExDQnpMbVJoZEdGVWVYQmxJQ2s3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBjSEpsZGlBOUlHTjFjbkpsYm5RN1hHNWNkRngwWTNWeWNtVnVkQ0E5SUdSaGRHRlVlWEJsY3k1emFHbG1kQ2dwTzF4dVhHNWNkRngwYVdZZ0tDQmpkWEp5Wlc1MElDa2dlMXh1WEc1Y2RGeDBYSFF2THlCVWFHVnlaU2R6SUc5dWJIa2dkMjl5YXlCMGJ5QmtieUJwWmlCamRYSnlaVzUwSUdSaGRHRlVlWEJsSUdseklHNXZiaTFoZFhSdlhHNWNkRngwWEhScFppQW9JR04xY25KbGJuUWdQVDA5SUZ3aUtsd2lJQ2tnZTF4dVhHNWNkRngwWEhSY2RHTjFjbkpsYm5RZ1BTQndjbVYyTzF4dVhHNWNkRngwWEhRdkx5QkRiMjUyWlhKMElISmxjM0J2Ym5ObElHbG1JSEJ5WlhZZ1pHRjBZVlI1Y0dVZ2FYTWdibTl1TFdGMWRHOGdZVzVrSUdScFptWmxjbk1nWm5KdmJTQmpkWEp5Wlc1MFhHNWNkRngwWEhSOUlHVnNjMlVnYVdZZ0tDQndjbVYySUNFOVBTQmNJaXBjSWlBbUppQndjbVYySUNFOVBTQmpkWEp5Wlc1MElDa2dlMXh1WEc1Y2RGeDBYSFJjZEM4dklGTmxaV3NnWVNCa2FYSmxZM1FnWTI5dWRtVnlkR1Z5WEc1Y2RGeDBYSFJjZEdOdmJuWWdQU0JqYjI1MlpYSjBaWEp6V3lCd2NtVjJJQ3NnWENJZ1hDSWdLeUJqZFhKeVpXNTBJRjBnZkh3Z1kyOXVkbVZ5ZEdWeWMxc2dYQ0lxSUZ3aUlDc2dZM1Z5Y21WdWRDQmRPMXh1WEc1Y2RGeDBYSFJjZEM4dklFbG1JRzV2Ym1VZ1ptOTFibVFzSUhObFpXc2dZU0J3WVdseVhHNWNkRngwWEhSY2RHbG1JQ2dnSVdOdmJuWWdLU0I3WEc1Y2RGeDBYSFJjZEZ4MFptOXlJQ2dnWTI5dWRqSWdhVzRnWTI5dWRtVnlkR1Z5Y3lBcElIdGNibHh1WEhSY2RGeDBYSFJjZEZ4MEx5OGdTV1lnWTI5dWRqSWdiM1YwY0hWMGN5QmpkWEp5Wlc1MFhHNWNkRngwWEhSY2RGeDBYSFIwYlhBZ1BTQmpiMjUyTWk1emNHeHBkQ2dnWENJZ1hDSWdLVHRjYmx4MFhIUmNkRngwWEhSY2RHbG1JQ2dnZEcxd1d5QXhJRjBnUFQwOUlHTjFjbkpsYm5RZ0tTQjdYRzVjYmx4MFhIUmNkRngwWEhSY2RGeDBMeThnU1dZZ2NISmxkaUJqWVc0Z1ltVWdZMjl1ZG1WeWRHVmtJSFJ2SUdGalkyVndkR1ZrSUdsdWNIVjBYRzVjZEZ4MFhIUmNkRngwWEhSY2RHTnZibllnUFNCamIyNTJaWEowWlhKeld5QndjbVYySUNzZ1hDSWdYQ0lnS3lCMGJYQmJJREFnWFNCZElIeDhYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBZMjl1ZG1WeWRHVnljMXNnWENJcUlGd2lJQ3NnZEcxd1d5QXdJRjBnWFR0Y2JseDBYSFJjZEZ4MFhIUmNkRngwYVdZZ0tDQmpiMjUySUNrZ2UxeHVYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBMeThnUTI5dVpHVnVjMlVnWlhGMWFYWmhiR1Z1WTJVZ1kyOXVkbVZ5ZEdWeWMxeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RHbG1JQ2dnWTI5dWRpQTlQVDBnZEhKMVpTQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEdOdmJuWWdQU0JqYjI1MlpYSjBaWEp6V3lCamIyNTJNaUJkTzF4dVhHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MEx5OGdUM1JvWlhKM2FYTmxMQ0JwYm5ObGNuUWdkR2hsSUdsdWRHVnliV1ZrYVdGMFpTQmtZWFJoVkhsd1pWeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RIMGdaV3h6WlNCcFppQW9JR052Ym5abGNuUmxjbk5iSUdOdmJuWXlJRjBnSVQwOUlIUnlkV1VnS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmpkWEp5Wlc1MElEMGdkRzF3V3lBd0lGMDdYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJrWVhSaFZIbHdaWE11ZFc1emFHbG1kQ2dnZEcxd1d5QXhJRjBnS1R0Y2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MFluSmxZV3M3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEgxY2JseHVYSFJjZEZ4MFhIUXZMeUJCY0hCc2VTQmpiMjUyWlhKMFpYSWdLR2xtSUc1dmRDQmhiaUJsY1hWcGRtRnNaVzVqWlNsY2JseDBYSFJjZEZ4MGFXWWdLQ0JqYjI1MklDRTlQU0IwY25WbElDa2dlMXh1WEc1Y2RGeDBYSFJjZEZ4MEx5OGdWVzVzWlhOeklHVnljbTl5Y3lCaGNtVWdZV3hzYjNkbFpDQjBieUJpZFdKaWJHVXNJR05oZEdOb0lHRnVaQ0J5WlhSMWNtNGdkR2hsYlZ4dVhIUmNkRngwWEhSY2RHbG1JQ2dnWTI5dWRpQW1KaUJ6TG5Sb2NtOTNjeUFwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkSEpsYzNCdmJuTmxJRDBnWTI5dWRpZ2djbVZ6Y0c5dWMyVWdLVHRjYmx4MFhIUmNkRngwWEhSOUlHVnNjMlVnZTF4dVhIUmNkRngwWEhSY2RGeDBkSEo1SUh0Y2JseDBYSFJjZEZ4MFhIUmNkRngwY21WemNHOXVjMlVnUFNCamIyNTJLQ0J5WlhOd2IyNXpaU0FwTzF4dVhIUmNkRngwWEhSY2RGeDBmU0JqWVhSamFDQW9JR1VnS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJjZEhKbGRIVnliaUI3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwYzNSaGRHVTZJRndpY0dGeWMyVnlaWEp5YjNKY0lpeGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmxjbkp2Y2pvZ1kyOXVkaUEvSUdVZ09pQmNJazV2SUdOdmJuWmxjbk5wYjI0Z1puSnZiU0JjSWlBcklIQnlaWFlnS3lCY0lpQjBieUJjSWlBcklHTjFjbkpsYm5SY2JseDBYSFJjZEZ4MFhIUmNkRngwZlR0Y2JseDBYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RIMWNibHgwWEhSOVhHNWNkSDFjYmx4dVhIUnlaWFIxY200Z2V5QnpkR0YwWlRvZ1hDSnpkV05qWlhOelhDSXNJR1JoZEdFNklISmxjM0J2Ym5ObElIMDdYRzU5WEc1Y2JtcFJkV1Z5ZVM1bGVIUmxibVFvSUh0Y2JseHVYSFF2THlCRGIzVnVkR1Z5SUdadmNpQm9iMnhrYVc1bklIUm9aU0J1ZFcxaVpYSWdiMllnWVdOMGFYWmxJSEYxWlhKcFpYTmNibHgwWVdOMGFYWmxPaUF3TEZ4dVhHNWNkQzh2SUV4aGMzUXRUVzlrYVdacFpXUWdhR1ZoWkdWeUlHTmhZMmhsSUdadmNpQnVaWGgwSUhKbGNYVmxjM1JjYmx4MGJHRnpkRTF2WkdsbWFXVmtPaUI3ZlN4Y2JseDBaWFJoWnpvZ2UzMHNYRzVjYmx4MFlXcGhlRk5sZEhScGJtZHpPaUI3WEc1Y2RGeDBkWEpzT2lCc2IyTmhkR2x2Ymk1b2NtVm1MRnh1WEhSY2RIUjVjR1U2SUZ3aVIwVlVYQ0lzWEc1Y2RGeDBhWE5NYjJOaGJEb2djbXh2WTJGc1VISnZkRzlqYjJ3dWRHVnpkQ2dnYkc5allYUnBiMjR1Y0hKdmRHOWpiMndnS1N4Y2JseDBYSFJuYkc5aVlXdzZJSFJ5ZFdVc1hHNWNkRngwY0hKdlkyVnpjMFJoZEdFNklIUnlkV1VzWEc1Y2RGeDBZWE41Ym1NNklIUnlkV1VzWEc1Y2RGeDBZMjl1ZEdWdWRGUjVjR1U2SUZ3aVlYQndiR2xqWVhScGIyNHZlQzEzZDNjdFptOXliUzExY214bGJtTnZaR1ZrT3lCamFHRnljMlYwUFZWVVJpMDRYQ0lzWEc1Y2JseDBYSFF2S2x4dVhIUmNkSFJwYldWdmRYUTZJREFzWEc1Y2RGeDBaR0YwWVRvZ2JuVnNiQ3hjYmx4MFhIUmtZWFJoVkhsd1pUb2diblZzYkN4Y2JseDBYSFIxYzJWeWJtRnRaVG9nYm5Wc2JDeGNibHgwWEhSd1lYTnpkMjl5WkRvZ2JuVnNiQ3hjYmx4MFhIUmpZV05vWlRvZ2JuVnNiQ3hjYmx4MFhIUjBhSEp2ZDNNNklHWmhiSE5sTEZ4dVhIUmNkSFJ5WVdScGRHbHZibUZzT2lCbVlXeHpaU3hjYmx4MFhIUm9aV0ZrWlhKek9pQjdmU3hjYmx4MFhIUXFMMXh1WEc1Y2RGeDBZV05qWlhCMGN6b2dlMXh1WEhSY2RGeDBYQ0lxWENJNklHRnNiRlI1Y0dWekxGeHVYSFJjZEZ4MGRHVjRkRG9nWENKMFpYaDBMM0JzWVdsdVhDSXNYRzVjZEZ4MFhIUm9kRzFzT2lCY0luUmxlSFF2YUhSdGJGd2lMRnh1WEhSY2RGeDBlRzFzT2lCY0ltRndjR3hwWTJGMGFXOXVMM2h0YkN3Z2RHVjRkQzk0Yld4Y0lpeGNibHgwWEhSY2RHcHpiMjQ2SUZ3aVlYQndiR2xqWVhScGIyNHZhbk52Yml3Z2RHVjRkQzlxWVhaaGMyTnlhWEIwWENKY2JseDBYSFI5TEZ4dVhHNWNkRngwWTI5dWRHVnVkSE02SUh0Y2JseDBYSFJjZEhodGJEb2dMMXhjWW5odGJGeGNZaThzWEc1Y2RGeDBYSFJvZEcxc09pQXZYRnhpYUhSdGJDOHNYRzVjZEZ4MFhIUnFjMjl1T2lBdlhGeGlhbk52Ymx4Y1lpOWNibHgwWEhSOUxGeHVYRzVjZEZ4MGNtVnpjRzl1YzJWR2FXVnNaSE02SUh0Y2JseDBYSFJjZEhodGJEb2dYQ0p5WlhOd2IyNXpaVmhOVEZ3aUxGeHVYSFJjZEZ4MGRHVjRkRG9nWENKeVpYTndiMjV6WlZSbGVIUmNJaXhjYmx4MFhIUmNkR3B6YjI0NklGd2ljbVZ6Y0c5dWMyVktVMDlPWENKY2JseDBYSFI5TEZ4dVhHNWNkRngwTHk4Z1JHRjBZU0JqYjI1MlpYSjBaWEp6WEc1Y2RGeDBMeThnUzJWNWN5QnpaWEJoY21GMFpTQnpiM1Z5WTJVZ0tHOXlJR05oZEdOb1lXeHNJRndpS2x3aUtTQmhibVFnWkdWemRHbHVZWFJwYjI0Z2RIbHdaWE1nZDJsMGFDQmhJSE5wYm1kc1pTQnpjR0ZqWlZ4dVhIUmNkR052Ym5abGNuUmxjbk02SUh0Y2JseHVYSFJjZEZ4MEx5OGdRMjl1ZG1WeWRDQmhibmwwYUdsdVp5QjBieUIwWlhoMFhHNWNkRngwWEhSY0lpb2dkR1Y0ZEZ3aU9pQlRkSEpwYm1jc1hHNWNibHgwWEhSY2RDOHZJRlJsZUhRZ2RHOGdhSFJ0YkNBb2RISjFaU0E5SUc1dklIUnlZVzV6Wm05eWJXRjBhVzl1S1Z4dVhIUmNkRngwWENKMFpYaDBJR2gwYld4Y0lqb2dkSEoxWlN4Y2JseHVYSFJjZEZ4MEx5OGdSWFpoYkhWaGRHVWdkR1Y0ZENCaGN5QmhJR3B6YjI0Z1pYaHdjbVZ6YzJsdmJseHVYSFJjZEZ4MFhDSjBaWGgwSUdwemIyNWNJam9nU2xOUFRpNXdZWEp6WlN4Y2JseHVYSFJjZEZ4MEx5OGdVR0Z5YzJVZ2RHVjRkQ0JoY3lCNGJXeGNibHgwWEhSY2RGd2lkR1Y0ZENCNGJXeGNJam9nYWxGMVpYSjVMbkJoY25ObFdFMU1YRzVjZEZ4MGZTeGNibHh1WEhSY2RDOHZJRVp2Y2lCdmNIUnBiMjV6SUhSb1lYUWdjMmh2ZFd4a2JpZDBJR0psSUdSbFpYQWdaWGgwWlc1a1pXUTZYRzVjZEZ4MEx5OGdlVzkxSUdOaGJpQmhaR1FnZVc5MWNpQnZkMjRnWTNWemRHOXRJRzl3ZEdsdmJuTWdhR1Z5WlNCcFpseHVYSFJjZEM4dklHRnVaQ0IzYUdWdUlIbHZkU0JqY21WaGRHVWdiMjVsSUhSb1lYUWdjMmh2ZFd4a2JpZDBJR0psWEc1Y2RGeDBMeThnWkdWbGNDQmxlSFJsYm1SbFpDQW9jMlZsSUdGcVlYaEZlSFJsYm1RcFhHNWNkRngwWm14aGRFOXdkR2x2Ym5NNklIdGNibHgwWEhSY2RIVnliRG9nZEhKMVpTeGNibHgwWEhSY2RHTnZiblJsZUhRNklIUnlkV1ZjYmx4MFhIUjlYRzVjZEgwc1hHNWNibHgwTHk4Z1EzSmxZWFJsY3lCaElHWjFiR3dnWm14bFpHZGxaQ0J6WlhSMGFXNW5jeUJ2WW1wbFkzUWdhVzUwYnlCMFlYSm5aWFJjYmx4MEx5OGdkMmwwYUNCaWIzUm9JR0ZxWVhoVFpYUjBhVzVuY3lCaGJtUWdjMlYwZEdsdVozTWdabWxsYkdSekxseHVYSFF2THlCSlppQjBZWEpuWlhRZ2FYTWdiMjFwZEhSbFpDd2dkM0pwZEdWeklHbHVkRzhnWVdwaGVGTmxkSFJwYm1kekxseHVYSFJoYW1GNFUyVjBkWEE2SUdaMWJtTjBhVzl1S0NCMFlYSm5aWFFzSUhObGRIUnBibWR6SUNrZ2UxeHVYSFJjZEhKbGRIVnliaUJ6WlhSMGFXNW5jeUEvWEc1Y2JseDBYSFJjZEM4dklFSjFhV3hrYVc1bklHRWdjMlYwZEdsdVozTWdiMkpxWldOMFhHNWNkRngwWEhSaGFtRjRSWGgwWlc1a0tDQmhhbUY0UlhoMFpXNWtLQ0IwWVhKblpYUXNJR3BSZFdWeWVTNWhhbUY0VTJWMGRHbHVaM01nS1N3Z2MyVjBkR2x1WjNNZ0tTQTZYRzVjYmx4MFhIUmNkQzh2SUVWNGRHVnVaR2x1WnlCaGFtRjRVMlYwZEdsdVozTmNibHgwWEhSY2RHRnFZWGhGZUhSbGJtUW9JR3BSZFdWeWVTNWhhbUY0VTJWMGRHbHVaM01zSUhSaGNtZGxkQ0FwTzF4dVhIUjlMRnh1WEc1Y2RHRnFZWGhRY21WbWFXeDBaWEk2SUdGa1pGUnZVSEpsWm1sc2RHVnljMDl5VkhKaGJuTndiM0owY3lnZ2NISmxabWxzZEdWeWN5QXBMRnh1WEhSaGFtRjRWSEpoYm5Od2IzSjBPaUJoWkdSVWIxQnlaV1pwYkhSbGNuTlBjbFJ5WVc1emNHOXlkSE1vSUhSeVlXNXpjRzl5ZEhNZ0tTeGNibHh1WEhRdkx5Qk5ZV2x1SUcxbGRHaHZaRnh1WEhSaGFtRjRPaUJtZFc1amRHbHZiaWdnZFhKc0xDQnZjSFJwYjI1eklDa2dlMXh1WEc1Y2RGeDBMeThnU1dZZ2RYSnNJR2x6SUdGdUlHOWlhbVZqZEN3Z2MybHRkV3hoZEdVZ2NISmxMVEV1TlNCemFXZHVZWFIxY21WY2JseDBYSFJwWmlBb0lIUjVjR1Z2WmlCMWNtd2dQVDA5SUZ3aWIySnFaV04wWENJZ0tTQjdYRzVjZEZ4MFhIUnZjSFJwYjI1eklEMGdkWEpzTzF4dVhIUmNkRngwZFhKc0lEMGdkVzVrWldacGJtVmtPMXh1WEhSY2RIMWNibHh1WEhSY2RDOHZJRVp2Y21ObElHOXdkR2x2Ym5NZ2RHOGdZbVVnWVc0Z2IySnFaV04wWEc1Y2RGeDBiM0IwYVc5dWN5QTlJRzl3ZEdsdmJuTWdmSHdnZTMwN1hHNWNibHgwWEhSMllYSWdkSEpoYm5Od2IzSjBMRnh1WEc1Y2RGeDBYSFF2THlCVlVrd2dkMmwwYUc5MWRDQmhiblJwTFdOaFkyaGxJSEJoY21GdFhHNWNkRngwWEhSallXTm9aVlZTVEN4Y2JseHVYSFJjZEZ4MEx5OGdVbVZ6Y0c5dWMyVWdhR1ZoWkdWeWMxeHVYSFJjZEZ4MGNtVnpjRzl1YzJWSVpXRmtaWEp6VTNSeWFXNW5MRnh1WEhSY2RGeDBjbVZ6Y0c5dWMyVklaV0ZrWlhKekxGeHVYRzVjZEZ4MFhIUXZMeUIwYVcxbGIzVjBJR2hoYm1Sc1pWeHVYSFJjZEZ4MGRHbHRaVzkxZEZScGJXVnlMRnh1WEc1Y2RGeDBYSFF2THlCVmNtd2dZMnhsWVc1MWNDQjJZWEpjYmx4MFhIUmNkSFZ5YkVGdVkyaHZjaXhjYmx4dVhIUmNkRngwTHk4Z1VtVnhkV1Z6ZENCemRHRjBaU0FvWW1WamIyMWxjeUJtWVd4elpTQjFjRzl1SUhObGJtUWdZVzVrSUhSeWRXVWdkWEJ2YmlCamIyMXdiR1YwYVc5dUtWeHVYSFJjZEZ4MFkyOXRjR3hsZEdWa0xGeHVYRzVjZEZ4MFhIUXZMeUJVYnlCcmJtOTNJR2xtSUdkc2IySmhiQ0JsZG1WdWRITWdZWEpsSUhSdklHSmxJR1JwYzNCaGRHTm9aV1JjYmx4MFhIUmNkR1pwY21WSGJHOWlZV3h6TEZ4dVhHNWNkRngwWEhRdkx5Qk1iMjl3SUhaaGNtbGhZbXhsWEc1Y2RGeDBYSFJwTEZ4dVhHNWNkRngwWEhRdkx5QjFibU5oWTJobFpDQndZWEowSUc5bUlIUm9aU0IxY214Y2JseDBYSFJjZEhWdVkyRmphR1ZrTEZ4dVhHNWNkRngwWEhRdkx5QkRjbVZoZEdVZ2RHaGxJR1pwYm1Gc0lHOXdkR2x2Ym5NZ2IySnFaV04wWEc1Y2RGeDBYSFJ6SUQwZ2FsRjFaWEo1TG1GcVlYaFRaWFIxY0NnZ2UzMHNJRzl3ZEdsdmJuTWdLU3hjYmx4dVhIUmNkRngwTHk4Z1EyRnNiR0poWTJ0eklHTnZiblJsZUhSY2JseDBYSFJjZEdOaGJHeGlZV05yUTI5dWRHVjRkQ0E5SUhNdVkyOXVkR1Y0ZENCOGZDQnpMRnh1WEc1Y2RGeDBYSFF2THlCRGIyNTBaWGgwSUdadmNpQm5iRzlpWVd3Z1pYWmxiblJ6SUdseklHTmhiR3hpWVdOclEyOXVkR1Y0ZENCcFppQnBkQ0JwY3lCaElFUlBUU0J1YjJSbElHOXlJR3BSZFdWeWVTQmpiMnhzWldOMGFXOXVYRzVjZEZ4MFhIUm5iRzlpWVd4RmRtVnVkRU52Ym5SbGVIUWdQU0J6TG1OdmJuUmxlSFFnSmlaY2JseDBYSFJjZEZ4MEtDQmpZV3hzWW1GamEwTnZiblJsZUhRdWJtOWtaVlI1Y0dVZ2ZId2dZMkZzYkdKaFkydERiMjUwWlhoMExtcHhkV1Z5ZVNBcElEOWNibHgwWEhSY2RGeDBYSFJxVVhWbGNua29JR05oYkd4aVlXTnJRMjl1ZEdWNGRDQXBJRHBjYmx4MFhIUmNkRngwWEhScVVYVmxjbmt1WlhabGJuUXNYRzVjYmx4MFhIUmNkQzh2SUVSbFptVnljbVZrYzF4dVhIUmNkRngwWkdWbVpYSnlaV1FnUFNCcVVYVmxjbmt1UkdWbVpYSnlaV1FvS1N4Y2JseDBYSFJjZEdOdmJYQnNaWFJsUkdWbVpYSnlaV1FnUFNCcVVYVmxjbmt1UTJGc2JHSmhZMnR6S0NCY0ltOXVZMlVnYldWdGIzSjVYQ0lnS1N4Y2JseHVYSFJjZEZ4MEx5OGdVM1JoZEhWekxXUmxjR1Z1WkdWdWRDQmpZV3hzWW1GamEzTmNibHgwWEhSY2RITjBZWFIxYzBOdlpHVWdQU0J6TG5OMFlYUjFjME52WkdVZ2ZId2dlMzBzWEc1Y2JseDBYSFJjZEM4dklFaGxZV1JsY25NZ0tIUm9aWGtnWVhKbElITmxiblFnWVd4c0lHRjBJRzl1WTJVcFhHNWNkRngwWEhSeVpYRjFaWE4wU0dWaFpHVnljeUE5SUh0OUxGeHVYSFJjZEZ4MGNtVnhkV1Z6ZEVobFlXUmxjbk5PWVcxbGN5QTlJSHQ5TEZ4dVhHNWNkRngwWEhRdkx5QkVaV1poZFd4MElHRmliM0owSUcxbGMzTmhaMlZjYmx4MFhIUmNkSE4wY2tGaWIzSjBJRDBnWENKallXNWpaV3hsWkZ3aUxGeHVYRzVjZEZ4MFhIUXZMeUJHWVd0bElIaG9jbHh1WEhSY2RGeDBhbkZZU0ZJZ1BTQjdYRzVjZEZ4MFhIUmNkSEpsWVdSNVUzUmhkR1U2SURBc1hHNWNibHgwWEhSY2RGeDBMeThnUW5WcGJHUnpJR2hsWVdSbGNuTWdhR0Z6YUhSaFlteGxJR2xtSUc1bFpXUmxaRnh1WEhSY2RGeDBYSFJuWlhSU1pYTndiMjV6WlVobFlXUmxjam9nWm5WdVkzUnBiMjRvSUd0bGVTQXBJSHRjYmx4MFhIUmNkRngwWEhSMllYSWdiV0YwWTJnN1hHNWNkRngwWEhSY2RGeDBhV1lnS0NCamIyMXdiR1YwWldRZ0tTQjdYRzVjZEZ4MFhIUmNkRngwWEhScFppQW9JQ0Z5WlhOd2IyNXpaVWhsWVdSbGNuTWdLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkSEpsYzNCdmJuTmxTR1ZoWkdWeWN5QTlJSHQ5TzF4dVhIUmNkRngwWEhSY2RGeDBYSFIzYUdsc1pTQW9JQ2dnYldGMFkyZ2dQU0J5YUdWaFpHVnljeTVsZUdWaktDQnlaWE53YjI1elpVaGxZV1JsY25OVGRISnBibWNnS1NBcElDa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkSEpsYzNCdmJuTmxTR1ZoWkdWeWMxc2diV0YwWTJoYklERWdYUzUwYjB4dmQyVnlRMkZ6WlNncElGMGdQU0J0WVhSamFGc2dNaUJkTzF4dVhIUmNkRngwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkRngwWEhSdFlYUmphQ0E5SUhKbGMzQnZibk5sU0dWaFpHVnljMXNnYTJWNUxuUnZURzkzWlhKRFlYTmxLQ2tnWFR0Y2JseDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkRngwY21WMGRYSnVJRzFoZEdOb0lEMDlJRzUxYkd3Z1B5QnVkV3hzSURvZ2JXRjBZMmc3WEc1Y2RGeDBYSFJjZEgwc1hHNWNibHgwWEhSY2RGeDBMeThnVW1GM0lITjBjbWx1WjF4dVhIUmNkRngwWEhSblpYUkJiR3hTWlhOd2IyNXpaVWhsWVdSbGNuTTZJR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkRngwWEhSY2RISmxkSFZ5YmlCamIyMXdiR1YwWldRZ1B5QnlaWE53YjI1elpVaGxZV1JsY25OVGRISnBibWNnT2lCdWRXeHNPMXh1WEhSY2RGeDBYSFI5TEZ4dVhHNWNkRngwWEhSY2RDOHZJRU5oWTJobGN5QjBhR1VnYUdWaFpHVnlYRzVjZEZ4MFhIUmNkSE5sZEZKbGNYVmxjM1JJWldGa1pYSTZJR1oxYm1OMGFXOXVLQ0J1WVcxbExDQjJZV3gxWlNBcElIdGNibHgwWEhSY2RGeDBYSFJwWmlBb0lHTnZiWEJzWlhSbFpDQTlQU0J1ZFd4c0lDa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MGJtRnRaU0E5SUhKbGNYVmxjM1JJWldGa1pYSnpUbUZ0WlhOYklHNWhiV1V1ZEc5TWIzZGxja05oYzJVb0tTQmRJRDFjYmx4MFhIUmNkRngwWEhSY2RGeDBjbVZ4ZFdWemRFaGxZV1JsY25OT1lXMWxjMXNnYm1GdFpTNTBiMHh2ZDJWeVEyRnpaU2dwSUYwZ2ZId2dibUZ0WlR0Y2JseDBYSFJjZEZ4MFhIUmNkSEpsY1hWbGMzUklaV0ZrWlhKeld5QnVZVzFsSUYwZ1BTQjJZV3gxWlR0Y2JseDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkRngwY21WMGRYSnVJSFJvYVhNN1hHNWNkRngwWEhSY2RIMHNYRzVjYmx4MFhIUmNkRngwTHk4Z1QzWmxjbkpwWkdWeklISmxjM0J2Ym5ObElHTnZiblJsYm5RdGRIbHdaU0JvWldGa1pYSmNibHgwWEhSY2RGeDBiM1psY25KcFpHVk5hVzFsVkhsd1pUb2dablZ1WTNScGIyNG9JSFI1Y0dVZ0tTQjdYRzVjZEZ4MFhIUmNkRngwYVdZZ0tDQmpiMjF3YkdWMFpXUWdQVDBnYm5Wc2JDQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RITXViV2x0WlZSNWNHVWdQU0IwZVhCbE8xeHVYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwWEhSeVpYUjFjbTRnZEdocGN6dGNibHgwWEhSY2RGeDBmU3hjYmx4dVhIUmNkRngwWEhRdkx5QlRkR0YwZFhNdFpHVndaVzVrWlc1MElHTmhiR3hpWVdOcmMxeHVYSFJjZEZ4MFhIUnpkR0YwZFhORGIyUmxPaUJtZFc1amRHbHZiaWdnYldGd0lDa2dlMXh1WEhSY2RGeDBYSFJjZEhaaGNpQmpiMlJsTzF4dVhIUmNkRngwWEhSY2RHbG1JQ2dnYldGd0lDa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MGFXWWdLQ0JqYjIxd2JHVjBaV1FnS1NCN1hHNWNibHgwWEhSY2RGeDBYSFJjZEZ4MEx5OGdSWGhsWTNWMFpTQjBhR1VnWVhCd2NtOXdjbWxoZEdVZ1kyRnNiR0poWTJ0elhHNWNkRngwWEhSY2RGeDBYSFJjZEdweFdFaFNMbUZzZDJGNWN5Z2diV0Z3V3lCcWNWaElVaTV6ZEdGMGRYTWdYU0FwTzF4dVhIUmNkRngwWEhSY2RGeDBmU0JsYkhObElIdGNibHh1WEhSY2RGeDBYSFJjZEZ4MFhIUXZMeUJNWVhwNUxXRmtaQ0IwYUdVZ2JtVjNJR05oYkd4aVlXTnJjeUJwYmlCaElIZGhlU0IwYUdGMElIQnlaWE5sY25abGN5QnZiR1FnYjI1bGMxeHVYSFJjZEZ4MFhIUmNkRngwWEhSbWIzSWdLQ0JqYjJSbElHbHVJRzFoY0NBcElIdGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUnpkR0YwZFhORGIyUmxXeUJqYjJSbElGMGdQU0JiSUhOMFlYUjFjME52WkdWYklHTnZaR1VnWFN3Z2JXRndXeUJqYjJSbElGMGdYVHRjYmx4MFhIUmNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwWEhSeVpYUjFjbTRnZEdocGN6dGNibHgwWEhSY2RGeDBmU3hjYmx4dVhIUmNkRngwWEhRdkx5QkRZVzVqWld3Z2RHaGxJSEpsY1hWbGMzUmNibHgwWEhSY2RGeDBZV0p2Y25RNklHWjFibU4wYVc5dUtDQnpkR0YwZFhOVVpYaDBJQ2tnZTF4dVhIUmNkRngwWEhSY2RIWmhjaUJtYVc1aGJGUmxlSFFnUFNCemRHRjBkWE5VWlhoMElIeDhJSE4wY2tGaWIzSjBPMXh1WEhSY2RGeDBYSFJjZEdsbUlDZ2dkSEpoYm5Od2IzSjBJQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBkSEpoYm5Od2IzSjBMbUZpYjNKMEtDQm1hVzVoYkZSbGVIUWdLVHRjYmx4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RGeDBaRzl1WlNnZ01Dd2dabWx1WVd4VVpYaDBJQ2s3WEc1Y2RGeDBYSFJjZEZ4MGNtVjBkWEp1SUhSb2FYTTdYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkSDA3WEc1Y2JseDBYSFF2THlCQmRIUmhZMmdnWkdWbVpYSnlaV1J6WEc1Y2RGeDBaR1ZtWlhKeVpXUXVjSEp2YldselpTZ2dhbkZZU0ZJZ0tUdGNibHh1WEhSY2RDOHZJRUZrWkNCd2NtOTBiMk52YkNCcFppQnViM1FnY0hKdmRtbGtaV1FnS0hCeVpXWnBiSFJsY25NZ2JXbG5hSFFnWlhod1pXTjBJR2wwS1Z4dVhIUmNkQzh2SUVoaGJtUnNaU0JtWVd4emVTQjFjbXdnYVc0Z2RHaGxJSE5sZEhScGJtZHpJRzlpYW1WamRDQW9JekV3TURrek9pQmpiMjV6YVhOMFpXNWplU0IzYVhSb0lHOXNaQ0J6YVdkdVlYUjFjbVVwWEc1Y2RGeDBMeThnVjJVZ1lXeHpieUIxYzJVZ2RHaGxJSFZ5YkNCd1lYSmhiV1YwWlhJZ2FXWWdZWFpoYVd4aFlteGxYRzVjZEZ4MGN5NTFjbXdnUFNBb0lDZ2dkWEpzSUh4OElITXVkWEpzSUh4OElHeHZZMkYwYVc5dUxtaHlaV1lnS1NBcklGd2lYQ0lnS1Z4dVhIUmNkRngwTG5KbGNHeGhZMlVvSUhKd2NtOTBiMk52YkN3Z2JHOWpZWFJwYjI0dWNISnZkRzlqYjJ3Z0t5QmNJaTh2WENJZ0tUdGNibHh1WEhSY2RDOHZJRUZzYVdGeklHMWxkR2h2WkNCdmNIUnBiMjRnZEc4Z2RIbHdaU0JoY3lCd1pYSWdkR2xqYTJWMElDTXhNakF3TkZ4dVhIUmNkSE11ZEhsd1pTQTlJRzl3ZEdsdmJuTXViV1YwYUc5a0lIeDhJRzl3ZEdsdmJuTXVkSGx3WlNCOGZDQnpMbTFsZEdodlpDQjhmQ0J6TG5SNWNHVTdYRzVjYmx4MFhIUXZMeUJGZUhSeVlXTjBJR1JoZEdGVWVYQmxjeUJzYVhOMFhHNWNkRngwY3k1a1lYUmhWSGx3WlhNZ1BTQW9JSE11WkdGMFlWUjVjR1VnZkh3Z1hDSXFYQ0lnS1M1MGIweHZkMlZ5UTJGelpTZ3BMbTFoZEdOb0tDQnlibTkwYUhSdGJIZG9hWFJsSUNrZ2ZId2dXeUJjSWx3aUlGMDdYRzVjYmx4MFhIUXZMeUJCSUdOeWIzTnpMV1J2YldGcGJpQnlaWEYxWlhOMElHbHpJR2x1SUc5eVpHVnlJSGRvWlc0Z2RHaGxJRzl5YVdkcGJpQmtiMlZ6YmlkMElHMWhkR05vSUhSb1pTQmpkWEp5Wlc1MElHOXlhV2RwYmk1Y2JseDBYSFJwWmlBb0lITXVZM0p2YzNORWIyMWhhVzRnUFQwZ2JuVnNiQ0FwSUh0Y2JseDBYSFJjZEhWeWJFRnVZMmh2Y2lBOUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvSUZ3aVlWd2lJQ2s3WEc1Y2JseDBYSFJjZEM4dklGTjFjSEJ2Y25RNklFbEZJRHc5T0NBdElERXhMQ0JGWkdkbElERXlJQzBnTVROY2JseDBYSFJjZEM4dklFbEZJSFJvY205M2N5QmxlR05sY0hScGIyNGdiMjRnWVdOalpYTnphVzVuSUhSb1pTQm9jbVZtSUhCeWIzQmxjblI1SUdsbUlIVnliQ0JwY3lCdFlXeG1iM0p0WldRc1hHNWNkRngwWEhRdkx5QmxMbWN1SUdoMGRIQTZMeTlsZUdGdGNHeGxMbU52YlRvNE1IZ3ZYRzVjZEZ4MFhIUjBjbmtnZTF4dVhIUmNkRngwWEhSMWNteEJibU5vYjNJdWFISmxaaUE5SUhNdWRYSnNPMXh1WEc1Y2RGeDBYSFJjZEM4dklGTjFjSEJ2Y25RNklFbEZJRHc5T0NBdElERXhJRzl1YkhsY2JseDBYSFJjZEZ4MEx5OGdRVzVqYUc5eUozTWdhRzl6ZENCd2NtOXdaWEowZVNCcGMyNG5kQ0JqYjNKeVpXTjBiSGtnYzJWMElIZG9aVzRnY3k1MWNtd2dhWE1nY21Wc1lYUnBkbVZjYmx4MFhIUmNkRngwZFhKc1FXNWphRzl5TG1oeVpXWWdQU0IxY214QmJtTm9iM0l1YUhKbFpqdGNibHgwWEhSY2RGeDBjeTVqY205emMwUnZiV0ZwYmlBOUlHOXlhV2RwYmtGdVkyaHZjaTV3Y205MGIyTnZiQ0FySUZ3aUx5OWNJaUFySUc5eWFXZHBia0Z1WTJodmNpNW9iM04wSUNFOVBWeHVYSFJjZEZ4MFhIUmNkSFZ5YkVGdVkyaHZjaTV3Y205MGIyTnZiQ0FySUZ3aUx5OWNJaUFySUhWeWJFRnVZMmh2Y2k1b2IzTjBPMXh1WEhSY2RGeDBmU0JqWVhSamFDQW9JR1VnS1NCN1hHNWNibHgwWEhSY2RGeDBMeThnU1dZZ2RHaGxjbVVnYVhNZ1lXNGdaWEp5YjNJZ2NHRnljMmx1WnlCMGFHVWdWVkpNTENCaGMzTjFiV1VnYVhRZ2FYTWdZM0p2YzNORWIyMWhhVzRzWEc1Y2RGeDBYSFJjZEM4dklHbDBJR05oYmlCaVpTQnlaV3BsWTNSbFpDQmllU0IwYUdVZ2RISmhibk53YjNKMElHbG1JR2wwSUdseklHbHVkbUZzYVdSY2JseDBYSFJjZEZ4MGN5NWpjbTl6YzBSdmJXRnBiaUE5SUhSeWRXVTdYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZWeHVYRzVjZEZ4MEx5OGdRMjl1ZG1WeWRDQmtZWFJoSUdsbUlHNXZkQ0JoYkhKbFlXUjVJR0VnYzNSeWFXNW5YRzVjZEZ4MGFXWWdLQ0J6TG1SaGRHRWdKaVlnY3k1d2NtOWpaWE56UkdGMFlTQW1KaUIwZVhCbGIyWWdjeTVrWVhSaElDRTlQU0JjSW5OMGNtbHVaMXdpSUNrZ2UxeHVYSFJjZEZ4MGN5NWtZWFJoSUQwZ2FsRjFaWEo1TG5CaGNtRnRLQ0J6TG1SaGRHRXNJSE11ZEhKaFpHbDBhVzl1WVd3Z0tUdGNibHgwWEhSOVhHNWNibHgwWEhRdkx5QkJjSEJzZVNCd2NtVm1hV3gwWlhKelhHNWNkRngwYVc1emNHVmpkRkJ5WldacGJIUmxjbk5QY2xSeVlXNXpjRzl5ZEhNb0lIQnlaV1pwYkhSbGNuTXNJSE1zSUc5d2RHbHZibk1zSUdweFdFaFNJQ2s3WEc1Y2JseDBYSFF2THlCSlppQnlaWEYxWlhOMElIZGhjeUJoWW05eWRHVmtJR2x1YzJsa1pTQmhJSEJ5WldacGJIUmxjaXdnYzNSdmNDQjBhR1Z5WlZ4dVhIUmNkR2xtSUNnZ1kyOXRjR3hsZEdWa0lDa2dlMXh1WEhSY2RGeDBjbVYwZFhKdUlHcHhXRWhTTzF4dVhIUmNkSDFjYmx4dVhIUmNkQzh2SUZkbElHTmhiaUJtYVhKbElHZHNiMkpoYkNCbGRtVnVkSE1nWVhNZ2IyWWdibTkzSUdsbUlHRnphMlZrSUhSdlhHNWNkRngwTHk4Z1JHOXVKM1FnWm1seVpTQmxkbVZ1ZEhNZ2FXWWdhbEYxWlhKNUxtVjJaVzUwSUdseklIVnVaR1ZtYVc1bFpDQnBiaUJoYmlCQlRVUXRkWE5oWjJVZ2MyTmxibUZ5YVc4Z0tDTXhOVEV4T0NsY2JseDBYSFJtYVhKbFIyeHZZbUZzY3lBOUlHcFJkV1Z5ZVM1bGRtVnVkQ0FtSmlCekxtZHNiMkpoYkR0Y2JseHVYSFJjZEM4dklGZGhkR05vSUdadmNpQmhJRzVsZHlCelpYUWdiMllnY21WeGRXVnpkSE5jYmx4MFhIUnBaaUFvSUdacGNtVkhiRzlpWVd4eklDWW1JR3BSZFdWeWVTNWhZM1JwZG1Vckt5QTlQVDBnTUNBcElIdGNibHgwWEhSY2RHcFJkV1Z5ZVM1bGRtVnVkQzUwY21sbloyVnlLQ0JjSW1GcVlYaFRkR0Z5ZEZ3aUlDazdYRzVjZEZ4MGZWeHVYRzVjZEZ4MEx5OGdWWEJ3WlhKallYTmxJSFJvWlNCMGVYQmxYRzVjZEZ4MGN5NTBlWEJsSUQwZ2N5NTBlWEJsTG5SdlZYQndaWEpEWVhObEtDazdYRzVjYmx4MFhIUXZMeUJFWlhSbGNtMXBibVVnYVdZZ2NtVnhkV1Z6ZENCb1lYTWdZMjl1ZEdWdWRGeHVYSFJjZEhNdWFHRnpRMjl1ZEdWdWRDQTlJQ0Z5Ym05RGIyNTBaVzUwTG5SbGMzUW9JSE11ZEhsd1pTQXBPMXh1WEc1Y2RGeDBMeThnVTJGMlpTQjBhR1VnVlZKTUlHbHVJR05oYzJVZ2QyVW5jbVVnZEc5NWFXNW5JSGRwZEdnZ2RHaGxJRWxtTFUxdlpHbG1hV1ZrTFZOcGJtTmxYRzVjZEZ4MEx5OGdZVzVrTDI5eUlFbG1MVTV2Ym1VdFRXRjBZMmdnYUdWaFpHVnlJR3hoZEdWeUlHOXVYRzVjZEZ4MEx5OGdVbVZ0YjNabElHaGhjMmdnZEc4Z2MybHRjR3hwWm5rZ2RYSnNJRzFoYm1sd2RXeGhkR2x2Ymx4dVhIUmNkR05oWTJobFZWSk1JRDBnY3k1MWNtd3VjbVZ3YkdGalpTZ2djbWhoYzJnc0lGd2lYQ0lnS1R0Y2JseHVYSFJjZEM4dklFMXZjbVVnYjNCMGFXOXVjeUJvWVc1a2JHbHVaeUJtYjNJZ2NtVnhkV1Z6ZEhNZ2QybDBhQ0J1YnlCamIyNTBaVzUwWEc1Y2RGeDBhV1lnS0NBaGN5NW9ZWE5EYjI1MFpXNTBJQ2tnZTF4dVhHNWNkRngwWEhRdkx5QlNaVzFsYldKbGNpQjBhR1VnYUdGemFDQnpieUIzWlNCallXNGdjSFYwSUdsMElHSmhZMnRjYmx4MFhIUmNkSFZ1WTJGamFHVmtJRDBnY3k1MWNtd3VjMnhwWTJVb0lHTmhZMmhsVlZKTUxteGxibWQwYUNBcE8xeHVYRzVjZEZ4MFhIUXZMeUJKWmlCa1lYUmhJR2x6SUdGMllXbHNZV0pzWlN3Z1lYQndaVzVrSUdSaGRHRWdkRzhnZFhKc1hHNWNkRngwWEhScFppQW9JSE11WkdGMFlTQXBJSHRjYmx4MFhIUmNkRngwWTJGamFHVlZVa3dnS3owZ0tDQnljWFZsY25rdWRHVnpkQ2dnWTJGamFHVlZVa3dnS1NBL0lGd2lKbHdpSURvZ1hDSS9YQ0lnS1NBcklITXVaR0YwWVR0Y2JseHVYSFJjZEZ4MFhIUXZMeUFqT1RZNE1qb2djbVZ0YjNabElHUmhkR0VnYzI4Z2RHaGhkQ0JwZENkeklHNXZkQ0IxYzJWa0lHbHVJR0Z1SUdWMlpXNTBkV0ZzSUhKbGRISjVYRzVjZEZ4MFhIUmNkR1JsYkdWMFpTQnpMbVJoZEdFN1hHNWNkRngwWEhSOVhHNWNibHgwWEhSY2RDOHZJRUZrWkNCdmNpQjFjR1JoZEdVZ1lXNTBhUzFqWVdOb1pTQndZWEpoYlNCcFppQnVaV1ZrWldSY2JseDBYSFJjZEdsbUlDZ2djeTVqWVdOb1pTQTlQVDBnWm1Gc2MyVWdLU0I3WEc1Y2RGeDBYSFJjZEdOaFkyaGxWVkpNSUQwZ1kyRmphR1ZWVWt3dWNtVndiR0ZqWlNnZ2NtRnVkR2xEWVdOb1pTd2dYQ0lrTVZ3aUlDazdYRzVjZEZ4MFhIUmNkSFZ1WTJGamFHVmtJRDBnS0NCeWNYVmxjbmt1ZEdWemRDZ2dZMkZqYUdWVlVrd2dLU0EvSUZ3aUpsd2lJRG9nWENJL1hDSWdLU0FySUZ3aVh6MWNJaUFySUNnZ2JtOXVZMlVyS3lBcElDc2dkVzVqWVdOb1pXUTdYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkQzh2SUZCMWRDQm9ZWE5vSUdGdVpDQmhiblJwTFdOaFkyaGxJRzl1SUhSb1pTQlZVa3dnZEdoaGRDQjNhV3hzSUdKbElISmxjWFZsYzNSbFpDQW9aMmd0TVRjek1pbGNibHgwWEhSY2RITXVkWEpzSUQwZ1kyRmphR1ZWVWt3Z0t5QjFibU5oWTJobFpEdGNibHh1WEhSY2RDOHZJRU5vWVc1blpTQW5KVEl3SnlCMGJ5QW5LeWNnYVdZZ2RHaHBjeUJwY3lCbGJtTnZaR1ZrSUdadmNtMGdZbTlrZVNCamIyNTBaVzUwSUNobmFDMHlOalU0S1Z4dVhIUmNkSDBnWld4elpTQnBaaUFvSUhNdVpHRjBZU0FtSmlCekxuQnliMk5sYzNORVlYUmhJQ1ltWEc1Y2RGeDBYSFFvSUhNdVkyOXVkR1Z1ZEZSNWNHVWdmSHdnWENKY0lpQXBMbWx1WkdWNFQyWW9JRndpWVhCd2JHbGpZWFJwYjI0dmVDMTNkM2N0Wm05eWJTMTFjbXhsYm1OdlpHVmtYQ0lnS1NBOVBUMGdNQ0FwSUh0Y2JseDBYSFJjZEhNdVpHRjBZU0E5SUhNdVpHRjBZUzV5WlhCc1lXTmxLQ0J5TWpBc0lGd2lLMXdpSUNrN1hHNWNkRngwZlZ4dVhHNWNkRngwTHk4Z1UyVjBJSFJvWlNCSlppMU5iMlJwWm1sbFpDMVRhVzVqWlNCaGJtUXZiM0lnU1dZdFRtOXVaUzFOWVhSamFDQm9aV0ZrWlhJc0lHbG1JR2x1SUdsbVRXOWthV1pwWldRZ2JXOWtaUzVjYmx4MFhIUnBaaUFvSUhNdWFXWk5iMlJwWm1sbFpDQXBJSHRjYmx4MFhIUmNkR2xtSUNnZ2FsRjFaWEo1TG14aGMzUk5iMlJwWm1sbFpGc2dZMkZqYUdWVlVrd2dYU0FwSUh0Y2JseDBYSFJjZEZ4MGFuRllTRkl1YzJWMFVtVnhkV1Z6ZEVobFlXUmxjaWdnWENKSlppMU5iMlJwWm1sbFpDMVRhVzVqWlZ3aUxDQnFVWFZsY25rdWJHRnpkRTF2WkdsbWFXVmtXeUJqWVdOb1pWVlNUQ0JkSUNrN1hHNWNkRngwWEhSOVhHNWNkRngwWEhScFppQW9JR3BSZFdWeWVTNWxkR0ZuV3lCallXTm9aVlZTVENCZElDa2dlMXh1WEhSY2RGeDBYSFJxY1ZoSVVpNXpaWFJTWlhGMVpYTjBTR1ZoWkdWeUtDQmNJa2xtTFU1dmJtVXRUV0YwWTJoY0lpd2dhbEYxWlhKNUxtVjBZV2RiSUdOaFkyaGxWVkpNSUYwZ0tUdGNibHgwWEhSY2RIMWNibHgwWEhSOVhHNWNibHgwWEhRdkx5QlRaWFFnZEdobElHTnZjbkpsWTNRZ2FHVmhaR1Z5TENCcFppQmtZWFJoSUdseklHSmxhVzVuSUhObGJuUmNibHgwWEhScFppQW9JSE11WkdGMFlTQW1KaUJ6TG1oaGMwTnZiblJsYm5RZ0ppWWdjeTVqYjI1MFpXNTBWSGx3WlNBaFBUMGdabUZzYzJVZ2ZId2diM0IwYVc5dWN5NWpiMjUwWlc1MFZIbHdaU0FwSUh0Y2JseDBYSFJjZEdweFdFaFNMbk5sZEZKbGNYVmxjM1JJWldGa1pYSW9JRndpUTI5dWRHVnVkQzFVZVhCbFhDSXNJSE11WTI5dWRHVnVkRlI1Y0dVZ0tUdGNibHgwWEhSOVhHNWNibHgwWEhRdkx5QlRaWFFnZEdobElFRmpZMlZ3ZEhNZ2FHVmhaR1Z5SUdadmNpQjBhR1VnYzJWeWRtVnlMQ0JrWlhCbGJtUnBibWNnYjI0Z2RHaGxJR1JoZEdGVWVYQmxYRzVjZEZ4MGFuRllTRkl1YzJWMFVtVnhkV1Z6ZEVobFlXUmxjaWhjYmx4MFhIUmNkRndpUVdOalpYQjBYQ0lzWEc1Y2RGeDBYSFJ6TG1SaGRHRlVlWEJsYzFzZ01DQmRJQ1ltSUhNdVlXTmpaWEIwYzFzZ2N5NWtZWFJoVkhsd1pYTmJJREFnWFNCZElEOWNibHgwWEhSY2RGeDBjeTVoWTJObGNIUnpXeUJ6TG1SaGRHRlVlWEJsYzFzZ01DQmRJRjBnSzF4dVhIUmNkRngwWEhSY2RDZ2djeTVrWVhSaFZIbHdaWE5iSURBZ1hTQWhQVDBnWENJcVhDSWdQeUJjSWl3Z1hDSWdLeUJoYkd4VWVYQmxjeUFySUZ3aU95QnhQVEF1TURGY0lpQTZJRndpWENJZ0tTQTZYRzVjZEZ4MFhIUmNkSE11WVdOalpYQjBjMXNnWENJcVhDSWdYVnh1WEhSY2RDazdYRzVjYmx4MFhIUXZMeUJEYUdWamF5Qm1iM0lnYUdWaFpHVnljeUJ2Y0hScGIyNWNibHgwWEhSbWIzSWdLQ0JwSUdsdUlITXVhR1ZoWkdWeWN5QXBJSHRjYmx4MFhIUmNkR3B4V0VoU0xuTmxkRkpsY1hWbGMzUklaV0ZrWlhJb0lHa3NJSE11YUdWaFpHVnljMXNnYVNCZElDazdYRzVjZEZ4MGZWeHVYRzVjZEZ4MEx5OGdRV3hzYjNjZ1kzVnpkRzl0SUdobFlXUmxjbk12YldsdFpYUjVjR1Z6SUdGdVpDQmxZWEpzZVNCaFltOXlkRnh1WEhSY2RHbG1JQ2dnY3k1aVpXWnZjbVZUWlc1a0lDWW1YRzVjZEZ4MFhIUW9JSE11WW1WbWIzSmxVMlZ1WkM1allXeHNLQ0JqWVd4c1ltRmphME52Ym5SbGVIUXNJR3B4V0VoU0xDQnpJQ2tnUFQwOUlHWmhiSE5sSUh4OElHTnZiWEJzWlhSbFpDQXBJQ2tnZTF4dVhHNWNkRngwWEhRdkx5QkJZbTl5ZENCcFppQnViM1FnWkc5dVpTQmhiSEpsWVdSNUlHRnVaQ0J5WlhSMWNtNWNibHgwWEhSY2RISmxkSFZ5YmlCcWNWaElVaTVoWW05eWRDZ3BPMXh1WEhSY2RIMWNibHh1WEhSY2RDOHZJRUZpYjNKMGFXNW5JR2x6SUc1dklHeHZibWRsY2lCaElHTmhibU5sYkd4aGRHbHZibHh1WEhSY2RITjBja0ZpYjNKMElEMGdYQ0poWW05eWRGd2lPMXh1WEc1Y2RGeDBMeThnU1c1emRHRnNiQ0JqWVd4c1ltRmphM01nYjI0Z1pHVm1aWEp5WldSelhHNWNkRngwWTI5dGNHeGxkR1ZFWldabGNuSmxaQzVoWkdRb0lITXVZMjl0Y0d4bGRHVWdLVHRjYmx4MFhIUnFjVmhJVWk1a2IyNWxLQ0J6TG5OMVkyTmxjM01nS1R0Y2JseDBYSFJxY1ZoSVVpNW1ZV2xzS0NCekxtVnljbTl5SUNrN1hHNWNibHgwWEhRdkx5QkhaWFFnZEhKaGJuTndiM0owWEc1Y2RGeDBkSEpoYm5Od2IzSjBJRDBnYVc1emNHVmpkRkJ5WldacGJIUmxjbk5QY2xSeVlXNXpjRzl5ZEhNb0lIUnlZVzV6Y0c5eWRITXNJSE1zSUc5d2RHbHZibk1zSUdweFdFaFNJQ2s3WEc1Y2JseDBYSFF2THlCSlppQnVieUIwY21GdWMzQnZjblFzSUhkbElHRjFkRzh0WVdKdmNuUmNibHgwWEhScFppQW9JQ0YwY21GdWMzQnZjblFnS1NCN1hHNWNkRngwWEhSa2IyNWxLQ0F0TVN3Z1hDSk9ieUJVY21GdWMzQnZjblJjSWlBcE8xeHVYSFJjZEgwZ1pXeHpaU0I3WEc1Y2RGeDBYSFJxY1ZoSVVpNXlaV0ZrZVZOMFlYUmxJRDBnTVR0Y2JseHVYSFJjZEZ4MEx5OGdVMlZ1WkNCbmJHOWlZV3dnWlhabGJuUmNibHgwWEhSY2RHbG1JQ2dnWm1seVpVZHNiMkpoYkhNZ0tTQjdYRzVjZEZ4MFhIUmNkR2RzYjJKaGJFVjJaVzUwUTI5dWRHVjRkQzUwY21sbloyVnlLQ0JjSW1GcVlYaFRaVzVrWENJc0lGc2dhbkZZU0ZJc0lITWdYU0FwTzF4dVhIUmNkRngwZlZ4dVhHNWNkRngwWEhRdkx5QkpaaUJ5WlhGMVpYTjBJSGRoY3lCaFltOXlkR1ZrSUdsdWMybGtaU0JoYW1GNFUyVnVaQ3dnYzNSdmNDQjBhR1Z5WlZ4dVhIUmNkRngwYVdZZ0tDQmpiMjF3YkdWMFpXUWdLU0I3WEc1Y2RGeDBYSFJjZEhKbGRIVnliaUJxY1ZoSVVqdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBMeThnVkdsdFpXOTFkRnh1WEhSY2RGeDBhV1lnS0NCekxtRnplVzVqSUNZbUlITXVkR2x0Wlc5MWRDQStJREFnS1NCN1hHNWNkRngwWEhSY2RIUnBiV1Z2ZFhSVWFXMWxjaUE5SUhkcGJtUnZkeTV6WlhSVWFXMWxiM1YwS0NCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSY2RGeDBYSFJxY1ZoSVVpNWhZbTl5ZENnZ1hDSjBhVzFsYjNWMFhDSWdLVHRjYmx4MFhIUmNkRngwZlN3Z2N5NTBhVzFsYjNWMElDazdYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkSFJ5ZVNCN1hHNWNkRngwWEhSY2RHTnZiWEJzWlhSbFpDQTlJR1poYkhObE8xeHVYSFJjZEZ4MFhIUjBjbUZ1YzNCdmNuUXVjMlZ1WkNnZ2NtVnhkV1Z6ZEVobFlXUmxjbk1zSUdSdmJtVWdLVHRjYmx4MFhIUmNkSDBnWTJGMFkyZ2dLQ0JsSUNrZ2UxeHVYRzVjZEZ4MFhIUmNkQzh2SUZKbGRHaHliM2NnY0c5emRDMWpiMjF3YkdWMGFXOXVJR1Y0WTJWd2RHbHZibk5jYmx4MFhIUmNkRngwYVdZZ0tDQmpiMjF3YkdWMFpXUWdLU0I3WEc1Y2RGeDBYSFJjZEZ4MGRHaHliM2NnWlR0Y2JseDBYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmNkQzh2SUZCeWIzQmhaMkYwWlNCdmRHaGxjbk1nWVhNZ2NtVnpkV3gwYzF4dVhIUmNkRngwWEhSa2IyNWxLQ0F0TVN3Z1pTQXBPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMWNibHh1WEhSY2RDOHZJRU5oYkd4aVlXTnJJR1p2Y2lCM2FHVnVJR1YyWlhKNWRHaHBibWNnYVhNZ1pHOXVaVnh1WEhSY2RHWjFibU4wYVc5dUlHUnZibVVvSUhOMFlYUjFjeXdnYm1GMGFYWmxVM1JoZEhWelZHVjRkQ3dnY21WemNHOXVjMlZ6TENCb1pXRmtaWEp6SUNrZ2UxeHVYSFJjZEZ4MGRtRnlJR2x6VTNWalkyVnpjeXdnYzNWalkyVnpjeXdnWlhKeWIzSXNJSEpsYzNCdmJuTmxMQ0J0YjJScFptbGxaQ3hjYmx4MFhIUmNkRngwYzNSaGRIVnpWR1Y0ZENBOUlHNWhkR2wyWlZOMFlYUjFjMVJsZUhRN1hHNWNibHgwWEhSY2RDOHZJRWxuYm05eVpTQnlaWEJsWVhRZ2FXNTJiMk5oZEdsdmJuTmNibHgwWEhSY2RHbG1JQ2dnWTI5dGNHeGxkR1ZrSUNrZ2UxeHVYSFJjZEZ4MFhIUnlaWFIxY200N1hHNWNkRngwWEhSOVhHNWNibHgwWEhSY2RHTnZiWEJzWlhSbFpDQTlJSFJ5ZFdVN1hHNWNibHgwWEhSY2RDOHZJRU5zWldGeUlIUnBiV1Z2ZFhRZ2FXWWdhWFFnWlhocGMzUnpYRzVjZEZ4MFhIUnBaaUFvSUhScGJXVnZkWFJVYVcxbGNpQXBJSHRjYmx4MFhIUmNkRngwZDJsdVpHOTNMbU5zWldGeVZHbHRaVzkxZENnZ2RHbHRaVzkxZEZScGJXVnlJQ2s3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEM4dklFUmxjbVZtWlhKbGJtTmxJSFJ5WVc1emNHOXlkQ0JtYjNJZ1pXRnliSGtnWjJGeVltRm5aU0JqYjJ4c1pXTjBhVzl1WEc1Y2RGeDBYSFF2THlBb2JtOGdiV0YwZEdWeUlHaHZkeUJzYjI1bklIUm9aU0JxY1ZoSVVpQnZZbXBsWTNRZ2QybHNiQ0JpWlNCMWMyVmtLVnh1WEhSY2RGeDBkSEpoYm5Od2IzSjBJRDBnZFc1a1pXWnBibVZrTzF4dVhHNWNkRngwWEhRdkx5QkRZV05vWlNCeVpYTndiMjV6WlNCb1pXRmtaWEp6WEc1Y2RGeDBYSFJ5WlhOd2IyNXpaVWhsWVdSbGNuTlRkSEpwYm1jZ1BTQm9aV0ZrWlhKeklIeDhJRndpWENJN1hHNWNibHgwWEhSY2RDOHZJRk5sZENCeVpXRmtlVk4wWVhSbFhHNWNkRngwWEhScWNWaElVaTV5WldGa2VWTjBZWFJsSUQwZ2MzUmhkSFZ6SUQ0Z01DQS9JRFFnT2lBd08xeHVYRzVjZEZ4MFhIUXZMeUJFWlhSbGNtMXBibVVnYVdZZ2MzVmpZMlZ6YzJaMWJGeHVYSFJjZEZ4MGFYTlRkV05qWlhOeklEMGdjM1JoZEhWeklENDlJREl3TUNBbUppQnpkR0YwZFhNZ1BDQXpNREFnZkh3Z2MzUmhkSFZ6SUQwOVBTQXpNRFE3WEc1Y2JseDBYSFJjZEM4dklFZGxkQ0J5WlhOd2IyNXpaU0JrWVhSaFhHNWNkRngwWEhScFppQW9JSEpsYzNCdmJuTmxjeUFwSUh0Y2JseDBYSFJjZEZ4MGNtVnpjRzl1YzJVZ1BTQmhhbUY0U0dGdVpHeGxVbVZ6Y0c5dWMyVnpLQ0J6TENCcWNWaElVaXdnY21WemNHOXVjMlZ6SUNrN1hHNWNkRngwWEhSOVhHNWNibHgwWEhSY2RDOHZJRU52Ym5abGNuUWdibThnYldGMGRHVnlJSGRvWVhRZ0tIUm9ZWFFnZDJGNUlISmxjM0J2Ym5ObFdGaFlJR1pwWld4a2N5QmhjbVVnWVd4M1lYbHpJSE5sZENsY2JseDBYSFJjZEhKbGMzQnZibk5sSUQwZ1lXcGhlRU52Ym5abGNuUW9JSE1zSUhKbGMzQnZibk5sTENCcWNWaElVaXdnYVhOVGRXTmpaWE56SUNrN1hHNWNibHgwWEhSY2RDOHZJRWxtSUhOMVkyTmxjM05tZFd3c0lHaGhibVJzWlNCMGVYQmxJR05vWVdsdWFXNW5YRzVjZEZ4MFhIUnBaaUFvSUdselUzVmpZMlZ6Y3lBcElIdGNibHh1WEhSY2RGeDBYSFF2THlCVFpYUWdkR2hsSUVsbUxVMXZaR2xtYVdWa0xWTnBibU5sSUdGdVpDOXZjaUJKWmkxT2IyNWxMVTFoZEdOb0lHaGxZV1JsY2l3Z2FXWWdhVzRnYVdaTmIyUnBabWxsWkNCdGIyUmxMbHh1WEhSY2RGeDBYSFJwWmlBb0lITXVhV1pOYjJScFptbGxaQ0FwSUh0Y2JseDBYSFJjZEZ4MFhIUnRiMlJwWm1sbFpDQTlJR3B4V0VoU0xtZGxkRkpsYzNCdmJuTmxTR1ZoWkdWeUtDQmNJa3hoYzNRdFRXOWthV1pwWldSY0lpQXBPMXh1WEhSY2RGeDBYSFJjZEdsbUlDZ2diVzlrYVdacFpXUWdLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUnFVWFZsY25rdWJHRnpkRTF2WkdsbWFXVmtXeUJqWVdOb1pWVlNUQ0JkSUQwZ2JXOWthV1pwWldRN1hHNWNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFJjZEcxdlpHbG1hV1ZrSUQwZ2FuRllTRkl1WjJWMFVtVnpjRzl1YzJWSVpXRmtaWElvSUZ3aVpYUmhaMXdpSUNrN1hHNWNkRngwWEhSY2RGeDBhV1lnS0NCdGIyUnBabWxsWkNBcElIdGNibHgwWEhSY2RGeDBYSFJjZEdwUmRXVnllUzVsZEdGbld5QmpZV05vWlZWU1RDQmRJRDBnYlc5a2FXWnBaV1E3WEc1Y2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkRngwTHk4Z2FXWWdibThnWTI5dWRHVnVkRnh1WEhSY2RGeDBYSFJwWmlBb0lITjBZWFIxY3lBOVBUMGdNakEwSUh4OElITXVkSGx3WlNBOVBUMGdYQ0pJUlVGRVhDSWdLU0I3WEc1Y2RGeDBYSFJjZEZ4MGMzUmhkSFZ6VkdWNGRDQTlJRndpYm05amIyNTBaVzUwWENJN1hHNWNibHgwWEhSY2RGeDBMeThnYVdZZ2JtOTBJRzF2WkdsbWFXVmtYRzVjZEZ4MFhIUmNkSDBnWld4elpTQnBaaUFvSUhOMFlYUjFjeUE5UFQwZ016QTBJQ2tnZTF4dVhIUmNkRngwWEhSY2RITjBZWFIxYzFSbGVIUWdQU0JjSW01dmRHMXZaR2xtYVdWa1hDSTdYRzVjYmx4MFhIUmNkRngwTHk4Z1NXWWdkMlVnYUdGMlpTQmtZWFJoTENCc1pYUW5jeUJqYjI1MlpYSjBJR2wwWEc1Y2RGeDBYSFJjZEgwZ1pXeHpaU0I3WEc1Y2RGeDBYSFJjZEZ4MGMzUmhkSFZ6VkdWNGRDQTlJSEpsYzNCdmJuTmxMbk4wWVhSbE8xeHVYSFJjZEZ4MFhIUmNkSE4xWTJObGMzTWdQU0J5WlhOd2IyNXpaUzVrWVhSaE8xeHVYSFJjZEZ4MFhIUmNkR1Z5Y205eUlEMGdjbVZ6Y0c5dWMyVXVaWEp5YjNJN1hHNWNkRngwWEhSY2RGeDBhWE5UZFdOalpYTnpJRDBnSVdWeWNtOXlPMXh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFI5SUdWc2MyVWdlMXh1WEc1Y2RGeDBYSFJjZEM4dklFVjRkSEpoWTNRZ1pYSnliM0lnWm5KdmJTQnpkR0YwZFhOVVpYaDBJR0Z1WkNCdWIzSnRZV3hwZW1VZ1ptOXlJRzV2YmkxaFltOXlkSE5jYmx4MFhIUmNkRngwWlhKeWIzSWdQU0J6ZEdGMGRYTlVaWGgwTzF4dVhIUmNkRngwWEhScFppQW9JSE4wWVhSMWN5QjhmQ0FoYzNSaGRIVnpWR1Y0ZENBcElIdGNibHgwWEhSY2RGeDBYSFJ6ZEdGMGRYTlVaWGgwSUQwZ1hDSmxjbkp2Y2x3aU8xeHVYSFJjZEZ4MFhIUmNkR2xtSUNnZ2MzUmhkSFZ6SUR3Z01DQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RITjBZWFIxY3lBOUlEQTdYRzVjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSOVhHNWNkRngwWEhSOVhHNWNibHgwWEhSY2RDOHZJRk5sZENCa1lYUmhJR1p2Y2lCMGFHVWdabUZyWlNCNGFISWdiMkpxWldOMFhHNWNkRngwWEhScWNWaElVaTV6ZEdGMGRYTWdQU0J6ZEdGMGRYTTdYRzVjZEZ4MFhIUnFjVmhJVWk1emRHRjBkWE5VWlhoMElEMGdLQ0J1WVhScGRtVlRkR0YwZFhOVVpYaDBJSHg4SUhOMFlYUjFjMVJsZUhRZ0tTQXJJRndpWENJN1hHNWNibHgwWEhSY2RDOHZJRk4xWTJObGMzTXZSWEp5YjNKY2JseDBYSFJjZEdsbUlDZ2dhWE5UZFdOalpYTnpJQ2tnZTF4dVhIUmNkRngwWEhSa1pXWmxjbkpsWkM1eVpYTnZiSFpsVjJsMGFDZ2dZMkZzYkdKaFkydERiMjUwWlhoMExDQmJJSE4xWTJObGMzTXNJSE4wWVhSMWMxUmxlSFFzSUdweFdFaFNJRjBnS1R0Y2JseDBYSFJjZEgwZ1pXeHpaU0I3WEc1Y2RGeDBYSFJjZEdSbFptVnljbVZrTG5KbGFtVmpkRmRwZEdnb0lHTmhiR3hpWVdOclEyOXVkR1Y0ZEN3Z1d5QnFjVmhJVWl3Z2MzUmhkSFZ6VkdWNGRDd2daWEp5YjNJZ1hTQXBPMXh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFF2THlCVGRHRjBkWE10WkdWd1pXNWtaVzUwSUdOaGJHeGlZV05yYzF4dVhIUmNkRngwYW5GWVNGSXVjM1JoZEhWelEyOWtaU2dnYzNSaGRIVnpRMjlrWlNBcE8xeHVYSFJjZEZ4MGMzUmhkSFZ6UTI5a1pTQTlJSFZ1WkdWbWFXNWxaRHRjYmx4dVhIUmNkRngwYVdZZ0tDQm1hWEpsUjJ4dlltRnNjeUFwSUh0Y2JseDBYSFJjZEZ4MFoyeHZZbUZzUlhabGJuUkRiMjUwWlhoMExuUnlhV2RuWlhJb0lHbHpVM1ZqWTJWemN5QS9JRndpWVdwaGVGTjFZMk5sYzNOY0lpQTZJRndpWVdwaGVFVnljbTl5WENJc1hHNWNkRngwWEhSY2RGeDBXeUJxY1ZoSVVpd2djeXdnYVhOVGRXTmpaWE56SUQ4Z2MzVmpZMlZ6Y3lBNklHVnljbTl5SUYwZ0tUdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBMeThnUTI5dGNHeGxkR1ZjYmx4MFhIUmNkR052YlhCc1pYUmxSR1ZtWlhKeVpXUXVabWx5WlZkcGRHZ29JR05oYkd4aVlXTnJRMjl1ZEdWNGRDd2dXeUJxY1ZoSVVpd2djM1JoZEhWelZHVjRkQ0JkSUNrN1hHNWNibHgwWEhSY2RHbG1JQ2dnWm1seVpVZHNiMkpoYkhNZ0tTQjdYRzVjZEZ4MFhIUmNkR2RzYjJKaGJFVjJaVzUwUTI5dWRHVjRkQzUwY21sbloyVnlLQ0JjSW1GcVlYaERiMjF3YkdWMFpWd2lMQ0JiSUdweFdFaFNMQ0J6SUYwZ0tUdGNibHh1WEhSY2RGeDBYSFF2THlCSVlXNWtiR1VnZEdobElHZHNiMkpoYkNCQlNrRllJR052ZFc1MFpYSmNibHgwWEhSY2RGeDBhV1lnS0NBaEtDQXRMV3BSZFdWeWVTNWhZM1JwZG1VZ0tTQXBJSHRjYmx4MFhIUmNkRngwWEhScVVYVmxjbmt1WlhabGJuUXVkSEpwWjJkbGNpZ2dYQ0poYW1GNFUzUnZjRndpSUNrN1hHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RIMWNibHgwWEhSOVhHNWNibHgwWEhSeVpYUjFjbTRnYW5GWVNGSTdYRzVjZEgwc1hHNWNibHgwWjJWMFNsTlBUam9nWm5WdVkzUnBiMjRvSUhWeWJDd2daR0YwWVN3Z1kyRnNiR0poWTJzZ0tTQjdYRzVjZEZ4MGNtVjBkWEp1SUdwUmRXVnllUzVuWlhRb0lIVnliQ3dnWkdGMFlTd2dZMkZzYkdKaFkyc3NJRndpYW5OdmJsd2lJQ2s3WEc1Y2RIMHNYRzVjYmx4MFoyVjBVMk55YVhCME9pQm1kVzVqZEdsdmJpZ2dkWEpzTENCallXeHNZbUZqYXlBcElIdGNibHgwWEhSeVpYUjFjbTRnYWxGMVpYSjVMbWRsZENnZ2RYSnNMQ0IxYm1SbFptbHVaV1FzSUdOaGJHeGlZV05yTENCY0luTmpjbWx3ZEZ3aUlDazdYRzVjZEgxY2JuMGdLVHRjYmx4dWFsRjFaWEo1TG1WaFkyZ29JRnNnWENKblpYUmNJaXdnWENKd2IzTjBYQ0lnWFN3Z1puVnVZM1JwYjI0b0lHa3NJRzFsZEdodlpDQXBJSHRjYmx4MGFsRjFaWEo1V3lCdFpYUm9iMlFnWFNBOUlHWjFibU4wYVc5dUtDQjFjbXdzSUdSaGRHRXNJR05oYkd4aVlXTnJMQ0IwZVhCbElDa2dlMXh1WEc1Y2RGeDBMeThnVTJocFpuUWdZWEpuZFcxbGJuUnpJR2xtSUdSaGRHRWdZWEpuZFcxbGJuUWdkMkZ6SUc5dGFYUjBaV1JjYmx4MFhIUnBaaUFvSUdwUmRXVnllUzVwYzBaMWJtTjBhVzl1S0NCa1lYUmhJQ2tnS1NCN1hHNWNkRngwWEhSMGVYQmxJRDBnZEhsd1pTQjhmQ0JqWVd4c1ltRmphenRjYmx4MFhIUmNkR05oYkd4aVlXTnJJRDBnWkdGMFlUdGNibHgwWEhSY2RHUmhkR0VnUFNCMWJtUmxabWx1WldRN1hHNWNkRngwZlZ4dVhHNWNkRngwTHk4Z1ZHaGxJSFZ5YkNCallXNGdZbVVnWVc0Z2IzQjBhVzl1Y3lCdlltcGxZM1FnS0hkb2FXTm9JSFJvWlc0Z2JYVnpkQ0JvWVhabElDNTFjbXdwWEc1Y2RGeDBjbVYwZFhKdUlHcFJkV1Z5ZVM1aGFtRjRLQ0JxVVhWbGNua3VaWGgwWlc1a0tDQjdYRzVjZEZ4MFhIUjFjbXc2SUhWeWJDeGNibHgwWEhSY2RIUjVjR1U2SUcxbGRHaHZaQ3hjYmx4MFhIUmNkR1JoZEdGVWVYQmxPaUIwZVhCbExGeHVYSFJjZEZ4MFpHRjBZVG9nWkdGMFlTeGNibHgwWEhSY2RITjFZMk5sYzNNNklHTmhiR3hpWVdOclhHNWNkRngwZlN3Z2FsRjFaWEo1TG1selVHeGhhVzVQWW1wbFkzUW9JSFZ5YkNBcElDWW1JSFZ5YkNBcElDazdYRzVjZEgwN1hHNTlJQ2s3WEc1Y2JuSmxkSFZ5YmlCcVVYVmxjbms3WEc1OUlDazdYRzRpWFgwPVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGY4O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZDNkeTl3WVdOcmN5OXFjWFZsY25rdmMzSmpMMkZxWVhndWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzVFVGQlRTeERRVUZETzBsQlEwZ3NVVUZCVVR0SlFVTlNMR2RDUVVGblFqdEpRVU5vUWl4eFFrRkJjVUk3U1VGRGNrSXNjVUpCUVhGQ08wbEJRM0pDTEd0Q1FVRnJRanRKUVVOc1FpeHRRa0ZCYlVJN1NVRkRia0lzWVVGQllUdEpRVU5pTEdsQ1FVRnBRanRKUVVOcVFpeHBRa0ZCYVVJN1NVRkRha0lzV1VGQldUdEpRVU5hTEdGQlFXRXNRMEZCUXl4bFFVRmxPME5CUTJoRExFVkJRVVVzVlVGQlZTeE5RVUZOTEVWQlFVVXNVVUZCVVN4RlFVRkZMR0ZCUVdFc1JVRkJSU3hSUVVGUkxFVkJRVVVzUzBGQlN5eEZRVUZGTEUxQlFVMDdTVUZEYWtVc1dVRkJXU3hEUVVGRE8wbEJRMklzU1VGQlNTeEhRVUZITEVkQlFVY3NUVUZCVFN4RlFVRkZMRXRCUVVzc1IwRkJSeXhOUVVGTkxFVkJRVVVzVlVGQlZTeEhRVUZITEdWQlFXVXNSVUZCUlN4UlFVRlJMRWRCUVVjc05FSkJRVFJDTzBsQlEzWkhMR2RFUVVGblJEdEpRVU5vUkN4alFVRmpMRWRCUVVjc01rUkJRVEpFTEVWQlFVVXNWVUZCVlN4SFFVRkhMR2RDUVVGblFpeEZRVUZGTEZOQlFWTXNSMEZCUnl4UFFVRlBPMGxCUTJoSk96czdPenM3T3p0UFFWRkhPMGxCUTBnc1ZVRkJWU3hIUVVGSExFVkJRVVU3U1VGRFpqczdPenRQUVVsSE8wbEJRMGdzVlVGQlZTeEhRVUZITEVWQlFVVTdTVUZEWml4MVJrRkJkVVk3U1VGRGRrWXNVVUZCVVN4SFFVRkhMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETzBsQlF6TkNMRFpEUVVFMlF6dEpRVU0zUXl4WlFVRlpMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0SlFVTXpReXhaUVVGWkxFTkJRVU1zU1VGQlNTeEhRVUZITEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNN1NVRkRiRU1zZFVWQlFYVkZPMGxCUTNaRkxIRkRRVUZ4UXl4VFFVRlRPMUZCUXpGRExIRkVRVUZ4UkR0UlFVTnlSQ3hOUVVGTkxFTkJRVU1zVlVGQlZTeHJRa0ZCYTBJc1JVRkJSU3hKUVVGSk8xbEJRM0pETEVWQlFVVXNRMEZCUXl4RFFVRkRMRTlCUVU4c2EwSkJRV3RDTEV0QlFVc3NVVUZCVVN4RFFVRkRMRU5CUVVNc1EwRkJRenRuUWtGRGVrTXNTVUZCU1N4SFFVRkhMR3RDUVVGclFpeERRVUZETzJkQ1FVTXhRaXhyUWtGQmEwSXNSMEZCUnl4SFFVRkhMRU5CUVVNN1dVRkROMElzUTBGQlF6dFpRVU5FTEVsQlFVa3NVVUZCVVN4RlFVRkZMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzVTBGQlV5eEhRVUZITEd0Q1FVRnJRaXhEUVVGRExGZEJRVmNzUlVGQlJTeERRVUZETEV0QlFVc3NRMEZCUXl4aFFVRmhMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVU03V1VGRE4wWXNSVUZCUlN4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExGVkJRVlVzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRekZDTERoRFFVRTRRenRuUWtGRE9VTXNUMEZCVHl4RFFVRkRMRkZCUVZFc1IwRkJSeXhUUVVGVExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNN2IwSkJRMnBETEhWQ1FVRjFRanR2UWtGRGRrSXNSVUZCUlN4RFFVRkRMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zUTBGQlF5eExRVUZMTEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNN2QwSkJRM1JDTEZGQlFWRXNSMEZCUnl4UlFVRlJMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eEpRVUZKTEVkQlFVY3NRMEZCUXp0M1FrRkRjRU1zUTBGQlF5eFRRVUZUTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWRCUVVjc1UwRkJVeXhEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dDNRa0ZEYUVVc2JVSkJRVzFDTzI5Q1FVTjJRaXhEUVVGRE8yOUNRVU5FTEVsQlFVa3NRMEZCUXl4RFFVRkRPM2RDUVVOR0xFTkJRVU1zVTBGQlV5eERRVUZETEZGQlFWRXNRMEZCUXl4SFFVRkhMRk5CUVZNc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03YjBKQlEycEZMRU5CUVVNN1owSkJRMHdzUTBGQlF6dFpRVU5NTEVOQlFVTTdVVUZEVEN4RFFVRkRMRU5CUVVNN1NVRkRUaXhEUVVGRE8wbEJRMFFzZVVSQlFYbEVPMGxCUTNwRUxIVkRRVUYxUXl4VFFVRlRMRVZCUVVVc1QwRkJUeXhGUVVGRkxHVkJRV1VzUlVGQlJTeExRVUZMTzFGQlF6ZEZMRWxCUVVrc1UwRkJVeXhIUVVGSExFVkJRVVVzUlVGQlJTeG5Ra0ZCWjBJc1IwRkJSeXhEUVVGRExGTkJRVk1zUzBGQlN5eFZRVUZWTEVOQlFVTXNRMEZCUXp0UlFVTnNSU3hwUWtGQmFVSXNVVUZCVVR0WlFVTnlRaXhKUVVGSkxGRkJRVkVzUTBGQlF6dFpRVU5pTEZOQlFWTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU03V1VGRE0wSXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NSVUZCUlN4RlFVRkZMRlZCUVZVc1EwRkJReXhGUVVGRkxHdENRVUZyUWp0blFrRkRiRVVzU1VGQlNTeHRRa0ZCYlVJc1IwRkJSeXhyUWtGQmEwSXNRMEZCUXl4UFFVRlBMRVZCUVVVc1pVRkJaU3hGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzJkQ1FVTTVSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eFBRVUZQTEcxQ1FVRnRRaXhMUVVGTExGRkJRVkU3YjBKQlEzWkRMRU5CUVVNc1owSkJRV2RDTEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN2IwSkJRM1pFTEU5QlFVOHNRMEZCUXl4VFFVRlRMRU5CUVVNc1QwRkJUeXhEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRU5CUVVNN2IwSkJReTlETEU5QlFVOHNRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eERRVUZETzI5Q1FVTTNRaXhOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETzJkQ1FVTnFRaXhEUVVGRE8yZENRVU5FTEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4RFFVRkRMRU5CUVVNN2IwSkJRM2hDTEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1VVRkJVU3hIUVVGSExHMUNRVUZ0UWl4RFFVRkRMRU5CUVVNN1owSkJRemRETEVOQlFVTTdXVUZEVEN4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOSUxFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTTdVVUZEY0VJc1EwRkJRenRSUVVORUxFMUJRVTBzUTBGQlF5eFBRVUZQTEVOQlFVTXNUMEZCVHl4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0SlFVTTFSU3hEUVVGRE8wbEJRMFFzYjBOQlFXOURPMGxCUTNCRExITkVRVUZ6UkR0SlFVTjBSQ3hqUVVGak8wbEJRMlFzYjBKQlFXOUNMRTFCUVUwc1JVRkJSU3hIUVVGSE8xRkJRek5DTEVsQlFVa3NSMEZCUnl4RlFVRkZMRWxCUVVrc1JVRkJSU3hYUVVGWExFZEJRVWNzVFVGQlRTeERRVUZETEZsQlFWa3NRMEZCUXl4WFFVRlhMRWxCUVVrc1JVRkJSU3hEUVVGRE8xRkJRMjVGTEVkQlFVY3NRMEZCUXl4RFFVRkRMRWRCUVVjc1NVRkJTU3hIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEyUXNSVUZCUlN4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUTBGQlF5eExRVUZMTEZOQlFWTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRM3BDTEVOQlFVTXNWMEZCVnl4RFFVRkRMRWRCUVVjc1EwRkJReXhIUVVGSExFMUJRVTBzUjBGQlJ5eERRVUZETEVsQlFVa3NTVUZCU1N4RFFVRkRMRWxCUVVrc1IwRkJSeXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1IwRkJSeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzFsQlEzaEZMRU5CUVVNN1VVRkRUQ3hEUVVGRE8xRkJRMFFzUlVGQlJTeERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOUUxFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RlFVRkZMRTFCUVUwc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF6dFJRVU4wUXl4RFFVRkRPMUZCUTBRc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF6dEpRVU5zUWl4RFFVRkRPMGxCUTBRN096dFBRVWRITzBsQlEwZ3NOa0pCUVRaQ0xFTkJRVU1zUlVGQlJTeExRVUZMTEVWQlFVVXNVMEZCVXp0UlFVTTFReXhKUVVGSkxFVkJRVVVzUlVGQlJTeEpRVUZKTEVWQlFVVXNZVUZCWVN4RlFVRkZMR0ZCUVdFc1JVRkJSU3hSUVVGUkxFZEJRVWNzUTBGQlF5eERRVUZETEZGQlFWRXNSVUZCUlN4VFFVRlRMRWRCUVVjc1EwRkJReXhEUVVGRExGTkJRVk1zUTBGQlF6dFJRVU16Uml3eVJFRkJNa1E3VVVGRE0wUXNUMEZCVHl4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRExFdEJRVXNzUjBGQlJ5eEZRVUZGTEVOQlFVTTdXVUZETVVJc1UwRkJVeXhEUVVGRExFdEJRVXNzUlVGQlJTeERRVUZETzFsQlEyeENMRVZCUVVVc1EwRkJReXhEUVVGRExFVkJRVVVzUzBGQlN5eFRRVUZUTEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVOdVFpeEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkRMRkZCUVZFc1NVRkJTU3hMUVVGTExFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVU03V1VGREwwUXNRMEZCUXp0UlFVTk1MRU5CUVVNN1VVRkRSQ3h0UkVGQmJVUTdVVUZEYmtRc1JVRkJSU3hEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTk1MRWRCUVVjc1EwRkJReXhEUVVGRExFbEJRVWtzU1VGQlNTeFJRVUZSTEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVOd1FpeEZRVUZGTEVOQlFVTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdiMEpCUXpWRExGTkJRVk1zUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN2IwSkJRM2hDTEV0QlFVc3NRMEZCUXp0blFrRkRWaXhEUVVGRE8xbEJRMHdzUTBGQlF6dFJRVU5NTEVOQlFVTTdVVUZEUkN3clJFRkJLMFE3VVVGREwwUXNSVUZCUlN4RFFVRkRMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU1zUTBGQlF5eEpRVUZKTEZOQlFWTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkROVUlzWVVGQllTeEhRVUZITEZOQlFWTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOcVF5eERRVUZETzFGQlEwUXNTVUZCU1N4RFFVRkRMRU5CUVVNN1dVRkRSaXcwUWtGQk5FSTdXVUZETlVJc1IwRkJSeXhEUVVGRExFTkJRVU1zU1VGQlNTeEpRVUZKTEZOQlFWTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRM0pDTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4VlFVRlZMRU5CUVVNc1NVRkJTU3hIUVVGSExFZEJRVWNzUjBGQlJ5eFRRVUZUTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03YjBKQlF6TkVMR0ZCUVdFc1IwRkJSeXhKUVVGSkxFTkJRVU03YjBKQlEzSkNMRXRCUVVzc1EwRkJRenRuUWtGRFZpeERRVUZETzJkQ1FVTkVMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVTXNRMEZCUXp0dlFrRkRha0lzWVVGQllTeEhRVUZITEVsQlFVa3NRMEZCUXp0blFrRkRla0lzUTBGQlF6dFpRVU5NTEVOQlFVTTdXVUZEUkN4M1FrRkJkMEk3V1VGRGVFSXNZVUZCWVN4SFFVRkhMR0ZCUVdFc1NVRkJTU3hoUVVGaExFTkJRVU03VVVGRGJrUXNRMEZCUXp0UlFVTkVMSGxDUVVGNVFqdFJRVU42UWl3MFEwRkJORU03VVVGRE5VTXNkME5CUVhkRE8xRkJRM2hETEVWQlFVVXNRMEZCUXl4RFFVRkRMR0ZCUVdFc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRGFFSXNSVUZCUlN4RFFVRkRMRU5CUVVNc1lVRkJZU3hMUVVGTExGTkJRVk1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRMnBETEZOQlFWTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1lVRkJZU3hEUVVGRExFTkJRVU03V1VGRGNrTXNRMEZCUXp0WlFVTkVMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVTTdVVUZEY0VNc1EwRkJRenRKUVVOTUxFTkJRVU03U1VGRFJEczdUMEZGUnp0SlFVTklMSEZDUVVGeFFpeERRVUZETEVWQlFVVXNVVUZCVVN4RlFVRkZMRXRCUVVzc1JVRkJSU3hUUVVGVE8xRkJRemxETEVsQlFVa3NTMEZCU3l4RlFVRkZMRTlCUVU4c1JVRkJSU3hKUVVGSkxFVkJRVVVzUjBGQlJ5eEZRVUZGTEVsQlFVa3NSVUZCUlN4VlFVRlZMRWRCUVVjc1JVRkJSVHRSUVVOd1JDdzBSVUZCTkVVN1VVRkROVVVzVTBGQlV5eEhRVUZITEVOQlFVTXNRMEZCUXl4VFFVRlRMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU03VVVGRGFFTXNOa05CUVRaRE8xRkJRemRETEVWQlFVVXNRMEZCUXl4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEWml4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFbEJRVWtzUTBGQlF5eERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRM2hDTEZWQlFWVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhGUVVGRkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNWVUZCVlN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xbEJRM2hFTEVOQlFVTTdVVUZEVEN4RFFVRkRPMUZCUTBRc1QwRkJUeXhIUVVGSExGTkJRVk1zUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXp0UlFVTTFRaXh6UTBGQmMwTTdVVUZEZEVNc1QwRkJUeXhQUVVGUExFVkJRVVVzUTBGQlF6dFpRVU5pTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhqUVVGakxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVNMVFpeExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMR05CUVdNc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF5eEhRVUZITEZGQlFWRXNRMEZCUXp0WlFVTm9SQ3hEUVVGRE8xbEJRMFFzYlVOQlFXMURPMWxCUTI1RExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1N4SlFVRkpMRk5CUVZNc1NVRkJTU3hEUVVGRExFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkRja01zVVVGQlVTeEhRVUZITEVOQlFVTXNRMEZCUXl4VlFVRlZMRU5CUVVNc1VVRkJVU3hGUVVGRkxFTkJRVU1zUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0WlFVTnNSQ3hEUVVGRE8xbEJRMFFzU1VGQlNTeEhRVUZITEU5QlFVOHNRMEZCUXp0WlFVTm1MRTlCUVU4c1IwRkJSeXhUUVVGVExFTkJRVU1zUzBGQlN5eEZRVUZGTEVOQlFVTTdXVUZETlVJc1JVRkJSU3hEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkRWaXd3UkVGQk1FUTdaMEpCUXpGRUxFVkJRVVVzUTBGQlF5eERRVUZETEU5QlFVOHNTMEZCU3l4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRE8yOUNRVU5zUWl4UFFVRlBMRWRCUVVjc1NVRkJTU3hEUVVGRE8yOUNRVU5tTEhsRlFVRjVSVHRuUWtGRE4wVXNRMEZCUXp0blFrRkRSQ3hKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNTVUZCU1N4TFFVRkxMRWRCUVVjc1NVRkJTU3hKUVVGSkxFdEJRVXNzVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXp0dlFrRkRlRU1zTUVKQlFUQkNPMjlDUVVNeFFpeEpRVUZKTEVkQlFVY3NWVUZCVlN4RFFVRkRMRWxCUVVrc1IwRkJSeXhIUVVGSExFZEJRVWNzVDBGQlR5eERRVUZETEVsQlFVa3NWVUZCVlN4RFFVRkRMRWxCUVVrc1IwRkJSeXhQUVVGUExFTkJRVU1zUTBGQlF6dHZRa0ZEZEVVc05rSkJRVFpDTzI5Q1FVTTNRaXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNN2QwSkJRMUlzUjBGQlJ5eERRVUZETEVOQlFVTXNTMEZCU3l4SlFVRkpMRlZCUVZVc1EwRkJReXhEUVVGRExFTkJRVU03TkVKQlEzWkNMREpDUVVFeVFqczBRa0ZETTBJc1IwRkJSeXhIUVVGSExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN05FSkJRM1pDTEVWQlFVVXNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlN5eFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRPMmREUVVOeVFpdzJRMEZCTmtNN1owTkJRemRETEVsQlFVa3NSMEZCUnl4VlFVRlZMRU5CUVVNc1NVRkJTU3hIUVVGSExFZEJRVWNzUjBGQlJ5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN2IwTkJRMnhETEZWQlFWVXNRMEZCUXl4SlFVRkpMRWRCUVVjc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdaME5CUXpsQ0xFVkJRVVVzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNN2IwTkJRMUFzYTBOQlFXdERPMjlEUVVOc1F5eEZRVUZGTEVOQlFVTXNRMEZCUXl4SlFVRkpMRXRCUVVzc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF6dDNRMEZEYUVJc1NVRkJTU3hIUVVGSExGVkJRVlVzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0M1EwRkRla0lzT0VOQlFUaERPMjlEUVVOc1JDeERRVUZETzI5RFFVTkVMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eFZRVUZWTEVOQlFVTXNTMEZCU3l4RFFVRkRMRXRCUVVzc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF6dDNRMEZEYkVNc1QwRkJUeXhIUVVGSExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0M1EwRkRha0lzVTBGQlV5eERRVUZETEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dHZRMEZET1VJc1EwRkJRenR2UTBGRFJDeExRVUZMTEVOQlFVTTdaME5CUTFZc1EwRkJRenMwUWtGRFRDeERRVUZETzNkQ1FVTk1MRU5CUVVNN2IwSkJRMHdzUTBGQlF6dHZRa0ZEUkN3d1EwRkJNRU03YjBKQlF6RkRMRVZCUVVVc1EwRkJReXhEUVVGRExFbEJRVWtzUzBGQlN5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRPM2RDUVVOb1FpdzJSRUZCTmtRN2QwSkJRemRFTEVWQlFVVXNRMEZCUXl4RFFVRkRMRWxCUVVrc1NVRkJTU3hEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXpzMFFrRkRia0lzVVVGQlVTeEhRVUZITEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenQzUWtGRE9VSXNRMEZCUXp0M1FrRkRSQ3hKUVVGSkxFTkJRVU1zUTBGQlF6czBRa0ZEUml4SlFVRkpMRU5CUVVNN1owTkJRMFFzVVVGQlVTeEhRVUZITEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenMwUWtGRE9VSXNRMEZCUXpzMFFrRkRSQ3hMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMmREUVVOUUxFMUJRVTBzUTBGQlF6dHZRMEZEU0N4TFFVRkxMRVZCUVVVc1lVRkJZVHR2UTBGRGNFSXNTMEZCU3l4RlFVRkZMRWxCUVVrc1IwRkJSeXhEUVVGRExFZEJRVWNzY1VKQlFYRkNMRWRCUVVjc1NVRkJTU3hIUVVGSExFMUJRVTBzUjBGQlJ5eFBRVUZQTzJsRFFVTndSU3hEUVVGRE96UkNRVU5PTEVOQlFVTTdkMEpCUTB3c1EwRkJRenR2UWtGRFRDeERRVUZETzJkQ1FVTk1MRU5CUVVNN1dVRkRUQ3hEUVVGRE8xRkJRMHdzUTBGQlF6dFJRVU5FTEUxQlFVMHNRMEZCUXl4RlFVRkZMRXRCUVVzc1JVRkJSU3hUUVVGVExFVkJRVVVzU1VGQlNTeEZRVUZGTEZGQlFWRXNSVUZCUlN4RFFVRkRPMGxCUTJoRUxFTkJRVU03U1VGRFJDeE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRPMUZCUTFZc2JVUkJRVzFFTzFGQlEyNUVMRTFCUVUwc1JVRkJSU3hEUVVGRE8xRkJRMVFzT0VOQlFUaERPMUZCUXpsRExGbEJRVmtzUlVGQlJTeEZRVUZGTzFGQlEyaENMRWxCUVVrc1JVRkJSU3hGUVVGRk8xRkJRMUlzV1VGQldTeEZRVUZGTzFsQlExWXNSMEZCUnl4RlFVRkZMRkZCUVZFc1EwRkJReXhKUVVGSk8xbEJRMnhDTEVsQlFVa3NSVUZCUlN4TFFVRkxPMWxCUTFnc1QwRkJUeXhGUVVGRkxHTkJRV01zUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRkZCUVZFc1EwRkJRenRaUVVNdlF5eE5RVUZOTEVWQlFVVXNTVUZCU1R0WlFVTmFMRmRCUVZjc1JVRkJSU3hKUVVGSk8xbEJRMnBDTEV0QlFVc3NSVUZCUlN4SlFVRkpPMWxCUTFnc1YwRkJWeXhGUVVGRkxHdEVRVUZyUkR0WlFVTXZSRHM3T3pzN096czdPenRqUVZWRk8xbEJRMFlzVDBGQlR5eEZRVUZGTzJkQ1FVTk1MRWRCUVVjc1JVRkJSU3hSUVVGUk8yZENRVU5pTEVsQlFVa3NSVUZCUlN4WlFVRlpPMmRDUVVOc1FpeEpRVUZKTEVWQlFVVXNWMEZCVnp0blFrRkRha0lzUjBGQlJ5eEZRVUZGTERKQ1FVRXlRanRuUWtGRGFFTXNTVUZCU1N4RlFVRkZMRzFEUVVGdFF6dGhRVU0xUXp0WlFVTkVMRkZCUVZFc1JVRkJSVHRuUWtGRFRpeEhRVUZITEVWQlFVVXNVMEZCVXp0blFrRkRaQ3hKUVVGSkxFVkJRVVVzVVVGQlVUdG5Ra0ZEWkN4SlFVRkpMRVZCUVVVc1ZVRkJWVHRoUVVOdVFqdFpRVU5FTEdOQlFXTXNSVUZCUlR0blFrRkRXaXhIUVVGSExFVkJRVVVzWVVGQllUdG5Ra0ZEYkVJc1NVRkJTU3hGUVVGRkxHTkJRV003WjBKQlEzQkNMRWxCUVVrc1JVRkJSU3hqUVVGak8yRkJRM1pDTzFsQlEwUXNhMEpCUVd0Q08xbEJRMnhDTEcxR1FVRnRSanRaUVVOdVJpeFZRVUZWTEVWQlFVVTdaMEpCUTFJc01rSkJRVEpDTzJkQ1FVTXpRaXhSUVVGUkxFVkJRVVVzVFVGQlRUdG5Ra0ZEYUVJc01FTkJRVEJETzJkQ1FVTXhReXhYUVVGWExFVkJRVVVzU1VGQlNUdG5Ra0ZEYWtJc2NVTkJRWEZETzJkQ1FVTnlReXhYUVVGWExFVkJRVVVzU1VGQlNTeERRVUZETEV0QlFVczdaMEpCUTNaQ0xHOUNRVUZ2UWp0blFrRkRjRUlzVlVGQlZTeEZRVUZGTEUxQlFVMHNRMEZCUXl4UlFVRlJPMkZCUXpsQ08xbEJRMFFzSzBOQlFTdERPMWxCUXk5RExEaERRVUU0UXp0WlFVTTVReXcwUTBGQk5FTTdXVUZETlVNc2FVTkJRV2xETzFsQlEycERMRmRCUVZjc1JVRkJSVHRuUWtGRFZDeEhRVUZITEVWQlFVVXNTVUZCU1R0blFrRkRWQ3hQUVVGUExFVkJRVVVzU1VGQlNUdGhRVU5vUWp0VFFVTktPMUZCUTBRc2NVUkJRWEZFTzFGQlEzSkVMRGhEUVVFNFF6dFJRVU01UXl4clJFRkJhMFE3VVVGRGJFUXNVMEZCVXl4RlFVRkZMRlZCUVZVc1RVRkJUU3hGUVVGRkxGRkJRVkU3V1VGRGFrTXNUVUZCVFN4RFFVRkRMRkZCUVZFN1owSkJRMWdzTmtKQlFUWkNPMmRDUVVNM1FpeFZRVUZWTEVOQlFVTXNWVUZCVlN4RFFVRkRMRTFCUVUwc1JVRkJSU3hOUVVGTkxFTkJRVU1zV1VGQldTeERRVUZETEVWQlFVVXNVVUZCVVN4RFFVRkRPMmRDUVVNM1JDeDVRa0ZCZVVJN1owSkJRM3BDTEZWQlFWVXNRMEZCUXl4TlFVRk5MRU5CUVVNc1dVRkJXU3hGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZETzFGQlEyaEVMRU5CUVVNN1VVRkRSQ3hoUVVGaExFVkJRVVVzTWtKQlFUSkNMRU5CUVVNc1ZVRkJWU3hEUVVGRE8xRkJRM1JFTEdGQlFXRXNSVUZCUlN3eVFrRkJNa0lzUTBGQlF5eFZRVUZWTEVOQlFVTTdVVUZEZEVRc1kwRkJZenRSUVVOa0xFbEJRVWtzUlVGQlJTeFZRVUZWTEVkQlFVY3NSVUZCUlN4UFFVRlBPMWxCUTNoQ0xHdEVRVUZyUkR0WlFVTnNSQ3hGUVVGRkxFTkJRVU1zUTBGQlF5eFBRVUZQTEVkQlFVY3NTMEZCU3l4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRE8yZENRVU14UWl4UFFVRlBMRWRCUVVjc1IwRkJSeXhEUVVGRE8yZENRVU5rTEVkQlFVY3NSMEZCUnl4VFFVRlRMRU5CUVVNN1dVRkRjRUlzUTBGQlF6dFpRVU5FTEdkRFFVRm5RenRaUVVOb1F5eFBRVUZQTEVkQlFVY3NUMEZCVHl4SlFVRkpMRVZCUVVVc1EwRkJRenRaUVVONFFpeEpRVUZKTEZOQlFWTTdXVUZEWWl3clFrRkJLMEk3V1VGREwwSXNVVUZCVVR0WlFVTlNMRzFDUVVGdFFqdFpRVU51UWl4eFFrRkJjVUlzUlVGQlJTeGxRVUZsTzFsQlEzUkRMR2xDUVVGcFFqdFpRVU5xUWl4WlFVRlpPMWxCUTFvc2EwSkJRV3RDTzFsQlEyeENMRk5CUVZNN1dVRkRWQ3h0UlVGQmJVVTdXVUZEYmtVc1UwRkJVenRaUVVOVUxHZEVRVUZuUkR0WlFVTm9SQ3hYUVVGWE8xbEJRMWdzWjBKQlFXZENPMWxCUTJoQ0xFTkJRVU03V1VGRFJDd3lRa0ZCTWtJN1dVRkRNMElzVVVGQlVUdFpRVU5TTEd0RFFVRnJRenRaUVVOc1F5eERRVUZETEVkQlFVY3NUVUZCVFN4RFFVRkRMRk5CUVZNc1EwRkJReXhGUVVGRkxFVkJRVVVzVDBGQlR5eERRVUZETzFsQlEycERMRzlDUVVGdlFqdFpRVU53UWl4bFFVRmxMRWRCUVVjc1EwRkJReXhEUVVGRExFOUJRVThzU1VGQlNTeERRVUZETzFsQlEyaERMSGRHUVVGM1JqdFpRVU40Uml4clFrRkJhMElzUjBGQlJ5eERRVUZETEVOQlFVTXNUMEZCVHp0blFrRkRNVUlzUTBGQlF5eGxRVUZsTEVOQlFVTXNVVUZCVVN4SlFVRkpMR1ZCUVdVc1EwRkJReXhOUVVGTkxFTkJRVU03WjBKQlEzQkVMRTFCUVUwc1EwRkJReXhsUVVGbExFTkJRVU03WjBKQlEzWkNMRTFCUVUwc1EwRkJReXhMUVVGTE8xbEJRMmhDTEZsQlFWazdXVUZEV2l4UlFVRlJMRWRCUVVjc1RVRkJUU3hEUVVGRExGRkJRVkVzUlVGQlJTeEZRVUZGTEdkQ1FVRm5RaXhIUVVGSExFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNZVUZCWVN4RFFVRkRPMWxCUTJoR0xEWkNRVUUyUWp0WlFVTTNRaXhWUVVGVkxFZEJRVWNzUTBGQlF5eERRVUZETEZWQlFWVXNTVUZCU1N4RlFVRkZPMWxCUXk5Q0xITkRRVUZ6UXp0WlFVTjBReXhqUVVGakxFZEJRVWNzUlVGQlJTeEZRVUZGTEcxQ1FVRnRRaXhIUVVGSExFVkJRVVU3V1VGRE4wTXNkMEpCUVhkQ08xbEJRM2hDTEZGQlFWRXNSMEZCUnl4VlFVRlZPMWxCUTNKQ0xGZEJRVmM3V1VGRFdDeExRVUZMTEVkQlFVYzdaMEpCUTBvc1ZVRkJWU3hGUVVGRkxFTkJRVU03WjBKQlEySXNjVU5CUVhGRE8yZENRVU55UXl4cFFrRkJhVUlzUlVGQlJTeFZRVUZWTEVkQlFVYzdiMEpCUXpWQ0xFbEJRVWtzUzBGQlN5eERRVUZETzI5Q1FVTldMRVZCUVVVc1EwRkJReXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETEVOQlFVTTdkMEpCUTFvc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eGxRVUZsTEVOQlFVTXNRMEZCUXl4RFFVRkRPelJDUVVOdVFpeGxRVUZsTEVkQlFVY3NSVUZCUlN4RFFVRkRPelJDUVVOeVFpeFBRVUZQTEVOQlFVTXNTMEZCU3l4SFFVRkhMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU03WjBOQlEzQkVMR1ZCUVdVc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNWMEZCVnl4RlFVRkZMRU5CUVVNc1IwRkJSeXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdORUpCUTNaRUxFTkJRVU03ZDBKQlEwd3NRMEZCUXp0M1FrRkRSQ3hMUVVGTExFZEJRVWNzWlVGQlpTeERRVUZETEVkQlFVY3NRMEZCUXl4WFFVRlhMRVZCUVVVc1EwRkJReXhEUVVGRE8yOUNRVU12UXl4RFFVRkRPMjlDUVVORUxFMUJRVTBzUTBGQlF5eExRVUZMTEVsQlFVa3NTVUZCU1N4SFFVRkhMRWxCUVVrc1IwRkJSeXhMUVVGTExFTkJRVU03WjBKQlEzaERMRU5CUVVNN1owSkJRMFFzWVVGQllUdG5Ra0ZEWWl4eFFrRkJjVUlzUlVGQlJUdHZRa0ZEYmtJc1RVRkJUU3hEUVVGRExGTkJRVk1zUjBGQlJ5eHhRa0ZCY1VJc1IwRkJSeXhKUVVGSkxFTkJRVU03WjBKQlEzQkVMRU5CUVVNN1owSkJRMFFzYjBKQlFXOUNPMmRDUVVOd1FpeG5Ra0ZCWjBJc1JVRkJSU3hWUVVGVkxFbEJRVWtzUlVGQlJTeExRVUZMTzI5Q1FVTnVReXhGUVVGRkxFTkJRVU1zUTBGQlF5eFRRVUZUTEVsQlFVa3NTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJRenQzUWtGRGNFSXNTVUZCU1N4SFFVRkhMRzFDUVVGdFFpeERRVUZETEVsQlFVa3NRMEZCUXl4WFFVRlhMRVZCUVVVc1EwRkJRenMwUWtGRE1VTXNiVUpCUVcxQ0xFTkJRVU1zU1VGQlNTeERRVUZETEZkQlFWY3NSVUZCUlN4RFFVRkRMRWxCUVVrc1NVRkJTU3hEUVVGRE8zZENRVU53UkN4alFVRmpMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUzBGQlN5eERRVUZETzI5Q1FVTnFReXhEUVVGRE8yOUNRVU5FTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNN1owSkJRMmhDTEVOQlFVTTdaMEpCUTBRc2VVTkJRWGxETzJkQ1FVTjZReXhuUWtGQlowSXNSVUZCUlN4VlFVRlZMRWxCUVVrN2IwSkJRelZDTEVWQlFVVXNRMEZCUXl4RFFVRkRMRk5CUVZNc1NVRkJTU3hKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETzNkQ1FVTndRaXhEUVVGRExFTkJRVU1zVVVGQlVTeEhRVUZITEVsQlFVa3NRMEZCUXp0dlFrRkRkRUlzUTBGQlF6dHZRa0ZEUkN4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRE8yZENRVU5vUWl4RFFVRkRPMmRDUVVORUxEWkNRVUUyUWp0blFrRkROMElzVlVGQlZTeEZRVUZGTEZWQlFWVXNSMEZCUnp0dlFrRkRja0lzU1VGQlNTeEpRVUZKTEVOQlFVTTdiMEpCUTFRc1JVRkJSU3hEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXp0M1FrRkRUaXhGUVVGRkxFTkJRVU1zUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXl4RFFVRkRPelJDUVVOYUxHOURRVUZ2UXpzMFFrRkRjRU1zUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTTdkMEpCUTNCRExFTkJRVU03ZDBKQlEwUXNTVUZCU1N4RFFVRkRMRU5CUVVNN05FSkJRMFlzT0VSQlFUaEVPelJDUVVNNVJDeEhRVUZITEVOQlFVTXNRMEZCUXl4SlFVRkpMRWxCUVVrc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF6dG5RMEZEWml4VlFVRlZMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eFZRVUZWTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTTdORUpCUTNKRUxFTkJRVU03ZDBKQlEwd3NRMEZCUXp0dlFrRkRUQ3hEUVVGRE8yOUNRVU5FTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNN1owSkJRMmhDTEVOQlFVTTdaMEpCUTBRc2NVSkJRWEZDTzJkQ1FVTnlRaXhMUVVGTExFVkJRVVVzVlVGQlZTeFZRVUZWTzI5Q1FVTjJRaXhKUVVGSkxGTkJRVk1zUjBGQlJ5eFZRVUZWTEVsQlFVa3NVVUZCVVN4RFFVRkRPMjlDUVVOMlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRE8zZENRVU5hTEZOQlFWTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU03YjBKQlF5OUNMRU5CUVVNN2IwSkJRMFFzU1VGQlNTeERRVUZETEVOQlFVTXNSVUZCUlN4VFFVRlRMRU5CUVVNc1EwRkJRenR2UWtGRGJrSXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJRenRuUWtGRGFFSXNRMEZCUXp0aFFVTktMRU5CUVVNN1dVRkRSaXh0UWtGQmJVSTdXVUZEYmtJc1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0WlFVTjRRaXcwUkVGQk5FUTdXVUZETlVRc2JVWkJRVzFHTzFsQlEyNUdMRFpEUVVFMlF6dFpRVU0zUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhIUVVGSExFTkJRVU1zUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4RFFVRkRMRWRCUVVjc1NVRkJTU3hSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRPMmxDUVVONlF5eFBRVUZQTEVOQlFVTXNVMEZCVXl4RlFVRkZMRkZCUVZFc1EwRkJReXhSUVVGUkxFZEJRVWNzU1VGQlNTeERRVUZETEVOQlFVTTdXVUZEYkVRc2JVUkJRVzFFTzFsQlEyNUVMRU5CUVVNc1EwRkJReXhKUVVGSkxFZEJRVWNzVDBGQlR5eERRVUZETEUxQlFVMHNTVUZCU1N4UFFVRlBMRU5CUVVNc1NVRkJTU3hKUVVGSkxFTkJRVU1zUTBGQlF5eE5RVUZOTEVsQlFVa3NRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJRenRaUVVNNVJDeDVRa0ZCZVVJN1dVRkRla0lzUTBGQlF5eERRVUZETEZOQlFWTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhSUVVGUkxFbEJRVWtzUjBGQlJ5eERRVUZETEVOQlFVTXNWMEZCVnl4RlFVRkZMRU5CUVVNc1MwRkJTeXhEUVVGRExHRkJRV0VzUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1dVRkROMFVzZFVaQlFYVkdPMWxCUTNaR0xFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4WFFVRlhMRWxCUVVrc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF6dG5Ra0ZEZUVJc1UwRkJVeXhIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1owSkJRM2hETEhGRFFVRnhRenRuUWtGRGNrTXNNRVZCUVRCRk8yZENRVU14UlN3clFrRkJLMEk3WjBKQlF5OUNMRWxCUVVrc1EwRkJRenR2UWtGRFJDeFRRVUZUTEVOQlFVTXNTVUZCU1N4SFFVRkhMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU03YjBKQlEzWkNMRFJDUVVFMFFqdHZRa0ZETlVJc2IwVkJRVzlGTzI5Q1FVTndSU3hUUVVGVExFTkJRVU1zU1VGQlNTeEhRVUZITEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNN2IwSkJRMmhETEVOQlFVTXNRMEZCUXl4WFFVRlhMRWRCUVVjc1dVRkJXU3hEUVVGRExGRkJRVkVzUjBGQlJ5eEpRVUZKTEVkQlFVY3NXVUZCV1N4RFFVRkRMRWxCUVVrN2QwSkJRelZFTEZOQlFWTXNRMEZCUXl4UlFVRlJMRWRCUVVjc1NVRkJTU3hIUVVGSExGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTTdaMEpCUTI1RUxFTkJRVU03WjBKQlEwUXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dHZRa0ZEVUN4clJVRkJhMFU3YjBKQlEyeEZMSFZFUVVGMVJEdHZRa0ZEZGtRc1EwRkJReXhEUVVGRExGZEJRVmNzUjBGQlJ5eEpRVUZKTEVOQlFVTTdaMEpCUTNwQ0xFTkJRVU03V1VGRFRDeERRVUZETzFsQlEwUXNkVU5CUVhWRE8xbEJRM1pETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhKUVVGSkxFbEJRVWtzUTBGQlF5eERRVUZETEZkQlFWY3NTVUZCU1N4UFFVRlBMRU5CUVVNc1EwRkJReXhKUVVGSkxFdEJRVXNzVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkRlRVFzUTBGQlF5eERRVUZETEVsQlFVa3NSMEZCUnl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXl4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRE8xbEJRMnBFTEVOQlFVTTdXVUZEUkN4dFFrRkJiVUk3V1VGRGJrSXNOa0pCUVRaQ0xFTkJRVU1zVlVGQlZTeEZRVUZGTEVOQlFVTXNSVUZCUlN4UFFVRlBMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU03V1VGRE4wUXNkMFJCUVhkRU8xbEJRM2hFTEVWQlFVVXNRMEZCUXl4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlExb3NUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJRenRaUVVOcVFpeERRVUZETzFsQlEwUXNhMFJCUVd0RU8xbEJRMnhFTEcxR1FVRnRSanRaUVVOdVJpeFhRVUZYTEVkQlFVY3NUVUZCVFN4RFFVRkRMRXRCUVVzc1NVRkJTU3hEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETzFsQlEzWkRMR3REUVVGclF6dFpRVU5zUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhYUVVGWExFbEJRVWtzVFVGQlRTeERRVUZETEUxQlFVMHNSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlEzWkRMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRPMWxCUTNSRExFTkJRVU03V1VGRFJDeHhRa0ZCY1VJN1dVRkRja0lzUTBGQlF5eERRVUZETEVsQlFVa3NSMEZCUnl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExGZEJRVmNzUlVGQlJTeERRVUZETzFsQlF6bENMRzFEUVVGdFF6dFpRVU51UXl4RFFVRkRMRU5CUVVNc1ZVRkJWU3hIUVVGSExFTkJRVU1zVlVGQlZTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03V1VGRGVFTXNLMFJCUVN0RU8xbEJReTlFTEhWRFFVRjFRenRaUVVOMlF5d3lRMEZCTWtNN1dVRkRNME1zVVVGQlVTeEhRVUZITEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1QwRkJUeXhEUVVGRExFdEJRVXNzUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXp0WlFVTndReXh4UkVGQmNVUTdXVUZEY2tRc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNc1EwRkJRenRuUWtGRGFFSXNNRU5CUVRCRE8yZENRVU14UXl4UlFVRlJMRWRCUVVjc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8yZENRVU40UXl3eVEwRkJNa003WjBKQlF6TkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRPMjlDUVVOVUxGRkJRVkVzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFZEJRVWNzUjBGQlJ5eEhRVUZITEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU03YjBKQlEzcEVMR2RGUVVGblJUdHZRa0ZEYUVVc1QwRkJUeXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETzJkQ1FVTnNRaXhEUVVGRE8yZENRVU5FTERKRFFVRXlRenRuUWtGRE0wTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFdEJRVXNzUzBGQlN5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRPMjlDUVVOd1FpeFJRVUZSTEVkQlFVY3NVVUZCVVN4RFFVRkRMRTlCUVU4c1EwRkJReXhWUVVGVkxFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdiMEpCUXpsRExGRkJRVkVzUjBGQlJ5eERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFZEJRVWNzUjBGQlJ5eEhRVUZITEVkQlFVY3NRMEZCUXl4SFFVRkhMRWxCUVVrc1IwRkJSeXhEUVVGRExFdEJRVXNzUlVGQlJTeERRVUZETEVkQlFVY3NVVUZCVVN4RFFVRkRPMmRDUVVOcVJpeERRVUZETzJkQ1FVTkVMSE5GUVVGelJUdG5Ra0ZEZEVVc1EwRkJReXhEUVVGRExFZEJRVWNzUjBGQlJ5eFJRVUZSTEVkQlFVY3NVVUZCVVN4RFFVRkRPMmRDUVVNMVFpeHhSVUZCY1VVN1dVRkRla1VzUTBGQlF6dFpRVU5FTEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlNTeEpRVUZKTEVOQlFVTXNRMEZCUXl4WFFVRlhPMmRDUVVNMVFpeERRVUZETEVOQlFVTXNRMEZCUXl4WFFVRlhMRWxCUVVrc1JVRkJSU3hEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETEcxRFFVRnRReXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkRNMFVzUTBGQlF5eERRVUZETEVsQlFVa3NSMEZCUnl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eEhRVUZITEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNN1dVRkRkRU1zUTBGQlF6dFpRVU5FTEdkR1FVRm5SanRaUVVOb1JpeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU1zUTBGQlF6dG5Ra0ZEWml4RlFVRkZMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zV1VGQldTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenR2UWtGRGFFTXNTMEZCU3l4RFFVRkRMR2RDUVVGblFpeERRVUZETEcxQ1FVRnRRaXhGUVVGRkxFMUJRVTBzUTBGQlF5eFpRVUZaTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1EwRkJRenRuUWtGREwwVXNRMEZCUXp0blFrRkRSQ3hGUVVGRkxFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dHZRa0ZEZUVJc1MwRkJTeXhEUVVGRExHZENRVUZuUWl4RFFVRkRMR1ZCUVdVc1JVRkJSU3hOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRMjVGTEVOQlFVTTdXVUZEVEN4RFFVRkRPMWxCUTBRc1owUkJRV2RFTzFsQlEyaEVMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEpRVUZKTEVsQlFVa3NRMEZCUXl4RFFVRkRMRlZCUVZVc1NVRkJTU3hEUVVGRExFTkJRVU1zVjBGQlZ5eExRVUZMTEV0QlFVc3NTVUZCU1N4UFFVRlBMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU1zUTBGQlF6dG5Ra0ZETTBVc1MwRkJTeXhEUVVGRExHZENRVUZuUWl4RFFVRkRMR05CUVdNc1JVRkJSU3hEUVVGRExFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTTdXVUZETVVRc1EwRkJRenRaUVVORUxHMUZRVUZ0UlR0WlFVTnVSU3hMUVVGTExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1VVRkJVU3hGUVVGRkxFTkJRVU1zUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8yZENRVU40UlN4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN2IwSkJRM0pDTEVOQlFVTXNRMEZCUXl4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlN5eEhRVUZITEVkQlFVY3NTVUZCU1N4SFFVRkhMRkZCUVZFc1IwRkJSeXhWUVVGVkxFZEJRVWNzUlVGQlJTeERRVUZETzJkQ1FVTm9SU3hEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRjRUlzTWtKQlFUSkNPMWxCUXpOQ0xFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF6dG5Ra0ZEYkVJc1MwRkJTeXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkROVU1zUTBGQlF6dFpRVU5FTEdsRVFVRnBSRHRaUVVOcVJDeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1ZVRkJWVHRuUWtGRFdpeERRVUZETEVOQlFVTXNRMEZCUXl4VlFVRlZMRU5CUVVNc1NVRkJTU3hEUVVGRExHVkJRV1VzUlVGQlJTeExRVUZMTEVWQlFVVXNRMEZCUXl4RFFVRkRMRXRCUVVzc1MwRkJTeXhKUVVGSkxGTkJRVk1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkRlRVVzZFVOQlFYVkRPMmRDUVVOMlF5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVGRE8xbEJRM3BDTEVOQlFVTTdXVUZEUkN4MVEwRkJkVU03V1VGRGRrTXNVVUZCVVN4SFFVRkhMRTlCUVU4c1EwRkJRenRaUVVOdVFpeHBRMEZCYVVNN1dVRkRha01zWjBKQlFXZENMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0WlFVTnFReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRenRaUVVOMFFpeExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dFpRVU53UWl4blFrRkJaMEk3V1VGRGFFSXNVMEZCVXl4SFFVRkhMRFpDUVVFMlFpeERRVUZETEZWQlFWVXNSVUZCUlN4RFFVRkRMRVZCUVVVc1QwRkJUeXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzFsQlEzcEZMR2xEUVVGcFF6dFpRVU5xUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUTJJc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEdOQlFXTXNRMEZCUXl4RFFVRkRPMWxCUXpkQ0xFTkJRVU03V1VGRFJDeEpRVUZKTEVOQlFVTXNRMEZCUXp0blFrRkRSaXhMUVVGTExFTkJRVU1zVlVGQlZTeEhRVUZITEVOQlFVTXNRMEZCUXp0blFrRkRja0lzYjBKQlFXOUNPMmRDUVVOd1FpeEZRVUZGTEVOQlFVTXNRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJReXhEUVVGRE8yOUNRVU5rTEd0Q1FVRnJRaXhEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZWTEVWQlFVVXNRMEZCUXl4TFFVRkxMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dG5Ra0ZEZGtRc1EwRkJRenRuUWtGRFJDeHhSRUZCY1VRN1owSkJRM0pFTEVWQlFVVXNRMEZCUXl4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRExFTkJRVU03YjBKQlExb3NUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJRenRuUWtGRGFrSXNRMEZCUXp0blFrRkRSQ3hWUVVGVk8yZENRVU5XTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFbEJRVWtzUTBGQlF5eERRVUZETEU5QlFVOHNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8yOUNRVU16UWl4WlFVRlpMRWRCUVVjc1RVRkJUU3hEUVVGRExGVkJRVlVzUTBGQlF6dDNRa0ZETjBJc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXp0dlFrRkRNMElzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRenRuUWtGRGJFSXNRMEZCUXp0blFrRkRSQ3hKUVVGSkxFTkJRVU03YjBKQlEwUXNVMEZCVXl4SFFVRkhMRXRCUVVzc1EwRkJRenR2UWtGRGJFSXNVMEZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhqUVVGakxFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdaMEpCUTNwRExFTkJRVU03WjBKQlEwUXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dHZRa0ZEVUN4eFEwRkJjVU03YjBKQlEzSkRMRVZCUVVVc1EwRkJReXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETEVOQlFVTTdkMEpCUTFvc1RVRkJUU3hEUVVGRExFTkJRVU03YjBKQlExb3NRMEZCUXp0dlFrRkRSQ3c0UWtGQk9FSTdiMEpCUXpsQ0xFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRuUWtGRGFFSXNRMEZCUXp0WlFVTk1MRU5CUVVNN1dVRkRSQ3gxUTBGQmRVTTdXVUZEZGtNc1kwRkJZeXhOUVVGTkxFVkJRVVVzWjBKQlFXZENMRVZCUVVVc1UwRkJVeXhGUVVGRkxFOUJRVTg3WjBKQlEzUkVMRWxCUVVrc1UwRkJVeXhGUVVGRkxFOUJRVThzUlVGQlJTeExRVUZMTEVWQlFVVXNVVUZCVVN4RlFVRkZMRkZCUVZFc1JVRkJSU3hWUVVGVkxFZEJRVWNzWjBKQlFXZENMRU5CUVVNN1owSkJRMnBHTERSQ1FVRTBRanRuUWtGRE5VSXNSVUZCUlN4RFFVRkRMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU1zUTBGQlF6dHZRa0ZEV2l4TlFVRk5MRU5CUVVNN1owSkJRMWdzUTBGQlF6dG5Ra0ZEUkN4VFFVRlRMRWRCUVVjc1NVRkJTU3hEUVVGRE8yZENRVU5xUWl3MlFrRkJOa0k3WjBKQlF6ZENMRVZCUVVVc1EwRkJReXhEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZETEVOQlFVTTdiMEpCUTJZc1RVRkJUU3hEUVVGRExGbEJRVmtzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUXp0blFrRkRkRU1zUTBGQlF6dG5Ra0ZEUkN4eFJFRkJjVVE3WjBKQlEzSkVMSEZFUVVGeFJEdG5Ra0ZEY2tRc1UwRkJVeXhIUVVGSExGTkJRVk1zUTBGQlF6dG5Ra0ZEZEVJc2VVSkJRWGxDTzJkQ1FVTjZRaXh4UWtGQmNVSXNSMEZCUnl4UFFVRlBMRWxCUVVrc1JVRkJSU3hEUVVGRE8yZENRVU4wUXl4cFFrRkJhVUk3WjBKQlEycENMRXRCUVVzc1EwRkJReXhWUVVGVkxFZEJRVWNzVFVGQlRTeEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8yZENRVU4wUXl3d1FrRkJNRUk3WjBKQlF6RkNMRk5CUVZNc1IwRkJSeXhOUVVGTkxFbEJRVWtzUjBGQlJ5eEpRVUZKTEUxQlFVMHNSMEZCUnl4SFFVRkhMRWxCUVVrc1RVRkJUU3hMUVVGTExFZEJRVWNzUTBGQlF6dG5Ra0ZETlVRc2IwSkJRVzlDTzJkQ1FVTndRaXhGUVVGRkxFTkJRVU1zUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXl4RFFVRkRPMjlDUVVOYUxGRkJRVkVzUjBGQlJ5eHRRa0ZCYlVJc1EwRkJReXhEUVVGRExFVkJRVVVzUzBGQlN5eEZRVUZGTEZOQlFWTXNRMEZCUXl4RFFVRkRPMmRDUVVONFJDeERRVUZETzJkQ1FVTkVMSE5GUVVGelJUdG5Ra0ZEZEVVc1VVRkJVU3hIUVVGSExGZEJRVmNzUTBGQlF5eERRVUZETEVWQlFVVXNVVUZCVVN4RlFVRkZMRXRCUVVzc1JVRkJSU3hUUVVGVExFTkJRVU1zUTBGQlF6dG5Ra0ZEZEVRc2MwTkJRWE5ETzJkQ1FVTjBReXhGUVVGRkxFTkJRVU1zUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXl4RFFVRkRPMjlDUVVOYUxHZEdRVUZuUmp0dlFrRkRhRVlzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRExFTkJRVU03ZDBKQlEyWXNVVUZCVVN4SFFVRkhMRXRCUVVzc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4bFFVRmxMRU5CUVVNc1EwRkJRenQzUWtGRGNFUXNSVUZCUlN4RFFVRkRMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zUTBGQlF6czBRa0ZEV0N4TlFVRk5MRU5CUVVNc1dVRkJXU3hEUVVGRExGRkJRVkVzUTBGQlF5eEhRVUZITEZGQlFWRXNRMEZCUXp0M1FrRkROME1zUTBGQlF6dDNRa0ZEUkN4UlFVRlJMRWRCUVVjc1MwRkJTeXhEUVVGRExHbENRVUZwUWl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8zZENRVU16UXl4RlFVRkZMRU5CUVVNc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eERRVUZET3pSQ1FVTllMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVkQlFVY3NVVUZCVVN4RFFVRkRPM2RDUVVOeVF5eERRVUZETzI5Q1FVTk1MRU5CUVVNN2IwSkJRMFFzWjBKQlFXZENPMjlDUVVOb1FpeEZRVUZGTEVOQlFVTXNRMEZCUXl4TlFVRk5MRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zUTBGQlF5eEpRVUZKTEV0QlFVc3NUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJRenQzUWtGRGRFTXNWVUZCVlN4SFFVRkhMRmRCUVZjc1EwRkJRenQzUWtGRGVrSXNhMEpCUVd0Q08yOUNRVU4wUWl4RFFVRkRPMjlDUVVORUxFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4TlFVRk5MRXRCUVVzc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF6dDNRa0ZEZEVJc1ZVRkJWU3hIUVVGSExHRkJRV0VzUTBGQlF6dDNRa0ZETTBJc2IwTkJRVzlETzI5Q1FVTjRReXhEUVVGRE8yOUNRVU5FTEVsQlFVa3NRMEZCUXl4RFFVRkRPM2RDUVVOR0xGVkJRVlVzUjBGQlJ5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRPM2RDUVVNMVFpeFBRVUZQTEVkQlFVY3NVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJRenQzUWtGRGVFSXNTMEZCU3l4SFFVRkhMRkZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU03ZDBKQlEzWkNMRk5CUVZNc1IwRkJSeXhEUVVGRExFdEJRVXNzUTBGQlF6dHZRa0ZEZGtJc1EwRkJRenRuUWtGRFRDeERRVUZETzJkQ1FVTkVMRWxCUVVrc1EwRkJReXhEUVVGRE8yOUNRVU5HTERaRVFVRTJSRHR2UWtGRE4wUXNTMEZCU3l4SFFVRkhMRlZCUVZVc1EwRkJRenR2UWtGRGJrSXNSVUZCUlN4RFFVRkRMRU5CUVVNc1RVRkJUU3hKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTXNRMEZCUXp0M1FrRkRlRUlzVlVGQlZTeEhRVUZITEU5QlFVOHNRMEZCUXp0M1FrRkRja0lzUlVGQlJTeERRVUZETEVOQlFVTXNUVUZCVFN4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03TkVKQlEySXNUVUZCVFN4SFFVRkhMRU5CUVVNc1EwRkJRenQzUWtGRFppeERRVUZETzI5Q1FVTk1MRU5CUVVNN1owSkJRMHdzUTBGQlF6dG5Ra0ZEUkN4dFEwRkJiVU03WjBKQlEyNURMRXRCUVVzc1EwRkJReXhOUVVGTkxFZEJRVWNzVFVGQlRTeERRVUZETzJkQ1FVTjBRaXhMUVVGTExFTkJRVU1zVlVGQlZTeEhRVUZITEVOQlFVTXNaMEpCUVdkQ0xFbEJRVWtzVlVGQlZTeERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRPMmRDUVVONlJDeG5Ra0ZCWjBJN1owSkJRMmhDTEVWQlFVVXNRMEZCUXl4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRExFTkJRVU03YjBKQlExb3NVVUZCVVN4RFFVRkRMRmRCUVZjc1EwRkJReXhsUVVGbExFVkJRVVVzUTBGQlF5eFBRVUZQTEVWQlFVVXNWVUZCVlN4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlEzaEZMRU5CUVVNN1owSkJRMFFzU1VGQlNTeERRVUZETEVOQlFVTTdiMEpCUTBZc1VVRkJVU3hEUVVGRExGVkJRVlVzUTBGQlF5eGxRVUZsTEVWQlFVVXNRMEZCUXl4TFFVRkxMRVZCUVVVc1ZVRkJWU3hGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUTNKRkxFTkJRVU03WjBKQlEwUXNOa0pCUVRaQ08yZENRVU0zUWl4TFFVRkxMRU5CUVVNc1ZVRkJWU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzJkQ1FVTTNRaXhWUVVGVkxFZEJRVWNzVTBGQlV5eERRVUZETzJkQ1FVTjJRaXhGUVVGRkxFTkJRVU1zUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXl4RFFVRkRPMjlDUVVOa0xHdENRVUZyUWl4RFFVRkRMRTlCUVU4c1EwRkJReXhUUVVGVExFZEJRVWNzWVVGQllTeEhRVUZITEZkQlFWY3NSVUZCUlN4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVGRExFVkJRVVVzVTBGQlV5eEhRVUZITEU5QlFVOHNSMEZCUnl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRE8yZENRVU5xU0N4RFFVRkRPMmRDUVVORUxGZEJRVmM3WjBKQlExZ3NaMEpCUVdkQ0xFTkJRVU1zVVVGQlVTeERRVUZETEdWQlFXVXNSVUZCUlN4RFFVRkRMRXRCUVVzc1JVRkJSU3hWUVVGVkxFTkJRVU1zUTBGQlF5eERRVUZETzJkQ1FVTm9SU3hGUVVGRkxFTkJRVU1zUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXl4RFFVRkRPMjlDUVVOa0xHdENRVUZyUWl4RFFVRkRMRTlCUVU4c1EwRkJReXhqUVVGakxFVkJRVVVzUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenR2UWtGRGRrUXNhVU5CUVdsRE8yOUNRVU5xUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8zZENRVU55UWl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXp0dlFrRkRja01zUTBGQlF6dG5Ra0ZEVEN4RFFVRkRPMWxCUTB3c1EwRkJRenRaUVVORUxFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTTdVVUZEYWtJc1EwRkJRenRSUVVORUxFOUJRVThzUlVGQlJTeFZRVUZWTEVkQlFVY3NSVUZCUlN4SlFVRkpMRVZCUVVVc1VVRkJVVHRaUVVOc1F5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhIUVVGSExFVkJRVVVzU1VGQlNTeEZRVUZGTEZGQlFWRXNSVUZCUlN4TlFVRk5MRU5CUVVNc1EwRkJRenRSUVVOdVJDeERRVUZETzFGQlEwUXNVMEZCVXl4RlFVRkZMRlZCUVZVc1IwRkJSeXhGUVVGRkxGRkJRVkU3V1VGRE9VSXNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eEZRVUZGTEZOQlFWTXNSVUZCUlN4UlFVRlJMRVZCUVVVc1VVRkJVU3hEUVVGRExFTkJRVU03VVVGRE1VUXNRMEZCUXp0TFFVTktMRU5CUVVNc1EwRkJRenRKUVVOSUxFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4TFFVRkxMRVZCUVVVc1RVRkJUU3hEUVVGRExFVkJRVVVzVlVGQlZTeERRVUZETEVWQlFVVXNUVUZCVFR0UlFVTTFReXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NWVUZCVlN4SFFVRkhMRVZCUVVVc1NVRkJTU3hGUVVGRkxGRkJRVkVzUlVGQlJTeEpRVUZKTzFsQlEyaEVMQ3REUVVFclF6dFpRVU12UXl4RlFVRkZMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zVlVGQlZTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRuUWtGRE1VSXNTVUZCU1N4SFFVRkhMRWxCUVVrc1NVRkJTU3hSUVVGUkxFTkJRVU03WjBKQlEzaENMRkZCUVZFc1IwRkJSeXhKUVVGSkxFTkJRVU03WjBKQlEyaENMRWxCUVVrc1IwRkJSeXhUUVVGVExFTkJRVU03V1VGRGNrSXNRMEZCUXp0WlFVTkVMQ3RFUVVFclJEdFpRVU12UkN4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRPMmRDUVVNM1FpeEhRVUZITEVWQlFVVXNSMEZCUnp0blFrRkRVaXhKUVVGSkxFVkJRVVVzVFVGQlRUdG5Ra0ZEV2l4UlFVRlJMRVZCUVVVc1NVRkJTVHRuUWtGRFpDeEpRVUZKTEVWQlFVVXNTVUZCU1R0blFrRkRWaXhQUVVGUExFVkJRVVVzVVVGQlVUdGhRVU53UWl4RlFVRkZMRTFCUVUwc1EwRkJReXhoUVVGaExFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVNeFF5eERRVUZETEVOQlFVTTdTVUZEVGl4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOSUxFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTTdRVUZEYkVJc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRlNDeDFOalJFUVVGMU5qUkVJaXdpWm1sc1pTSTZJbmQzZHk5d1lXTnJjeTlxY1hWbGNua3ZjM0pqTDJGcVlYZ3Vhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKa1pXWnBibVVvVzF4dUlDQWdJRndpTGk5amIzSmxYQ0lzWEc0Z0lDQWdYQ0l1TDNaaGNpOWtiMk4xYldWdWRGd2lMRnh1SUNBZ0lGd2lMaTkyWVhJdmNtNXZkR2gwYld4M2FHbDBaVndpTEZ4dUlDQWdJRndpTGk5aGFtRjRMM1poY2k5c2IyTmhkR2x2Ymx3aUxGeHVJQ0FnSUZ3aUxpOWhhbUY0TDNaaGNpOXViMjVqWlZ3aUxGeHVJQ0FnSUZ3aUxpOWhhbUY0TDNaaGNpOXljWFZsY25sY0lpeGNiaUFnSUNCY0lpNHZZMjl5WlM5cGJtbDBYQ0lzWEc0Z0lDQWdYQ0l1TDJGcVlYZ3ZjR0Z5YzJWWVRVeGNJaXhjYmlBZ0lDQmNJaTR2WlhabGJuUXZkSEpwWjJkbGNsd2lMRnh1SUNBZ0lGd2lMaTlrWldabGNuSmxaRndpTEZ4dUlDQWdJRndpTGk5elpYSnBZV3hwZW1WY0lpQXZMeUJxVVhWbGNua3VjR0Z5WVcxY2JsMHNJR1oxYm1OMGFXOXVJQ2hxVVhWbGNua3NJR1J2WTNWdFpXNTBMQ0J5Ym05MGFIUnRiSGRvYVhSbExDQnNiMk5oZEdsdmJpd2dibTl1WTJVc0lISnhkV1Z5ZVNrZ2UxeHVJQ0FnSUZ3aWRYTmxJSE4wY21samRGd2lPMXh1SUNBZ0lIWmhjaUJ5TWpBZ1BTQXZKVEl3TDJjc0lISm9ZWE5vSUQwZ0x5TXVLaVF2TENCeVlXNTBhVU5oWTJobElEMGdMeWhiUHlaZEtWODlXMTRtWFNvdkxDQnlhR1ZoWkdWeWN5QTlJQzllS0M0cVB5azZXeUJjWEhSZEtpaGJYbHhjY2x4Y2JsMHFLU1F2Yldjc0lGeHVJQ0FnSUM4dklDTTNOalV6TENBak9ERXlOU3dnSXpneE5USTZJR3h2WTJGc0lIQnliM1J2WTI5c0lHUmxkR1ZqZEdsdmJseHVJQ0FnSUhKc2IyTmhiRkJ5YjNSdlkyOXNJRDBnTDE0b1B6cGhZbTkxZEh4aGNIQjhZWEJ3TFhOMGIzSmhaMlY4TGlzdFpYaDBaVzV6YVc5dWZHWnBiR1Y4Y21WemZIZHBaR2RsZENrNkpDOHNJSEp1YjBOdmJuUmxiblFnUFNBdlhpZy9Pa2RGVkh4SVJVRkVLU1F2TENCeWNISnZkRzlqYjJ3Z1BTQXZYbHhjTDF4Y0x5OHNJRnh1SUNBZ0lDOHFJRkJ5WldacGJIUmxjbk5jYmlBZ0lDQWdLaUF4S1NCVWFHVjVJR0Z5WlNCMWMyVm1kV3dnZEc4Z2FXNTBjbTlrZFdObElHTjFjM1J2YlNCa1lYUmhWSGx3WlhNZ0tITmxaU0JoYW1GNEwycHpiMjV3TG1weklHWnZjaUJoYmlCbGVHRnRjR3hsS1Z4dUlDQWdJQ0FxSURJcElGUm9aWE5sSUdGeVpTQmpZV3hzWldRNlhHNGdJQ0FnSUNvZ0lDQWdMU0JDUlVaUFVrVWdZWE5yYVc1bklHWnZjaUJoSUhSeVlXNXpjRzl5ZEZ4dUlDQWdJQ0FxSUNBZ0lDMGdRVVpVUlZJZ2NHRnlZVzBnYzJWeWFXRnNhWHBoZEdsdmJpQW9jeTVrWVhSaElHbHpJR0VnYzNSeWFXNW5JR2xtSUhNdWNISnZZMlZ6YzBSaGRHRWdhWE1nZEhKMVpTbGNiaUFnSUNBZ0tpQXpLU0JyWlhrZ2FYTWdkR2hsSUdSaGRHRlVlWEJsWEc0Z0lDQWdJQ29nTkNrZ2RHaGxJR05oZEdOb1lXeHNJSE41YldKdmJDQmNJaXBjSWlCallXNGdZbVVnZFhObFpGeHVJQ0FnSUNBcUlEVXBJR1Y0WldOMWRHbHZiaUIzYVd4c0lITjBZWEowSUhkcGRHZ2dkSEpoYm5Od2IzSjBJR1JoZEdGVWVYQmxJR0Z1WkNCVVNFVk9JR052Ym5ScGJuVmxJR1J2ZDI0Z2RHOGdYQ0lxWENJZ2FXWWdibVZsWkdWa1hHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hKbFptbHNkR1Z5Y3lBOUlIdDlMQ0JjYmlBZ0lDQXZLaUJVY21GdWMzQnZjblJ6SUdKcGJtUnBibWR6WEc0Z0lDQWdJQ29nTVNrZ2EyVjVJR2x6SUhSb1pTQmtZWFJoVkhsd1pWeHVJQ0FnSUNBcUlESXBJSFJvWlNCallYUmphR0ZzYkNCemVXMWliMndnWENJcVhDSWdZMkZ1SUdKbElIVnpaV1JjYmlBZ0lDQWdLaUF6S1NCelpXeGxZM1JwYjI0Z2QybHNiQ0J6ZEdGeWRDQjNhWFJvSUhSeVlXNXpjRzl5ZENCa1lYUmhWSGx3WlNCaGJtUWdWRWhGVGlCbmJ5QjBieUJjSWlwY0lpQnBaaUJ1WldWa1pXUmNiaUFnSUNBZ0tpOWNiaUFnSUNCMGNtRnVjM0J2Y25SeklEMGdlMzBzSUZ4dUlDQWdJQzh2SUVGMmIybGtJR052YlcxbGJuUXRjSEp2Ykc5bklHTm9ZWElnYzJWeGRXVnVZMlVnS0NNeE1EQTVPQ2s3SUcxMWMzUWdZWEJ3WldGelpTQnNhVzUwSUdGdVpDQmxkbUZrWlNCamIyMXdjbVZ6YzJsdmJseHVJQ0FnSUdGc2JGUjVjR1Z6SUQwZ1hDSXFMMXdpTG1OdmJtTmhkQ2hjSWlwY0lpa3NJRnh1SUNBZ0lDOHZJRUZ1WTJodmNpQjBZV2NnWm05eUlIQmhjbk5wYm1jZ2RHaGxJR1J2WTNWdFpXNTBJRzl5YVdkcGJseHVJQ0FnSUc5eWFXZHBia0Z1WTJodmNpQTlJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb1hDSmhYQ0lwTzF4dUlDQWdJRzl5YVdkcGJrRnVZMmh2Y2k1b2NtVm1JRDBnYkc5allYUnBiMjR1YUhKbFpqdGNiaUFnSUNBdkx5QkNZWE5sSUZ3aVkyOXVjM1J5ZFdOMGIzSmNJaUJtYjNJZ2FsRjFaWEo1TG1GcVlYaFFjbVZtYVd4MFpYSWdZVzVrSUdwUmRXVnllUzVoYW1GNFZISmhibk53YjNKMFhHNGdJQ0FnWm5WdVkzUnBiMjRnWVdSa1ZHOVFjbVZtYVd4MFpYSnpUM0pVY21GdWMzQnZjblJ6S0hOMGNuVmpkSFZ5WlNrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJrWVhSaFZIbHdaVVY0Y0hKbGMzTnBiMjRnYVhNZ2IzQjBhVzl1WVd3Z1lXNWtJR1JsWm1GMWJIUnpJSFJ2SUZ3aUtsd2lYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQW9aR0YwWVZSNWNHVkZlSEJ5WlhOemFXOXVMQ0JtZFc1aktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHUmhkR0ZVZVhCbFJYaHdjbVZ6YzJsdmJpQWhQVDBnWENKemRISnBibWRjSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWjFibU1nUFNCa1lYUmhWSGx3WlVWNGNISmxjM05wYjI0N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVlI1Y0dWRmVIQnlaWE56YVc5dUlEMGdYQ0lxWENJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnWkdGMFlWUjVjR1VzSUdrZ1BTQXdMQ0JrWVhSaFZIbHdaWE1nUFNCa1lYUmhWSGx3WlVWNGNISmxjM05wYjI0dWRHOU1iM2RsY2tOaGMyVW9LUzV0WVhSamFDaHlibTkwYUhSdGJIZG9hWFJsS1NCOGZDQmJYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hxVVhWbGNua3VhWE5HZFc1amRHbHZiaWhtZFc1aktTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUVadmNpQmxZV05vSUdSaGRHRlVlWEJsSUdsdUlIUm9aU0JrWVhSaFZIbHdaVVY0Y0hKbGMzTnBiMjVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IzYUdsc1pTQW9LR1JoZEdGVWVYQmxJRDBnWkdGMFlWUjVjR1Z6VzJrcksxMHBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRkJ5WlhCbGJtUWdhV1lnY21WeGRXVnpkR1ZrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hrWVhSaFZIbHdaVnN3WFNBOVBUMGdYQ0lyWENJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0ZVZVhCbElEMGdaR0YwWVZSNWNHVXVjMnhwWTJVb01Ta2dmSHdnWENJcVhDSTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW9jM1J5ZFdOMGRYSmxXMlJoZEdGVWVYQmxYU0E5SUhOMGNuVmpkSFZ5WlZ0a1lYUmhWSGx3WlYwZ2ZId2dXMTBwTG5WdWMyaHBablFvWm5WdVl5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJQZEdobGNuZHBjMlVnWVhCd1pXNWtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBb2MzUnlkV04wZFhKbFcyUmhkR0ZVZVhCbFhTQTlJSE4wY25WamRIVnlaVnRrWVhSaFZIbHdaVjBnZkh3Z1cxMHBMbkIxYzJnb1puVnVZeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ2ZWeHVJQ0FnSUM4dklFSmhjMlVnYVc1emNHVmpkR2x2YmlCbWRXNWpkR2x2YmlCbWIzSWdjSEpsWm1sc2RHVnljeUJoYm1RZ2RISmhibk53YjNKMGMxeHVJQ0FnSUdaMWJtTjBhVzl1SUdsdWMzQmxZM1JRY21WbWFXeDBaWEp6VDNKVWNtRnVjM0J2Y25SektITjBjblZqZEhWeVpTd2diM0IwYVc5dWN5d2diM0pwWjJsdVlXeFBjSFJwYjI1ekxDQnFjVmhJVWlrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYVc1emNHVmpkR1ZrSUQwZ2UzMHNJSE5sWld0cGJtZFVjbUZ1YzNCdmNuUWdQU0FvYzNSeWRXTjBkWEpsSUQwOVBTQjBjbUZ1YzNCdmNuUnpLVHRjYmlBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnYVc1emNHVmpkQ2hrWVhSaFZIbHdaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhObGJHVmpkR1ZrTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhVzV6Y0dWamRHVmtXMlJoZEdGVWVYQmxYU0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCcVVYVmxjbmt1WldGamFDaHpkSEoxWTNSMWNtVmJaR0YwWVZSNWNHVmRJSHg4SUZ0ZExDQm1kVzVqZEdsdmJpQW9YeXdnY0hKbFptbHNkR1Z5VDNKR1lXTjBiM0o1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1JoZEdGVWVYQmxUM0pVY21GdWMzQnZjblFnUFNCd2NtVm1hV3gwWlhKUGNrWmhZM1J2Y25rb2IzQjBhVzl1Y3l3Z2IzSnBaMmx1WVd4UGNIUnBiMjV6TENCcWNWaElVaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCa1lYUmhWSGx3WlU5eVZISmhibk53YjNKMElEMDlQU0JjSW5OMGNtbHVaMXdpSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0Z6WldWcmFXNW5WSEpoYm5Od2IzSjBJQ1ltSUNGcGJuTndaV04wWldSYlpHRjBZVlI1Y0dWUGNsUnlZVzV6Y0c5eWRGMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IzQjBhVzl1Y3k1a1lYUmhWSGx3WlhNdWRXNXphR2xtZENoa1lYUmhWSGx3WlU5eVZISmhibk53YjNKMEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVc1emNHVmpkQ2hrWVhSaFZIbHdaVTl5VkhKaGJuTndiM0owS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJR2xtSUNoelpXVnJhVzVuVkhKaGJuTndiM0owS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQWhLSE5sYkdWamRHVmtJRDBnWkdGMFlWUjVjR1ZQY2xSeVlXNXpjRzl5ZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjMlZzWldOMFpXUTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR2x1YzNCbFkzUW9iM0IwYVc5dWN5NWtZWFJoVkhsd1pYTmJNRjBwSUh4OElDRnBibk53WldOMFpXUmJYQ0lxWENKZElDWW1JR2x1YzNCbFkzUW9YQ0lxWENJcE8xeHVJQ0FnSUgxY2JpQWdJQ0F2THlCQklITndaV05wWVd3Z1pYaDBaVzVrSUdadmNpQmhhbUY0SUc5d2RHbHZibk5jYmlBZ0lDQXZMeUIwYUdGMElIUmhhMlZ6SUZ3aVpteGhkRndpSUc5d2RHbHZibk1nS0c1dmRDQjBieUJpWlNCa1pXVndJR1Y0ZEdWdVpHVmtLVnh1SUNBZ0lDOHZJRVpwZUdWeklDTTVPRGczWEc0Z0lDQWdablZ1WTNScGIyNGdZV3BoZUVWNGRHVnVaQ2gwWVhKblpYUXNJSE55WXlrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYTJWNUxDQmtaV1Z3TENCbWJHRjBUM0IwYVc5dWN5QTlJR3BSZFdWeWVTNWhhbUY0VTJWMGRHbHVaM011Wm14aGRFOXdkR2x2Ym5NZ2ZId2dlMzA3WEc0Z0lDQWdJQ0FnSUdadmNpQW9hMlY1SUdsdUlITnlZeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hOeVkxdHJaWGxkSUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FvWm14aGRFOXdkR2x2Ym5OYmEyVjVYU0EvSUhSaGNtZGxkQ0E2SUNoa1pXVndJSHg4SUNoa1pXVndJRDBnZTMwcEtTbGJhMlY1WFNBOUlITnlZMXRyWlhsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2hrWldWd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcVVYVmxjbmt1WlhoMFpXNWtLSFJ5ZFdVc0lIUmhjbWRsZEN3Z1pHVmxjQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSaGNtZGxkRHRjYmlBZ0lDQjlYRzRnSUNBZ0x5b2dTR0Z1Wkd4bGN5QnlaWE53YjI1elpYTWdkRzhnWVc0Z1lXcGhlQ0J5WlhGMVpYTjBPbHh1SUNBZ0lDQXFJQzBnWm1sdVpITWdkR2hsSUhKcFoyaDBJR1JoZEdGVWVYQmxJQ2h0WldScFlYUmxjeUJpWlhSM1pXVnVJR052Ym5SbGJuUXRkSGx3WlNCaGJtUWdaWGh3WldOMFpXUWdaR0YwWVZSNWNHVXBYRzRnSUNBZ0lDb2dMU0J5WlhSMWNtNXpJSFJvWlNCamIzSnlaWE53YjI1a2FXNW5JSEpsYzNCdmJuTmxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1puVnVZM1JwYjI0Z1lXcGhlRWhoYm1Sc1pWSmxjM0J2Ym5ObGN5aHpMQ0JxY1ZoSVVpd2djbVZ6Y0c5dWMyVnpLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmpkQ3dnZEhsd1pTd2dabWx1WVd4RVlYUmhWSGx3WlN3Z1ptbHljM1JFWVhSaFZIbHdaU3dnWTI5dWRHVnVkSE1nUFNCekxtTnZiblJsYm5SekxDQmtZWFJoVkhsd1pYTWdQU0J6TG1SaGRHRlVlWEJsY3p0Y2JpQWdJQ0FnSUNBZ0x5OGdVbVZ0YjNabElHRjFkRzhnWkdGMFlWUjVjR1VnWVc1a0lHZGxkQ0JqYjI1MFpXNTBMWFI1Y0dVZ2FXNGdkR2hsSUhCeWIyTmxjM05jYmlBZ0lDQWdJQ0FnZDJocGJHVWdLR1JoZEdGVWVYQmxjMXN3WFNBOVBUMGdYQ0lxWENJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdSaGRHRlVlWEJsY3k1emFHbG1kQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dOMElEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamRDQTlJSE11YldsdFpWUjVjR1VnZkh3Z2FuRllTRkl1WjJWMFVtVnpjRzl1YzJWSVpXRmtaWElvWENKRGIyNTBaVzUwTFZSNWNHVmNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnTHk4Z1EyaGxZMnNnYVdZZ2QyVW5jbVVnWkdWaGJHbHVaeUIzYVhSb0lHRWdhMjV2ZDI0Z1kyOXVkR1Z1ZEMxMGVYQmxYRzRnSUNBZ0lDQWdJR2xtSUNoamRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2gwZVhCbElHbHVJR052Ym5SbGJuUnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHTnZiblJsYm5SelczUjVjR1ZkSUNZbUlHTnZiblJsYm5SelczUjVjR1ZkTG5SbGMzUW9ZM1FwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JoZEdGVWVYQmxjeTUxYm5Ob2FXWjBLSFI1Y0dVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdMeThnUTJobFkyc2dkRzhnYzJWbElHbG1JSGRsSUdoaGRtVWdZU0J5WlhOd2IyNXpaU0JtYjNJZ2RHaGxJR1Y0Y0dWamRHVmtJR1JoZEdGVWVYQmxYRzRnSUNBZ0lDQWdJR2xtSUNoa1lYUmhWSGx3WlhOYk1GMGdhVzRnY21WemNHOXVjMlZ6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYVc1aGJFUmhkR0ZVZVhCbElEMGdaR0YwWVZSNWNHVnpXekJkTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnVkhKNUlHTnZiblpsY25ScFlteGxJR1JoZEdGVWVYQmxjMXh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2gwZVhCbElHbHVJSEpsYzNCdmJuTmxjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2haR0YwWVZSNWNHVnpXekJkSUh4OElITXVZMjl1ZG1WeWRHVnljMXQwZVhCbElDc2dYQ0lnWENJZ0t5QmtZWFJoVkhsd1pYTmJNRjFkS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1pwYm1Gc1JHRjBZVlI1Y0dVZ1BTQjBlWEJsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZtYVhKemRFUmhkR0ZVZVhCbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdacGNuTjBSR0YwWVZSNWNHVWdQU0IwZVhCbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUU5eUlHcDFjM1FnZFhObElHWnBjbk4wSUc5dVpWeHVJQ0FnSUNBZ0lDQWdJQ0FnWm1sdVlXeEVZWFJoVkhsd1pTQTlJR1pwYm1Gc1JHRjBZVlI1Y0dVZ2ZId2dabWx5YzNSRVlYUmhWSGx3WlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQXZMeUJKWmlCM1pTQm1iM1Z1WkNCaElHUmhkR0ZVZVhCbFhHNGdJQ0FnSUNBZ0lDOHZJRmRsSUdGa1pDQjBhR1VnWkdGMFlWUjVjR1VnZEc4Z2RHaGxJR3hwYzNRZ2FXWWdibVZsWkdWa1hHNGdJQ0FnSUNBZ0lDOHZJR0Z1WkNCeVpYUjFjbTRnZEdobElHTnZjbkpsYzNCdmJtUnBibWNnY21WemNHOXVjMlZjYmlBZ0lDQWdJQ0FnYVdZZ0tHWnBibUZzUkdGMFlWUjVjR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobWFXNWhiRVJoZEdGVWVYQmxJQ0U5UFNCa1lYUmhWSGx3WlhOYk1GMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaFZIbHdaWE11ZFc1emFHbG1kQ2htYVc1aGJFUmhkR0ZVZVhCbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaWE53YjI1elpYTmJabWx1WVd4RVlYUmhWSGx3WlYwN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnTHlvZ1EyaGhhVzRnWTI5dWRtVnljMmx2Ym5NZ1oybDJaVzRnZEdobElISmxjWFZsYzNRZ1lXNWtJSFJvWlNCdmNtbG5hVzVoYkNCeVpYTndiMjV6WlZ4dUlDQWdJQ0FxSUVGc2MyOGdjMlYwY3lCMGFHVWdjbVZ6Y0c5dWMyVllXRmdnWm1sbGJHUnpJRzl1SUhSb1pTQnFjVmhJVWlCcGJuTjBZVzVqWlZ4dUlDQWdJQ0FxTDF4dUlDQWdJR1oxYm1OMGFXOXVJR0ZxWVhoRGIyNTJaWEowS0hNc0lISmxjM0J2Ym5ObExDQnFjVmhJVWl3Z2FYTlRkV05qWlhOektTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCamIyNTJNaXdnWTNWeWNtVnVkQ3dnWTI5dWRpd2dkRzF3TENCd2NtVjJMQ0JqYjI1MlpYSjBaWEp6SUQwZ2UzMHNJRnh1SUNBZ0lDQWdJQ0F2THlCWGIzSnJJSGRwZEdnZ1lTQmpiM0I1SUc5bUlHUmhkR0ZVZVhCbGN5QnBiaUJqWVhObElIZGxJRzVsWldRZ2RHOGdiVzlrYVdaNUlHbDBJR1p2Y2lCamIyNTJaWEp6YVc5dVhHNGdJQ0FnSUNBZ0lHUmhkR0ZVZVhCbGN5QTlJSE11WkdGMFlWUjVjR1Z6TG5Oc2FXTmxLQ2s3WEc0Z0lDQWdJQ0FnSUM4dklFTnlaV0YwWlNCamIyNTJaWEowWlhKeklHMWhjQ0IzYVhSb0lHeHZkMlZ5WTJGelpXUWdhMlY1YzF4dUlDQWdJQ0FnSUNCcFppQW9aR0YwWVZSNWNHVnpXekZkS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tHTnZibllnYVc0Z2N5NWpiMjUyWlhKMFpYSnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWRtVnlkR1Z5YzF0amIyNTJMblJ2VEc5M1pYSkRZWE5sS0NsZElEMGdjeTVqYjI1MlpYSjBaWEp6VzJOdmJuWmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR04xY25KbGJuUWdQU0JrWVhSaFZIbHdaWE11YzJocFpuUW9LVHRjYmlBZ0lDQWdJQ0FnTHk4Z1EyOXVkbVZ5ZENCMGJ5QmxZV05vSUhObGNYVmxiblJwWVd3Z1pHRjBZVlI1Y0dWY2JpQWdJQ0FnSUNBZ2QyaHBiR1VnS0dOMWNuSmxiblFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoekxuSmxjM0J2Ym5ObFJtbGxiR1J6VzJOMWNuSmxiblJkS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FuRllTRkpiY3k1eVpYTndiMjV6WlVacFpXeGtjMXRqZFhKeVpXNTBYVjBnUFNCeVpYTndiMjV6WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRUZ3Y0d4NUlIUm9aU0JrWVhSaFJtbHNkR1Z5SUdsbUlIQnliM1pwWkdWa1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lYQnlaWFlnSmlZZ2FYTlRkV05qWlhOeklDWW1JSE11WkdGMFlVWnBiSFJsY2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjM0J2Ym5ObElEMGdjeTVrWVhSaFJtbHNkR1Z5S0hKbGMzQnZibk5sTENCekxtUmhkR0ZVZVhCbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSEJ5WlhZZ1BTQmpkWEp5Wlc1ME8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTNWeWNtVnVkQ0E5SUdSaGRHRlVlWEJsY3k1emFHbG1kQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dOMWNuSmxiblFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QlVhR1Z5WlNkeklHOXViSGtnZDI5eWF5QjBieUJrYnlCcFppQmpkWEp5Wlc1MElHUmhkR0ZVZVhCbElHbHpJRzV2YmkxaGRYUnZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dOMWNuSmxiblFnUFQwOUlGd2lLbHdpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR04xY25KbGJuUWdQU0J3Y21WMk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCRGIyNTJaWEowSUhKbGMzQnZibk5sSUdsbUlIQnlaWFlnWkdGMFlWUjVjR1VnYVhNZ2JtOXVMV0YxZEc4Z1lXNWtJR1JwWm1abGNuTWdabkp2YlNCamRYSnlaVzUwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0hCeVpYWWdJVDA5SUZ3aUtsd2lJQ1ltSUhCeVpYWWdJVDA5SUdOMWNuSmxiblFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnVTJWbGF5QmhJR1JwY21WamRDQmpiMjUyWlhKMFpYSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWRpQTlJR052Ym5abGNuUmxjbk5iY0hKbGRpQXJJRndpSUZ3aUlDc2dZM1Z5Y21WdWRGMGdmSHdnWTI5dWRtVnlkR1Z5YzF0Y0lpb2dYQ0lnS3lCamRYSnlaVzUwWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnU1dZZ2JtOXVaU0JtYjNWdVpDd2djMlZsYXlCaElIQmhhWEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZqYjI1MktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0dOdmJuWXlJR2x1SUdOdmJuWmxjblJsY25NcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCSlppQmpiMjUyTWlCdmRYUndkWFJ6SUdOMWNuSmxiblJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGJYQWdQU0JqYjI1Mk1pNXpjR3hwZENoY0lpQmNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJ0Y0ZzeFhTQTlQVDBnWTNWeWNtVnVkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCSlppQndjbVYySUdOaGJpQmlaU0JqYjI1MlpYSjBaV1FnZEc4Z1lXTmpaWEIwWldRZ2FXNXdkWFJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1ZGlBOUlHTnZiblpsY25SbGNuTmJjSEpsZGlBcklGd2lJRndpSUNzZ2RHMXdXekJkWFNCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1ZG1WeWRHVnljMXRjSWlvZ1hDSWdLeUIwYlhCYk1GMWRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWTI5dWRpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1EyOXVaR1Z1YzJVZ1pYRjFhWFpoYkdWdVkyVWdZMjl1ZG1WeWRHVnljMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHTnZibllnUFQwOUlIUnlkV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1MklEMGdZMjl1ZG1WeWRHVnljMXRqYjI1Mk1sMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdUM1JvWlhKM2FYTmxMQ0JwYm5ObGNuUWdkR2hsSUdsdWRHVnliV1ZrYVdGMFpTQmtZWFJoVkhsd1pWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQnBaaUFvWTI5dWRtVnlkR1Z5YzF0amIyNTJNbDBnSVQwOUlIUnlkV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqZFhKeVpXNTBJRDBnZEcxd1d6QmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0ZVZVhCbGN5NTFibk5vYVdaMEtIUnRjRnN4WFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCQmNIQnNlU0JqYjI1MlpYSjBaWElnS0dsbUlHNXZkQ0JoYmlCbGNYVnBkbUZzWlc1alpTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHTnZibllnSVQwOUlIUnlkV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklGVnViR1Z6Y3lCbGNuSnZjbk1nWVhKbElHRnNiRzkzWldRZ2RHOGdZblZpWW14bExDQmpZWFJqYUNCaGJtUWdjbVYwZFhKdUlIUm9aVzFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoamIyNTJJQ1ltSUhNdWRHaHliM2R6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6Y0c5dWMyVWdQU0JqYjI1MktISmxjM0J2Ym5ObEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYzNCdmJuTmxJRDBnWTI5dWRpaHlaWE53YjI1elpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkR0YwWlRvZ1hDSndZWEp6WlhKbGNuSnZjbHdpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pYSnliM0k2SUdOdmJuWWdQeUJsSURvZ1hDSk9ieUJqYjI1MlpYSnphVzl1SUdaeWIyMGdYQ0lnS3lCd2NtVjJJQ3NnWENJZ2RHOGdYQ0lnS3lCamRYSnlaVzUwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUI3SUhOMFlYUmxPaUJjSW5OMVkyTmxjM05jSWl3Z1pHRjBZVG9nY21WemNHOXVjMlVnZlR0Y2JpQWdJQ0I5WEc0Z0lDQWdhbEYxWlhKNUxtVjRkR1Z1WkNoN1hHNGdJQ0FnSUNBZ0lDOHZJRU52ZFc1MFpYSWdabTl5SUdodmJHUnBibWNnZEdobElHNTFiV0psY2lCdlppQmhZM1JwZG1VZ2NYVmxjbWxsYzF4dUlDQWdJQ0FnSUNCaFkzUnBkbVU2SURBc1hHNGdJQ0FnSUNBZ0lDOHZJRXhoYzNRdFRXOWthV1pwWldRZ2FHVmhaR1Z5SUdOaFkyaGxJR1p2Y2lCdVpYaDBJSEpsY1hWbGMzUmNiaUFnSUNBZ0lDQWdiR0Z6ZEUxdlpHbG1hV1ZrT2lCN2ZTeGNiaUFnSUNBZ0lDQWdaWFJoWnpvZ2UzMHNYRzRnSUNBZ0lDQWdJR0ZxWVhoVFpYUjBhVzVuY3pvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZFhKc09pQnNiMk5oZEdsdmJpNW9jbVZtTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ1hDSkhSVlJjSWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJR2x6VEc5allXdzZJSEpzYjJOaGJGQnliM1J2WTI5c0xuUmxjM1FvYkc5allYUnBiMjR1Y0hKdmRHOWpiMndwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdaMnh2WW1Gc09pQjBjblZsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjSEp2WTJWemMwUmhkR0U2SUhSeWRXVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCaGMzbHVZem9nZEhKMVpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuUmxiblJVZVhCbE9pQmNJbUZ3Y0d4cFkyRjBhVzl1TDNndGQzZDNMV1p2Y20wdGRYSnNaVzVqYjJSbFpEc2dZMmhoY25ObGREMVZWRVl0T0Z3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnTHlwY2JpQWdJQ0FnSUNBZ0lDQWdJSFJwYldWdmRYUTZJREFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmtZWFJoT2lCdWRXeHNMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVlI1Y0dVNklHNTFiR3dzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjFjMlZ5Ym1GdFpUb2diblZzYkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSEJoYzNOM2IzSmtPaUJ1ZFd4c0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGamFHVTZJRzUxYkd3c1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmQzTTZJR1poYkhObExGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEhKaFpHbDBhVzl1WVd3NklHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdhR1ZoWkdWeWN6b2dlMzBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQXFMMXh1SUNBZ0lDQWdJQ0FnSUNBZ1lXTmpaWEIwY3pvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGd2lLbHdpT2lCaGJHeFVlWEJsY3l4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFpYaDBPaUJjSW5SbGVIUXZjR3hoYVc1Y0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm9kRzFzT2lCY0luUmxlSFF2YUhSdGJGd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGh0YkRvZ1hDSmhjSEJzYVdOaGRHbHZiaTk0Yld3c0lIUmxlSFF2ZUcxc1hDSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhbk52YmpvZ1hDSmhjSEJzYVdOaGRHbHZiaTlxYzI5dUxDQjBaWGgwTDJwaGRtRnpZM0pwY0hSY0lseHVJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5SbGJuUnpPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZUcxc09pQXZYRnhpZUcxc1hGeGlMeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JvZEcxc09pQXZYRnhpYUhSdGJDOHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhbk52YmpvZ0wxeGNZbXB6YjI1Y1hHSXZYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WemNHOXVjMlZHYVdWc1pITTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I0Yld3NklGd2ljbVZ6Y0c5dWMyVllUVXhjSWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFpYaDBPaUJjSW5KbGMzQnZibk5sVkdWNGRGd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3B6YjI0NklGd2ljbVZ6Y0c5dWMyVktVMDlPWENKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJFWVhSaElHTnZiblpsY25SbGNuTmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklFdGxlWE1nYzJWd1lYSmhkR1VnYzI5MWNtTmxJQ2h2Y2lCallYUmphR0ZzYkNCY0lpcGNJaWtnWVc1a0lHUmxjM1JwYm1GMGFXOXVJSFI1Y0dWeklIZHBkR2dnWVNCemFXNW5iR1VnYzNCaFkyVmNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuWmxjblJsY25NNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJEYjI1MlpYSjBJR0Z1ZVhSb2FXNW5JSFJ2SUhSbGVIUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmNJaW9nZEdWNGRGd2lPaUJUZEhKcGJtY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnVkdWNGRDQjBieUJvZEcxc0lDaDBjblZsSUQwZ2JtOGdkSEpoYm5ObWIzSnRZWFJwYjI0cFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hDSjBaWGgwSUdoMGJXeGNJam9nZEhKMVpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJGZG1Gc2RXRjBaU0IwWlhoMElHRnpJR0VnYW5OdmJpQmxlSEJ5WlhOemFXOXVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYQ0owWlhoMElHcHpiMjVjSWpvZ1NsTlBUaTV3WVhKelpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJRWVhKelpTQjBaWGgwSUdGeklIaHRiRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRndpZEdWNGRDQjRiV3hjSWpvZ2FsRjFaWEo1TG5CaGNuTmxXRTFNWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdSbTl5SUc5d2RHbHZibk1nZEdoaGRDQnphRzkxYkdSdUozUWdZbVVnWkdWbGNDQmxlSFJsYm1SbFpEcGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklIbHZkU0JqWVc0Z1lXUmtJSGx2ZFhJZ2IzZHVJR04xYzNSdmJTQnZjSFJwYjI1eklHaGxjbVVnYVdaY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdGdVpDQjNhR1Z1SUhsdmRTQmpjbVZoZEdVZ2IyNWxJSFJvWVhRZ2MyaHZkV3hrYmlkMElHSmxYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QmtaV1Z3SUdWNGRHVnVaR1ZrSUNoelpXVWdZV3BoZUVWNGRHVnVaQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnNZWFJQY0hScGIyNXpPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZFhKc09pQjBjblZsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuUmxlSFE2SUhSeWRXVmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdMeThnUTNKbFlYUmxjeUJoSUdaMWJHd2dabXhsWkdkbFpDQnpaWFIwYVc1bmN5QnZZbXBsWTNRZ2FXNTBieUIwWVhKblpYUmNiaUFnSUNBZ0lDQWdMeThnZDJsMGFDQmliM1JvSUdGcVlYaFRaWFIwYVc1bmN5QmhibVFnYzJWMGRHbHVaM01nWm1sbGJHUnpMbHh1SUNBZ0lDQWdJQ0F2THlCSlppQjBZWEpuWlhRZ2FYTWdiMjFwZEhSbFpDd2dkM0pwZEdWeklHbHVkRzhnWVdwaGVGTmxkSFJwYm1kekxseHVJQ0FnSUNBZ0lDQmhhbUY0VTJWMGRYQTZJR1oxYm1OMGFXOXVJQ2gwWVhKblpYUXNJSE5sZEhScGJtZHpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2MyVjBkR2x1WjNNZ1AxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRUoxYVd4a2FXNW5JR0VnYzJWMGRHbHVaM01nYjJKcVpXTjBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZV3BoZUVWNGRHVnVaQ2hoYW1GNFJYaDBaVzVrS0hSaGNtZGxkQ3dnYWxGMVpYSjVMbUZxWVhoVFpYUjBhVzVuY3lrc0lITmxkSFJwYm1kektTQTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnUlhoMFpXNWthVzVuSUdGcVlYaFRaWFIwYVc1bmMxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnFZWGhGZUhSbGJtUW9hbEYxWlhKNUxtRnFZWGhUWlhSMGFXNW5jeXdnZEdGeVoyVjBLVHRjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ1lXcGhlRkJ5WldacGJIUmxjam9nWVdSa1ZHOVFjbVZtYVd4MFpYSnpUM0pVY21GdWMzQnZjblJ6S0hCeVpXWnBiSFJsY25NcExGeHVJQ0FnSUNBZ0lDQmhhbUY0VkhKaGJuTndiM0owT2lCaFpHUlViMUJ5WldacGJIUmxjbk5QY2xSeVlXNXpjRzl5ZEhNb2RISmhibk53YjNKMGN5a3NYRzRnSUNBZ0lDQWdJQzh2SUUxaGFXNGdiV1YwYUc5a1hHNGdJQ0FnSUNBZ0lHRnFZWGc2SUdaMWJtTjBhVzl1SUNoMWNtd3NJRzl3ZEdsdmJuTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRWxtSUhWeWJDQnBjeUJoYmlCdlltcGxZM1FzSUhOcGJYVnNZWFJsSUhCeVpTMHhMalVnYzJsbmJtRjBkWEpsWEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JSFZ5YkNBOVBUMGdYQ0p2WW1wbFkzUmNJaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5d2RHbHZibk1nUFNCMWNtdzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkWEpzSUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnUm05eVkyVWdiM0IwYVc5dWN5QjBieUJpWlNCaGJpQnZZbXBsWTNSY2JpQWdJQ0FnSUNBZ0lDQWdJRzl3ZEdsdmJuTWdQU0J2Y0hScGIyNXpJSHg4SUh0OU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIUnlZVzV6Y0c5eWRDd2dYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QlZVa3dnZDJsMGFHOTFkQ0JoYm5ScExXTmhZMmhsSUhCaGNtRnRYRzRnSUNBZ0lDQWdJQ0FnSUNCallXTm9aVlZTVEN3Z1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCU1pYTndiMjV6WlNCb1pXRmtaWEp6WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE53YjI1elpVaGxZV1JsY25OVGRISnBibWNzSUhKbGMzQnZibk5sU0dWaFpHVnljeXdnWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUIwYVcxbGIzVjBJR2hoYm1Sc1pWeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdsdFpXOTFkRlJwYldWeUxDQmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklGVnliQ0JqYkdWaGJuVndJSFpoY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkWEpzUVc1amFHOXlMQ0JjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRkpsY1hWbGMzUWdjM1JoZEdVZ0tHSmxZMjl0WlhNZ1ptRnNjMlVnZFhCdmJpQnpaVzVrSUdGdVpDQjBjblZsSUhWd2IyNGdZMjl0Y0d4bGRHbHZiaWxjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZiWEJzWlhSbFpDd2dYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QlVieUJyYm05M0lHbG1JR2RzYjJKaGJDQmxkbVZ1ZEhNZ1lYSmxJSFJ2SUdKbElHUnBjM0JoZEdOb1pXUmNiaUFnSUNBZ0lDQWdJQ0FnSUdacGNtVkhiRzlpWVd4ekxDQmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklFeHZiM0FnZG1GeWFXRmliR1ZjYmlBZ0lDQWdJQ0FnSUNBZ0lHa3NJRnh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdkVzVqWVdOb1pXUWdjR0Z5ZENCdlppQjBhR1VnZFhKc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IxYm1OaFkyaGxaQ3dnWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJEY21WaGRHVWdkR2hsSUdacGJtRnNJRzl3ZEdsdmJuTWdiMkpxWldOMFhHNGdJQ0FnSUNBZ0lDQWdJQ0J6SUQwZ2FsRjFaWEo1TG1GcVlYaFRaWFIxY0NoN2ZTd2diM0IwYVc5dWN5a3NJRnh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdRMkZzYkdKaFkydHpJR052Ym5SbGVIUmNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGJHeGlZV05yUTI5dWRHVjRkQ0E5SUhNdVkyOXVkR1Y0ZENCOGZDQnpMQ0JjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRU52Ym5SbGVIUWdabTl5SUdkc2IySmhiQ0JsZG1WdWRITWdhWE1nWTJGc2JHSmhZMnREYjI1MFpYaDBJR2xtSUdsMElHbHpJR0VnUkU5TklHNXZaR1VnYjNJZ2FsRjFaWEo1SUdOdmJHeGxZM1JwYjI1Y2JpQWdJQ0FnSUNBZ0lDQWdJR2RzYjJKaGJFVjJaVzUwUTI5dWRHVjRkQ0E5SUhNdVkyOXVkR1Y0ZENBbUpseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDaGpZV3hzWW1GamEwTnZiblJsZUhRdWJtOWtaVlI1Y0dVZ2ZId2dZMkZzYkdKaFkydERiMjUwWlhoMExtcHhkV1Z5ZVNrZ1AxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHcFJkV1Z5ZVNoallXeHNZbUZqYTBOdmJuUmxlSFFwSURwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcVVYVmxjbmt1WlhabGJuUXNJRnh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdSR1ZtWlhKeVpXUnpYRzRnSUNBZ0lDQWdJQ0FnSUNCa1pXWmxjbkpsWkNBOUlHcFJkV1Z5ZVM1RVpXWmxjbkpsWkNncExDQmpiMjF3YkdWMFpVUmxabVZ5Y21Wa0lEMGdhbEYxWlhKNUxrTmhiR3hpWVdOcmN5aGNJbTl1WTJVZ2JXVnRiM0o1WENJcExDQmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklGTjBZWFIxY3kxa1pYQmxibVJsYm5RZ1kyRnNiR0poWTJ0elhHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZEdGMGRYTkRiMlJsSUQwZ2N5NXpkR0YwZFhORGIyUmxJSHg4SUh0OUxDQmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklFaGxZV1JsY25NZ0tIUm9aWGtnWVhKbElITmxiblFnWVd4c0lHRjBJRzl1WTJVcFhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhGMVpYTjBTR1ZoWkdWeWN5QTlJSHQ5TENCeVpYRjFaWE4wU0dWaFpHVnljMDVoYldWeklEMGdlMzBzSUZ4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnUkdWbVlYVnNkQ0JoWW05eWRDQnRaWE56WVdkbFhHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZEhKQlltOXlkQ0E5SUZ3aVkyRnVZMlZzWldSY0lpd2dYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QkdZV3RsSUhob2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYW5GWVNGSWdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WaFpIbFRkR0YwWlRvZ01DeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJDZFdsc1pITWdhR1ZoWkdWeWN5Qm9ZWE5vZEdGaWJHVWdhV1lnYm1WbFpHVmtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaMlYwVW1WemNHOXVjMlZJWldGa1pYSTZJR1oxYm1OMGFXOXVJQ2hyWlhrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHMWhkR05vTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWTI5dGNHeGxkR1ZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JWEpsYzNCdmJuTmxTR1ZoWkdWeWN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMzQnZibk5sU0dWaFpHVnljeUE5SUh0OU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGRvYVd4bElDZ29iV0YwWTJnZ1BTQnlhR1ZoWkdWeWN5NWxlR1ZqS0hKbGMzQnZibk5sU0dWaFpHVnljMU4wY21sdVp5a3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYzNCdmJuTmxTR1ZoWkdWeWMxdHRZWFJqYUZzeFhTNTBiMHh2ZDJWeVEyRnpaU2dwWFNBOUlHMWhkR05vV3pKZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFoZEdOb0lEMGdjbVZ6Y0c5dWMyVklaV0ZrWlhKelcydGxlUzUwYjB4dmQyVnlRMkZ6WlNncFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JXRjBZMmdnUFQwZ2JuVnNiQ0EvSUc1MWJHd2dPaUJ0WVhSamFEdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUZKaGR5QnpkSEpwYm1kY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCblpYUkJiR3hTWlhOd2IyNXpaVWhsWVdSbGNuTTZJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHTnZiWEJzWlhSbFpDQS9JSEpsYzNCdmJuTmxTR1ZoWkdWeWMxTjBjbWx1WnlBNklHNTFiR3c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QkRZV05vWlhNZ2RHaGxJR2hsWVdSbGNseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxkRkpsY1hWbGMzUklaV0ZrWlhJNklHWjFibU4wYVc5dUlDaHVZVzFsTENCMllXeDFaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWTI5dGNHeGxkR1ZrSUQwOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1aGJXVWdQU0J5WlhGMVpYTjBTR1ZoWkdWeWMwNWhiV1Z6VzI1aGJXVXVkRzlNYjNkbGNrTmhjMlVvS1YwZ1BWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsY1hWbGMzUklaV0ZrWlhKelRtRnRaWE5iYm1GdFpTNTBiMHh2ZDJWeVEyRnpaU2dwWFNCOGZDQnVZVzFsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WeGRXVnpkRWhsWVdSbGNuTmJibUZ0WlYwZ1BTQjJZV3gxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUU5MlpYSnlhV1JsY3lCeVpYTndiMjV6WlNCamIyNTBaVzUwTFhSNWNHVWdhR1ZoWkdWeVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IzWmxjbkpwWkdWTmFXMWxWSGx3WlRvZ1puVnVZM1JwYjI0Z0tIUjVjR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dOdmJYQnNaWFJsWkNBOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCekxtMXBiV1ZVZVhCbElEMGdkSGx3WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUZOMFlYUjFjeTFrWlhCbGJtUmxiblFnWTJGc2JHSmhZMnR6WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNSaGRIVnpRMjlrWlRvZ1puVnVZM1JwYjI0Z0tHMWhjQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWTI5a1pUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHMWhjQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHTnZiWEJzWlhSbFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklFVjRaV04xZEdVZ2RHaGxJR0Z3Y0hKdmNISnBZWFJsSUdOaGJHeGlZV05yYzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHcHhXRWhTTG1Gc2QyRjVjeWh0WVhCYmFuRllTRkl1YzNSaGRIVnpYU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCTVlYcDVMV0ZrWkNCMGFHVWdibVYzSUdOaGJHeGlZV05yY3lCcGJpQmhJSGRoZVNCMGFHRjBJSEJ5WlhObGNuWmxjeUJ2YkdRZ2IyNWxjMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpQW9ZMjlrWlNCcGJpQnRZWEFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNSaGRIVnpRMjlrWlZ0amIyUmxYU0E5SUZ0emRHRjBkWE5EYjJSbFcyTnZaR1ZkTENCdFlYQmJZMjlrWlYxZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRU5oYm1ObGJDQjBhR1VnY21WeGRXVnpkRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0ZpYjNKME9pQm1kVzVqZEdsdmJpQW9jM1JoZEhWelZHVjRkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWm1sdVlXeFVaWGgwSUQwZ2MzUmhkSFZ6VkdWNGRDQjhmQ0J6ZEhKQlltOXlkRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJ5WVc1emNHOXlkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhKaGJuTndiM0owTG1GaWIzSjBLR1pwYm1Gc1ZHVjRkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkc5dVpTZ3dMQ0JtYVc1aGJGUmxlSFFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdRWFIwWVdOb0lHUmxabVZ5Y21Wa2MxeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdWbVpYSnlaV1F1Y0hKdmJXbHpaU2hxY1ZoSVVpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QkJaR1FnY0hKdmRHOWpiMndnYVdZZ2JtOTBJSEJ5YjNacFpHVmtJQ2h3Y21WbWFXeDBaWEp6SUcxcFoyaDBJR1Y0Y0dWamRDQnBkQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRWhoYm1Sc1pTQm1ZV3h6ZVNCMWNtd2dhVzRnZEdobElITmxkSFJwYm1keklHOWlhbVZqZENBb0l6RXdNRGt6T2lCamIyNXphWE4wWlc1amVTQjNhWFJvSUc5c1pDQnphV2R1WVhSMWNtVXBYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QlhaU0JoYkhOdklIVnpaU0IwYUdVZ2RYSnNJSEJoY21GdFpYUmxjaUJwWmlCaGRtRnBiR0ZpYkdWY2JpQWdJQ0FnSUNBZ0lDQWdJSE11ZFhKc0lEMGdLQ2gxY213Z2ZId2djeTUxY213Z2ZId2diRzlqWVhScGIyNHVhSEpsWmlrZ0t5QmNJbHdpS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1eVpYQnNZV05sS0hKd2NtOTBiMk52YkN3Z2JHOWpZWFJwYjI0dWNISnZkRzlqYjJ3Z0t5QmNJaTh2WENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1FXeHBZWE1nYldWMGFHOWtJRzl3ZEdsdmJpQjBieUIwZVhCbElHRnpJSEJsY2lCMGFXTnJaWFFnSXpFeU1EQTBYRzRnSUNBZ0lDQWdJQ0FnSUNCekxuUjVjR1VnUFNCdmNIUnBiMjV6TG0xbGRHaHZaQ0I4ZkNCdmNIUnBiMjV6TG5SNWNHVWdmSHdnY3k1dFpYUm9iMlFnZkh3Z2N5NTBlWEJsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnUlhoMGNtRmpkQ0JrWVhSaFZIbHdaWE1nYkdsemRGeHVJQ0FnSUNBZ0lDQWdJQ0FnY3k1a1lYUmhWSGx3WlhNZ1BTQW9jeTVrWVhSaFZIbHdaU0I4ZkNCY0lpcGNJaWt1ZEc5TWIzZGxja05oYzJVb0tTNXRZWFJqYUNoeWJtOTBhSFJ0Ykhkb2FYUmxLU0I4ZkNCYlhDSmNJbDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJCSUdOeWIzTnpMV1J2YldGcGJpQnlaWEYxWlhOMElHbHpJR2x1SUc5eVpHVnlJSGRvWlc0Z2RHaGxJRzl5YVdkcGJpQmtiMlZ6YmlkMElHMWhkR05vSUhSb1pTQmpkWEp5Wlc1MElHOXlhV2RwYmk1Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoekxtTnliM056Ukc5dFlXbHVJRDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxY214QmJtTm9iM0lnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLRndpWVZ3aUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJUZFhCd2IzSjBPaUJKUlNBOFBUZ2dMU0F4TVN3Z1JXUm5aU0F4TWlBdElERXpYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnU1VVZ2RHaHliM2R6SUdWNFkyVndkR2x2YmlCdmJpQmhZMk5sYzNOcGJtY2dkR2hsSUdoeVpXWWdjSEp2Y0dWeWRIa2dhV1lnZFhKc0lHbHpJRzFoYkdadmNtMWxaQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCbExtY3VJR2gwZEhBNkx5OWxlR0Z0Y0d4bExtTnZiVG80TUhndlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RYSnNRVzVqYUc5eUxtaHlaV1lnUFNCekxuVnliRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdVM1Z3Y0c5eWREb2dTVVVnUEQwNElDMGdNVEVnYjI1c2VWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCQmJtTm9iM0luY3lCb2IzTjBJSEJ5YjNCbGNuUjVJR2x6YmlkMElHTnZjbkpsWTNSc2VTQnpaWFFnZDJobGJpQnpMblZ5YkNCcGN5QnlaV3hoZEdsMlpWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxY214QmJtTm9iM0l1YUhKbFppQTlJSFZ5YkVGdVkyaHZjaTVvY21WbU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6TG1OeWIzTnpSRzl0WVdsdUlEMGdiM0pwWjJsdVFXNWphRzl5TG5CeWIzUnZZMjlzSUNzZ1hDSXZMMXdpSUNzZ2IzSnBaMmx1UVc1amFHOXlMbWh2YzNRZ0lUMDlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjFjbXhCYm1Ob2IzSXVjSEp2ZEc5amIyd2dLeUJjSWk4dlhDSWdLeUIxY214QmJtTm9iM0l1YUc5emREdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkYwWTJnZ0tHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdTV1lnZEdobGNtVWdhWE1nWVc0Z1pYSnliM0lnY0dGeWMybHVaeUIwYUdVZ1ZWSk1MQ0JoYzNOMWJXVWdhWFFnYVhNZ1kzSnZjM05FYjIxaGFXNHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHbDBJR05oYmlCaVpTQnlaV3BsWTNSbFpDQmllU0IwYUdVZ2RISmhibk53YjNKMElHbG1JR2wwSUdseklHbHVkbUZzYVdSY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjeTVqY205emMwUnZiV0ZwYmlBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdRMjl1ZG1WeWRDQmtZWFJoSUdsbUlHNXZkQ0JoYkhKbFlXUjVJR0VnYzNSeWFXNW5YRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jeTVrWVhSaElDWW1JSE11Y0hKdlkyVnpjMFJoZEdFZ0ppWWdkSGx3Wlc5bUlITXVaR0YwWVNBaFBUMGdYQ0p6ZEhKcGJtZGNJaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhNdVpHRjBZU0E5SUdwUmRXVnllUzV3WVhKaGJTaHpMbVJoZEdFc0lITXVkSEpoWkdsMGFXOXVZV3dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdRWEJ3YkhrZ2NISmxabWxzZEdWeWMxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVc1emNHVmpkRkJ5WldacGJIUmxjbk5QY2xSeVlXNXpjRzl5ZEhNb2NISmxabWxzZEdWeWN5d2djeXdnYjNCMGFXOXVjeXdnYW5GWVNGSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdTV1lnY21WeGRXVnpkQ0IzWVhNZ1lXSnZjblJsWkNCcGJuTnBaR1VnWVNCd2NtVm1hV3gwWlhJc0lITjBiM0FnZEdobGNtVmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGpiMjF3YkdWMFpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdhbkZZU0ZJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJYWlNCallXNGdabWx5WlNCbmJHOWlZV3dnWlhabGJuUnpJR0Z6SUc5bUlHNXZkeUJwWmlCaGMydGxaQ0IwYjF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnUkc5dUozUWdabWx5WlNCbGRtVnVkSE1nYVdZZ2FsRjFaWEo1TG1WMlpXNTBJR2x6SUhWdVpHVm1hVzVsWkNCcGJpQmhiaUJCVFVRdGRYTmhaMlVnYzJObGJtRnlhVzhnS0NNeE5URXhPQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnBjbVZIYkc5aVlXeHpJRDBnYWxGMVpYSjVMbVYyWlc1MElDWW1JSE11WjJ4dlltRnNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdWMkYwWTJnZ1ptOXlJR0VnYm1WM0lITmxkQ0J2WmlCeVpYRjFaWE4wYzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dacGNtVkhiRzlpWVd4eklDWW1JR3BSZFdWeWVTNWhZM1JwZG1Vckt5QTlQVDBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHcFJkV1Z5ZVM1bGRtVnVkQzUwY21sbloyVnlLRndpWVdwaGVGTjBZWEowWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnVlhCd1pYSmpZWE5sSUhSb1pTQjBlWEJsWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpMblI1Y0dVZ1BTQnpMblI1Y0dVdWRHOVZjSEJsY2tOaGMyVW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRVJsZEdWeWJXbHVaU0JwWmlCeVpYRjFaWE4wSUdoaGN5QmpiMjUwWlc1MFhHNGdJQ0FnSUNBZ0lDQWdJQ0J6TG1oaGMwTnZiblJsYm5RZ1BTQWhjbTV2UTI5dWRHVnVkQzUwWlhOMEtITXVkSGx3WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCVFlYWmxJSFJvWlNCVlVrd2dhVzRnWTJGelpTQjNaU2R5WlNCMGIzbHBibWNnZDJsMGFDQjBhR1VnU1dZdFRXOWthV1pwWldRdFUybHVZMlZjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJR0Z1WkM5dmNpQkpaaTFPYjI1bExVMWhkR05vSUdobFlXUmxjaUJzWVhSbGNpQnZibHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdVbVZ0YjNabElHaGhjMmdnZEc4Z2MybHRjR3hwWm5rZ2RYSnNJRzFoYm1sd2RXeGhkR2x2Ymx4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZqYUdWVlVrd2dQU0J6TG5WeWJDNXlaWEJzWVdObEtISm9ZWE5vTENCY0lsd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRTF2Y21VZ2IzQjBhVzl1Y3lCb1lXNWtiR2x1WnlCbWIzSWdjbVZ4ZFdWemRITWdkMmwwYUNCdWJ5QmpiMjUwWlc1MFhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lYTXVhR0Z6UTI5dWRHVnVkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklGSmxiV1Z0WW1WeUlIUm9aU0JvWVhOb0lITnZJSGRsSUdOaGJpQndkWFFnYVhRZ1ltRmphMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFZ1WTJGamFHVmtJRDBnY3k1MWNtd3VjMnhwWTJVb1kyRmphR1ZWVWt3dWJHVnVaM1JvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QkpaaUJrWVhSaElHbHpJR0YyWVdsc1lXSnNaU3dnWVhCd1pXNWtJR1JoZEdFZ2RHOGdkWEpzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITXVaR0YwWVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVdOb1pWVlNUQ0FyUFNBb2NuRjFaWEo1TG5SbGMzUW9ZMkZqYUdWVlVrd3BJRDhnWENJbVhDSWdPaUJjSWo5Y0lpa2dLeUJ6TG1SaGRHRTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklDTTVOamd5T2lCeVpXMXZkbVVnWkdGMFlTQnpieUIwYUdGMElHbDBKM01nYm05MElIVnpaV1FnYVc0Z1lXNGdaWFpsYm5SMVlXd2djbVYwY25sY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZzWlhSbElITXVaR0YwWVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdRV1JrSUc5eUlIVndaR0YwWlNCaGJuUnBMV05oWTJobElIQmhjbUZ0SUdsbUlHNWxaV1JsWkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHpMbU5oWTJobElEMDlQU0JtWVd4elpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallXTm9aVlZTVENBOUlHTmhZMmhsVlZKTUxuSmxjR3hoWTJVb2NtRnVkR2xEWVdOb1pTd2dYQ0lrTVZ3aUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZFc1allXTm9aV1FnUFNBb2NuRjFaWEo1TG5SbGMzUW9ZMkZqYUdWVlVrd3BJRDhnWENJbVhDSWdPaUJjSWo5Y0lpa2dLeUJjSWw4OVhDSWdLeUFvYm05dVkyVXJLeWtnS3lCMWJtTmhZMmhsWkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdVSFYwSUdoaGMyZ2dZVzVrSUdGdWRHa3RZMkZqYUdVZ2IyNGdkR2hsSUZWU1RDQjBhR0YwSUhkcGJHd2dZbVVnY21WeGRXVnpkR1ZrSUNobmFDMHhOek15S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhNdWRYSnNJRDBnWTJGamFHVlZVa3dnS3lCMWJtTmhZMmhsWkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QkRhR0Z1WjJVZ0p5VXlNQ2NnZEc4Z0p5c25JR2xtSUhSb2FYTWdhWE1nWlc1amIyUmxaQ0JtYjNKdElHSnZaSGtnWTI5dWRHVnVkQ0FvWjJndE1qWTFPQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0hNdVpHRjBZU0FtSmlCekxuQnliMk5sYzNORVlYUmhJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS0hNdVkyOXVkR1Z1ZEZSNWNHVWdmSHdnWENKY0lpa3VhVzVrWlhoUFppaGNJbUZ3Y0d4cFkyRjBhVzl1TDNndGQzZDNMV1p2Y20wdGRYSnNaVzVqYjJSbFpGd2lLU0E5UFQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE11WkdGMFlTQTlJSE11WkdGMFlTNXlaWEJzWVdObEtISXlNQ3dnWENJclhDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1UyVjBJSFJvWlNCSlppMU5iMlJwWm1sbFpDMVRhVzVqWlNCaGJtUXZiM0lnU1dZdFRtOXVaUzFOWVhSamFDQm9aV0ZrWlhJc0lHbG1JR2x1SUdsbVRXOWthV1pwWldRZ2JXOWtaUzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h6TG1sbVRXOWthV1pwWldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYWxGMVpYSjVMbXhoYzNSTmIyUnBabWxsWkZ0allXTm9aVlZTVEYwcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYW5GWVNGSXVjMlYwVW1WeGRXVnpkRWhsWVdSbGNpaGNJa2xtTFUxdlpHbG1hV1ZrTFZOcGJtTmxYQ0lzSUdwUmRXVnllUzVzWVhOMFRXOWthV1pwWldSYlkyRmphR1ZWVWt4ZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dwUmRXVnllUzVsZEdGblcyTmhZMmhsVlZKTVhTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcWNWaElVaTV6WlhSU1pYRjFaWE4wU0dWaFpHVnlLRndpU1dZdFRtOXVaUzFOWVhSamFGd2lMQ0JxVVhWbGNua3VaWFJoWjF0allXTm9aVlZTVEYwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUZObGRDQjBhR1VnWTI5eWNtVmpkQ0JvWldGa1pYSXNJR2xtSUdSaGRHRWdhWE1nWW1WcGJtY2djMlZ1ZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hNdVpHRjBZU0FtSmlCekxtaGhjME52Ym5SbGJuUWdKaVlnY3k1amIyNTBaVzUwVkhsd1pTQWhQVDBnWm1Gc2MyVWdmSHdnYjNCMGFXOXVjeTVqYjI1MFpXNTBWSGx3WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHcHhXRWhTTG5ObGRGSmxjWFZsYzNSSVpXRmtaWElvWENKRGIyNTBaVzUwTFZSNWNHVmNJaXdnY3k1amIyNTBaVzUwVkhsd1pTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCVFpYUWdkR2hsSUVGalkyVndkSE1nYUdWaFpHVnlJR1p2Y2lCMGFHVWdjMlZ5ZG1WeUxDQmtaWEJsYm1ScGJtY2diMjRnZEdobElHUmhkR0ZVZVhCbFhHNGdJQ0FnSUNBZ0lDQWdJQ0JxY1ZoSVVpNXpaWFJTWlhGMVpYTjBTR1ZoWkdWeUtGd2lRV05qWlhCMFhDSXNJSE11WkdGMFlWUjVjR1Z6V3pCZElDWW1JSE11WVdOalpYQjBjMXR6TG1SaGRHRlVlWEJsYzFzd1hWMGdQMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE11WVdOalpYQjBjMXR6TG1SaGRHRlVlWEJsYzFzd1hWMGdLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBb2N5NWtZWFJoVkhsd1pYTmJNRjBnSVQwOUlGd2lLbHdpSUQ4Z1hDSXNJRndpSUNzZ1lXeHNWSGx3WlhNZ0t5QmNJanNnY1Qwd0xqQXhYQ0lnT2lCY0lsd2lLU0E2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY3k1aFkyTmxjSFJ6VzF3aUtsd2lYU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJEYUdWamF5Qm1iM0lnYUdWaFpHVnljeUJ2Y0hScGIyNWNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9hU0JwYmlCekxtaGxZV1JsY25NcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnFjVmhJVWk1elpYUlNaWEYxWlhOMFNHVmhaR1Z5S0drc0lITXVhR1ZoWkdWeWMxdHBYU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QkJiR3h2ZHlCamRYTjBiMjBnYUdWaFpHVnljeTl0YVcxbGRIbHdaWE1nWVc1a0lHVmhjbXg1SUdGaWIzSjBYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jeTVpWldadmNtVlRaVzVrSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tITXVZbVZtYjNKbFUyVnVaQzVqWVd4c0tHTmhiR3hpWVdOclEyOXVkR1Y0ZEN3Z2FuRllTRklzSUhNcElEMDlQU0JtWVd4elpTQjhmQ0JqYjIxd2JHVjBaV1FwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdRV0p2Y25RZ2FXWWdibTkwSUdSdmJtVWdZV3h5WldGa2VTQmhibVFnY21WMGRYSnVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHcHhXRWhTTG1GaWIzSjBLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QkJZbTl5ZEdsdVp5QnBjeUJ1YnlCc2IyNW5aWElnWVNCallXNWpaV3hzWVhScGIyNWNiaUFnSUNBZ0lDQWdJQ0FnSUhOMGNrRmliM0owSUQwZ1hDSmhZbTl5ZEZ3aU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1NXNXpkR0ZzYkNCallXeHNZbUZqYTNNZ2IyNGdaR1ZtWlhKeVpXUnpYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyMXdiR1YwWlVSbFptVnljbVZrTG1Ga1pDaHpMbU52YlhCc1pYUmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHcHhXRWhTTG1SdmJtVW9jeTV6ZFdOalpYTnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHcHhXRWhTTG1aaGFXd29jeTVsY25KdmNpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QkhaWFFnZEhKaGJuTndiM0owWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBjbUZ1YzNCdmNuUWdQU0JwYm5Od1pXTjBVSEpsWm1sc2RHVnljMDl5VkhKaGJuTndiM0owY3loMGNtRnVjM0J2Y25SekxDQnpMQ0J2Y0hScGIyNXpMQ0JxY1ZoSVVpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QkpaaUJ1YnlCMGNtRnVjM0J2Y25Rc0lIZGxJR0YxZEc4dFlXSnZjblJjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doZEhKaGJuTndiM0owS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHOXVaU2d0TVN3Z1hDSk9ieUJVY21GdWMzQnZjblJjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcWNWaElVaTV5WldGa2VWTjBZWFJsSUQwZ01UdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJUWlc1a0lHZHNiMkpoYkNCbGRtVnVkRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobWFYSmxSMnh2WW1Gc2N5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbmJHOWlZV3hGZG1WdWRFTnZiblJsZUhRdWRISnBaMmRsY2loY0ltRnFZWGhUWlc1a1hDSXNJRnRxY1ZoSVVpd2djMTBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QkpaaUJ5WlhGMVpYTjBJSGRoY3lCaFltOXlkR1ZrSUdsdWMybGtaU0JoYW1GNFUyVnVaQ3dnYzNSdmNDQjBhR1Z5WlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGpiMjF3YkdWMFpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdweFdFaFNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCVWFXMWxiM1YwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITXVZWE41Ym1NZ0ppWWdjeTUwYVcxbGIzVjBJRDRnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYVcxbGIzVjBWR2x0WlhJZ1BTQjNhVzVrYjNjdWMyVjBWR2x0Wlc5MWRDaG1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JxY1ZoSVVpNWhZbTl5ZENoY0luUnBiV1Z2ZFhSY0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc0lITXVkR2x0Wlc5MWRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052YlhCc1pYUmxaQ0E5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGNtRnVjM0J2Y25RdWMyVnVaQ2h5WlhGMVpYTjBTR1ZoWkdWeWN5d2daRzl1WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklGSmxkR2h5YjNjZ2NHOXpkQzFqYjIxd2JHVjBhVzl1SUdWNFkyVndkR2x2Ym5OY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dOdmJYQnNaWFJsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QlFjbTl3WVdkaGRHVWdiM1JvWlhKeklHRnpJSEpsYzNWc2RITmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkc5dVpTZ3RNU3dnWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnUTJGc2JHSmhZMnNnWm05eUlIZG9aVzRnWlhabGNubDBhR2x1WnlCcGN5QmtiMjVsWEc0Z0lDQWdJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQmtiMjVsS0hOMFlYUjFjeXdnYm1GMGFYWmxVM1JoZEhWelZHVjRkQ3dnY21WemNHOXVjMlZ6TENCb1pXRmtaWEp6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR2x6VTNWalkyVnpjeXdnYzNWalkyVnpjeXdnWlhKeWIzSXNJSEpsYzNCdmJuTmxMQ0J0YjJScFptbGxaQ3dnYzNSaGRIVnpWR1Y0ZENBOUlHNWhkR2wyWlZOMFlYUjFjMVJsZUhRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdTV2R1YjNKbElISmxjR1ZoZENCcGJuWnZZMkYwYVc5dWMxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hqYjIxd2JHVjBaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjF3YkdWMFpXUWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRU5zWldGeUlIUnBiV1Z2ZFhRZ2FXWWdhWFFnWlhocGMzUnpYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hScGJXVnZkWFJVYVcxbGNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCM2FXNWtiM2N1WTJ4bFlYSlVhVzFsYjNWMEtIUnBiV1Z2ZFhSVWFXMWxjaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklFUmxjbVZtWlhKbGJtTmxJSFJ5WVc1emNHOXlkQ0JtYjNJZ1pXRnliSGtnWjJGeVltRm5aU0JqYjJ4c1pXTjBhVzl1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z0tHNXZJRzFoZEhSbGNpQm9iM2NnYkc5dVp5QjBhR1VnYW5GWVNGSWdiMkpxWldOMElIZHBiR3dnWW1VZ2RYTmxaQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwY21GdWMzQnZjblFnUFNCMWJtUmxabWx1WldRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdRMkZqYUdVZ2NtVnpjRzl1YzJVZ2FHVmhaR1Z5YzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMzQnZibk5sU0dWaFpHVnljMU4wY21sdVp5QTlJR2hsWVdSbGNuTWdmSHdnWENKY0lqdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJUWlhRZ2NtVmhaSGxUZEdGMFpWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHcHhXRWhTTG5KbFlXUjVVM1JoZEdVZ1BTQnpkR0YwZFhNZ1BpQXdJRDhnTkNBNklEQTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnUkdWMFpYSnRhVzVsSUdsbUlITjFZMk5sYzNObWRXeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBjMU4xWTJObGMzTWdQU0J6ZEdGMGRYTWdQajBnTWpBd0lDWW1JSE4wWVhSMWN5QThJRE13TUNCOGZDQnpkR0YwZFhNZ1BUMDlJRE13TkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QkhaWFFnY21WemNHOXVjMlVnWkdGMFlWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h5WlhOd2IyNXpaWE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6Y0c5dWMyVWdQU0JoYW1GNFNHRnVaR3hsVW1WemNHOXVjMlZ6S0hNc0lHcHhXRWhTTENCeVpYTndiMjV6WlhNcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJEYjI1MlpYSjBJRzV2SUcxaGRIUmxjaUIzYUdGMElDaDBhR0YwSUhkaGVTQnlaWE53YjI1elpWaFlXQ0JtYVdWc1pITWdZWEpsSUdGc2QyRjVjeUJ6WlhRcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpjRzl1YzJVZ1BTQmhhbUY0UTI5dWRtVnlkQ2h6TENCeVpYTndiMjV6WlN3Z2FuRllTRklzSUdselUzVmpZMlZ6Y3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdTV1lnYzNWalkyVnpjMloxYkN3Z2FHRnVaR3hsSUhSNWNHVWdZMmhoYVc1cGJtZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVhOVGRXTmpaWE56S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUZObGRDQjBhR1VnU1dZdFRXOWthV1pwWldRdFUybHVZMlVnWVc1a0wyOXlJRWxtTFU1dmJtVXRUV0YwWTJnZ2FHVmhaR1Z5TENCcFppQnBiaUJwWmsxdlpHbG1hV1ZrSUcxdlpHVXVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHpMbWxtVFc5a2FXWnBaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxdlpHbG1hV1ZrSUQwZ2FuRllTRkl1WjJWMFVtVnpjRzl1YzJWSVpXRmtaWElvWENKTVlYTjBMVTF2WkdsbWFXVmtYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHMXZaR2xtYVdWa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYWxGMVpYSjVMbXhoYzNSTmIyUnBabWxsWkZ0allXTm9aVlZTVEYwZ1BTQnRiMlJwWm1sbFpEdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMXZaR2xtYVdWa0lEMGdhbkZZU0ZJdVoyVjBVbVZ6Y0c5dWMyVklaV0ZrWlhJb1hDSmxkR0ZuWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzF2WkdsbWFXVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FsRjFaWEo1TG1WMFlXZGJZMkZqYUdWVlVreGRJRDBnYlc5a2FXWnBaV1E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2FXWWdibThnWTI5dWRHVnVkRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jM1JoZEhWeklEMDlQU0F5TURRZ2ZId2djeTUwZVhCbElEMDlQU0JjSWtoRlFVUmNJaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNSaGRIVnpWR1Y0ZENBOUlGd2libTlqYjI1MFpXNTBYQ0k3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCcFppQnViM1FnYlc5a2FXWnBaV1JjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElHbG1JQ2h6ZEdGMGRYTWdQVDA5SURNd05Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM1JoZEhWelZHVjRkQ0E5SUZ3aWJtOTBiVzlrYVdacFpXUmNJanRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUVsbUlIZGxJR2hoZG1VZ1pHRjBZU3dnYkdWMEozTWdZMjl1ZG1WeWRDQnBkRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzUmhkSFZ6VkdWNGRDQTlJSEpsYzNCdmJuTmxMbk4wWVhSbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzVmpZMlZ6Y3lBOUlISmxjM0J2Ym5ObExtUmhkR0U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsY25KdmNpQTlJSEpsYzNCdmJuTmxMbVZ5Y205eU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FYTlRkV05qWlhOeklEMGdJV1Z5Y205eU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QkZlSFJ5WVdOMElHVnljbTl5SUdaeWIyMGdjM1JoZEhWelZHVjRkQ0JoYm1RZ2JtOXliV0ZzYVhwbElHWnZjaUJ1YjI0dFlXSnZjblJ6WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnljbTl5SUQwZ2MzUmhkSFZ6VkdWNGREdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITjBZWFIxY3lCOGZDQWhjM1JoZEhWelZHVjRkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNSaGRIVnpWR1Y0ZENBOUlGd2laWEp5YjNKY0lqdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h6ZEdGMGRYTWdQQ0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM1JoZEhWeklEMGdNRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJUWlhRZ1pHRjBZU0JtYjNJZ2RHaGxJR1poYTJVZ2VHaHlJRzlpYW1WamRGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHcHhXRWhTTG5OMFlYUjFjeUE5SUhOMFlYUjFjenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JxY1ZoSVVpNXpkR0YwZFhOVVpYaDBJRDBnS0c1aGRHbDJaVk4wWVhSMWMxUmxlSFFnZkh3Z2MzUmhkSFZ6VkdWNGRDa2dLeUJjSWx3aU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRk4xWTJObGMzTXZSWEp5YjNKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hWE5UZFdOalpYTnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxabVZ5Y21Wa0xuSmxjMjlzZG1WWGFYUm9LR05oYkd4aVlXTnJRMjl1ZEdWNGRDd2dXM04xWTJObGMzTXNJSE4wWVhSMWMxUmxlSFFzSUdweFdFaFNYU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pXWmxjbkpsWkM1eVpXcGxZM1JYYVhSb0tHTmhiR3hpWVdOclEyOXVkR1Y0ZEN3Z1cycHhXRWhTTENCemRHRjBkWE5VWlhoMExDQmxjbkp2Y2wwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJUZEdGMGRYTXRaR1Z3Wlc1a1pXNTBJR05oYkd4aVlXTnJjMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3B4V0VoU0xuTjBZWFIxYzBOdlpHVW9jM1JoZEhWelEyOWtaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNSaGRIVnpRMjlrWlNBOUlIVnVaR1ZtYVc1bFpEdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWm1seVpVZHNiMkpoYkhNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWjJ4dlltRnNSWFpsYm5SRGIyNTBaWGgwTG5SeWFXZG5aWElvYVhOVGRXTmpaWE56SUQ4Z1hDSmhhbUY0VTNWalkyVnpjMXdpSURvZ1hDSmhhbUY0UlhKeWIzSmNJaXdnVzJweFdFaFNMQ0J6TENCcGMxTjFZMk5sYzNNZ1B5QnpkV05qWlhOeklEb2daWEp5YjNKZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnUTI5dGNHeGxkR1ZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjIxd2JHVjBaVVJsWm1WeWNtVmtMbVpwY21WWGFYUm9LR05oYkd4aVlXTnJRMjl1ZEdWNGRDd2dXMnB4V0VoU0xDQnpkR0YwZFhOVVpYaDBYU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHWnBjbVZIYkc5aVlXeHpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHZHNiMkpoYkVWMlpXNTBRMjl1ZEdWNGRDNTBjbWxuWjJWeUtGd2lZV3BoZUVOdmJYQnNaWFJsWENJc0lGdHFjVmhJVWl3Z2MxMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QklZVzVrYkdVZ2RHaGxJR2RzYjJKaGJDQkJTa0ZZSUdOdmRXNTBaWEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0VvTFMxcVVYVmxjbmt1WVdOMGFYWmxLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYWxGMVpYSjVMbVYyWlc1MExuUnlhV2RuWlhJb1hDSmhhbUY0VTNSdmNGd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnFjVmhJVWp0Y2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdaMlYwU2xOUFRqb2dablZ1WTNScGIyNGdLSFZ5YkN3Z1pHRjBZU3dnWTJGc2JHSmhZMnNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnFVWFZsY25rdVoyVjBLSFZ5YkN3Z1pHRjBZU3dnWTJGc2JHSmhZMnNzSUZ3aWFuTnZibHdpS1R0Y2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdaMlYwVTJOeWFYQjBPaUJtZFc1amRHbHZiaUFvZFhKc0xDQmpZV3hzWW1GamF5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdwUmRXVnllUzVuWlhRb2RYSnNMQ0IxYm1SbFptbHVaV1FzSUdOaGJHeGlZV05yTENCY0luTmpjbWx3ZEZ3aUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1SUNBZ0lHcFJkV1Z5ZVM1bFlXTm9LRnRjSW1kbGRGd2lMQ0JjSW5CdmMzUmNJbDBzSUdaMWJtTjBhVzl1SUNocExDQnRaWFJvYjJRcElIdGNiaUFnSUNBZ0lDQWdhbEYxWlhKNVcyMWxkR2h2WkYwZ1BTQm1kVzVqZEdsdmJpQW9kWEpzTENCa1lYUmhMQ0JqWVd4c1ltRmpheXdnZEhsd1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdVMmhwWm5RZ1lYSm5kVzFsYm5SeklHbG1JR1JoZEdFZ1lYSm5kVzFsYm5RZ2QyRnpJRzl0YVhSMFpXUmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHFVWFZsY25rdWFYTkdkVzVqZEdsdmJpaGtZWFJoS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1VnUFNCMGVYQmxJSHg4SUdOaGJHeGlZV05yTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGJHeGlZV05ySUQwZ1pHRjBZVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaElEMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1ZHaGxJSFZ5YkNCallXNGdZbVVnWVc0Z2IzQjBhVzl1Y3lCdlltcGxZM1FnS0hkb2FXTm9JSFJvWlc0Z2JYVnpkQ0JvWVhabElDNTFjbXdwWEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2FsRjFaWEo1TG1GcVlYZ29hbEYxWlhKNUxtVjRkR1Z1WkNoN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RYSnNPaUIxY213c1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nYldWMGFHOWtMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JoZEdGVWVYQmxPaUIwZVhCbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0U2SUdSaGRHRXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM1ZqWTJWemN6b2dZMkZzYkdKaFkydGNiaUFnSUNBZ0lDQWdJQ0FnSUgwc0lHcFJkV1Z5ZVM1cGMxQnNZV2x1VDJKcVpXTjBLSFZ5YkNrZ0ppWWdkWEpzS1NrN1hHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ2ZTazdYRzRnSUNBZ2NtVjBkWEp1SUdwUmRXVnllVHRjYm4wcE8xeHVYRzR2THlNZ2MyOTFjbU5sVFdGd2NHbHVaMVZTVEQxa1lYUmhPbUZ3Y0d4cFkyRjBhVzl1TDJwemIyNDdZMmhoY25ObGREMTFkR1k0TzJKaGMyVTJOQ3hsZVVveVdsaEtlbUZYT1hWSmFtOTZURU5LZW1JelZubFpNbFo2U1dwd1lrbHVaRE5rZVRsM1dWZE9jbU41T1hGaldGWnNZMjVyZG1NelNtcE1Na1p4V1ZobmRXRnVUV2xZVTNkcFltMUdkRnBZVFdsUGJIUmtURU5LZEZsWVFuZGhWelZ1WTNsSk5rbHJSa0pSVlVWelZGVkdRbFJUZUVSUlZVWkdUekJzUWxFeFFYTlZWVVpDVlZSMFNsRlZUbE5NUjJSRFVWVkdibEZxZEVwUlZVNXZVV2w0ZUZGclJrSmpWVWszVTFWR1JHTnJTWE5qVlVwQ1VWaEdRMDh3YkVKUk0wcERURWQwUTFGVlJuSlJhblJLVVZWT2MxRnBlSFJSYTBaQ1lsVkpOMU5WUmtaaWEwbHpXVlZHUWxsVWRFcFJWVTVwVEVkc1ExRlZSbkJSYW5SS1VWVk9jVkZwZUhCUmEwWkNZVlZKTjFOVlJrUmhhMGx6VjFWR1FsZFVkRXBSVlU1aFRFZEdRbEZYUlhOUk1FWkNVWGw0YkZGVlJteFBNRTVDVVhwa1EweEZWa0pSVlZWelZsVkdRbFpUZUU1UlZVWk9URVZXUWxGVlZYTlZWVVpDVlZONFJsRlZSa1pNUjBaQ1VWZEZjMUpWUmtKU1UzaFNVVlZHVWt4RlZrSlJWVlZ6VXpCR1FsTjVlRVpSVlVaR1RFVXhRbEZWTURkVFZVWkdZMnRWYzFkVlJrSlhVM2hFVVZWR1JFOHdiRUpTVjBselUxVkdSRkY1ZUVoUlZVWklURVZrUWxGVlkzTlVWVVpDVkZONFJsRlZUbUZNUlhSQ1VWVnpjMUl3UmtKU2VYaE9VVlZHVGt4RlZrSlJNbEZ6VmxWR1FsWlRlRWhSVlVaSVRFZFdRbEZYVlhOU1ZVWkVUbFZKYzFWVlJrSlZVM2hJVVZWR1NFeEVVa05SVlVVd1VXcDBTbEZWVmpKUmVYaHVVa1ZHUWxvd1VUZFRWVVpFWVVWUmMxa3dSa0paZVhoSVVWVkdTRXhFU2tWUlZVVjVVa040UmxGVlRURlNVM2hXVVZWR1ZreEZaRUpSVldOeldqQktRbEZYWkVOTVJWWkNVWHBrUTB4R1RrSlJWazF6VWpCR1FsSjVlRkJSVlVaUVR6QnNRbEpYTlVOUGVuTTNUM3B6TjA5NmRGQlJWa1pJVHpCc1FsRXdaM05XVlVaQ1ZsTjRTRkZWUmtoTVJWWkNVVlZWTjFOVlJrWmFhbk0zVDNwMFVGRlZiRWhQTUd4Q1VUQm5jMVpWUmtKV1UzaElVVlZHU0V4RlZrSlJWVlUzVTFWR1JscHBlREZTYTBaQ1pGVlpOMU5WUmtSa2ExbHpWVlZHUWxWVGVFaFJWVVpJVEVWc1FsRlZhM05STUVaQ1VYbDRUbEZWUms1TVJVNUNVVlZWYzFJd1JrSlNlWGhFVVZWR1JrOHdiRUpTVkdSRFRFUmFSRkZWUlRKUmVuUktVVlZOTTFGNWVGcFJWVVphVEVWa1FsRlZZM05WVlVaQ1ZWTjRSRkZWUmtSTVIwWkNVVmRGYzFFd1JrSlNVM2hJVVZWR1NFeEZUa0pSVlZWelVUQkdRbEY2ZEVwUlZVMHpVWGw0V2xGVlJscE1SVTVDVVZWTmMxTlZSa0pUVTNoSVVWVkdTRXhHUmtKUlZrVnpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUVGRUVlVaR1ltdE5jMlJWVmtKUldGWkdUekJzUWxFeldrWk1TRVpFVVZWR2VsRjVlRlJSVlVaVVR6RkdRbEpVYkVSTVNFWkZVVlZHZUZKRWRGSlJWVTU1VWtONFRsRlZSazVNUlU1Q1VWVk5jMVpWUmtKV1UzaHlVV3RHUW1Fd1NYTlNWVVpDVWxONFNsRlZSa3BQTVd4Q1VsaG9SRXhGVmtKUlZWVnpVVEJHUWxGNWVFUlJWVVpHVEVVNVFsRlZPSE5oTUVwQ1VWZDBRMHhGZEVKUlZYTnpWVlZHUWxWNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBibEZyUmtSUFZVMXpVMVZHUWxOVGVFaFJWVVpJVEVkMFExRlZSbkpSYVhoRVVWVkdSRTh5WkVOUlZVMTRVV2w0Y2xGclJrSmhNRWx6VWpCR1FsSjVlRWhSVlVaSVRFVk9RbEZWVFRkWFZVWkVUVlZKYzFFd1JrSlJlblJhVVZWV1JVeEZiRUpSVld0elZWVkdRbFZUZUVaUlZVNVpURVZPUWxGVlRYTlNNRVpDVW5sNFJGRlZSa1JNUlZaQ1VUQjNjMVV3UmtKVmVYaElVVlZHU0V4SGRFTlJWVVp5VVdsNFJGRlZSa1JNUm1SQ1VWWmpjMUpWUmtKU1UzaEVVVlZHUkV4RmRFSlJWWE56VVRCR1FsSlRlR2hSVlVab1RFVk9RbEZWVlhOVFZVWkNVMU40UmxGVlJrWk1SVTVDVVZWTk4xZFZSa1pOTUZWelVsVkdRbEpUZUVSUlZVWkVURVZPUWxGVlZYTlVWVVpDVkZONFJGRlZSa1JNUmxaQ1VWWlZjMUV3UmtKU1UzaEtVVlZHU2t4RlRrSlJWV056VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFRkYU1FcENVbGR3UkV4RWFFUlJWVVUwVVhwMGJsRnJSa1JQVlUxelZEQkdRbFZUZUVSUlZVWkdURVpHUWxGV1JYTlNNRVpDVW5sNFZGRlZSbFJNUlU1Q1VWVlZjMUV3UmtKUmVYaEdVVlZHUmt4RlRrSlJWVlZ6VVRCR1FsSlRlRVpSVlVaSVRFVk9RbEZWVFRkaU1FcENVbFJHUkV4SVZrTlJWVVl4VVdwMGRsRnJSa1JrYTBselVsVkdRbEpUZUVSUlZVWkVURVZPUWxGVlZYTlZWVVpDVlZONFJGRlZSa1pNUlU1Q1VWVk5jMUV3UmtKU1UzaE1VVlZHVEV4RlpFSlJWV3R6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFRka01FcENVWHBrUTB4R1JrSlJWa1Z6VWpCR1FsSjVlRkpSVlVaU1RFVk9RbEZWVFhOVE1FWkNVM2w0UkZGVlJrWk1SVTVDVVZWTmMxRXdSa0pTVTNoS1VWVkdTa3hGWkVKUlZXTnpVVEJHUWxGNmRETlJhMFpFWkVWTmMxRXdSa0pTVTNoVVVWVkdWRXhGVGtKUlZWVnpWVlZHUWxWVGVFUlJWVVpHVEVWa1FsRlZZM05WTUVaQ1ZYbDRSRkZWUmtaTVJrWkNVVlpGYzFFd1JrSlNVM2hLVVZWR1NreEZWa0pSVlZWelVUQkdRbEpUZUVSUlZVWkVURVU1UWxGVk9ITlJNRVpDVWxONFNsRlZSa3BNUlU1Q1VWVlZjMUV3UmtKUmVuUXpVV3RHUm1WclZYTmlWVXBDVVZjeFEwOHlPVU5SVlU1MVVXbDRSRkZWUmtSUE1qbERVVlZHUkV4RmJFSlJWV3R6VVRCR1FsRjVlRVJSVlVaRVR6TmtRMUZWVGxGTVJVNUNVVlZWYzFVd1JrSlZlWGhFVVZWR1JreEdSa0pSVmtWelVUQkdRbEpUZUVoUlZVWklURVpPUWxGV1RYTlJNRVpDVWxONFVsRlZSbEpNUlU1Q1VWVlZjMU5WUmtKVFUzaEdVVlZHUmt4RlRrSlJWVlZ6VVRCR1FsRjVlRXBSVlVaS1RFVk9RbEZWVlhOVFZVWkNVMU40UkZGVlJrWk1SVTVDVVZWTk4ySXdTa0pSTTFKR1RFVk9RbEZWVFRkYU1FcENVVEJaYzFFd1JrSlJlblJhVVZWT1IweEZUa0pSVlUwM1ZWVkdSRkpwZUVSUlZVWkVURVZPUWxGVlRUZFRWVVpFVTBONFJGRlZSa1JQTUd4Q1VsVlJjMlZWVWtKUldHeEZUekJzUWxFemNFVk1TRlpFVVZWR00xRjVlRlJSVlVaVVRFVldRbEZWVlhOVU1FWkNWSGw0UmxGVlJrWk1SMVpDVVZkVmMxSlZSa0pTVTNoTVVWVkdURTh4UmtKU1YzQkhURVZzUWxGVmEzTlZNRVpDVlhsNFNGRlZSa2hNUlZaQ1VWVlZjMUpWUmtSaGEwbHpXakJLUWxGWFpFTk1SV1JDVVZWamMxRXdSa0pTVTNoVVVWVkdWRXhGZEVKUlZYTnpWbFZHUWxaVGVFUlJWVVpHVEVWT1FsRlZUVGRWVlVaR1lXdFJjMkZWU2tKUlYzUkRURVpHUWxGV1JUZFhWVVpFWld0SmMxTlZSa0pUVTNoU1VWVkdVa3hGVGtKUlZVMDNWMVZHUkZscGVGUlJWVVpVVEVWT1FsRlZWWE5WVlVaQ1ZWTjRSRkZWUmtaTVJXUkNVVlZqYzFOVlJrSlRVM2hFVVZWR1JFOHhiRUpSZW1SRFRFVXhRbEZWTUhOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWVmMxVXdSa0pWZVhoRVVWVkdSa3hHUmtKUlZrVnpVVEJHUWxKVGVFcFJWVVpLVEVWV1FsRlZWWE5TVlVaQ1VsTjRWbEZWUmxaTVJVNUNVVlZOYzFKVlJrSlNVM2h5VVd0R1FtRXdTVGRhTUVwQ1VUTm9Sa3hGYkVKUlZXdHpZbFZLUWxGWE1VTk1SV1JDVVZWamMyRXdTa0pSVjNSRFRFVk9RbEZWVlhOVU1FWkNWSGw0UmxGVlJrWk1SMVpDVVZkVmMxSlZSa0pTVTNoTVVWVkdURXhGVGtKUlZWVnpVVEJHUWxGNmRHNVJhMFpFWVVWWmMxSlZSa0pTVTNoRVVWVkdSRXhGVGtKUlZWVnpWREJHUWxSNWVIUlJhMFpDWWxWSmMxTXdSa0pUZVhoU1VWVkdVazh5T1VOUlZVMTZVWGw0UkZGVlJrUk1SMlJEVVZWR2JsRnBlRXBSVlVaS1RFVk9RbEZWVFhOVk1FWkNWWGw0UkZGVlJrWk1SekZEVVZWR2RGRnBlRVJSVlVaSVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUlBNamxEVVZWVmVGSkRlRkJSVlVaUVRFVk9RbEZWVFhOVk1FWkNWWGw0UkZGVlJrUk1SVGxDVVZVNGMxRXdSa0pTVTNoMFVXdEdRbUpWU1hOUk1FWkNVbE40UkZGVlJrUlBNamxEVVZWT2NWSkRlRkJSVlVaUVRFVk9RbEZWVlhOaVZVcENVVmN4UTB4RlRrSlJWVlZ6VVRCR1FsRjZkSFpSYTBaRVREQkpjMVJWUmtKVVUzaEVVVlZHUkV4RmRFSlJWWE56VVRCR1FsRjZkRzVSYTBaRVdrTjRSRkZWUmtSUE1tUkRVVlZHUkV4RmJFSlJWV3R6VVRCR1FsRjVlRVpSVlVaR1RFVk9RbEZWVFhOUk1FWkNVbE40YmxGclJrSmhWVWx6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFRkaU1FcENVWGs1UTB4Rk1VSlJWVEJ6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVlhOVlZVWkNWVk40U0ZGVlJraE1SekZEVVZWR2RGRnBlRVJSVlVaR1RFVk9RbEZWVFRkYU1FcENVWHBXUkV4RlRrSlJWVTAzVjFWR1JGSnBlRVJSVlVaRVRFVk9RbEZWVlhOUk1FWkNVWHAwV2xGVlRrdE1SVEZDVVZVd2MxRXdSa0pSZVhoU1VWVkdVa3hGVGtKUlZVMDNWVlZHUkdGclNYTlJNRVpDVVhwMFVsRlZWa1ZNUlRGQ1VWVXdjMUV3UmtKUmVYaFFVVlZHVUV4RlRrSlJWVlZ6VkRCR1FsUjVlRVJSVlVaRVRFWk9RbEZXVFhOUk1FWkNVbE40UkZGVlJrUk1SVTVDVVZWVmMxRXdSa0pTVTNoS1VWVkdTa3hGVGtKUlZVMXpWVEJHUWxWNWVFUlJWVVpHVEVWa1FsRlZZM05STUVaQ1VsTjRTbEZWUmtwTVJUbENVVlU0YzFFd1JrSlNVM2hJVVZWR1NFeEZUa0pSVlZWelVUQkdRbEY2ZEVwUlZVNXhVbWw0UkZGVlJrUlBNR3hDVWxWUmMySXdUa0pSVnpsRVR6QnNRbEV6UWtSTVNFNUZVVlZHZWxKRWRFcFJWVTR3VWtONGFsRlZSbXBQTUd4Q1VUSlJjMkl3U2tKUldFWkRURVV4UWxGVk1ITlNWVVpDVWxONFNGRlZSa2hQTVVaQ1VYazVRMHhGYkVKUlZXdHpVakJHUWxKNWVFWlJWVVpHVEVWc1FsRlZhM05TVlVaRVYybDRXRkZWUmxoTVJXUkNVVlZqYzFSVlJrSlVVM2hFVVZWR1JFeEdiRUpSVm10elVUQkdRbEY1ZUZoUlZVWllURVZzUWxGVmEzTlNWVVpDVWxONFJGRlZSa1JQTVVaQ1VsaEtSVXhGWkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpHVEVWa1FsRlZZM05UVlVaQ1UxTjRTRkZWUmtwTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFOHhiRUpSTWpWRFRFVldRbEZWVlhOUk1FWkNVWGw0UkZGVlJrWk1SV1JDVVZWamMxRXdSa0pTVTNoSVVWVkdTRXhGVGtKUlZWVnpVekJHUWxONWVGUlJWVVpXVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSUE1tUkRVVlZPYjFGNWVFUlJWVVpHVEVaa1FsRldZM05STUVaQ1VsTjRTRkZWUmtoTVJVNUNVVlZWYzFJd1JrSlNlWGhPVVZWR1RreEZaRUpSVldOelVUQkdRbEpUZUVwUlZVWktURVZzUWxGVmEzTlJNRVpDVWxONFNsRlZSa3BNUldSQ1VWVmpjMUpWUmtKU1UzaEVVVlZHUmt4RlRrSlJWVlZ6VVRCR1FsSlRlRVJSVlVaR1RFVmtRbEZWWTNOUk1FWkNVbE40U0ZGVlJraE1SV1JDVVZWamMxRXdSa0pTVTNoSVVWVkdTRXhGVGtKUlZWVnpVVEJHUWxGNmRGcFJWVTV4VW1sNFJGRlZSa1JQTVVaQ1VUQlpjMUV3UmtKUmVuUlNVVlZPUlV4RlZrSlJWVlZ6VVRCR1FsRjVlRVJSVlVaR1RFVnNRbEZWYzNOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTk4xZFZSa1JYYVhoT1VWVkdUa3hGVGtKUlZVMXpWRlZHUWxSVGVFUlJWVVpHVEVWc1FsRlZhM05TVlVaQ1VsTjRUbEZWUms1TVJWWkNVVlZWYzFOVlJrSlRVM2hFVVZWR1JreEZUa0pSVlUwM1ZWVkdSR05yVFhOUk1FWkNVWHAwVWxGVlZrVk1SVEZDVVZVd2MxRXdSa0pSZVhoT1VWVkdUa3hGVGtKUlZVMDNVMVZHUkZwcGVFUlJWVVpFVHpCc1FsSlZVVGRQZW5SUVVWVmtTRTh3YkVKUk1HZHpUbXRLUWxGVWFFTk1SVTVDVVZWTmMxSlZSa0pTVTNoTVVWVkdURXhGVmtKUlZWVnpWVEJHUWxWNmRGSlJWVlp2VWtONFNsRlZSa3BNUlZaQ1VWVlZjMUpWUmtKU1UzaEtVVlZHU2t4RlZrSlJWVlZ6V1ZWR1FsbFRlRVpSVlVaR1RFZEdRbEZYUlhOU1ZVWkVaV3ROYzFWVlJrSlZVM2hJVVZWR1NFeEZUa0pSVlUxelVUQkdRbEY1ZUZKUlZVWlNURVZXUWxFelNrTk1SazVDVVZaTmMxSXdSa0pTZVhoRVVWVkdSRXhGVGtKUlZVMXpWVEJHUWxWNWVFUlJWVVpFVHpGR1FsSlljRU5NUkVwRlVWVkZlVkpFZEZKUlZVMTZVa040VUZGVlJsSk1SazVDVVZaTmMxRXdSa0pTVTNoRVVWVkdSRXhGVGtKUlZWVnpVekJHUWxONWVFaFJWVVpJVEVWV1FsRlZZM05STUVaQ1VYcDBXbEZWVG5GUmVYaFVVVlZHVkV4RlRrSlJWVTF6VXpCR1FsTjVlRVpSVlVaR1RFVk9RbEZWVFRkWFZVWkVZa1ZKYzFKVlJrSlNVM2hFVVZWR1JFeEZUa0pSVlZWelVsVkdRbEpUZUV4UlZVWk1URVpPUWxGV1ZYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5OMW93U2tKUk0yaERURVZXUWxGVlZYTlNNRVpDVW5sNFJGRlZSa1JNUlU1Q1VWVk5jMVZWUmtKVlUzaEtVVlZHU2t4RmRFSlJWWE56VVRCR1FsRjVlSEJSYTBaQ1lWVkpjMUV3UmtKU1UzaHFVVlZHYWt4RlRrSlJWVlZ6VVRCR1FsRjZkRnBSVlUwMVVrTjRSRkZWUmtSUE1VWkNVVEJaYzFFd1JrSlJlblJTVVZWV1JVeEhNVVZSVlVaMFVrUjBVbEZWVG5WU1EzaEdVVlZHUmt4RlRrSlJWVTF6VVRCR1FsSlRlRVpSVlVaSVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUlBNV3hDVVRGWmMxSXdSa0pTZVhoRVVWVkdSRXhGVGtKUlZWVnpVMVZHUWxOVGVFcFJWVVpLVEVaR1FsRldUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOTjFvd1NrSlJNM0JEVEVWV1FsRlZWWE5STUVaQ1VYbDRSRkZWUmtaTVJrWkNVVlpGYzFFd1JrSlNVM2hLVVZWR1NreEZUa0pSVlZWelUxVkdRbE5UZUZKUlZVWlNURVZPUWxGVlZYTlRWVVpDVTFONFJGRlZSa1pNUlU1Q1VWVk5jMU5WUmtKVFUzaEVVVlZHUmt4RlZrSlJWVlZ6VVRCR1FsSjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWHAwZGxGclJrUmthMUZ6VlRCR1FsVjVlRVJSVlVaRVRFVTVRbEZWT0hOUk1FWkNVbE40U2xGVlJrcE1SVTVDVVZWVmMxRXdSa0pSZW5SMlVXdEdSRTFWU1hOVE1FWkNVM2w0UkZGVlJrUlBNbVJEVVZWT1VVeEZUa0pSVlUwM1YxVkdSRkpwZUVSUlZVWkVUekZHUWxFd1dYTlJNRVpDVVhwMFVsRlZWa1ZNUTNSRlVWVkZjbEpFZEZKUlZVMTJVa040UmxGVlJrWk1SVTVDVVZWTmMxRXdSa0pTVTNoVVVWVkdWRXhGVGtKUlZWVnpVVEJHUWxGNWVFUlJWVVpHVEVWc1FsRlZhM05WTUVaQ1ZsTjRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlblJhVVZWT2RWRjVlR2hSVlVab1RFVmtRbEZWWTNOVk1FWkNWWGw0UkZGVlJrWk1SVTVDVVZWTmMxRXdSa0pTVTNoRVVWVkdSRTh4UmtKUk1taEVURVZPUWxGVlRUZFZWVVpDVVhsNFNsRlZSa3BNUlU1Q1VWVk5jMUV3UmtKUmVuUmFVVlZXVVV4RVVrTlJWVVV3VVdwMFdsRlZUVEZSYVhoSVVWVkdTRXhGVGtKUlZVMXpVVEJHUWxKVGVFcFJWVVpLVEVWc1FsRlZhM05WTUVaQ1ZsTjRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlblJ1VVd0R1JFMVZTWE5TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZWYzFFd1JrSlJlWGhVVVZWR1ZFeEZUa0pSVlZWelVUQkdRbEY1ZUVSUlZVWkdURVZzUWxGVmEzTlJNRVpDVVhsNFJGRlZSa1JNUmxaQ1VWWlZjMUV3UmtKU1UzaEtVVlZHU2t4RlpFSlJWV056VWpCR1FsSjVlRWhSVlVaSVRFWk9RbEZXVFhOUk1FWkNVbE40UkZGVlJrUk1SVTVDVVZWVmMxRXdSa0pTZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRIWlJhMFpFWkVWVmMxbFZSa0paVTNoSVVWVkdTRXhGYkVKUlZXdHpVVEJHUWxGNmRIWlJhMFpFWTJ0SmMxTXdSa0pUZVhoRVVWVkdSRTh5WkVOUlZVNVJURVZPUWxGVlRUZGFNRXBDVVRCUmMxSlZSa0pTVTNoRVVWVkdSRXhGVGtKUlZWVnpVVEJHUWxGNWVHaFJWVVpxVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSUE1qbERVVlZPTUZGcGVHaFJWVVpvVEVWa1FsRlZZM05UVlVaQ1UxTjRSRkZWUmtSUE1tUkRVVlZPTUZGcGVFUlJWVVpFVHpGc1FsRXdXWE5STUVaQ1VYcDBXbEZWVmtWTVNHUkRVVlZHTTFGcWRGcFJWVTQwVVdsNGFGRlZSbWhNUldSQ1VWVmpjMWxWUmtKWlUzaEtVVlZHU2t4SFJrSlJWMFZ6VVRCR1FsRjZkRkpSVlU1dlVrTjRSRkZWUmtSUE1VWkNVbFZSYzJWVlNrSlJXR3hEVHpGR1FsRXpjRU5NUkZKRVVWVkZNRkY2ZEZKUlZVMHhVWGw0TTFFd1JrSmtNRTAzVlZWR1JHVkZUWE5TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZWYzFsVlJrSlplWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEZwUlZVNTVVV2w0UmxGVlJrWk1SVTVDVVZWTmMxRXdSa0pTVTNob1VWVkdhRXhGZEVKUlZYTnpWVEJHUWxWNWVFUlJWVVpHVEVWT1FsRlZUWE5STUVaQ1VubDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlblJ1VVd0R1JHVkZUWE5WTUVaQ1ZYbDRSRkZWUmtSTVJUbENVVlU0YzFFd1JrSlNVM2hvVVZWR2FFeEZUa0pSVlZWelVUQkdRbEY2ZEZwUlZVNTNVWGw0UkZGVlJrUlBNV3hDVVRCUmMxUlZSa0pVVTNoRVVWVkdSRXhHVGtKUlZrMXpVVEJHUWxKVGVHaFJWVVpvVEVWT1FsRlZWWE5STUVaQ1VYcDBVbEZWVG5WUmVYaEVVVlZHUkU4d2JFSlJNRmx6VVRCR1FsRjZkRXBSVlZaRlQzcDBVRkZWVmtoUE1HeENVVEJuYzJOVlNrSlJXRTVEVEVWT1FsRlZUWE5TVlVaQ1VsTjRVbEZWUmxKTVJWWkNVVlZWYzFNd1JrSlRlWGhHVVZWR1JreEdUa0pSVmswM1ZWVkdSR0pGVVhOVFZVWkNVMU40VEZGVlJreE1SVlpDVVZWVmMxUXdSa0pVZVhoR1VWVkdSa3hGYkVKUlZXdHpVbFZHUWxKVGVFaFJWVVpJVEVWV1FsRlZWWE5UVlVaQ1UxTjRSbEZWVG5OUmVYaFdVVlZHVmt4RlpFSlJWV056VWxWR1FsSlVkRkpSVlZadFRFUlNSbEZWUlRCU1ZIUlNVVlZOTVZKVGVGUlJWVVpVVEVWa1FsRlZZM05STUVaQ1VYbDRSRkZWUmtSTVJrNUNVVlpOYzFFd1JrSlJlWGhNVVZWR1RFeEZWa0pSVlZWelVUQkdRbEY2ZEZKUlZWWnhVWGwzTWxFd1JrSk9hMDAzVlZWR1JFNHdUWE5TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZWYzFVd1JrSlZlWGhFVVZWR1JreEZUa0pSVlUxelVUQkdRbEo1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhwMFdsRlZUakJSYVhoSVVWVkdTRXhGVGtKUlZVMXpVVEJHUWxKVGVFcFJWVVpLVEVWc1FsRlZhM05STUVaQ1VYbDRSRkZWUmtSTVJsWkNVVlpqYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUwM1dqQktRbEY2WkVOTVJsWkNVVlpWYzFFd1JrSlNVM2hLVVZWR1NreEZUa0pSVlUxelZqQkdRbFo1ZUVaUlZVWkdURVZPUWxGVlZYTlNNRVpDVW5sNFJGRlZSa1JNUlU1Q1VWVk5jMVpWUmtKV1UzaEVVVlZHUmt4RmJFSlJWV3R6VVRCR1FsSlRlRVJSVlVaRVR6RnNRbEV6Y0VWTVJVNUNVVlZOTjFWVlJrUlNhWGhFVVZWR1JFOHhSa0pTVlZGelZEQkdRbFI1ZUVoUlZVWklURVpPUWxGV1RYTlJNRVpDVVhsNFRGRlZSa3hNUlZaQ1VWVlZjMUV3UmtKUmVuUlNVVlZWTVZGcGVIcFJNRVpDWXpCTk4xVlZSa1JrUlUxelZEQkdRbFZUZUZCUlZVWlFURVZXUWxGVlkzTlJNRVpDVVhwMFdsRlZWbk5SYVhoR1VWVkdSa3hGVGtKUlZVMXpVVEJHUWxKVGVFUlJWVVpFVEVWT1FsRlZUWE5aTUVaQ1dYbDRSRkZWUmtaTVJUbENVVlU0YzFFd1JrSlNlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEc1UmEwWkVZbXROYzFNd1JrSlRlWGhFVVZWR1JreEZUa0pSVlUxelVUQkdRbEY1ZUdwUlZVWnFURVZPUWxGVlZYTlVNRVpDVkhsNFJGRlZSa1pNUlU1Q1VWVlZjMUl3UmtKU2VYaFNVVlZHVWt4RlRrSlJWVTAzVjFWR1JHRnJVWE5STUVaQ1VYcDBXbEZWVmtWTVJ6RkVVVlZHZEZGNmRGcFJWVTUxVVhsNFJsRlZSa1pNUlU1Q1VWVk5jMUV3UmtKU1UzaEVVVlZHUkV4RmJFSlJWV3R6VTFWR1FsTlRlRlJSVlVaVVRFVnNRbEZWYTNOUk1FWkNVWGw0UkZGVlJrUk1SbFpDVVZaamMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMDNXakJLUWxGNlJrUk1Sa1pDVVZaRmMxSXdSa0pTZVhoRVVWVkdSRXhGVGtKUlZVMXpWbFZHUWxaVGVFUlJWVVpHVEVaR1FsRldSWE5TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZOYzFWVlJrSlZVM2hFVVZWR1JreEZUa0pSVlUwM1YxVkdSR0ZyVVhOUk1FWkNVWHAwV2xGVlZrVk1SV3hDVVZWcmMxSXdSa0pTZVhoUVVWVkdVRXhGVGtKUlZVMDNWMVZHUkZwcGVGQlJWVVpRVEVWa1FsRlZZM05WTUVaQ1ZYbDRSRkZWUmtSTVJYUkNVVlZ6YzFKVlJrSlNVM2hFVVZWR1JFOHhiRUpTVkZaRFRFVldRbEZWVlhOUk1FWkNVWGw0UkZGVlJrWk1SVGxDVVZaRmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMDNXakJLUWxKWFdYTk5SVkpDVVZSQ1JVOHlaRU5SVlUxNFVrTjRSbEZWUmtaTVJVNUNVVlZOYzFFd1JrSlNVM2hRVVZWR1VFeEZkRUpSVlhOelVqQkdRbE5UZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhwMGRsRnJSa1prYTBselZEQkdRbFI1ZUVoUlZVWklURVZzUWxGVmEzTlJNRVpDVVhwMGRsRnJSa1poUlVselpWVldRbEZZYkVaUE1tUkRVVlZPTmxKVGVFUlJWVVpFVHpKa1ExRlZSa1JNUld4Q1VWVnJjMUV3UmtKUmVYaEdVVlZHUmt4RlRrSlJWVTF6VVRCR1FsSlRlRXBSVlVaS1RFVjBRbEZWYzNOU01FWkNVbmw0U2xGVlJrcE1SV3hDVVZWcmMxTXdSa0pUZVhoUVVWVkdVa3hGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVHpJNVExRlZWWFpSZVhkM1VXdEdRazFGU1RkaU1FcENVWHBHUTB4RmJFSlJWV3R6VWpCR1FsSjVlRlpSVlVaV1RFVk9RbEZWVlhOVFZVWkNVMU40U0ZGVlJraE1SV1JDVVZWamMxSXdSa0pTZVhoUVVWVkdVRXhGVGtKUlZWVnpVMVZHUWxOVGVGWlJWVVpXVEVWT1FsRlZWWE5UVlVaQ1UxTjRTRkZWUmtoTVJUbENVVlU0YzFFd1JrSlNVM2hFVVZWR1JFOHlPVU5SVlZWNFVsTjNNbEZyUmtKT2EwazNZakJLUWxGNlpFTk1SVlpDVVZWVmMxRXdSa0pSZVhoRVVWVkdSa3hGVGtKUlZVMXpVMVZHUWxONWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBNMUZyUmtSWmFYaElVVlZHU0V4RlRrSlJWVTF6VVRCR1FsSlRlRXhSVlVaTVRFVnNRbEZWYTNOV1ZVWkNWbmw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZW5Nd1VXdEdSazVWU1hOTmEwcENVVlJLUTA5NlVrTlJWVTE2VVdsNFNGRlZSa2hNUldSQ1VWVmpjMU13UmtKVGVYaEVVVlZHUkV4RmRFSlJWWE56VVRCR1FsSlRlRWhSVlVaSVRFVk9RbEZWVlhOUk1FWkNVWHB6TUZGclJrUmxhMGx6VWxWR1FsSlRlRVJSVlVaRVRFVk9RbEZWVlhOU01FWkNVbmw0UkZGVlJrWk1SVTVDVVZWTmMxRXdSa0pTVTNoTVVWVkdURXhGT1VKUlZrVnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUVGRhTUU1Q1VsUldRMHhFV2tSUlZVVXlVWHAwYmxFd1JrUk9NRTF6VTFWR1FsTlRlRWhSVlVaSVRFWldRbEZXVlhOUk1FWkNVbE40U2xGVlJrcE1SV1JDVVZWamMxSXdSa0pTZVhoSVVWVkdTRXhGWkVKUlZXTnpVVEJHUWxKVGVFUlJWVVpFVEVWT1FsRlZWWE5STUVaQ1VsUjBkbEV3UmtSbGEwMXpWbFZHUWxaVGVFUlJWVVpHVEVWc1FsRlZhM05TTUVaQ1VubDRTRkZWUmtoTVJVNUNVVlZWYzFFd1JrSlJlWGhFVVZWR1JreEZUa0pSVlZWelVUQkdRbEY2ZEc1Uk1FWkVUREJKYzFKVlJrSlNVM2hFVVZWR1JFeEZUa0pSVlZWelUxVkdRbE41ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhwMGRsRXdSa1pYYVhoeVVUQkdRbUV3VFRkaU1FNUNVVEo0UkV4RlZrSlJWVlZ6VVRCR1FsRjVlRVJSVlVaR1RFVnNRbEZWYTNOVE1FWkNVM2w0U2xGVlJreE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRTh6WkVSUlZVNTVVV2w0U2xGVlJrcE1SV1JDVVZWamMxWlZSa0pXVTNoRVVWVkdSa3hGZEVKUlZYTnpVVEJHUWxKVGVFUlJWVVpFVHpOa1JGRlZWVEZSYVhjMFVUQkdRazlGVFRkaU1FNUNVWHBzUkV4RlRrSlJWVTAzWWpCT1FsRlZUWE5UVlVaQ1UxTjRSRkZWUmtSTVJWWkNVVlZWYzFFd1JrSlJlWGhFVVZWR1JreEdWa0pSVmxWelVUQkdRbEpUZUV4UlZVWk1URVZPUWxGVlZYTlRNRVpDVTNsNFNsRlZSa3hNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkU4elpFUlJWVTE2VVhsNFVGRlZSbEJNUldSQ1VWVmpjMUl3UmtKU2VYaEVVVlZHUmt4RlRrSlJWVTF6VVRCR1FsSlRlRVJSVlVaRVR6TmtSRkZWVG5WUmFYaFVVVlZHVkV4RlRrSlJWVTF6VkRCR1FsUjVlRVJSVlVaR1RFVmtRbEZWWTNOUk1FWkNVbE40UkZGVlJrUk1SVTVDVVZWVmMxRXdSa0pTVTNoRVVWVkdSRTh5T1VSUlZVMTJVV2w0UkZGVlJrUlBNamxFVVZWT1JVeEZkRUpSVlhOelVUQkdRbEY2ZEc1Uk1FWkVWVU40UkZGVlJrUlBlbEpEVVZWT1IweEZUa0pSVlUwM1pEQktRbEV3V1hOUk1FWkNVWHAwZGxGclJrUlNhWGhFVVZWR1JFOHlPVU5SVlZaRlRFUkNSRkZWUlhkUmVuUjJVV3RHUkUxVlRYTlNWVVpDVWxONFJGRlZSa1JNUlU1Q1VWVlZjMU5WUmtKVFUzaE1VVlZHVEV4RmJFSlJWWE56VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFRka01FcENVbGhLUTB4RVdrVlJWVVV5VWtSME0xRnJSa1JPTUZGelVsVkdRbEpUZUVSUlZVWkVURVZPUWxGVlZYTlRWVVpDVTFONFNsRlZSa3BNUlU1Q1VWVk5jMUV3UmtKUmVYaE9VVlZHVUV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVQzcFNRMUZWVGpSUmFYaFNVVlZHVWt4RlpFSlJWV056VTFWR1FsTlRlRVJSVlVaR1RFWkdRbEZXUlhOUk1FWkNVbE40UkZGVlJrUlBNMlJEVVZWTk0xRnBlRVJSVlVaRVR6TmtRMUZWUmtSTVJXeENVVlZyYzFFd1JrSlJlWGhFVVZWR1JFOTZVa05SVlU1UlRFVnNRbEZWYTNOUk1FWkNVWHAwYmxFd1JrUlRhWGhTVVZWR1VreEZaRUpSVldOelUxVkdRbE5UZUVSUlZVWkdURVpHUWxGV1JYTlJNRVpDVWxONFJGRlZSa1JQZWxKRFVWVk5NMUZwZUVSUlZVWkVUM3BTUTFGVlJrUk1SWFJDVVZWemMxRXdSa0pSZVhoRVVWVkdSa3hGVGtKUlZWVnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUVGRhTUU1Q1VUSlJjMVJWUmtKVVUzaEVVVlZHUkU4eU9VUlJWVTVQVEVWMFFsRlZjM05TVlVaQ1VsTjRhRkZWUm1oUE1qbEVVVlZPZDFGcGVFeFJWVVpNVEVWV1FsRlZWWE5UVlVaQ1UxTjRTRkZWUmtoTVJVNUNVVlZOYzFJd1JrSlNlWGg0VVd0R1FtTlZTWE5TTUVaQ1VubDRTbEZWUmtwTVJXUkNVVlZqYzFSVlJrSlVVM2hJVVZWR1NFeEZPVUpSVlRnM1lWVk9RbEV5Y0VaTVJVNUNVVlZOTjA1RlNrSlJNR2R6VVRCR1FsRjZkRE5SYTBaRVVtbDRSRkZWUmtSUE1qbERVVlZPUjB4RlRrSlJWVTAzV2pCS1FsRXdXWE5STUVaQ1VYcDBXbEZWVGtkTVJVNUNVVlZOTjFWVlJrUlNhWGhFVVZWR1JFOHhSa0pTVlZGelZGVkdRbFJUZUVSUlZVWkVURVZXUWxGVlZYTlRNRVpDVTNsNFJsRlZSa1pNUms1Q1VWWk5jMUpWUmtKU1UzaEtVVlZHU2t4RlZrSlJWVlZ6VlZWR1FsVlRlRVpSVlVaR1RFVk9RbEZWVFRkVFZVWkVUakJOYzFFd1JrSlJlblJLVVZWV1JVeEZNVUpSVlRCelVUQkdRbEY1ZUU1UlZVWk9URVZPUWxGVlZUZFZWVVpHV2tONGRGSkZSa0ppVlZFM1ZWVkdSR0pyVVhOVVZVWkNWRk40UmxGVlJrWk1SVTVDVVZWTk4xVlZSa1pXUTNjMFVUQkdRazlGVFRkVlZVWkVUMVZOYzFkVlJrSlhVM2hHVVZWR1JreEZWa0pSVlZVM1ZWVkdSR0ZGU1hOVFZVWkNVMU40UmxGVlJrWk1SVlpDVVZWVk4xVlZSa1pWYVhoYVVWVkdXa3hGVmtKUlZWVTNWMVZHUkZscGVFaFJWVVpJVEVWV1FsRlZWWE5WVlVaQ1ZWTjRSRkZWUmtSTVJXeENVVlZyTjFkVlJrUmlSVWx6VTFWR1FsTlRlRVpSVlVaR1RFVjBRbEZWY3pkWFZVWkVWME40VUZGVlJsQk1SVlpDVVZWVmMxa3dSa0paZVhoRVVWVkdSRXhGYkVKUlZXdHpVVEJHUWxKVGVGSlJWVVpTVEVWT1FsRlZUWE5WVlVaQ1ZWTjRSRkZWUmtaUE1XeENVVEp3UlV4Rk1VSlJWVEJ6VWxWR1FsSlRlRXBSVlVaS1R6RnNRbEV4YjNOV01FWkNWbmw0UmxGVlJrWk1SV3hDVVZWck4xZFZSa1JoYTBselV6QkdRbE41ZUVaUlZVWkdURVZzUWxGVmF6ZFhWVVpFVjBONFdGRlZSbGhNUlZaQ1VWVlZjMkV3VWtKUlYzUkZUekZzUWxKVE9VVlBlbk0zVDNwek4wOTZjemRQTWs1Q1ZsVlZOMWRWUmtaU2FYaFFVVlZHVUV4RlZrSlJWVlUzV2pCS1FsRXhTWE5TTUVaQ1VubDRSbEZWUmtaTVJrWkNVVlpGTjFvd1NrSlJNa2x6VTFWR1FsTlRlRVpSVlVaR1RFWnNRbEZXYXpkYU1FcENVVEo0UTB4RmJFSlJWV3R6VWxWR1FsSlRlRmhSVlVaWVR6SmtRMUZWVG5GUmFYaElVVlZHU0V4RlZrSlJWVlZ6VFd0S1FsRlVTa05QTW1SRFVWVk9iMUY1ZUVwUlZVWktURVZXUWxGVlZYTmlWVTVDVVZjeFJFOHlSa0pSTTNCRVR6RnNRbEpWVVhOVlZVWkNWVk40UmxGVlJrWlBNbVJEVVZWT1ZVeEZaRUpSVldOelVsVkdRbEpUZUZSUlZVWlVUekprUTFGVlRtdE1SV3hDVVZWcmMxSlZSa0pTVTNoU1VWVkdVazh5WkVOUlZVNXJURVZzUWxGVmEzTlNWVVpDVWxONFZsRlZSbFpQTWtaQ1VUSm9RMDh4YkVKU1ZWRnpXVEJHUWxsNWVFWlJWVVpHVHpKa1ExRlZUbTFNUldSQ1VWVmpjMUpWUmtKU1UzaG9VVlZHYUU4eVpFTlJWVTV6VVdsNFNsRlZSa3BNUlZaQ1VWVlZjMWt3UmtKWmVuUnVVV3RHUkdORlNYTlRWVVpDVTFONFJsRlZSa1pNUjA1Q1VWZE5OMWxWUmtSalJVazNWMVZHUmxKRGVISlJhMFpDWVRCSk4xZFZSa1JpUlVsellsVmFRbEZYTVVkUE1XeENVVEkxUjB4R1ZrSlJWbFZ6VWxWR1FsSlVkRzVSYTBaR1YwTjNlVkZyUmtKTmEwazNXakJLUWxGNlRrTk1Sa1pDVVZaRmMxSlZSa0pTVTNoT1VWVkdUazh5WkVOUlZWWnZVV2wzZDFFd1JrSk5SVTAzV2pCS1FsRjZSa1JNUm1SQ1VWWmpjMUpWUmtKU1UzaEtVVlZHU2s4eVpFTlJWVlp4VVdsNGVGRXdSa0pqVlUwM1dqQktRbEV6U2tSTVJtUkNVVlpqYzFKVlJrSlNVM2hLVVZWR1NreEZUa0pSVlUxelV6QkdRbE42ZEc1UmEwWkdaR3RKYzJJd1NrSlJWemxEVHpKa1ExRlZUbmRSYVhoV1VWVkdWa3hGVmtKUlZWVnpWRlZHUWxSVGVFUlJWVVpFVEVaR1FsRldSVGRaVlVaRVRUQkpOMWRWUmtaU1EzZHlVVEJHUWtzd1RUZFhWVVpFVERCTmMwOUZUa0pSVkdoRVR6RnNRbEY2YkVSTVJGSkVVVlZGTUZGNmRGcFJWVTB4VVhsNGNGRXdSa0poVlUwM1YxVkdSR0ZyVFhOV01FWkNWbmw0UmxGVlJrWlBNbVJEVVZWT1lVeEZaRUpSVldOelVsVkdRbEpUZUVwUlZVWktUekprUTFGVlRsVk1SVGxDVVZVNGMxSlZSa0pTVTNoS1VWVkdTazh5UmtKUk1razNWVEJHUkZKRWRGSlJWVlpGVEVoR1JWRlZSbmhTUkhSU1VWVk9lVkpEZHpSUk1FWkNUMFZOTjFWVlJrUlBWVTF6WVRCU1FsRlhkRVZQTVVaQ1VUSjRSVXhHVGtKUlZrMXpVbFZHUWxKVGVGWlJWVVpXVEVVeFFsRlZNSE5TVlVaQ1VsTjRVbEZWUmxKUE1XeENVVE5DUkV4Rk1VSlJWVEJ6VVRCR1FsRjVlRkpSVlVaU1R6SmtRMUZWVm10TVJGcERVVlZGTWxGcWRHNVJhMFpFVGpCSmMxWlZSa0pXVTNoRVVWVkdSa3hHVmtKUlZsVnpVVEJHUWxKVGVFNVJWVVpPVEVWV1FsRlZWWE5VVlVaQ1ZGTjRSRkZWUmtSTVJteENVVlpyYzFFd1JrSlNVM2hHVVZWR1JreEdSa0pSVmtWelVUQkdRbEpVZEc1UmEwWkdZV3RWYzJWVlNrSlJXR3hEVHpKa1ExRlZUalpSYVhoV1VWVkdWa3hGVGtKUlZWVnpWRlZHUWxSVGVFUlJWVVpFVEVac1FsRldhM05TVlVaQ1VsTjRUbEZWUms1TVJVNUNVVlZWYzFFd1JrSlJlblJTVVZWTk1WRjVlRVJSVlVaRVR6RkdRbEpWVVhOWlZVWkNXVk40UmxGVlJrWk1SRXBEVVZWRmVWRnBlRVJSVlVaR1RFWldRbEZXVlhOUk1FWkNVbFIwVWxGVlRqUlNRM2hvVVZWR2FFeEZWa0pSVlZWelRXdEtRbEZVU2tOTVJVNUNVVlZWYzFaVlJrSldVM2hFVVZWR1JrOHhSa0pTV0doRlRFZE9RbEZYVFRkVlZVWkVXa040U2xGVlJrcE1SVlpDVVZWVmMxWlZSa0pXVTNoSVVWVkdTRXhGVmtKUlZWVnpWREJHUWxSNmRGcFJWVlY2VVdsNGNsSkZSa0poTUZFM1YxVkdSR0pGVVhOU1ZVWkNVbE40UkZGVlJrUk1SVTVDVVZWVmMxUXdSa0pVZVhoSVVWVkdTRXhGZEVKUlZYTnpWVlZHUWxWNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBibEZyUmtSTU1FbHpWREJHUWxSNWVFaFJWVVpJVEVWa1FsRlZZM05STUVaQ1VYcDBibEZyUmtSYVEzaElVVlZHU0V4RlpFSlJWV056VlRCR1FsVjVlRVJSVlVaRVR6RnNRbEV5Y0VOTVJVNUNVVlZOTjFkVlJrWlNRM2h1VVRCR1Fsb3dUVGRYVlVaRVlVVk5jMVF3UmtKVWVYaElVVlZHU0V4Rk9VSlJWVGh6VTFWR1FsTlRlRVpSVlVaR1RFVk9RbEZWVFRkWFZVWkdaVVZKYzFOVlJrSlRVM2hVVVZWR1ZFOHhiRUpTVm05elN6QktRbEZUZEVOUE1XeENVWGs1UTB4R1JrSlJWa1UzVjFWR1JsVnBlSFJSYTBaQ1lsVkpOMWRWUmtSaWEwbHpZMVZLUWxGWVJrTk1SVlpDVVROS1EweEhWa0pSVjFVM1YxVkdSbHBwZUhCUmEwWkNZVlZKTjFkVlJrUmhhMGx6VjFWR1FsZFVkRnBSVlZaaFRFZDBRMUZWUm5KUmFuUmFVVlZPYzFGcGVGUlJWVVpVVHpGc1FsSldVWE5pVlZaQ1VWY3hSazh4YkVKUk1qVkdURVpPUWxGV1RUZFhWVVpHVmtONGJsSkZSa0phTUZFM1YxVkdSR0ZGVVhOV01FWkNWbnAwV2xGVlZsbE1SMlJEVVZWR2JsRnFkRnBSVlU1dlVXbDRSRkZWUmtSUE1XeENVbFZSYzAxclNrSlJWRXBEVHpGc1FsRjZUa05NUmtaQ1VWWkZOMWRWUmtaVmFYaHlVVEJHUW1Fd1RUZFhWVVpFWWtWTmMxRXdSa0pSZVhoSVVWVkdTRXhGTVVKUlZUQnpVVEJHUWxGNWVGUlJWVVpVVEVWT1FsRlZWWE5TVlVaQ1VsTjRSbEZWUmtaTVJUbENVVlU0YzFFd1JrSlNWSFJhVVZWV2RWRjVlSFpSYTBaQ1lqQkpOMWRWUmtSalJVbHpXbFZHUWxwVGVFaFJWVVpJVEVWT1FsRlZUWE5STUVaQ1VYbDRVRkZWUmxCTVJXeENVVlZyYzFFd1JrSlJlblJhVVZWV2IxRjVlRE5TYTBaQ1pEQlpOMWRWUmtSbFJWbHpZVEJLUWxGWGRFTk1SV1JDVVZWamMxRXdSa0pSZVhoRVVWVkdSRXhGT1VKUlZUZzNXakJLUWxGNlpFTk1SVTVDVVZWVmMxcFZSa0phVTNoRVVWVkdSRXhHUmtKUlZrVnpVMVZHUWxOVGVHeFJWVVpzVEVWT1FsRlZUWE5VVlVaQ1ZGTjRSRkZWUmtaUE1tUkRVVlZPZVZKRGVFNVJWVVpPVEVWT1FsRlZWWE5hVlVaQ1dsTjRSRkZWUmtaUE1tUkRVVlZPTmxGcGVFNVJWVVpPVEVWT1FsRlZUWE5UTUVaQ1UzcDBXbEZWVm10TVJteENVVlpyTjFkVlJrUlhhWGhTVVZWR1VreEZaRUpSVldOelZGVkdRbFJUZUVSUlZVWkVURVpHUWxGV1JYTlNWVVpDVWxONFJsRlZUVEZSYVhodVVXdEdRbG93U1hOU01FWkNVbmw0VGxGVlJrNU1SVTVDVVZWTmMxVXdSa0pWZVhoRVVWVkdSa3hIUmtKUlYwVnpVVEJHUWxKVWRGcFJWVlozVWtOM01sRnJSa0pPYTBrM1YxVkdSRTR3U1hOV1ZVWkNWbE40U0ZGVlJraE1SVTVDVVZWTmMxRXdSa0pSZVhoV1VWVkdWa3hGYkVKUlZXdHpVbFZHUWxKVWRGcFJWVlYyVVdsNGVsRXdSa0pqTUUwM1YxVkdSR1JGVFhOWk1FWkNXWGw0U0ZGVlJraE1SVlpDVVZWVmMxSlZSa1JpYTBsellsVktRbEZYTVVOTVJXUkNVVlZqYzFKVlJrSlNWSFJhVVZWV05GRnBlRE5SYTBaQ1pEQkpOMWRWUmtSbFJVbHpWVlZHUWxWVGVFaFJWVVpJVEVaV1FsRldWVGRYVlVaR1kydEpjMVl3UmtKV2VuUmFVVlZPV1V4RmRFSlJWWE56VWpCR1FsSjZkRzVSYTBaRVZVTjRWbEZWUmxaTVJWWkNVVlZWYzFFd1JrSlJlblJ1VVd0R1JsbHBlSGhSTUVaQ1kxVk5OMW93U2tKUk0wcEVURWRzUTFGVlJuQlJhWGhHVVZWR1JreEdWa0pSVmxWelVqQkdRbEo2ZEhaUmEwWkVUREJKYzFOVlJrSlRVM2hNVVZWR1RFeEZUa0pSVlUwM1lqQktRbEV4V1hOU1ZVWkNVbE40UkZGVlJrUk1SVTVDVVZWVmMxVXdSa0pXVTNoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRETlJhMFpFWVd0SmMxSlZSa0pTVTNoRVVWVkdSRXhGVGtKUlZWVnpVVEJHUWxGNWVHeFJWVVp1VVdsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuTXdVV3RHUkdWRlNYTmFWVVpDV2xONFNGRlZSa2hNUlZaQ1VWVlZjMUV3UmtKUmVuTXdVV3RHUkdOclNYTlVNRVpDVlZONFJGRlZSa1pNUlhSQ1VWVnpjMUl3UmtKU2VYaFNVVlZHVWt4RlRrSlJWVTF6VTFWR1FsTlRlRVJSVlVaR1RFaEdRMUZWUm5oUmFYaEVVVlZHUmt4RlRrSlJWVlZ6VWxWR1FsSjVlRVJSVlVaRVR6SmtSRkZWVFROU1EzaHNVVlZHYkV4RlRrSlJWVlZ6VXpCR1FsTjVlRVJSVlVaR1RFVk9RbEZWVFhOUk1FWkNVbE40UkZGVlJrUk1SbVJDVVZaamMxSlZSa0pTVTNoRVVWVkdSa3hGWkVKUlZXTnpVekJHUWxONWVFUlJWVVpHVEVWT1FsRlZUWE5STUVaQ1VsTjRSRkZWUmtSUGVsSkRVVlZOZUZKRGVFUlJWVVpFVHpOa1ExRlZUa2RNUlU1Q1VWVk5OMlF3U2tKUk1GRnpVekJHUWxONWVFaFJWVVpJVEVkV1FsRlhWWE5STUVaQ1VsTjRTRkZWUmtoTVJVNUNVVlZOYzFZd1JrSldlWGhHVVZWR1JreEZUa0pSVlZWelVUQkdRbEY2ZEhaUmEwWkVUMVZOYzFFd1JrSlJlblIyVVd0R1JGSkRlRTVSVlVaT1RFVk9RbEZWVFhOVE1FWkNVM2w0U2xGVlJrcE1SV3hDVVZWcmMxSXdSa0pTZVhoS1VWVkdTa3hGWkVKUlZXTnpVekJHUWxONWVFUlJWVVpFVHpKa1ExRlZUbmxSZVhoRVVWVkdSRTh5WkVOUlZWWkZURWRHUWxGWFJUZGFNRXBDVVRKSmMyTlZTa0pSV0VaRFRFVldRbEZWVlRkaU1FcENVVE5TUTB4Rk1VSlJWVEJ6VVRCR1FsRjVlRlJSVlVaVVRFVmtRbEZWWTNOalZVcENVVmhHUTB4RlpFSlJWV056VTFWR1FsTlRlRVJSVlVaRVR6SmtRMUZWVG5GU1EzaEVVVlZHUkU4eVpFTlJWVlpGVEVjNVExRlZSblpSYW5SdVVXdEdSR05GU1hOYU1FcENVVmRrUTB4RlZrSlJWVlZ6VmxWR1FsWlRlRXBSVlVaS1RFVldRbEZWVlhOVE1FWkNVM3AwZGxGclJrUmtSVTF6VWxWR1FsSlRlRVJSVlVaRVRFVk9RbEZWVlhOVk1FWkNWWGw0U2xGVlJrcE1SV3hDVVZWemMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMDNaREJLUWxFemNFTk1SV3hDVVZWcmMxSXdSa0pTZVhoMFVXdEdRbUpWU1hOUk1FWkNVbE40U2xGVlJrcE1SVTVDVVZWTmMxWXdSa0pXZVhoR1VWVkdSa3hGVGtKUlZWVTNUa1ZLUWxGNU9VUk1SekZEVVZWR2RGRnBlRVJSVlVaR1RFVnNRbEZWYTNOUk1FWkNVWGw0V0ZGVlJsaE1SVlpDVVZWVmMxRXdSa0pTVTNoS1VWVkdTa3hGYkVKUlZXdHpVVEJHUWxGNmRETlJhMFpFWW10UmMxa3dSa0paZVhoRVVWVkdSa3hGYkVKUlZXdHpVVEJHUWxKVGVFaFJWVVpJVEVWMFFsRlZjM05STUVaQ1VYcDBkbEZyUmtSaFJVMXpVVEJHUWxGNmRIWlJhMFpFVWtONFRsRlZSazVNUlU1Q1VWVk5jMU5WUmtKVFUzaEVVVlZHUkU4eVpFTlJWVTVwVEVWT1FsRlZUVGRhTUVwQ1VsVlJjMlZWVGtKUldHeEVUekprUTFGVlRqWlJlWGh1VVd0R1Fsb3dTWE5TVlVaQ1VsTjRWbEZWUmxaTVJXeENVVlZyTjJJd1NrSlJlVGxEVEVWV1FsRlZWWE5STUVaQ1VYbDRSRkZWUmtaTVJrNUNVVlpOYzFOVlJrSlRVM2hLVVZWR1RFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVUek5rUTFGVlRqWlJhWGhFVVZWR1JFeEZUa0pSVlUxelZWVkdRbFZUZUVoUlZVWklURVZzUWxGVmEzTlJNRVpDVVhwMGRsRnJSa1JpYTBselVUQkdRbEY2ZEhaUmEwWkVVa040VGxGVlJrNU1SVTVDVVZWTmMxTlZSa0pUVTNoRVVWVkdSRTh5WkVOUlZVNXBURVZPUWxGVlRUZGFNRXBDVWxWUmMwNXJTa0pSVkZwRFR6SmtRMUZWVFROUmFYaFdVVlZHVmt4RlZrSlJWVlZ6VmxWR1FsWlRlRWhSVlVaSVR6STVRMUZWVGpSUmFYaEtVVlZHU2t4RmJFSlJWV3R6VVRCR1FsRjZkSFpSYTBaRVZrTjRSbEZWUmtaTVJVNUNVVlZOYzFFd1JrSlNVM2hJVVZWR1NreEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVUek5rUTFGVlRsbE1SVlpDVVZWVmMxRXdSa0pSZVhoRVVWVkdSa3hHVGtKUlZsVnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUVGRPUlVwQ1VsZHdRMHhIT1VSUlZVWjJVWHB6TUZGclJrUmpSVTF6VXpCR1FsTjVlRVJSVlVaRVRFVXhRbEZWTUhOUk1FWkNVbE40U0ZGVlJraE1SVTVDVVZWVmMxTXdSa0pUZVhoRVVWVkdSRXhGTVVKUlZUQnpVVEJHUWxKVGVFUlJWVVpHVEVWT1FsRlZUVGRrTUVwQ1VUTktSRXhGVGtKUlZVMDNaREJLUWxGVlRYTlRWVVpDVTFONFJGRlZSa1JNUlU1Q1VWVk5OMDVGU2tKU1ZrRnpUMFZTUWxGVWFFVlBlbEpEVVZWTk5WSkRlRWhSVlVaSVRFVk9RbEZWVFhOUk1FWkNVbE40U2xGVlJrcE1SV3hDVVZWcmMxSXdSa0pUVTNoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRHNVJNRVpFWTBWSmMxWlZSa0pXVTNoRVVWVkdSa3hGYkVKUlZXdHpVVEJHUWxKVGVFaFJWVVpJVEVWT1FsRlZWWE5XVlVaQ1ZsTjRSRkZWUmtaTVJXeENVVlZyYzFFd1JrSlNVM2hHVVZWR1JreEZaRUpSVldOelVUQkdRbEpUZUVwUlZVWktURVZPUWxGVlZYTlJNRVpDVWxONFJGRlZSa1JQZWxKRFVWVk5lRkpEZUVSUlZVWkVUek5rUTFGVlRrZE1SVTVDVVZWTk4ySXdTa0pSTUZselVUQkdRbEY2ZEhaUmEwWkVVa040VGxGVlJrNU1SVTVDVVZWTmMxTlZSa0pUVTNoRVVWVkdSRTh5WkVOUlZVNXBURVZPUWxGVlRUZGFNRXBDVWxWUmMyTlZTa0pSV0VaRFR6SmtRMUZWVG5sUmFYaE1VVlZHVEV4RlZrSlJWVlZ6VmxWR1FsWlRlRlpSVlVaV1R6STVRMUZWVFhoUmFYaEtVVlZHU2t4R1RrSlJWazF6VWpCR1FsSjVlRlpSVlVaV1RFVnNRbEZWYTNOVlZVWkNWVk40UkZGVlJrUlBNamxEVVZWT01sRjVlRVpSVlVaR1RFVk9RbEZWVFhOUk1FWkNVbE40VkZGVlJsWk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRTh6WkVOUlZVNXhVV2w0VkZGVlJsUk1SVTVDVVZWTmMxTXdSa0pUZVhoRVVWVkdSa3hHVGtKUlZrMXpVVEJHUWxKVGVFUlJWVVpFVHpJNVExRlZUVFZSYVhoRVVWVkdSRTh5T1VOUlZVNUZURVZzUWxGVmEzTlJNRVpDVWxONFJGRlZSa1JNUlZaQ1VWVlZjMVV3UmtKVmVYaEVVVlZHUmt4RlRrSlJWVTAzWWpCS1FsRXpTa05NUlRGQ1VWVXdjMUV3UmtKUmVYaEtVVlZHU2t4RlRrSlJWVTAzV2pCS1FsRXlTWE5STUVaQ1VYcDBhRkZWVGtWTVJVNUNVVlZOTjFkVlJrWlRRM2gwVVd0R1FtSlZTVGRYVlVaRVltdEpjMVZWUmtKVlUzaEVVVlZHUkV4Rk9VSlJWVGh6VVRCR1FsSlRlRXhSVlVaTVRFVk9RbEZWVlhOUk1FWkNVWHAwV2xGVlZYaFJhWGN3VWtWR1FrNUZVVGRYVlVaRVRsVlJjMkpWV2tKUlZ6RkhUekZzUWxFeU5VZE1SRnBFVVZWRk1sRjZkRnBSVlUwelVYbDRSRkZWUmtSTVJVNUNVVlZOYzFJd1JrSlNlWGhJVVZWR1NFeEZUa0pSVlZWelVUQkdRbEpUZUVoUlZVWklURVZzUWxGVmEzTlJNRVpDVVhsNFJGRlZSa1JNUldSQ1VWVmpjMU5WUmtKVFUzaFNVVlZHVWt4RlRrSlJWVTF6VTFWR1FsTlRlRVJSVlVaR1RFVmtRbEZWWTNOU1ZVWkNVbE40UkZGVlJrWlBNbXhEVVZWT2IxSkRlRkJSVlVaUVRFVk9RbEZWVlhOVk1FWkNWWGw0UmxGVlJrWk1Sa1pDVVZaRmMxRXdSa0pSZVhoU1VWVkdVa3hGWkVKUlZXTnpVMVZHUWxOVGVFUlJWVVpHVEVWT1FsRlZUVGRYVlVaR1lXdFJjMkpWVWtKUlZ6RkZUekZzUWxFeU5VVk1SVTVDVVZWTmMxRXdSa0pSZVhoS1VWVkdTa3hGWkVKUlZXTnpWREJHUWxSNWVFUlJWVVpFVEVVeFFsRlZNSE5UVlVaQ1UxTjRVRkZWUmxCTVJVNUNVVlZOYzFOVlJrSlRVM2hLVVZWR1NreEZUa0pSVlUxelVUQkdRbEY1ZUU1UlZVWk9URVZzUWxGVmEzTlJNRVpDVVhsNFJGRlZSa1JNUld4Q1VWVnJjMUV3UmtKUmVuUmFVVlZWTlZKRGVEVlJhMFpDWlZWSk4xZFZSa1JsYTBselVUQkdRbEY1ZUVSUlZVWkVURVpPUWxGV1RYTlNNRVpDVW5sNFJGRlZSa1pNUlU1Q1VWVk5jMUV3UmtKUmVYaFNVVlZHVWt4RmJFSlJWV3R6VWpCR1FsSjVlRVJSVlVaR1RFVk9RbEZWVFhOV01FWkNWbmw0UmxGVlJrWk1SVTVDVVZWTmMxTXdSa0pUZVhoRVVWVkdSa3hIUmtKUlYwVnpVVEJHUWxKVGVFcFJWVVpLVEVWT1FsRlZWWE5TVlVaQ1VsTjRSRkZWUmtaTVJVNUNVVlZOTjFkVlJrWmlhMWx6WkZWYVFsRllWa2RQTVd4Q1VUTmFSMHhGVmtKUlZWVnpVVEJHUWxGNWVFUlJWVVpHVEVWT1FsRlZUWE5STUVaQ1VYbDRXRkZWUmxoTVJXeENVVlZyYzFOVlJrSlRlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEc1UmEwWkVUakJKYzFVd1JrSlZlWGhJVVZWR1NFeEdSa0pSVmtWelVUQkdRbEY1ZUdoUlZVWm9URVZPUWxGVlZYTlNNRVpDVW5sNFJGRlZSa1pNUlU1Q1VWVk5OMW93U2tKU1ZFWkVURWhHUkZGVlJuaFJlblJ1VVd0R1JHTnJUWE5OUlZaQ1VWUkNSazh5WkVOUlZVMTRVbE4zY2xGclJrSkxNRWszV2pCS1FsRjVPVU5NUld4Q1VWVnJjMUV3UmtKUmVuUjJVV3RHUkZOcGVGUlJWVVpVVEVWT1FsRlZUWE5UVlVaQ1UxTjRTRkZWUmtoTVJVNUNVVlZOYzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUwM1lqQktRbEpZV2tOTVJGSkRVVlZGTUZGcWRIWlJhMFpFVGxWSmMySXdWa0pSVnpsR1R6STVRMUZWVG5kU1UzaFVVVlZHVkV4RlRrSlJWVTF6VTFWR1FsTlRlRWhSVlVaSVRFWk9RbEZXVFhOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTk4ySXdTa0pSTW1oRVRFVk9RbEZWVFhOUk1FWkNVWGw0V0ZGVlJsaE1SV1JDVVZWamMxZFZSa0pYVTNoRVVWVkdSRXhHUmtKUlZrVnpVakJHUWxKNWVFcFJWVVpLVEVWa1FsRlZZM05YVlVaQ1YxTjRSRkZWUmtSTVJXeENVVlZyTjJRd1NrSlJlVGxGVEVaT1FsRldUWE5STUVaQ1VYbDRVbEZWUmxKTVJXUkNVVlZqYzFOVlJrSlRVM2hJVVZWR1NFeEdUa0pSVmsxelVUQkdRbEY1ZUVwUlZVWktURVZPUWxGVlRUZGFNRXBDVVhwa1JFeEZUa0pSVlUwM1dqQktRbEZWVFhOVE1FWkNVM2w0UkZGVlJrUk1SVTVDVVZWVmMxRXdSa0pTVTNoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRIWlJhMFpHV2tONGNsSlZSa0poTUZVM1lqQktRbEV5ZUVaTVNGWkZVVlZHTVZKRWRIWlJhMFpFWkd0UmMxRXdSa0pSZVhoRVVWVkdSRXhHWkVKUlZtTnpVakJHUWxKNWVFcFJWVVpLVEVWT1FsRlZUVGRhTUVwQ1VUTlNRMHhGVGtKUlZVMDNWMVZHUkZKcGVFUlJWVVpFVHpGc1FsSlZVWE5rVlU1Q1VWaFdSRTh4YkVKUk0xcEVURVZXUWxGVlZYTlJNRVpDVVhsNFJGRlZSa1pNUlU1Q1VWVk5jMUV3UmtKUmVYaEtVVlZHU2t4RmJFSlJWV3R6VVRCR1FsRjVlRVJSVlVaRVRFWmtRbEZXWTNOVFZVWkNVMU40VUZGVlJsQk1SVTVDVVZWTmMxRXdSa0pSZVhoS1VWVkdTa3hGZEVKUlZYTnpWVlZHUWxWNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBibEZyUmtST01GRnpVVEJHUWxGNWVFUlJWVVpFVEVWc1FsRlZhM05TTUVaQ1VubDRUbEZWUms1TVJVNUNVVlZOYzFNd1JrSlRlWGhFVVZWR1JreEZUa0pSVlUxelVUQkdRbEY1ZUVwUlZVWktURVZXUWxGVlZYTlJNRVpDVVhsNFJGRlZSa1JNUm1SQ1VWWmpjMUV3UmtKU1UzaEVVVlZHUkU4eGJFSlJNbWhGVEVWT1FsRlZUVGRYVlVaR1VrTjRkRkZyUmtKaVZVazNWMVZHUkdKclNYTk9hMHBDVVZSYVEweEZUa0pSVlZWelZsVkdRbFpUZUVaUlZVWkdURVZPUWxGVlRYTlNWVVpDVWxONFVGRlZSbEJNUlZaQ1VWVlZjMU13UmtKVGVYaEVVVlZHUmt4RlRrSlJWVTAzVjFWR1Jrd3dVWE5rTUZKQ1VWaGtSVTh4YkVKUk0yaEZURVZXUWxGVlZYTlJNRVpDVVhsNFJGRlZSa1pNUms1Q1VWWlZjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTAzV2pCS1FsRXljRU5NUlRGQ1VWVXdjMUV3UmtKUmVYaE1VVlZHVEV4RlRrSlJWVTAzVjFWR1JGcERlRVJSVlVaRVR6RnNRbEpWVVhOaE1GSkNVVmQwUlU4eGJFSlJNbmhGVEVjeFIxRlZSblJTYW5SYVVWVk9kVkpwZUZoUlZVWllURVZrUWxGVlkzTlVWVVpDVkZONFJGRlZSa1JNUlhSQ1VWVnpjMU5WUmtKVFUzaEVVVlZHUkV4RlRrSlJWVTF6VkZWR1FsUlRlRVJSVlVaRVR6RnNRbEpZV2tSTVIzUkVVVlZHY2xGNmRGcFJWVTV6VVhsNFJsRlZSa1pNUlU1Q1VWVk5jMUV3UmtKU1UzaFlVVlZHV0V4RmJFSlJWV3R6VkZWR1FsUlRlRVJSVlVaRVRFVXhRbEZWTUhOU1ZVWkNVbE40VEZGVlJreE1SVTVDVVZWVmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMDNXakJLUWxGNlZrUk1SVEZDVVZVd2MxRXdSa0pSZVhoTVVWVkdURXhGVGtKUlZVMXpWREJHUWxSNWVFUlJWVVpHVEVaa1FsRldZM05STUVaQ1VsTjRSRkZWUmtSUE1XeENVVE5LUkV4RlRrSlJWVTAzVjFWR1JsSkRlSGhSYTBaQ1kxVkpOMWRWUmtSamEwbHpVVEJHUWxGNWVFUlJWVVpFVEVWc1FsRlZhM05TTUVaQ1VubDRSRkZWUmtSTVJVNUNVVlZOYzFOVlJrSlRVM2hFVVZWR1JFeEdaRUpSVm1OelVsVkdRbEpUZUVSUlZVWkVUekZzUWxKVWJFTk1SekZFVVZWR2RGRjZkRnBSVlU1MVVYbDRSRkZWUmtSTVJVNUNVVlZOYzFaVlJrSldVM2hJVVZWR1NFeEZUa0pSVlUxelZsVkdRbFpUZUVSUlZVWkVURVZzUWxGVmEzTlJNRVpDVWxONFJGRlZSa1JNUlU1Q1VWVk5jMU5WUmtKVFUzaEVVVlZHUmt4RlRrSlJWVTAzVjFWR1JrMVZUWE5MTUZKQ1VWTjBSVTh4YkVKUmVUbEZURWhXUkZGVlJqRlJlblJhVVZWT01sRjVkM2xSTUVaQ1RXdE5OMWRWUmtSTk1FMXpWVlZHUWxWVGVFaFJWVVpJVEVWT1FsRlZUWE5STUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZOYzFRd1JrSlVlWGhFVVZWR1JreEZkRUpSVlhOelVsVkdRbEpUZUVaUlZVWkdURVZPUWxGVlZYTlJNRVpDVVhwMFdsRlZWakJSZVhoNFVrVkdRbU5WVVRkWFZVWkVZMnRSYzFKVlJrSlNVM2hFVVZWR1JFeEZUa0pSVlZWelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTldWVVpDVm5sNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUnVVV3RHUm1OclNYTk5SVTVDVVZSQ1JFOHlaRU5SVlUxNFVYbDRVbEZWUmxKTVJXUkNVVlZqYzFFd1JrSlJlWGhFVVZWR1JFeEZaRUpSVldOelVUQkdRbEY1ZUV4UlZVWk1URVZPUWxGVlZYTlZWVVpDVlZONFJGRlZSa1JNUlRGQ1VWVXdjMUV3UmtKU1UzaEVVVlZHUkU4eVpFTlJWVlY0VVhsM2VWRXdSa0pOYTAwM1dqQktRbEY2VGtSTVJWWkNVVlZWYzFFd1JrSlJlWGhFVVZWR1JreEZUa0pSVlUxelVUQkdRbEY1ZUVwUlZVWk1URVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JQTWpsRFVWVk9hMHhHUmtKUlZrVnpVMVZHUWxOVGVFUlJWVVpHVEVVeFFsRlZNSE5STUVaQ1VYbDRTbEZWUmtwTVJVNUNVVlZWYzFWVlJrSlZVM2hFVVZWR1JreEZaRUpSVldOelVqQkdRbEo1ZUVoUlZVWklURVZrUWxGVlkzTlJNRVpDVWxONFNGRlZSa2hNUlU1Q1VWVk5jMUV3UmtKUmVYaEtVVlZHU2t4RlRrSlJWVTAzWWpCS1FsSlVaRVZNUjJSR1VWVkdibEpVZEhaUmEwWkVZVVZWYzFRd1JrSlVlWGhFVVZWR1JFeEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkVUekprUTFGVlRtMU1SVTVDVVZWTk4xb3dTa0pTVlZGelRXdE9RbEZVU2tSUE1tUkRVVlZOZWxGNWVFWlJWVVpHVEVWT1FsRlZUWE5STUVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZOYzFNd1JrSlRlWGhNVVZWR1RFeEZkRUpSVlRCelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRUZGlNRXBDVVROd1EweEdSa0pSVmtWelVqQkdRbEo1ZUZKUlZVWlNURVZPUWxGVlRYTlVNRVpDVkhsNFJGRlZSa1pNUmxaQ1VWWlZjMUpWUmtKU1UzaEtVVlZHU2t4RlRrSlJWVlZ6VVRCR1FsRjZkSFpSYTBaRVlVVlJjMVZWUmtKVlUzaElVVlZHU0V4RlRrSlJWVlZ6VkZWR1FsUlRlRVJSVlVaRVRFVnNRbEZWYTNOUk1FWkNVbE40VWxGVlJsSk1SVTVDVVZWVmMxSXdSa0pTZVhoSVVWVkdTRXhGWkVKUlZXTnpVakJHUWxKNWVFUlJWVVpHVEVWa1FsRlZZM05UVlVaQ1UxTjRTRkZWUmtoTVJVNUNVVlZWYzFNd1JrSlRlWGhHVVZWR1JreEZUa0pSVlZWelVqQkdRbEo1ZUZKUlZVWlNURVZPUWxGVlRUZGFNRXBDVVROQ1IweEZUa0pSVlUwM1dqQktRbEpWVVhOak1GWkNVVmhPUms4eVpFTlJWVTR3VWxONFJGRlZSa1JNUlU1Q1VWVk5jMUl3UmtKU2VYaElVVlZHU0V4R1JrSlJWa1Z6VWpCR1FsSjVlRkpSVlVaU1RFVk9RbEZWVFRkYU1FcENVbFJrUTB4SVJrWlJWVVo0VWxSMFdsRlZUbmxTVTNoRVVWVkdSRTh4YkVKUlZVMXpVMVZHUWxOVGVFUlJWVVpFVEVWV1FsRlZWWE5STUVaQ1VYbDRSRkZWUmtaTVJVNUNVVlZOYzFFd1JrSlJlWGhLVVZWR1NreEZiRUpSVld0elVUQkdRbEY1ZUVSUlZVWkVURVprUWxGV1l6ZGFNRXBDVVRKNFJFeEZUa0pSVlZWelVUQkdRbEY1ZUVSUlZVWkVURVprUWxGV1kzTlRWVVpDVTFONFJsRlZSa1pNUlU1Q1VWVlZjMUV3UmtKUmVYaFFVVlZHVUV4RlRrSlJWVlZ6WWxWT1FsRlhNVVJNUlU1Q1VWVlZjMU13UmtKVGVYaEVVVlZHUmt4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVR6SmtRMUZWVG05U2FYaEVVVlZHUkV4RlRrSlJWVTF6VTFWR1FsTlRlRWhSVlVaSVRFVk9RbEZWVFhOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTmMxUXdSa0pVZVhoRVVWVkdSa3hGWkVKUlZXTnpVbFZHUWxKVGVFaFJWVVpJVEVWT1FsRlZWWE5STUVaQ1VYcDBXbEZWVG5sUmVYaEVVVlZHUkU4eGJFSlNWVkZ6V2pCYVFsRlhaRWRQTVd4Q1VUSm9SMHhGVmtKUlZWVnpVVEJHUWxGNWVFUlJWVVpHVEVWT1FsRlZUWE5STUVaQ1VYbDRWbEZWUmxoTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFOHlaRU5SVlU1M1VXbDRSbEZWUmtaTVJVNUNVVlZOYzFFd1JrSlNVM2hPVVZWR1RreEZUa0pSVlUxelYxVkdRbGRUZUVSUlZVWkdURVpHUWxGV1JYTlJNRVpDVW5sNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUjJVV3RHUkdSclRYTlRNRVpDVTNsNFJGRlZSa1JNUjJSRFVWVkdibEZwZUVSUlZVWkdURWN4UTFGVlJuUlJhWGhHVVZWR1JreEZNVUpSVlRCelVUQkdRbEY1ZUZwUlZVWmFURVZPUWxGVlZYTlZWVVpDVlZONFJGRlZSa1pNUlU1Q1VWVlZjMUV3UmtKUmVuUnVVV3RHUkdGRldYTlJNRVpDVVhwMGJsRnJSa1JTUTNoR1VWVkdSa3hGVGtKUlZVMXpVVEJHUWxKVGVFNVJWVVpPVEVWT1FsRlZUWE5UVlVaQ1UxTjRSRkZWUmtaTVJrWkNVVlpGYzFFd1JrSlNlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEhaUmEwWkVUREJKYzFNd1JrSlRlWGhFVVZWR1JFeEhaRU5SVlVadVVXbDRSRkZWUmtaTVIxWkNVVmRWYzFKVlJrSlNVM2hPVVZWR1RreEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkdURVpHUWxGV1JYTlJNRVpDVWxONFJGRlZSa1pNUlU1Q1VWVk5OMW93U2tKUk0wSkdURVZPUWxGVlRUZFhWVVpFVW1sNFJGRlZSa1JQTVd4Q1VsVlJjMW93VWtKUlYyUkZUekZzUWxFeWFFVk1SVlpDVVZWVmMxRXdSa0pSZVhoRVVWVkdSa3hGVGtKUlZVMXpVVEJHUWxGNWVFcFJWVVpLVEVWc1FsRlZhM05STUVaQ1VYbDRSRkZWUmtSTVJsWkNVVlpWYzFOVlJrSlRVM2hFVVZWR1JFeEZUa0pSVlUxelZqQkdRbFo1ZUV4UlZVWk1URVYwUWxGVmMzTlRWVVpDVTFONFVGRlZSbEJNUlU1Q1VWVk5jMVl3UmtKWFUzaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjZkRzVSYTBaRVlVVlpjMU13UmtKVGVYaEVVVlZHUkV4SFpFTlJWVVp1VVdsNFJGRlZSa1pNUjA1Q1VWZE5jMUpWUmtKU1UzaEVVVlZHUkV4RlRrSlJWVTF6VmpCR1FsWjVlRVJSVlVaR1RFVk9RbEZWVFRkWFZVWkVaV3RSYzFFd1JrSlJlblJhVVZWV1JVeEhNVVpSVlVaMFVsUjBXbEZWVG5WU1UzaE1VVlZHVEV4RlRrSlJWVTF6V2pCS1FsRlhaRU5NUlU1Q1VUTktRMHhHUmtKUlZrVnpVbFZHUkZWcGVFUlJWVVpFVEVWT1FsRlZUWE5WTUVaQ1ZYbDRSRkZWUmtaTVJVNUNVVlZOYzFFd1JrSlNVM2hLVVZWR1NreEZUa0pSVlUxelVUQkdRbEY1ZUZCUlZVWlFURVZPUWxGVlZYTlJNRVpDVVhsNFJGRlZSa1JNUms1Q1VWWk5jMUV3UmtKU1UzaEVVVlZHUkV4RlRrSlJWVlZ6VVRCR1FsSlVkRzVSYTBaRVlVVlJjMUV3UmtKUmVYaEVVVlZHUkV4Rk9VSlJWVGh6VVRCR1FsSlRlRVJSVlVaRVRFVk9RbEZWVFhOVk1FWkNWWGw0UkZGVlJrWk1SVTVDVVZWTmMxRXdSa0pTVTNoRVVWVkdSazh5T1VOUlZVMHhVV2w0UkZGVlJrWk1SVTVDVVZWTmMxRXdSa0pSZVhoVVVWVkdWRXhGVGtKUlZWVnpVVEJHUWxGNWVFUlJWVVpHVEVWMFFsRlZjM05TTUVaQ1VubDRTRkZWUmtoTVJXeENVVlZyYzFJd1JrSlNlWGhTVVZWR1VreEZaRUpSVldOelZsVkdRbFpUZUVoUlZVWklURVZXUWxGVlZYTlJNRVpDVWxSMGJsRnJSa1JoYTFWelVUQkdRbEY1ZUVSUlZVWkVURVU1UWxGVk9ITlJNRVpDVWxONFNGRlZSa2hNUlU1Q1VWVlZjMUV3UmtSaGEwbHpVVEJHUWxGNmRGcFJWVlpIVEVSS1ExRlZSWGxSYW5SYVVWVk5lbEZwZUVoUlZVWklURVZPUWxGVlRYTlJNRVpDVWxONFJGRlZSa1JNUld4Q1VWVnJjMUV3UmtKUmVYaEVVVlZHUkV4Rk9VSlJWa1Z6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFRkYU1FcENVVE5hUTB4RmRFSlJWWE56VVRCR1FsRjVlRzVSYTBaQ1dqQkpjMUV3UmtKU1UzaEVVVlZHUkV4RlZrSlJWVlZ6VVRCR1FsRjVlRVJSVlVaRVRFVTVRbEZWT0hOUk1FWkNVbE40UkZGVlJrUk1SVTVDVVZWVmMxRXdSa0pTVTNoRVVWVkdSRTh4YkVKUmVtUkVURVZPUWxGVlRUZFhWVVpHVWtONGNGSkZSa0poVlZFM1YxVkdSR0ZyVVhOU1ZVWkNVbE40UkZGVlJrUk1SVTVDVVZWVmMxRXdSa0pSZVhoRVVWVkdSRXhHVmtKUlZsVTNXakJLUWxFeWFFTk1SVTVDVVZWVmMxRXdSa0pSZVhoRVVWVkdSRXhHVmtKUlZsVnpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZWWE5hVlVaQ1dsTjRSbEZWUmtaTVJYUkNVVlZ6YzFKVlJrSlNVM2hFVVZWR1JFeEZUa0pSVlZWelV6QkdRbE41ZUV4UlZVWk1URVZzUWxGVmEzTlZNRVpDVlhsNFJGRlZSa2hNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkU4eVpFTlJWVlV6VWxONE1WRXdSa0prVlUwM1dqQktRbEV6V2tSTVJURkNVVlV3YzFFd1JrSlJlWGhNVVZWR1RFeEZUa0pSVlUxelV6QkdRbE41ZUVaUlZVWkdURVZPUWxGVlRUZFhWVVpFWkVWSmMxRXdSa0pSZW5SYVVWVldSVXhJVmtSUlZVWXhVWHAwV2xGVlRqSlJlWGhTVVZWR1VreEZaRUpSVldOelZEQkdRbFI1ZUVSUlZVWkVUekZzUWxKWE5VTk1SMnhFVVZWR2NGRjZkRnBSVlU1eFVYbDRibEZyUmtKYU1FbHpVVEJHUWxGNWVFaFJWVVpJVEVWT1FsRlZWWE5STUVaQ1VYbDRSRkZWUmtSTVJrWkNVVlpGYzFFd1JrSlNVM2hFVVZWR1JFOHhiRUpSTWpWRVRFVjBRbEZWYzNOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWVmMxRXdSa0pSZVhoRVVWVkdSRXhGT1VKUlZUaHpVVEJHUWxKVGVFUlJWVVpFVHpGc1FsRXphRU5NUlhSQ1VWVnpjMUV3UmtKUmVYaEtVVlZHU2t4RlRrSlJWVlZ6VVRCR1FsRjVlRVJSVlVaRVRFVjBRbEZWYzNOUk1FWkNVbE40UkZGVlJrUlBNV3hDVWxoU1EweEhaRU5SVlVadVVXcDBXbEZWVG05UmFYaFVVVlZHVkV4RlpFSlJWV056VG10S1FsRlVXa05NUlU1Q1VWVlZjMVpWUmtKV1UzaEdVVlZHUmt4RlRrSlJWVTF6VWxWR1FsSlRlRkJSVlVaUVRFVldRbEZWVlhOVE1FWkNVM2w0UkZGVlJrWk1SVTVDVVZWTk4xZFZSa1pOTUZWellWVk9RbEZYYkVSUE1XeENVVEp3UkV4RlZrSlJWVlZ6VVRCR1FsRjVlRVJSVlVaR1RFVk9RbEZWVFhOVk1FWkNWbE40UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZW5SdVVXdEdSR0pGU1hOVFZVWkNVMU40UkZGVlJrWk1SVTVDVVZWTmMxRXdSa0pSZVhoR1VWVkdSa3hIVGtKUlYwMXpVVEJHUWxKVGVFUlJWVVpFVHpGc1FsRjZWa05NUlU1Q1VWVk5OMWRWUmtKUmVYaEtVVlZHU2t4RlRrSlJWVTF6VVRCR1FsRjZkRzVSYTBaRVZVTjRURkZWUmt4TVJVNUNVVlZOYzFaVlJrSldVM2hJVVZWR1NFeEZUa0pSVlUxelVUQkdRbEY2ZEc1UmEwWkdZMnRKYzJJd1NrSlJWemxEVHpKa1ExRlZUbmRSYVhoR1VWVkdSa3hGVGtKUlZVMXpVVEJHUWxKVGVGaFJWVVphVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSUE1qbERVVlZPZFZGcGVISlJhMFpDWVRCSmMxRXdSa0pSZVhoUVVWVkdVRXhGVGtKUlZWVnpWbFZHUWxaVGVFWlJWVVpHVEVWT1FsRlZWWE5UTUVaQ1UzbDRSbEZWUmtaTVJVNUNVVlZOYzFFd1JrSlNVM2hFVVZWR1JreEZUa0pSVlUwM1dqQktRbEV6YUVWTVJVNUNVVlZOTjFvd1NrSlNWVkZ6WTFWU1FsRllSa1ZQTW1SRFVWVk9lVkpEZUVaUlZVWkdURVZPUWxGVlRYTlJNRVpDVWxONFZGRlZSbFpNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkU4eU9VTlJWVTV4VVdsNFRsRlZSazVNUlU1Q1VWVk5jMU13UmtKVGVYaEVVVlZHUkU4eVpFTlJWVTVyVEVWT1FsRlZUVGRhTUVwQ1VsVlJjMVpWUmtKV1ZIUnVVV3RHUkZacGVFWlJWVVpHVEVWT1FsRlZUWE5STUVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZOYzFNd1JrSlRlWGhLVVZWR1NreEZUa0pSVlUxelVUQkdRbEY1ZUZCUlZVWlFURVZrUWxGVlkzTlJNRVpDVWxONFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUjJVV3RHUkdGRlRYTlhWVVpDVjFONFNGRlZSa2hNUlRGQ1VWVXdjMUV3UmtKUmVYaFdVVlZHVmt4RlRrSlJWVlUzWkRCS1FsRXljRVJNUlhSQ1VWVnpjMUV3UmtKUmVYaE1VVlZHVEV4RlRrSlJWVlZ6VlRCR1FsVjVlRVJSVlVaR1RFVk9RbEZWVFRkaU1FcENVWHBHUTB4RlRrSlJWVTF6VWxWR1FsSlRlRVJSVlVaRVRFVk9RbEZWVFhOVU1FWkNWSGw0UkZGVlJrWk1SVTVDVVZWTk4xb3dTa0pSTW1oRFRFVk9RbEZWVFRkYU1FcENVbFZSYzFOVlJrSlRVM2hFVVZWR1JFOHlPVU5SVlU1TFRFWk9RbEZXVFhOU01FWkNVbmw0VEZGVlJreE1SVTVDVVZWTk4ySXdTa0pSTW5oRFRFWk9RbEZXVFhOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWVmMxa3dSa0paZVhoR1VWVkdSa3hGYkVKUlZXdHpVVEJHUWxKVGVFUlJWVVpFVHpKa1ExRlZUalJSZVhoRVVWVkdSRTh5WkVOUlZVWkVURVYwUWxGVmMzTlJNRVpDVVhsNFJGRlZSa1pNUlU1Q1VWVlZjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTAzWWpCS1FsSlhVWE5qVlU1Q1VWaEdSRTh5T1VOUlZVNTVVWGw0UmxGVlJrWk1SVTVDVVZWTmMxRXdSa0pTVTNoVVVWVkdWa3hGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVHpOa1ExRlZUbkZSYVhoT1VWVkdUa3hGVGtKUlZVMXpVVEJHUWxGNmRIWlJhMFpFVmtONFJGRlZSa1JQTWpsRFVWVldSVXhFYUVOUlZVVTBVV3AwZGxGclJrUlBWVWx6VTFWR1FsTlRlRVJSVlVaR1RFVk9RbEZWVFhOUk1FWkNVWGw0UmxGVlJrWk1SVTVDVVZWTmMxRXdSa0pTVTNoRVVWVkdSRTh5WkVOUlZVNXRURVZPUWxGVlRUZFhWVVpFVW1sNFJGRlZSa1JQTVd4Q1VsVlJjMlJWVGtKUldGWkVUekZzUWxFeldrUk1SMDVDVVZkVmMxUlZSa0pVVTNoR1VWVkdSa3hIWkVOUlZVWnVVV2w0UmxGVlJrWk1SazVDVVZaTmMxSlZSa0pTVTNoUVVWVkdVRTh5WkVOUlZVMTRVa040U2xGVlJrcE1SazVDVVZaTmMxSlZSa0pTVTNoUVVWVkdVRXhGVmtKUlZWVnpVekJHUWxONWVFWlJWVVpHVEVaR1FsRldSWE5TVlVaQ1VsTjRVbEZWUmxKTVJWWkNVVEpvUlV4R1ZrSlJWbFZ6VWpCR1FsSjVlRzVSYTBaQ1dqQkpjMUV3UmtKUmVuUnVVV3RHUmt3d1NYTk9SVXBDVVZSU1EwOHlaRU5SVlUweFVXbDRSbEZWUmtaTVJVNUNVVlZOYzFFd1JrSlNVM2hVVVZWR1ZreEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVUekk1UTFGVlRuRlJhWGhPVVZWR1RreEZUa0pSVlUwM1dqQktRbEV4U1hOUk1FWkNVWHAwYmxGclJrWlNRM2hVVVZWR1ZFeEZaRUpSVldOelUxVkdRbE5UZUVSUlZVWkVUekprUTFGVlZuRlJhWGN5VVd0R1FrNXJTVGRhTUVwQ1VYcGtRMHhGVmtKUlZWVnpVVEJHUWxGNWVFUlJWVVpHVEVac1FsRlhSWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOTjJJd1NrSlJNMEpEVEVVeFFsRlZNSE5STUVaQ1VYbDRXbEZWUmxwTVJVNUNVVlZWYzFkVlJrSlhVM2hFVVZWR1JreEZUa0pSVlUwM1dqQktRbEV6U2tSTVJVNUNVVlZOTjFvd1NrSlNWVkZ6WTFWU1FsRllSa1ZQTW1SRFVWVk9lVkpEZUhoU1JVWkNZMVZSTjFvd1NrSlJNMHBGVEVaT1FsRldUWE5TTUVaQ1VubDRWRkZWUmxSTVJVNUNVVlZOTjFvd1NrSlNXRkpEVEVoc1ExRlZSalZSYW5SdVVXdEdSR1ZyU1hOalZVcENVVmhHUTB4RlpFSlJWV056VkRCR1FsUjVlRXBSVlVaS1RFVldRbEZWVlhOUk1FWkNVWHAwYmxGclJrWmtSVTF6WVZWS1FsRlhiRU5QTW1SRFVWVk9jVkZwZUV4UlZVWk1URVZPUWxGVlRYTldWVVpDVmxONFNGRlZSa2hNUlRGQ1VWVXdjMUl3UmtKU2VYaEVVVlZHUkV4RlpFSlJWV056VVRCR1FsRjVlRWhSVlVaSVRFVk9RbEZWVFhOUk1FWkNVWHAwYmxGclJrWmtSVTF6VFVWS1FsRlVRa05QTW1SRFVWVk5lRkZwZUZSUlZVWlVURVZrUWxGVlkzTlVWVVpDVkZONFNsRlZSa3BNUldSQ1VWVmpjMU5WUmtKVFUzaE9VVlZHVGt4RlpFSlJWV056VWpCR1FsSjVlRXBSVlVaS1RFVXhRbEZWTUhOVE1FWkNVM2w0U0ZGVlJraE1SVTVDVVZWTk4xb3dTa0pTVkZaRlRFYzVRMUZWUm5aUmFuUnVVV3RHUkdORlNYTlNWVVpDVWxONFJGRlZSa1JNUlU1Q1VWVlZjMVV3UmtKV1UzaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjZkSFpSYTBaRVlXdEpjMVZWUmtKVlUzaElVVlZHU0V4SE1VTlJWVVowVVdsNFJGRlZSa1pNUlU1Q1VWVk5jMUpWUmtKU1UzaE1VVlZHVEV4RlZrSlJWVlZ6VlRCR1FsVjVlRVJSVlVaR1RFVk9RbEZWVFRkYU1FcENVVE5hUlV4RlRrSlJWVTAzV2pCS1FsSlZVWE5qTUZaQ1VWaE9Sazh5WkVOUlZVNHdVbE40VWxGVlJsSk1SV1JDVVZWamMxWXdSa0pXZVhoRVVWVkdSa3hGVGtKUlZVMXpVbFZHUWxKVGVGSlJWVVpTVEVWV1FsRlZWWE5UTUVaQ1UzbDRSbEZWUmtaTVJrNUNVVlpOYzFFd1JrSlNVM2hFVVZWR1JFOHlaRU5SVlZZMFVrTjRlbEV3UmtKak1FMDNXakJLUWxFelVrUk1SVlpDVVZWVmMxRXdSa0pSZVhoRVVWVkdSa3hHVGtKUlZsVnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUVGRpTUVwQ1VsZHdRMHhIWkVkUlZVWnVVbXAwZGxGclJrUmhSVmx6VWxWR1FsSlRlRVJSVlVaRVRFVk9RbEZWVlhOUk1FWkNVWGw0UkZGVlJrUk1SbFpDVVZaamMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMDNaREJLUWxFelFrTk1Sa1pDVVZaRmMxSXdSa0pTZVhoTVVWVkdURXhGVGtKUlZVMXpZVlZLUWxGWGJFTk1SVTVDVVZWVmMxcFZSa0phVTNoRVVWVkdSa3hGVGtKUlZVMDNaREJLUWxFelVrVk1SVlpDVVZWVmMxRXdSa0pSZVhoRVVWVkdSa3hHUmtKUlZrMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUVGRPUlVwQ1VUSm9RMHhGTVVKUlZUQnpVVEJHUWxGNWVGcFJWVVphVEVWT1FsRlZWWE5WVlVaQ1ZWTjRSRkZWUmtaTVJXUkNVVlZqYzFWVlJrSlZVM2hFVVZWR1JFOHpaRU5SVlUweFVYbDRSRkZWUmtSUE0yUkRVVlZPUlV4R1JrSlJWa1Z6VWpCR1FsSjVlRXhSVlVaTVRFVk9RbEZWVFhOaFZVcENVVmRzUTB4RlRrSlJWVlZ6VkZWR1FsUlRlRVJSVlVaR1RFVk9RbEZWVFRka01FcENVWHBrUkV4RlZrSlJWVlZ6VVRCR1FsRjVlRVJSVlVaR1RFWkdRbEZXVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTk4wNUZTa0pSTW1oRFRFVXhRbEZWTUhOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWVmMxVlZSa0pWVTNoRVVWVkdSa3hGWkVKUlZXTnpWVlZHUWxWVGVFUlJWVVpFVHpOa1ExRlZUbmRSZVhoRVVWVkdSRTh5T1VOUlZVNUhURVZPUWxGVlRUZGlNRXBDVWxWUmMxb3dTa0pSVjJSRFR6STVRMUZWVG05UmFYaEdVVlZHUmt4RlRrSlJWVTF6VVRCR1FsSlRlRTVSVlVaT1RFVjBRbEZWYzNOU01FWkNVbmw0U2xGVlJrcE1SVTVDVVZWTmMxRXdSa0pSZVhoS1VWVkdTa3hGZEVKUlZYTnpWRlZHUWxSNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBNMUZyUmtSTk1FMXpWbFZHUWxaVGVFaFJWVVpJVEVaa1FsRldZM05STUVaQ1VYcDBNMUZyUmtaTlZVbHpZVEJLUWxGWGRFTlBNamxEVVZWT2MxRnBlRVJSVlVaRVR6STVRMUZWUmtSTVJXeENVVlZyYzFFd1JrSlJlWGhHVVZWR1JreEZUa0pSVlUxelVUQkdRbEpUZUU1UlZVWk9URVYwUWxGVmMzTlNNRVpDVTFONFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUXpVV3RHUkU0d1NYTldWVVpDVmxONFNGRlZSa2hNUjBaQ1VWZEZjMUV3UmtKUmVuUXpVV3RHUms1VlNYTmlNRTVDVVZjNVJFOHlPVU5SVlU1M1VYbDRSRkZWUmtSUE1qbERVVlZHUkV4RmJFSlJWV3R6VVRCR1FsRjVlRVJSVlVaRVR6TmtRMUZWVGxGTVJsWkNVVlpWYzFJd1JrSlNlWGhTVVZWR1VreEZUa0pSVlUxelV6QkdRbE41ZUVSUlZVWkVUek5rUTFGVlRURlJhWGhRVVZWR1VFeEZaRUpSVldOelZWVkdRbFZUZUVSUlZVWkVURVZzUWxGVmEzTlJNRVpDVVhwME0xRnJSa1JsUlVselV6QkdRbE41ZUVoUlZVWklURVpHUWxGV1JYTlJNRVpDVVhsNFRGRlZSa3hNUlU1Q1VWVk5OMlF3U2tKUk0xcERURVpPUWxGV1RYTlNNRVpDVW5sNFJGRlZSa1JNUlhSQ1VWVnpjMUV3UmtKUmVuUjJVV3RHUkdORlNYTlJNRVpDVVhwMGJsRnJSa1JTYVhoRVVWVkdSRTh5WkVOUlZVWkVURVZzUWxGVmEzTlJNRVpDVVhsNFJGRlZSa1JQTWpsRFVWVldVVXhFV2tWUlZVVXlVa1IwZGxGclJrUk9NRkZ6VXpCR1FsTjVlRWhSVlVaSVRFWldRbEZXVlhOUk1FWkNVWHAwZGxGclJrUmlhMGx6VWxWR1FsSlRlRVJSVlVaRVRFVk9RbEZWVlhOVVZVWkNWRk40U2xGVlJrcE1SVTVDVVZWTmMxWlZSa0pXZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRETlJhMFpFVGpCSmMxWlZSa0pXVTNoSVVWVkdTRXhGT1VKUlZUaHpVVEJHUWxGNmRETlJhMFpFWTJ0SmMxSlZSa0pTVTNoRVVWVkdSRXhGVGtKUlZWVnpWRlZHUWxSVGVFaFJWVVpJVEVWT1FsRlZWWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOTjA1RlNrSlJNbmhEVEVVeFFsRlZNSE5TTUVaQ1VubDRSRkZWUmtSTVJVNUNVVlZOTjJRd1NrSlJNVzl6VVRCR1FsRjZkSFpSYTBaRVVtbDRSRkZWUmtSUE1tUkRVVlZPUjB4RlRrSlJWVTAzV2pCS1FsSlZVWE5pVlU1Q1VWY3hSRTh5WkVOUlZVNTFVWGw0VEZGVlJreE1SVTVDVVZWTmMxUlZSa0pVVTNoSVVWVkdTRXhGTVVKUlZUQnpVVEJHUWxGNmRHNVJhMFpFWkVWSmMxTXdSa0pUZVhoRVVWVkdSRXhHVmtKUlZsVnpVakJHUWxKNWVFUlJWVVpHVEVka1ExRlZSbTVSYVhoS1VWVkdTa3hHVmtKUlZsVnpVVEJHUWxKVGVFaFJWVVpJVEVWV1FsRlZWWE5STUVaQ1VYcDBibEZyUmtaTk1GRnpXakJLUWxGWFpFTlBNbVJEVVZWT2IxRnBlRVpSVlVaR1RFVk9RbEZWVFhOUk1FWkNVbE40VkZGVlJsWk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRTh5T1VOUlZVNXhVV2w0VWxGVlJsSk1SVTVDVVZWTmMxWXdSa0pXZVhoRVVWVkdSa3hIVmtKUlYxVnpVbFZHUWxKVGVFUlJWVVpHVEVVNVFsRlZPSE5TVlVaQ1VsTjRWbEZWUmxaTVJWWkNVVlZWYzFNd1JrSlRlWGhFVVZWR1JreEZUa0pSVlZWelVUQkdRbEY2ZEc1UmEwWkVaV3RWYzFFd1JrSlJlblJ1VVd0R1FsRjVlRXBSVlVaS1RFVk9RbEZWVFhOUk1FWkNVWHAwZGxGclJrUlZRM2hTVVZWR1VreEZUa0pSVlUxelZsVkdRbFpUZUVSUlZVWkdURWRXUWxGWFZYTlNWVVpDVWxONFJGRlZSa1pNUlhSQ1VWVnpjMUpWUmtKU1UzaFdVVlZHVmt4RlZrSlJWVlZ6VXpCR1FsTjVlRVJSVlVaR1RFVk9RbEZWVlhOUk1FWkNVWHAwYmxGclJrUmtSVlZ6VVRCR1FsRjZkRzVSYTBaR1VrTjNNbEZyUmtKT2EwazNXakJLUWxGNlpFTk1SWFJDVVZWemMxRXdSa0pSZVhoV1VWVkdWa3hGVGtKUlZWVnpWbFZHUWxaVGVFUlJWVVpHVEVWT1FsRlZUVGRhTUVwQ1VYazVRMHhHVmtKUlZsVnpVakJHUWxKNWVGUlJWVVpVVEVWT1FsRlZUVGRhTUVwQ1VsaGFRMHhGVmtKUlZWVnpVVEJHUWxGNWVFUlJWVVpHVEVaa1FsRldhM05STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOTjJJd1NrSlJNalZEVEVkMFExRlZSbkpSYVhoRVVWVkdSRXhGT1VKUlZUaHpVVEJHUWxKVGVGUlJWVVpVVEVWa1FsRlZZM05aVlVaQ1dWTjRTRkZWUmtoTVJtUkNVVlpqYzFKVlJrUmlSVlZ6VVRCR1FsSlRlRXhSVlVaTVRFVldRbEZWVlhOUk1FWkNVWGw0UmxGVlJrWk1SazVDVVZaTmMxSXdSa0pTZVhoUVVWVkdVRXhGWkVKUlZXTnpVekJHUWxONWVFUlJWVVpHVEVWT1FsRlZWWE5STUVaQ1VYcDBibEZyUmtSUFZVMXpVVEJHUWxGNmRHNVJhMFpHVWtONFdGRlZSbGhQTW1SRFVWVk9XVXhIWkVOUlZVWnVVV2w0UkZGVlJrUk1Sa1pDVVZaRmMxRXdSa0pTVTNoc1VWVkdiRXhGVmtKUlZWVnpVVEJHUWxKVGVFeFJWVVpNVEVWV1FsRlZWWE5XVlVaQ1ZsTjRSRkZWUmtaTVJVNUNVVlZWYzFFd1JrSlJlblJ1VVd0R1JtTkZWWE5TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZWYzFZd1JrSlhVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEhaUmEwWkVZbXRKYzJFd1NrSlJWM1JEVEVWT1FsRlZUWE5VTUVaQ1ZIbDRSRkZWUmtaTVIwNUNVVmROYzFKVlJrSlNVM2hFVVZWR1JreEZkRUpSVlhOelVsVkdRbEpUZUVSUlZVWkVURVZPUWxGVlZYTlJNRVpDVWxONFJGRlZSa1JQTWpsRFVWVlZlbEpEZUhCUk1FWkNZVlZOTjJJd1NrSlJNbkJFVEVWV1FsRlZWWE5STUVaQ1VYbDRSRkZWUmtaTVJVNUNVVlZOYzFFd1JrSlNVM2hHVVZWR1JreEZNVUpSVlRCelVUQkdRbEY1ZUU1UlZVWk9URVZPUWxGVlkzTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5OMlF3U2tKUmVsWkRURVV4UWxGVk1ITlJNRVpDVVhsNFRGRlZSa3hNUlU1Q1VWVk5jMVF3UmtKVWVYaEVVVlZHUmt4R1ZrSlJWbFZ6VVRCR1FsSlRlRVJSVlVaRVR6STVRMUZWVG5kUmVYaEVVVlZHUkU4eVpFTlJWVTVIVEVWT1FsRlZUVGRYVlVaRVVtbDRSRkZWUmtSUE1XeENVbFZSYzFSVlJrSlVVM2hFVVZWR1JFeEZkRUpSVlhOelVUQkdRbEY2ZEZKUlZVNXJURVZPUWxGVlRUZFZWVVpHVWtONFVGRlZSbEJNUlZaQ1VWVlZjMVpWUmtKV1UzaElVVlZHU0V4RlZrSlJWVlZ6VTFWR1FsTlRlRVpSVlVaR1RFWkdRbEZXUlRkWFZVWkVZMnROYzFSVlJrSlVVM2hFVVZWR1JFeEZNVUpSVlRCelVUQkdRbEY1ZUVoUlZVWklURVZPUWxGVlZYTlNNRVpDVW5sNFJsRlZSa1pNUld4Q1VWVnJjMUpWUmtKU1UzaFNVVlZHVWt4RlZrSlJWVlZ6VkZWR1FsUlRlRVJSVlVaR1RFVk9RbEZWVFRkVlZVWkVZa1ZSYzFFd1JrSlJlblJTVVZWV1JVeEdUa0pSVmsxelVsVkdRbEpUZUZaUlZVWldURVZrUWxGVlkzTlNWVVpDVWxONFVsRlZSbEpQTVd4Q1VUSndSRXhGTVVKUlZUQnpVVEJHUWxGNWVFNVJWVVpPVEVWT1FsRlZUWE5TTUVaQ1VubDRSRkZWUmtaTVJXUkNVVlZqYzFKVlJrSlNVM2hVVVZWR1ZFeEZWa0pSVlZWelZWVkdRbFZUZUVaUlZVWkdURVpHUWxGV1JYTlJNRVpDVWxONFJGRlZSa1JQTVVaQ1VUTndSVXhGVGtKUlZVMDNVekJHUkZKRGVFUlJWVVpHVEVWT1FsRlZUVGRUVlVaR1UybDRUbEZWUms1TVJVNUNVVlZOYzFOVlJrSlRVM2hFVVZWR1JreEZUa0pSVlZWelV6QkdRbE41ZUVaUlZVWkdURVV4UWxGVk1ITlJNRVpDVWxONFJsRlZSa1pNUmxaQ1VWWlZjMUV3UmtKUmVYaEdVVlZHUmt4Rk1VSlJWVEEzVlZWR1JHSkZVWE5VVlVaQ1ZGTjRSRkZWUmtaTVJURkNVVlV3YzFFd1JrSlNVM2hJVVZWR1NFeEdWa0pSVmxWelVqQkdRbEo1ZUVaUlZVWkdURVZzUWxGVmEzTlNWVVpDVWxONFVsRlZSbEpNUlZaQ1VWVlZjMU5WUmtKVFZIUmFVVlZXZVZKRGQzSlJNRVpDU3pCTk4xZFZSa1JNTUUxelVsVkdRbEpUZUVSUlZVWkVURVZPUWxGVlZYTlVWVVpDVkZONFJGRlZSa1JNUmxaQ1VWWlZjMUV3UmtKU1UzaEtVVlZHU2t4RlRrSlJWV056VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFRkYU1FcENVVEp3UkV4RmJFSlJWV3R6VWpCR1FsSjVlRXBSVlVaS1RFVnNRbEZWYTNOVlZVWkNWVk40UkZGVlJrUlBNbVJEVVZWT05GRnBlRkpSVlVaU1RFVmtRbEZWWTNOVFZVWkNVMU40UkZGVlJrUlBNbVJEVVZWT2IxRnBlRXBSVlVaS1RFVmtRbEZWWTNOVk1FWkNWWGw0UkZGVlJrUlBNV3hDVVRKNFEweEZUa0pSVlUwM1YxVkdSbEpEZDNKU1JVWkNTekJSTjFkVlJrUk1NRkZ6VkZWR1FsUlRlRVJSVlVaRVRFVXhRbEZWTUhOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWVmMxUlZSa0pVVTNoRVVWVkdSRXhGTVVKUlZUQnpVVEJHUWxKVWRHNVJhMFpFWWtWTmMxSXdSa0pTZVhoR1VWVkdSa3hGWkVKUlZXTTNXakJLUWxFeFNYTlRWVVpDVTFONFJsRlZSa1pNUlRGQ1VWVXdOMW93U2tKUk1XOXpWVlZHUWxWVGVFWlJWVVpHVEVWc1FsRlZhemRhTUVwQ1VUSlJjMU5WUmtKVFUzaEdVVlZHUmt4RmJFSlJWV3MzV2pCS1FsRXhXWE5VTUVaQ1ZIbDRSbEZWUmtaTVJrWkNVVlpGTjFsVlJrUmhhMGx6VWxWR1FsSlRlRTVSVlVaT1RFVk9RbEZWVFhOWlZVWkNXVk40UkZGVlJrWk1SV1JDVVZWamMxRXdSa0pTVTNoS1VWVkdTa3hGWkVKUlZXTnpVVEJHUWxKVGVFUlJWVVpHVEVWT1FsRlZUVGRWVlVaRVRUQk5jMUV3UmtKUmVYaEVVVlZHUkU4d2JFSlJNR2R6VVRCR1FsRjVlRVJSVlVaR1RFVk9RbEZWVFRkVFZVWkdVMmw0VGxGVlJrNU1SVTVDVVZWTmMxUlZSa0pVVTNoRVVWVkdSRTh3UmtKUk1sRnpVVEJHUWxGNWVFUlJWVVpHVEVWT1FsRlZUV2xNUTBwdFlWZDRiRWxxYjJsa00yUXpURE5DYUZreWRIcE1NbkI0WkZkV2VXVlRPWHBqYlUxMldWZHdhR1ZETlhGamVVbHpTVzVPZG1SWVNtcGFXRTVFWWpJMU1GcFhOVEJKYW5CaVNXMVNiRnB0YkhWYVUyZG5WekY0ZFZoSVVtTkphVFIyV1RJNWVWcFdkMmxNUm5oMVdFaFNZMGxwTkhaa2JVWjVUREpTZGxrelZuUmFWelV3V0VOSmMxaEhOV05rUm5kcFRHazVNbGxZU1haamJUVjJaRWRvTUdKWGVETmhSMnd3V2xaM2FVeEdlSFZZU0ZKalNXazBkbGxYY0dobFF6a3lXVmhKZG1KSE9XcFpXRkp3WWpJMVkwbHBlR05pYkhnd1dFTkpkVXd5Um5GWldHZDJaRzFHZVV3eU5YWmliVTVzV0VOSmMxaEhOV05rUm5kcFRHazVhR0Z0UmpSTU0xcG9ZMms1ZVdOWVZteGpibXhqU1dsNFkySnNlSFZZU0ZKalNXazBkbGt5T1hsYVV6bHdZbTFzTUZoRFNYTllSelZqWkVaM2FVeHBPV2hoYlVZMFRETkNhR051VG14WFJURk5XRU5KYzFoSE5XTmtSbmRwVEdrNWJHUnRWblZrUXprd1kyMXNibG95Vm5sWVEwbHpXRWMxWTJSR2QybE1hVGxyV2xkYWJHTnVTbXhhUm5kcFRFWjRkVmhJVW1OSmFUUjJZekpXZVdGWFJuTmhXSEJzV0VOSloweDVPR2RoYkVZeFdsaEtOVXh1UW1oamJVWjBXRWMxWkV4RFFtMWtWelZxWkVkc2RtSnBaMmRoYkVZeFdsaEtOVXhEUW10aU1rNHhZbGRXZFdSRGQyZGpiVFYyWkVkb01HSlhlRE5oUjJ3d1dsTjNaMkpIT1dwWldGSndZakkwYzBsSE5YWmliVTVzVEVOQ2VXTllWbXhqYm10blMxTkNOMWhITldOaWJIZHBaRmhPYkVsSVRqQmpiV3hxWkVaM2FVOHhlSFZZUnpVeVdWaEtZMkpzZURCamFrbDNTVVF3WjB4NVZYbE5Remx1VEVaNGRWaElVbmxoUjBaNllVTkJPVWxET0dwTWFXOXJUSGw0WTJKc2VEQmpiVVoxWkVkc1JGbFhUbTlhVTBFNVNVTTRiMWQ2T0cxWVUyeG1VRlowWlVwc01IRk1lWGhqWW14NE1HTnRhR3haVjFKc1kyNU5aMUJUUVhaWWFXZDFTMm80Y0U5c2MyZFlSbmd3V0ZOdmIxY3hOV05ZU0VwaldFYzFaRXRwYTJ0TU1qRnVURVo0ZFZoSE5XTmtRemgyU1VOTk0wNXFWWHBNUTBGcVQwUkZlVTVUZDJkSmVtZDRUbFJKTmtsSGVIWlpNa1p6U1VoQ2VXSXpVblpaTWpselNVZFNiR1JIVm1wa1IyeDJZbXg0ZFZoSVVubGlSemxxV1ZkNFVXTnRPVEJpTWs1MllrTkJPVWxET1dWTFJEZzJXVmRLZG1SWVVqaFpXRUozWmtkR2QyTkRNWHBrUnpsNVdWZGtiR1pETkhKTVYxWTBaRWRXZFdNeWJIWmlibmh0WVZkNGJHWklTbXhqTTNnellWZFNibHBZVVhCUGFWRjJURVo0ZFZoSVVubGliVGxFWWpJMU1GcFhOVEJKUkRCblRERTBiMUI2Y0VoU1ZsSTRVMFZXUWxKRGEydE1lWGhqWW14NE1HTnVRbmxpTTFKMldUSTVjMGxFTUdkTU1UVmpXRU01WTFoRE9IWk1SbmgxV0VjMVkyUkRPSEZKUmtKNVdsZGFjR0pJVW14amJrNWpZbXg0TUVsRGIyZE5VMnRuVmtkb2JHVlRRbWhqYlZWblpGaE9iRnB1Vm5OSlNGSjJTVWRzZFdSSVNuWmFTRlpxV2xOQ2FtUllUakJpTWpCbldrZEdNRmxXVWpWalIxWjZTVU5vZWxwWFZXZFpWM0JvWlVNNWNXTXlPWFZqUXpWeFkzbENiV0l6U1dkWlZ6Um5XbGhvYUdKWVFuTmFVMnhqWW14NE1FbERiMmROYVd0blZrZG9iR015VldkWldFcHNTVWRPYUdKSGVHeGFSSEJqWW14NE1FbERiMmRKUTBGblRGTkNRMUpWV2xCVmExVm5XVmhPY21GWE5XNUpSMXAyWTJsQ2FFbElVbmxaVnpWNlkwYzVlV1JHZUhWWVNGRm5TMmxCWjBsRFFYUkpSVVpIVmtWV1UwbElRbWhqYlVaMFNVaE9iR050YkdoaVIydzJXVmhTY0dJeU5HZExTRTExV2tkR01GbFRRbkJqZVVKb1NVaE9NR050YkhWYWVVSndXbWxDZWt4dVFubGlNazVzWXpOT1JWbFlVbWhKUjJ4NlNVaFNlV1JYVlhCWVJ6VmpaRU5CY1VsRVRYQkpSM1JzWlZOQ2NHTjVRakJoUjFWbldrZEdNRmxXVWpWalIxWmpZbXg0TUVsRGIyZE9RMnRuWkVkb2JFbEhUbWhrUjA1dldWZDRjMGxJVGpWaVYwcDJZa05DWTBscGNHTkphVUpxV1ZjMFoxbHRWV2RrV0U1c1drWjRkVmhJVVdkTGFVRXhTMU5DYkdWSFZtcGtXRkp3WWpJMFoyUXliSE5pUTBKNlpFZEdlV1JEUWpOaFdGSnZTVWhTZVZsWE5YcGpSemw1WkVOQ2ExbFlVbWhXU0d4M1dsTkNhR0p0VVdkV1JXaEdWR2xDYW1JeU5UQmhWelV4V2xOQ2EySXpaSFZKU0ZKMlNVWjNhVXRzZDJsSlIyeHRTVWMxYkZwWFVteGFSbmgxV0VoUlowdHBPV05pYkhnd1kwaEtiRnB0YkhOa1IxWjVZM2xCT1VsSWREbE1SbmgxV0VjMVkyUkRPSEZKUmxKNVdWYzFlbU5IT1hsa1NFMW5XVzFzZFZwSGJIVmFNMDVqWW14NE1FbERiMmROVTJ0bllUSldOVWxIYkhwSlNGSnZXbE5DYTFsWVVtaFdTR3gzV2xaNGRWaElVV2RMYVVGNVMxTkNNR0ZIVldkWk1rWXdXVEpvYUdKSGQyZGpNMngwV1cwNWMwbEdkMmxMYkhkcFNVZE9hR0pwUW1sYVUwSXhZekpXYTFoSE5XTmtRMEZ4U1VSTmNFbElUbXhpUjFacVpFZHNkbUpwUWpOaFYzaHpTVWhPTUZsWVNqQkpTR1J3WkVkbloyUklTbWhpYms1M1lqTktNRWxIVW1oa1IwWlZaVmhDYkVsSFJuVmFRMEpWVTBWV1QwbEhaSFpKU0ZKMlNVWjNhVXRzZDJsSlIyeHRTVWMxYkZwWFVteGFSbmgxV0VoUlowdHBPV05pYkhnd1pFaEthR0p1VG5kaU0wb3dZM2xCT1VsSWREbE1SbmgxV0VjMVkyUkRPSFpKUlVZeVlqSnNhMGxIVG5aaVZ6RnNZbTVSZEdOSVNuWmlSemx1U1VkT2IxbFlTV2RqTWxaNFpGZFdkVmt5VldkTFEwMTRUVVJCTlU5RGF6ZEpSekV4WXpOUloxbFlRbmRhVjBaNldsTkNjMkZYTlRCSlIwWjFXa05DYkdSdFJtdGFVMEpxWWpJeGQyTnRWbnBqTW14MllteDRkVmhJVW1oaVIzaFZaVmhDYkdONVFUbEpSbmRwUzJrNVkwbHBOV3BpTWpWcVdWaFJiMGxHZDJsTGJIZHBTVU5yYzFoSE5XTmliSGd3VEhrNFoxRlhOV3BoUnpsNVNVaFNhRnA1UW0xaU0wbG5ZMGRHZVdNeWJIVmFlVUl3WVVkVloxcEhPV3BrVnpGc1ltNVJaMkl6U25CYU1teDFXRWMxWTJSSE9YbGhWMlJ3WW10R2RWa3lhSFpqYVVFNVNVZFNkbGt6Vm5SYVZ6VXdURzFPZVZwWFJqQmFWVlp6V2xjeGJHSnVVVzlKUm5kcFdWWjNhVWxEYXpkWVJ6VmpaRWM1ZVdGWFpIQmlhMFoxV1RKb2RtTnBOVzlqYlZadFNVUXdaMkpIT1dwWldGSndZakkwZFdGSVNteGFhblJqWW14NGRVeDVPR2RSYlVaNldsTkNZMGx0VG5aaWJrNHdZMjVXYW1SSE9YbFlRMGxuV20wNWVVbEhjRkprVjFaNVpWTTFhR0Z0UmpSVlNFcHNXbTFzYzJSSFZubEpSMFoxV2tOQ2NWVllWbXhqYm10MVdWZHdhR1ZHVW5sWlZ6VjZZMGM1ZVdSR2VIVmFibFoxV1ROU2NHSXlOR2RaVjFKclZrYzVVV050Vm0xaFYzZ3dXbGhLZWxRelNsVmpiVVoxWXpOQ2RtTnVVbnBMUTBKNlpFaEtNVmt6VWpGamJWVm5TMU5DTjFoSE5XTmliSGd3VEhrNFoxcEhSakJaVmxJMVkwZFdSbVZJUW5sYVdFNTZZVmM1ZFVsSGJIcEpSemwzWkVkc2RtSnRSbk5KUjBaMVdrTkNhMXBYV21oa1YzZ3dZM2xDTUdKNVFtTkphWEJqU1d4NGRWaElVbmxhV0ZJeFkyMDBaMXB1Vm5WWk0xSndZakkwYjBsSFVtaGtSMFpWWlZoQ2JGSllhSGRqYlZaNll6SnNkbUpwZDJkYWJsWjFXWGxCY0VsSWRHTmliSGgxV0VoU1kyUkhiRzFKUTJkblpFaHNkMXBYT1cxSlIxSm9aRWRHVldWWVFteFNXR2gzWTIxV2VtTXliSFppYVVGb1VGUXdaMWhEU25wa1NFcHdZbTFrWTBscFFYQkpTSFJqWW14NE1GaElVbU5rUjFveFltMU5aMUJUUW10WldGSm9Wa2hzZDFwVlZqUmpTRXBzWXpOT2NHSXlORGRZUnpWalpFWjRNRmhJVW10WldGSm9Wa2hzZDFwVlZqUmpTRXBzWXpOT2NHSXlOR2RRVTBKalNXbHdZMGxxZEdOaWJIZ3dXRWhTT1ZoSE5XTmliSGd3V0VoU01sbFlTV2RhUjBZd1dWWlNOV05IVlhOWVJ6VmpaRVo0TUZoSVVuQkpSREJuVFVONFkySnNlREJZU0ZKalpFZFNhR1JIUmxWbFdFSnNZM2xCT1VsSFVtaGtSMFpWWlZoQ2JGSllhSGRqYlZaNll6SnNkbUpwTlRCaU1IaDJaREpXZVZFeVJucGFVMmR3VEcweGFHUkhUbTlMUTBKNVltMDVNR0ZJVW5SaVNHUnZZVmhTYkVsRGEyZG1TSGRuVnpFd04xaEhOV05pYkhnd1dFaFNjRnBwUVc5SlIzQlNaRmRXZVdWVE5YQmpNRm94WW0xT01HRlhPWFZMUTBKdFpGYzFha2xEYTJkTFUwSTNXRWMxWTJKc2VEQllTRkpqWkVNNGRrbEZXblpqYVVKc1dWZE9iMGxIVW1oa1IwWlZaVmhDYkVsSGJIVkpTRkp2V2xOQ2ExbFlVbWhXU0d4M1dsVldOR05JU214ak0wNXdZakkxWTJKc2VEQllTRkpqWkVoa2IyRlhlR3hKUTJkblMwTkNhMWxZVW1oV1NHeDNXbE5CT1VsSFVtaGtSMFpWWlZoQ2JHTXhjMmRoVTNOeVNVWXdaMHRUUVhCSlNIUmpZbXg0ZFZoSVVtTmtSbmd3V0VoUmRreDVRbEZqYlZaM1dsYzFhMGxIYkcxSlNFcHNZMWhXYkdNelVteGFSbmgxV0VoU1kyUkdlREJZU0ZKd1dtbEJiMGxIVW1oa1IwWlZaVmhDYkZkNVFYZEpSakJuVUZRd09VbEdkMmxMTVhkcFNVTnJaMlV4ZUhWWVNGSmpaRVo0TUZoSVVtTmtSMUpvWkVkR1ZXVllRbXhKUkRCbldrZEdNRmxXVWpWalIxVjFZeko0Y0ZreVZXOUpSRVZuUzFOQ09HWkRRbU5KYVhCalNXcDBZMkpzZURCWVNGSmpaRVo0TUZoSVVXOUpTRTR3WTI1V2FtUklWbmxhVm5ObldrZEdNRmxXVWpWalIxVm5XRk5CT1VsSVRqQmpibFpxWkVoV2VWcFdjMmRhUjBZd1dWWlNOV05IVldkWVUwSTRaa05DWWxoVFFYQk1ibFoxWXpKb2NGcHVVVzlKUjFveFltMU5aMHRVZEdOaWJIaDFXRWhTWTJSR2VEQllTRkYyVEhsQ1VHUkhhR3hqYm1Sd1l6SlZaMWxZUW5kYVZ6VnJXRWMxWTJSR2VEQllTRkpqWkVnd1oxcFhlSHBhVTBJM1dFYzFZMlJHZURCWVNGSmpaRVo0TUV0RFFucGtTRW94V1ROU01XTnRWbUpKUjFKb1pFZEdWV1ZZUW14SlJqQm5VRk5DZW1SSVNqRlpNMUl4WTIxV1lrbEhVbWhrUjBaVlpWaENiRWxHTUdkbVNIZG5WekV3WjB0VE5YZGtXRTV2UzBOQ2JXUlhOV3BKUTJzM1dFYzFZMlJHZURCWVNGSmpaRWd4WTJKc2VEQllTRkpqWkVneFkySnNlREJZU0ZJNVdFYzFZMlJJTURkWVJ6VTVXRWMxWTJKcE9IWkpSVXBvWXpKVloyRlhOWHBqUjFacVpFZHNkbUpwUW0xa1Z6VnFaRWRzZG1KcFFtMWlNMGxuWTBoS2JGcHRiSE5rUjFaNVkzbENhR0p0VVdka1NFcG9ZbTVPZDJJelNqQmpNWGgxV201V2RWa3pVbkJpTWpSbllWYzFlbU5IVm1wa1JrSjVXbGRhY0dKSVVteGpiazVRWTJ4U2VWbFhOWHBqUnpsNVpFaE5iMGxJVGpCamJsWnFaRWhXZVZwVGQyZGlNMEl3WVZjNWRXTjVkMmRpTTBwd1dqSnNkVmxYZUZCalNGSndZakkxZWt4RFFuRmpWbWhKVldsQmNFbElkR05pYkhoMVdFaFNNbGxZU1dkaFZ6VjZZMGRXYW1SSFZtdEpSREJuWlRNd2MxaEhOV05rUm5nd1l6SldiR0V5YkhWYU1WSjVXVmMxZW1OSE9YbGtRMEU1U1VObloyTXpVbmxrVjA0d1pGaEtiRWxFTURsUVUwSXdZMjFHZFdNelFuWmpibEo2U1VOck4xaEhOV05pYkhnd1dtNVdkVmt6VW5CaU1qUm5ZVmMxZW1OSFZtcGtRMmRuV2tkR01GbFdValZqUjFWblMxTkNOMWhITldOa1JuZ3daRzFHZVVsSVRteGlSMVpxWkVkV2EwOHhlSFZZU0ZKalpFZHNkV016UW14Wk0xSnNXa1p6WjFwSFJqQlpWbEkxWTBkVloxaFRRVGxKU0ZKNVpGZFZOMWhITldOa1JuZ3dZV3hHTVZwWVNqVk1iVlpvV1RKbmIwbElUakJqYmxacVpFaFdlVnBXYzJkYVIwWXdXVlpTTldOSFZXZFlVMEk0WmtOQ1lsaFRkMmRhYmxaMVdUTlNjR0l5Tkc5SlJqaHpTVWhDZVZwWFduQmlTRkpzWTJzNWVWSnRSbXBrUnpsNVpWTkJjRWxJZEdOaWJIZ3dXRWhTWTJSSVdtaGphVUpyV1ZoU2FGWkliSGRhVlRsNVZraEthR0p1VG5kaU0wb3dTVVF3WjJOSVNteGFiV3h6WkVkV2VWUXpTa2RaVjA0d1lqTktOVXREUW5aalNGSndZakkxZWt4RFFuWmpiV3h1WVZjMWFHSkZPWGRrUjJ4MlltNU5jMGxIY0hoWFJXaFRTVU5yTjFoSE5XTmtSbmd3V0VoU2NGcHBRVzlKU0ZJMVkwZFdkbHBwUW10WldGSm9Wa2hzZDFwVk9YbFdTRXBvWW01T2QySXpTakJKUkRBNVVGTkNZMGx1VGpCamJXeDFXakYzYVVsRFdXMVlSelZqWkVaNE1GaElVbU5rUTBaNldsZFdjbUZYTlc1V1NFcG9ZbTVPZDJJelNqQkpRMWx0U1VOR2NHSnVUbmRhVjA0d1dsZFNZa2xIVW1oa1IwWlZaVmhDYkZRelNsVmpiVVoxWXpOQ2RtTnVVV2RZVTBGd1NVaDBZMkpzZUhWWVNGSmpaRVo0TUZoSVVuWmpTRkp3WWpJMWVreHRVbWhrUjBaVlpWaENiR041TlRGaWJrNXZZVmRhTUV0RFFtdFpXRkpvVmtoc2QxcFZPWGxXU0Vwb1ltNU9kMkl6U2pCSlEyczNXRWMxWTJSR2VEQllTRkpqWkVkc2RXTXpRbXhaTTFGdlNVZFNhR1JIUmxWbFdFSnNWRE5LVldOdFJuVmpNMEoyWTI1UlowdFVkR05pYkhnd1dFaFNZMlJHZURCamJWWXdaRmhLZFVsSFdtaGlTRTVzVHpGNGRWaElVbU5rUm5nd1psTkNiR0pJVG14SlIyeHRTVU5uWjJNeVZteGhNbXgxV2pGU2VWbFhOWHBqUnpsNVpFTkJjRWxJZEdOaWJIZ3dXRWhTWTJSR2VEQmpiVll3WkZoS2RVbERSVzlKU0U1c1lrZFdhbVJIVm10SlJEQm5Xa2RHTUZsV1VqVmpSMVpRWTJ4U2VWbFhOWHBqUnpsNVpFTkJjRTh4ZUhWWVNGSmpaRVo0TUdaV2VIVllTRkpqWkVnd1owdFVkR05pYkhnd1dFaFNlVnBZVWpGamJUUm5ZekpXYzFwWFRqQmFWMUUzV0VjMVkyUklNV05pYkhoMVdFaFNlVnBZVWpGamJUUm5ZVmMxZW1OSFZtcGtRMmRuWWpOQ01HRlhPWFZqZVRWcldWaFNhRlpJYkhkYVdFNWlTVVJCWjFoVFFYQkpTSGc0U1VOR2NHSnVUbmRhVjA0d1dsZFNZa2xHZDJsTGJIZHBTVVl3WjBwcFdXZGhWelY2WTBkV2FtUkRaMmRZUTBseFdFTkpaMHRVZEdOaWJqRmpZbXg0ZFV4NU9HZFJVMEo2WTBkV2FtRlhSbk5KUjFZMFpFZFdkVnBEUW0xaU0wbG5XVmR3YUdWRFFuWmpTRkp3WWpJMWVsaEhOSFpNZVVJd1lVZEdNRWxJVW1oaE1sWjZTVVozYVZwdGVHaGtSbmRwU1VjNWQyUkhiSFppYmsxblMwYzFkbVJEUWpCaWVVSnBXbE5DYTFwWFZuZEpSMVkwWkVkV2RWcEhWbXRMVm5oMVRIazRaMUp0YkRSYVdFMW5TWHByTkU5RVpHTmliVm94WW0xT01HRlhPWFZKUjBaeFdWaG9SbVZJVW14aWJWRnZTVWhTYUdOdFpHeGtRM2RuWXpOS2FrbERhMmRsTVhoMVdFaFNNbGxZU1dkaE1sWTFURU5DYTFwWFZuZE1SbmgxV0VoU1kyUkhXbk5aV0ZKUVkwaFNjR0l5TlhwSlJEQm5ZV3hHTVZwWVNqVk1iVVp4V1Zob1ZGcFlVakJoVnpWdVkzazFiV0pIUmpCVU0wSXdZVmM1ZFdONVFqaG1RMEkzWmxSMFkySnNlSFZZU0ZKdFlqTkpaMHREUW5KYVdHdG5ZVmMwWjJNelNtcEpRMnRuWlRGNGRWaElVbU5rUjJ4dFNVTm5aMk16U21wWGVVSnlXbGhyWjFoVFFXaFFWREJuWkZjMWExcFhXbkJpYlZaclNVTnJaMlV4ZUhWWVNGSmpaRVo0TUV0RFFtMWlSMFl3VkROQ01HRlhPWFZqTVhObllUSldOVWxHTUdkUWVVSXdXVmhLYmxwWVVXZFBhVUZ2U1VkU2JGcFlRV2RtU0hkblMwTkNhMXBYVm5kSlJEQm5aVE13WjB0VFFYQkpRMnhpU1VkMGJHVlRRbVJKUkRCbll6TkthbGQ1UW5KYVdHdG5XRlIwWTJKc2VEQllTRkk1V0VjMVkyUklNV05pYkhnd1lWZFpaMHREUW10YVYxWjNTVU5yWjJVeGVIVllTRkpqWkVkd1VtUlhWbmxsVXpWc1pVaFNiR0p0VVc5SlNGSjVaRmRWYzBsSVVtaGpiV1JzWkVOM1oxcEhWbXhqUTBGd1R6RjRkVmhJVWpsWVJ6VmpZbXg0TUdOdFZqQmtXRXAxU1VoU2FHTnRaR3hrUkhSalltNHhZMkpzZUhWTWVXOW5VMGRHZFZwSGVHeGplVUo1V2xoT2QySXlOWHBhV0UxblpFYzRaMWxYTkdkWlYzQm9aVU5DZVZwWVJqRmFXRTR3VDJ4NGRVbERiMmRNVTBKdFlWYzFhMk41UWpCaFIxVm5ZMjFzYm1GSVVXZGFSMFl3V1ZaU05XTkhWV2RMUnpGc1drZHNhR1JIVm5wSlIwcHNaRWhrYkZwWE5HZFpNamwxWkVkV2RXUkRNVEJsV0VKc1NVZEdkVnBEUW14bFNFSnNXVE5TYkZwRFFtdFpXRkpvVmtoc2QxcFRiR05pYVVGeFNVTXdaMk50VmpCa1dFcDFZM2xDTUdGSFZXZFpNamw1WTIxV2VtTkhPWFZhUjJ4MVdubENlVnBZVG5kaU1qVjZXbFo0ZFVsRGIzWllSelZ0WkZjMWFtUkhiSFppYVVKb1lXMUdORk5IUm5WYVIzaHNWVzFXZW1OSE9YVmpNbFo2UzBOQ2VreERRbkZqVm1oSlZXbDNaMk50Vm5walJ6bDFZekpXZWtsRGEyZGxNWGgxV0VjMVkyUklXbWhqYVVKcVpFTjNaMlJJYkhkYVUzZG5XbTFzZFZsWGVFVlpXRkpvVmtoc2QxcFRkMmRhYld4NVl6TlNSVmxZVW1oV1NHeDNXbE40WTJKc2VEQllTRkpxWWpJMU1GcFhOVEJqZVVFNVNVaE5kVmt5T1hWa1IxWjFaRWhOYzFoSE5XTmtSbmd3V2tkR01GbFdValZqUjFaNlNVUXdaMk41Tld0WldGSm9Wa2hzZDFwWVRUZFlSelZqWW14NE1FeDVPR2RWYlZaMFlqTmFiRWxIUmpGa1J6aG5Xa2RHTUZsV1VqVmpSMVZuV1ZjMWEwbEhaR3hrUTBKcVlqSTFNRnBYTlRCTVdGSTFZMGRWWjJGWE5HZGtSMmhzU1VoQ2VXSXlUbXhqTTA1allteDRNR1F5YUhCaVIxVm5TME5DYTFsWVVtaFdTR3gzV2xoT1lrbEVRV2RZVTBFNVVGUXdaMWhEU1hGWVEwbG5TMU5DTjFoSE5XTmtSbmd3V2tkR01GbFdValZqUjFaNlRHNU9iMkZYV2pCTFEyczNXRWMxWTJSR2VEQmhWMWxuUzBOQ2FtUkRRVGxRVkRCblpGYzFhMXBYV25CaWJWWnJTVU5yWjJVeGVIVllTRkpqWkVaNE1Ga3pVV2RRVTBKNlRHMHhjR0pYVmxWbFdFSnNTVWg0T0VsSGNIaFhSV2hUVEcxa2JHUkdTbXhqTTBKMlltNU9iRk5IVm1oYVIxWjVTME5DWTBsclRuWmlibEpzWW01UmRGWkliSGRhVm5kcFNVTnJOMWhITldOa1JuZ3dabFo0ZFZoSVVqbFlSelZqWW14NE1FeDVPR2RSTW1oc1dUSnpaMkZYV1dka01sVnVZMjFWWjFwSFZtaGlSMngxV25sQ00yRllVbTlKUjBWbllUSTFkbVF5TkdkWk1qbDFaRWRXZFdSRE1UQmxXRUpzV0VjMVkyUkhiRzFKUTJkbldUTlJaMHRUUWpkWVJ6VmpaRVo0TUZwdE9YbEpRMmRuWkVoc2QxcFRRbkJpYVVKcVlqSTFNRnBYTlRCamVVRndTVWgwWTJKc2VEQllTRkpqWkVkc2JVbERaMmRaTWpsMVpFZFdkV1JJVG1KSlNGSTFZMGRWWjFoVFFXMUthVUpxWWpJMU1GcFhOVEJqTVhOblpFaHNkMXBUUW1STWJsSnNZek5SYjBsSFRqQkpRMnRuUzFOQ04xaEhOV05rUm5nd1dFaFNZMlJIVW1oa1IwWlZaVmhDYkdONU5URmliazV2WVZkYU1FdERRakJsV0VKc1NVTnJOMWhITldOa1JuZ3dXRWhTWTJSSFNubGFWMFp5VHpGNGRWaElVbU5rUm5nd1psWjRkVmhJVW1Oa1NERmpZbXg0TUdaV2VIVllSelZqWkVNNGRrbEZUbTlhVjA1eVNVaFNka2xJVG14YVUwSndXbWxDTTFwVFFtOVpXRnBzU1VkRloyTnRWbnBqUnpsMVl6SlZaMXB0T1hsSlNGSnZXbE5DYkdWSVFteFpNMUpzV2tOQ2ExbFlVbWhXU0d4M1dsWjRkVmhJVW5CYWFVRnZTVWRTYUdSSFJsVmxXRUpzWXpGelowMURRbVJKUjJ4MVNVaEtiR016UW5aaWJrNXNZM2xCY0VsSWRHTmliSGd3V0VoU2JXRlhOV2hpUlZKb1pFZEdWV1ZZUW14SlJEQm5Xa2RHTUZsV1VqVmpSMVo2VjNsQmQwbEdNRGRZUnpWalpFZ3daMXBYZUhwYVUwSTNXRWMxWTJKc2VEQllTRkYyVEhsQ1ZXTnVhMmRaTWpsMVpHMVdlV1JIYkdsaVIxVm5Xa2RHTUZsV1VqVmpSMVo2V0VjMVkyUkdlREJhYlRsNVNVTm5aMlJJYkhkYVUwSndZbWxDZVZwWVRuZGlNalY2V2xoTlowdFRRamRZUnpWalpFWjRNRmhJVW5CYWFVRnZTVU5HYTFsWVVtaFdTR3gzV2xoT1lrbEVRV2RZVTBJNFprTkNla3h0VG5aaWJscHNZMjVTYkdOdVRtSkpTRkkxWTBkVlowdDVRbU5KYVVKalNXbEJja2xIVW1oa1IwWlZaVmhDYkdNeGMyZE5RMEprU1VZd1owdFRRamRZUnpWalpFWjRNRmhJVW1Oa1IxcHdZbTFHYzFKSFJqQlpWbEkxWTBkVloxQlRRakJsV0VKc1R6RjRkVmhJVW1Oa1JuZ3dXRWhTYVdOdFZtaGhlblJqWW14NE1GaElVbU5rU0RGallteDRNRmhJVW1Oa1IyeHRTVU5uWjBsWFduQmpiazR3VWtkR01GbFdValZqUjFWblMxTkNOMWhITldOa1JuZ3dXRWhTWTJSSFduQmpiazR3VWtkR01GbFdValZqUjFWblVGTkNNR1ZZUW14UE1YaDFXRWhTWTJSR2VEQm1WbmgxV0VoU1kyUklNV05pYkhoMVdFaFNZMlJET0haSlJUbDVTVWR3TVdNelVXZGtXRTVzU1VkYWNHTnVUakJKUnpsMVdsWjRkVmhJVW1Oa1IxcHdZbTFHYzFKSFJqQlpWbEkxWTBkVloxQlRRbTFoVnpWb1lrVlNhR1JIUmxWbFdFSnNTVWg0T0VsSFduQmpiazR3VWtkR01GbFdValZqUjFVM1dFYzFZMlJJTVdOaWJIaDFXRWhSZGt4NVFrcGFhVUl6V2xOQ2JXSXpWblZhUTBKb1NVZFNhR1JIUmxWbFdFSnNXRWMxWTJSRE9IWkpSbVJzU1VkR2ExcERRakJoUjFWbldrZEdNRmxXVWpWalIxVm5aRWM0WjJSSGFHeEpSM2h3WXpOUloyRlhXV2RpYlZac1drZFdhMWhITldOa1F6aDJTVWRHZFZwRFFubGFXRkl4WTIwMFoyUkhhR3hKUjA1MlkyNUtiR016UW5aaWJWSndZbTFqWjJOdFZucGpSemwxWXpKV1kySnNlREJoVjFsblMwTkNiV0ZYTldoaVJWSm9aRWRHVldWWVFteEpRMnRuWlRGNGRWaElVbU5rUjJ4dFNVTm5aMXB0YkhWWlYzaEZXVmhTYUZaSWJIZGFVMEZvVUZRd1oxcEhSakJaVmxJMVkwZFdlbGQ1UVhkSlJqQm5TMU5DTjFoSE5XTmtSbmd3V0VoU2ExbFlVbWhXU0d4M1dsaE5kV1JYTlhwaFIyeHRaRU5uWjFwdGJIVlpWM2hGV1ZoU2FGWkliSGRhVTBGd1R6RjRkVmhJVW1Oa1NERmpZbXg0TUZoSVVubGFXRkl4WTIwMFoyTnRWbnBqUnpsMVl6SldlbGQ1UW0xaFZ6Vm9Za1ZTYUdSSFJsVmxXRUpzU1VZd04xaEhOV05rU0RGalltNHhZMkpzZUhWTWVXOW5VVEpvYUdGWE5HZFpNamwxWkcxV2VXTXliSFppYmsxbldqSnNNbHBYTkdka1IyaHNTVWhLYkdOWVZteGpNMUZuV1ZjMWEwbElVbTlhVTBKMlkyMXNibUZYTldoaVEwSjVXbGhPZDJJeU5YcGFWbmgxU1VOdloxRlhlSHBpZVVKNldsaFNla2xJVW05YVUwSjVXbGhPZDJJeU5YcGFWbWhaVjBOQ2JXRlhWbk5hU0UxbllqSTBaMlJIYUd4SlIzQjRWMFZvVTBsSGJIVmpNMUpvWW0xT2JGaEhOR2RMYVRsalltMWFNV0p0VGpCaFZ6bDFTVWRHY1ZsWWFFUmlNalV5V2xoS01FdERRbnBNUTBKNVdsaE9kMkl5TlhwYVUzZG5ZVzVHV1ZOR1NYTkpSMng2VlROV2Fsa3lWbnBqZVVGd1NVaDBZMkpzZURCa2JVWjVTVWRPZG1KdVdYbE1RMEpxWkZoS2VWcFhOVEJNUTBKcVlqSTFNa3hEUWpCaVdFRnpTVWhDZVZwWVdYTllSelZqWkVaNE1Ga3lPWFZrYlZaNVpFZFdlV041UVRsSlNIUTVURVo0ZFZoSE5XTmtSbmd3VEhrNFoxWXlPWGxoZVVJellWaFNiMGxIUldkWk1qbDNaVk5DZGxwcFFtdFpXRkpvVmtoc2QxcFlUV2RoVnpSbldUSkdlbHBUUWpOYVUwSjFXbGRXYTBsSVVuWkpSekYyV2tkc2JXVlRRbkJrUTBKdFlqTkpaMWt5T1hWa2JWWjVZekpzZG1Kc2VIVllTRkpqWkVkU2FHUkhSbFZsV0VKc1kzbEJPVWxJVFhWYVIwWXdXVlpTTldOSFZucE1iazV6WVZkT2JFdERhemRZUnpWallteDRNRXg1T0dkUk0wcHNXVmhTYkVsSFRuWmlibHBzWTI1U2JHTnVUV2RpVjBaM1NVaGtjR1JIWjJkaVJ6a3pXbGhLYWxsWVRteGFRMEp5V2xoc2VsaEhOV05rUjJ4dFNVTm5aMXBIUmpCWlZsSTFZMGRXZWxkNVFYaEpSakJuUzFOQ04xaEhOV05rUm5nd1dtMDVlVWxEWjJkWk1qbDFaR2xDY0dKcFFucE1iVTUyWW01YWJHTnVVbXhqYmsxblMxTkNOMWhITldOa1JuZ3dXRWhTYW1JeU5USmFXRW93V2xoS2VsZDVRbXBpTWpVeVRHNVNkbFJIT1ROYVdFcEVXVmhPYkV0RGEyZFlVMEU1U1VoTmRWa3lPWFZrYlZaNVpFZFdlV014YzJkWk1qbDFaR2xDWkU4eGVIVllTRkpqWkVneFkySnNlREJtVm5oMVdFYzFZMlJIVGpGamJrcHNZbTVSWjFCVFFtdFpXRkpvVmtoc2QxcFlUWFZqTW1od1dtNVJiMHRVZEdOaWJIaDFXRWhSZGt4NVFrUmlNalV5V2xoS01FbElVblpKUjFab1dUSm5aMk15Vm5oa1YxWjFaRWRzYUdKRFFtdFpXRkpvVmtoc2QxcFdlSFZZU0ZJellVZHNjMXBUUVc5SlIwNHhZMjVLYkdKdVVXZExVMEkzV0VjMVkySnNlREJZU0ZKd1dtbEJiMGxJVFhWamJWWjZZMGM1ZFdNeVZrZGhWMVp6V2toT1lrbEhUakZqYmtwc1ltNVJaMWhUUVhCSlNIUmpZbXg0TUZoSVVtTmtSM0I0VjBWb1UxZDVRbnBNYmtwc1l6TkNkbUp1VG14U2JXeHNZa2RTZWxkNVFtcGtXRXA1V2xjMU1FbEdNR2RZVTBFNVNVaEtiR016UW5aaWJrNXNUekY0ZFZoSVVtTmtTREZqWW14NGRWaElVbU5rUXpoMlNVVkdkMk5IZURWSlNGSnZXbE5DYTFsWVVtaFNiV3h6WkVkV2VVbEhiRzFKU0VKNVlqTmFjRnBIVm10WVJ6VmpaRVo0TUdGWFdXZExRMEZvWTBoS2JHUnBRVzFLYVVKd1l6Rk9NVmt5VG14ak0wMW5TbWxaWjJONU5XdFpXRkpvVW0xc2MyUkhWbmxKUTJ0blpURjRkVmhJVW1Oa1JuZ3dZMjFXZW1OSE9YVmpNbFZuVUZOQ2VreHRVbWhrUjBaSFlWZDRNRnBZU1c5SlNFcHNZek5DZG1KdVRteE1RMEo2VEcxU2FHUkhSbFZsV0VKc1NVTnJOMWhITldOa1JuZ3dabFo0ZFZoSE5XTmtSbmd3WTBoS2JHUnBRVGxKUjA0eFkyNUtiR0p1VVRkWVJ6VmpaRVo0TUZrelZubGpiVloxWkVOQk9VbEhVbWhrUjBaVlpWaENiR041TlhwaFIyeHRaRU5uY0U4eGVIVllSelZqWkVaNE1HRlhXV2RMUTBKcVpGaEtlVnBYTlRCSlEydG5aVEY0ZFZoSE5XTmtSbmd3V0VoUmRreDVRbFZoUjFaNVdsTmtla2xIT1hWaVNHdG5aREk1ZVdGNVFqQmllVUpyWW5sQ2NGcHBRbXBrV0VwNVdsYzFNRWxIVW1oa1IwWlZaVmhDYkVsSGJIcEpSelYyWW1reGFHUllVblpZUnpWalpFWjRNRmhJVW5CYWFVRnZTVWRPTVdOdVNteGlibEZuVUZRd09VbEdkMmxMYkhkcFNVTnJaMlV4ZUhWWVJ6VmpaRVo0TUZoSVVtTmtSMDR4WTI1S2JHSnVVV2RRVTBKM1kyMVdNazh4ZUhWWVJ6VmpaRVo0TUZoSVVYWk1lVUpFWWpJMU1scFlTakJKU0Vwc1l6TkNkbUp1VG14SlIyeHRTVWhDZVZwWVdXZGFSMFl3V1ZaU05XTkhWV2RoV0UxblltMDVkVXhYUmpGa1J6aG5XVmMxYTBsSFVuQmFiVnBzWTI1TloxcHVTblppVTBKcVpGaEtlVnBYTlRCWVJ6VmpaRVo0TUZoSVVqbEpSMVp6WXpKVloyRlhXV2RMUTBKM1kyMVdNa2xEUlRsUVUwSmpTV2x3WTBscFFXMUthVUozWTIxV01rbERSVGxRVTBKcVpGaEtlVnBYTlRCSlEydG5aVEY0ZFZoSE5XTmtSbmd3V0VoU1kyUkRPSFpKUms1c1dsZHpaMWxUUW10aFdFcHNXVE5SWjFreU9YVmtiVlo1WkVkV2VWaEhOV05rUm5nd1dFaFNZMlJIVG5aaWJsbG5VRk5DYW1JeU5USmFXRW93V2xoS2VsZDVRbmRqYlZZeVNVTnpaMWhEU1dkWVEwbG5TM2xDYW1SWVNubGFWelV3U1VZd1oyWklkMmRaTWpsMVpHMVdlV1JIVm5sak1YTm5XRU5KY1VsR2QybEpRM05uV1ROV2VXTnRWblZrUTBKa1R6RjRkVmhITldOa1JuZ3dXRWhTWTJSRE9IWkpSV3h0U1VjMWRtSnRWV2RhYlRreFltMVJjMGxJVG14YVYzTm5XVk5DZDFsWGJIbFlSelZqWkVaNE1GaElVbU5rUjJ4dFNVTm5aMGxYVG5aaWJsbG5TMU5DTjFoSE5XTmtSbmd3V0VoU1kyUkdlREJhYlRsNVNVTm5aMWt5T1hWa2FrbG5ZVmMwWjFreU9YVmtiVlo1WkVkV2VXTjVRWEJKU0hSallteDRkVmhJVW1Oa1JuZ3dXRWhTWTJSR2VEQk1lVGhuVTFkWloxa3lPWFZrYWtsbllqTldNR05JVmpCamVVSnFaRmhLZVZwWE5UQllSelZqWkVaNE1GaElVbU5rUm5nd1dFaFNNR0pZUVdkUVUwSnFZakkxTWsxcE5YcGpSM2h3WkVObloxaERTV2RZUTBsblMxUjBZMkpzZURCWVNGSmpaRVo0TUZoSVVtTmtSMnh0U1VObloyUkhNWGRYZVVGNFNVWXdaMUJVTURsSlIwNHhZMjVLYkdKdVVXZExVMEkzV0VjMVkySnNlREJZU0ZKalpFWjRNRmhJVW1Oa1JuZ3dUSGs0WjFOWFdXZGpTRXBzWkdsQ2FsbFhOR2RaYlZWbldUSTVkV1J0Vm5sa1IxWnJTVWhTZGtsSFJtcFpNbFozWkVkV2EwbEhiSFZqU0ZZd1dFYzFZMlJHZURCWVNGSmpaRVo0TUZoSVVtTmtSMDUyWW01WloxQlRRbXBpTWpVeVdsaEtNRnBZU25wWGVVSjNZMjFXTWtsRGMyZFlRMGxuV0VOSlowdDVRakJpV0VKaVNVUkJaMWhUUW1SSlNIZzRXRWMxWTJSR2VEQllTRkpqWkVaNE1GaElVbU5rUm5nd1dUSTVkV1J0Vm5sa1IxWjVZekZ6WjFoRFNYRkpSbmRwU1VOeloyUkhNWGRYZVVGM1NVWXdaMWhVZEdOaWJIZ3dXRWhTWTJSR2VEQllTRkpqWkVaNE1HRlhXV2RMUTBKcVlqSTFNa2xEYTJkbE1YaDFXRWMxWTJSR2VEQllTRkpqWkVaNE1GaElVbU5rUm5nd1RIazRaMUV5T1hWYVIxWjFZekpWWjFwWVJqRmhXRnBvWWtkV2RWa3lWV2RaTWpsMVpHMVdlV1JIVm5sak1YaDFXRWhTWTJSR2VEQllTRkpqWkVaNE1GaElVbU5rUjJ4dFNVTm5aMWt5T1hWa2FVRTVVRlF3WjJSSVNqRmFVMEZ3U1VoMFkySnNlREJZU0ZKalpFWjRNRmhJVW1Oa1JuZ3dXRWhTWTJSSFRuWmlibGxuVUZOQ2FtSXlOVEphV0Vvd1dsaEtlbGQ1UW1waU1qVXlUV2xDWkU4eGVIVllSelZqWkVaNE1GaElVbU5rUm5nd1dFaFNZMlJHZURCTWVUaG5WRE5TYjFwWVNqTmhXRTVzVEVOQ2NHSnVUbXhqYmxGblpFZG9iRWxIYkhWa1IxWjVZbGRXYTJGWFJqQmFVMEpyV1ZoU2FGWkliSGRhVm5oMVdFaFNZMlJHZURCWVNGSmpaRVo0TUZoSVVtTmtTREJuV2xkNGVscFRRbkJhYVVGdlNVZE9kbUp1V214amJsSnNZMjVPWWtsSFRuWmlibGw1U1VZd1owbFVNRGxKU0ZKNVpGZFZaMHRUUWpkWVJ6VmpaRVo0TUZoSVVtTmtSbmd3V0VoU1kyUkdlREJZU0ZKcVpGaEtlVnBYTlRCSlJEQm5aRWN4ZDFkNVFYZEpSakEzV0VjMVkyUkdlREJZU0ZKalpFWjRNRmhJVW1Oa1JuZ3dXRWhTYTFsWVVtaFdTR3gzV2xoTmRXUlhOWHBoUjJ4dFpFTm5aMlJITVhkWGVVRjRTVVl3WjB0VWRHTmliSGd3V0VoU1kyUkdlREJZU0ZKalpFWjRNRmhJVWpsWVJ6VmpaRVo0TUZoSVVtTmtSbmd3V0VoU1kyUkdlREJaYmtwc1dWZHpOMWhITldOa1JuZ3dXRWhTWTJSR2VEQllTRkpqWkVneFkySnNlREJZU0ZKalpFWjRNRmhJVW1Oa1NERmpZbXg0TUZoSVVtTmtSbmd3V0VoU09WaEhOV05rUm5nd1dFaFNZMlJJTVdOaWJIaDFXRWhTWTJSR2VEQllTRkYyVEhsQ1FtTklRbk5sVTBKcVlqSTFNbHBZU2pCYVdFbG5TMGRzYlVsSE5YWmtRMEpvWW1sQ2JHTllWbkJrYlVaeldsYzFhbHBUYkdOaWJIZ3dXRWhTWTJSR2VEQmhWMWxuUzBOQ2FtSXlOVEpKUTBVNVVGTkNNR051Vm14SlEydG5aVEY0ZFZoSE5XTmtSbmd3V0VoU1kyUkdlREJNZVRoblZsYzFjMXBZVG5wSlIxWjVZMjA1ZVdONVFtaGpiVlZuV1ZkNGMySXpaR3hhUTBJd1lubENhV1JYU21saVIxVnpTVWRPYUdSSFRtOUpSMFoxV2tOQ2VWcFlVakZqYlRSblpFZG9iR0pXZUhWWVNGSmpaRVo0TUZoSVVtTmtSMnh0U1VObloxa3lPWFZrYVVGdFNtbENla3h1VW05amJUa3pZM2xCY0VsSWRHTmliSGd3V0VoU1kyUkdlREJZU0ZKalpFaEtiR016UW5aaWJrNXNTVVF3WjFreU9YVmthV2RuWTIxV2VtTkhPWFZqTWxWblMxUjBZMkpzZURCWVNGSmpaRVo0TUZoSVVqbEpSMVp6WXpKVloyVXhlSFZZU0ZKalpFWjRNRmhJVW1Oa1JuZ3daRWhLTlVsSWRHTmliSGd3V0VoU1kyUkdlREJZU0ZKalpFWjRNR050Vm5walJ6bDFZekpWWjFCVFFtcGlNalV5UzBOQ2VWcFlUbmRpTWpWNldsTkJjRTh4ZUhWWVNGSmpaRVo0TUZoSVVtTmtSbmd3WmxOQ2FsbFlVbXBoUTBGdlNVZFZaMHRUUWpkWVJ6VmpaRVo0TUZoSVVtTmtSbmd3V0VoU1kyUklTbXhrU0ZaNVltbENOMWhITldOa1JuZ3dXRWhTWTJSR2VEQllTRkpqWkVaNE1HTXpVbWhrUjFVMlNVWjNhV05IUm5sak1sWjVXbGhLZVdJelNtTkphWGhqWW14NE1GaElVbU5rUm5nd1dFaFNZMlJHZURCWVNGSnNZMjVLZG1OcWIyZFpNamwxWkdsQkwwbEhWV2RQYVVKalNXczFka2xIVG5aaWJscHNZMjVPY0dJeU5HZGFia3AyWWxOQ1kwbHBRWEpKU0VKNVdsaFpaMHQ1UW1OSmFVSXdZbmxDWTBscFFYSkpSMDR4WTI1S2JHSnVVbU5pYkhnd1dFaFNZMlJHZURCWVNGSmpaRVo0TUdaVWRHTmliSGd3V0VoU1kyUkdlREJZU0ZKalpFZ3hZMkpzZURCWVNGSmpaRVo0TUZoSVVqbFlSelZqWkVaNE1GaElVbU5rU0RGallteDRNRmhJVW1Oa1NERmpZbXg0TUZoSVVqbFlSelZqWkVneFkySnNlSFZZU0ZKNVdsaFNNV050TkdkbGVVSjZaRWRHTUZwVWIyZFlRMHA2WkZkT2FscFlUbnBZUTBselNVZFNhR1JIUlRaSlNFcHNZek5DZG1KdVRteEpTREEzV0VjMU9WaEhOV05pYlhCU1pGZFdlV1ZUTld4bFNGSnNZbTFSYjBsSWRHTmliSGgxV0VoUmRreDVRa1JpTTFaMVpFZFdlVWxIV25aamFVSnZZako0YTJGWE5XNUpTRkp2V2xOQ2RXUlhNV2xhV0VsbllqSlpaMWxYVGpCaFdGcHNTVWhHTVZwWVNuQmFXRTVqWW14NE1GbFhUakJoV0Zwc1QybEJkMHhHZUhWWVJ6VmpaRU00ZGtsRmVHaGpNMUYwVkZjNWEyRlhXbkJhVjFGbllVZFdhRnBIVm5sSlIwNW9XVEpvYkVsSFduWmphVUoxV2xob01FbElTbXhqV0Zac1l6TlNZMkpzZURCaVIwWjZaRVV4ZGxwSGJHMWhWMVpyVDJsQ04yWlRlR05pYkhnd1dsaFNhRnA2YjJkbE16QnpXRWMxWTJKc2VEQlpWM0JvWlVaT2JHUklVbkJpYldSNlQybENOMWhITldOa1JuZ3daRmhLYzA5cFFuTmlNazVvWkVkc2RtSnBOVzlqYlZadFRFWjRkVmhJVW1Oa1NGSTFZMGRWTmtsR2QybFNNRlpWV0VOSmMxaEhOV05rUm5nd1lWaE9UV0l5VG1oaVJHOW5ZMjE0ZGxreVJuTlZTRXAyWkVjNWFtSXlkM1ZrUjFaNlpFTm5aMkpIT1dwWldGSndZakkwZFdOSVNuWmtSemxxWWpKM1owdFRlR05pYkhnd1dFaFNibUpIT1dsWlYzYzJTVWhTZVdSWFZYTllSelZqWkVaNE1HTklTblpaTWxaNll6QlNhR1JIUlRaSlNGSjVaRmRWYzFoSE5XTmtSbmd3V1ZoT05XSnRUVFpKU0ZKNVpGZFZjMWhITldOa1JuZ3dXVEk1ZFdSSFZuVmtSbEkxWTBkVk5rbEdkMmxaV0VKM1lrZHNhbGxZVW5CaU1qUjJaVU14TTJRelkzUmFiVGw1WWxNeE1XTnRlR3hpYlU1MldrZFdhMDk1UW1waFIwWjVZekpXTUZCV1ZsVlNhVEEwV0VOSmMxaEhOV05pYkhnd1dFaFJka3RzZUhWWVNGSmpaRWhTY0dKWFZuWmtXRkUyU1VSQmMxaEhOV05rUm5nd1drZEdNRmxVYjJkaWJsWnpZa040WTJKc2VEQllTRkpyV1ZoU2FGWkliSGRhVkc5blltNVdjMkpEZUdOaWJIZ3dXRWhTTVdNeVZubGliVVowV2xSdloySnVWbk5pUTNoallteDRNRmhJVW5kWldFNTZaREk1ZVZwRWIyZGlibFp6WWtONFkySnNlREJZU0ZKcVdWZE9iMXBVYjJkaWJsWnpZa040WTJKc2VEQllTRkl3WVVoS2RtUXpUVFpKUjFwb1lraE9iRXhHZUhWWVNGSmpaRWhTZVZsWFVuQmtSMngyWW0xR2MwOXBRbTFaVjNoNldsTjRZMkpzZURCWVNGSnZXbGRHYTFwWVNucFBhVUkzWmxONFkySnNlREJZU0ZGeFRERjRkVmhITldOa1JuZ3dXVmRPYWxwWVFqQmplbTluWlRGNGRWaElVbU5rUm5nd1dFTkpjVmhEU1RaSlIwWnpZa1pTTldOSFZucE1SbmgxV0VoU1kyUkdlREJrUjFZMFpFUnZaMWhEU2pCYVdHZ3dURE5DYzFsWGJIVllRMGx6V0VjMVkyUkdlREJZU0ZKdlpFY3hjMDlwUW1OSmJsSnNaVWhSZG1GSVVuUmlSbmRwVEVaNGRWaElVbU5rUm5nd1pVY3hjMDlwUW1OSmJVWjNZMGQ0Y0ZreVJqQmhWemwxVEROb2RHSkRkMmRrUjFZMFpFTTVOR0pYZUdOSmFYaGpZbXg0TUZoSVVtTmtSM0I2WWpJME5rbEdkMmxaV0VKM1lrZHNhbGxZVW5CaU1qUjJZVzVPZG1KcGQyZGtSMVkwWkVNNWNWbFlXbWhqTWs1NVlWaENNRmhEU21OaWJIZ3dXRWhTT1V4R2VIVllSelZqWkVaNE1Ga3lPWFZrUjFaMVpFaE5Oa2xJZEdOaWJIZ3dXRWhTWTJSSWFIUmlSRzluVERGNFkxbHVhSFJpUm5oaldXazRjMWhITldOa1JuZ3dXRWhTYjJSSE1YTlBhVUYyV0VaNGFXRklVblJpUXpoeldFYzFZMlJHZURCWVNGSnhZekk1ZFU5cFFYWllSbmhwWVc1T2RtSnNlR05aYVRsallteDRNRmhJVWpsTVJuaDFXRWMxWTJSR2VEQmpiVlo2WTBjNWRXTXlWa2RoVjFaeldraE5Oa2xJZEdOaWJIZ3dXRWhTWTJSSWFIUmlSRzluV0VOS2VWcFlUbmRpTWpWNldsWm9UbFJHZDJsTVJuaDFXRWhTWTJSR2VEQmtSMVkwWkVSdloxaERTbmxhV0U1M1lqSTFlbHBXVW14bFNGSmpTV2w0WTJKc2VEQllTRkpqWkVkd2VtSXlORFpKUm5kcFkyMVdlbU5IT1hWak1sWkxWVEE1VDFoRFNtTmliSGd3V0VoU09VeEdlSFZZUnpWalpFWjRNRXg1T0dkU1IwWXdXVk5DYW1JeU5USmFXRW93V2xoS2VsaEhOV05rUm5nd1RIazRaMU15VmpWamVVSjZXbGhDYUdOdFJqQmFVMEo2WWpOV2VWa3lWV2RMUnpsNVNVZE9hR1JIVG05WlYzaHpTVVozYVV0c2QybExVMEpvWW0xUloxcEhWbnBrUjJ4MVdWaFNjR0l5Tkdka1NHeDNXbGhOWjJReWJEQmhRMEpvU1VoT2NHSnRaSE5hVTBKNlkwZEdhbHBXZUhWWVNGSmpaRWRPZG1KdVdteGpibEpzWTI1Tk5rbElkR05pYkhoMVdFaFNZMlJHZURCTWVUaG5VVEk1ZFdSdFZubGtRMEpvWW01c01HRkhiSFZhZVVJd1lubENNRnBZYURCWVJ6VmpaRVo0TUZoSVVtTkphVzluWkVkV05HUkdkMmxQYVVKVVpFaEtjR0p0WTNOWVJ6VmpZbXg0TUZoSVVtTmtRemgyU1VaU2JHVklVV2RrUnpobllVaFNkR0pEUVc5a1NFb3hXbE5CT1VsSE5YWkpTRko1V1ZjMWVscHRPWGxpVjBZd1lWYzVkVXRXZUhWWVNGSmpaRVo0TUZoRFNqQmFXR2d3U1Vkb01HSlhlR05KYW05blpFaEtNVnBUZUdOaWJIaDFXRWhTWTJSR2VEQk1lVGhuVWxoYWFHSklWbWhrUjFWblpFZFdOR1JEUW1oamVVSm9TVWR3ZW1JeU5HZGFXR2gzWTIxV2VtTXliSFppYkhoMVdFaFNZMlJHZURCWVEwb3dXbGhvTUVsSGNIcGlNalZqU1dwdloxTnNUbEJVYVRWM1dWaEtlbHBUZUdOaWJIaDFXRWhTWTJSR2VEQk1lVGhuVlVkR2VXTXlWV2RrUjFZMFpFTkNhR041UWpSaVYzaGpZbXg0TUZoSVVtTmtSbmRwWkVkV05HUkRRalJpVjNoalNXcHZaMkZzUmpGYVdFbzFURzVDYUdOdVRteFhSVEZOV0VjMVkyUkdlREJtVTNoallteDRkVmhJVW1Oa1F6aDJTVVZhZG1OcFFuWmpTRkp3WWpJMWVrbElVbTlaV0ZGbll6Sm9kbVJYZUd0aWFXUXdTVWRLYkVsSFVteGFXRUZuV2xob01GcFhOV3RhVjFFMldFYzFZMlJHZURCTWVUaG5aVmM1TVVsSFRtaGlhVUpvV2tkUloyVlhPVEZqYVVKMlpESTBaMWt6Vm5wa1J6bDBTVWM1ZDJSSGJIWmliazFuWVVkV2VWcFRRbkJhYkhoMVdFaFNZMlJET0haSlIwWjFXa05DTTJGSFZuVkpTR3gyWkZOQ2FtTnRWbWhrUjFWbllqSTFiRWxJVW05WldGRm5ZekpvZG1SWGVHdGlhV1F3U1VkS2JGaEhOV05rUm5nd1RIazRaMXBIVm14alEwSnNaVWhTYkdKdFVteGFRMEZ2WXpKV2JFbEhSbkZaV0doR1pVaFNiR0p0VVhCWVJ6VmpaRVo0TUZwdGVHaGtSVGwzWkVkc2RtSnVUVFpKU0hSallteDRNRmhJVW1Oa1NGWjVZa1J2WjJSSVNqRmFVM2hqWW14NE1GaElVbU5rUjA1MlltNVNiR1ZJVVRaSlNGSjVaRmRXWTJKc2VEQllTRkk1V0VjMVkyUklNSE5ZUnpWallteDRNRXg1T0dkUk0wcHNXVmhTYkdONVFtaEpSMW94WWtkM1oxcHRlR3hhUjJSc1drTkNlbHBZVWpCaFZ6VnVZM2xDZGxsdGNHeFpNMUZuWVZjMU1HSjVRakJaV0VwdVdsaFNZMkpzZURCTWVUaG5aREpzTUdGRFFtbGlNMUp2U1VkR2NWbFlhRlJhV0ZJd1lWYzFibU41UW1oaWJWRm5ZekpXTUdSSGJIVmFNMDFuV20xc2JHSkhVbnBNYkhoMVdFaFJka3g1UWtwYWFVSXdXVmhLYmxwWVVXZGhXRTFuWWpJeGNHUklVbXhhUTNkblpETktjR1JIVm5wSlIyeDFaRWM0WjFsWGNHaGxSazVzWkVoU2NHSnRaSHBNYkhoMVdFaFNhR0Z0UmpSVk1sWXdaRmhCTmtsSFdqRmliVTR3WVZjNWRVdERRakJaV0VwdVdsaFJjMGxJVG14a1NGSndZbTFrZWtsRGEyZGxNWGgxV0VoU1kyUklTbXhrU0ZaNVltbENlbHBZVWpCaFZ6VnVZM2xCTDFoSE5XTmliSGd3V0VoU1kyUkRPSFpKUlVveFlWZDRhMkZYTlc1SlIwVm5ZekpXTUdSSGJIVmFNMDFuWWpKS2NWcFhUakJZUnpWalpFWjRNRmhJVW1oaGJVWTBVbGhvTUZwWE5XdExRMEpvWVcxR05GSllhREJhVnpWclMwTkNNRmxZU201YVdGRnpTVWR3VW1SWFZubGxVelZvWVcxR05GVXlWakJrUjJ4MVdqTk5aMHRUZDJkak1sWXdaRWRzZFZvelRXZExVMEUyV0VjMVkySnNlREJZU0ZKalpFTTRka2xGVmpSa1IxWjFXa2RzZFZwNVFtaGhiVVkwVlRKV01HUkhiSFZhTTA1allteDRNRmhJVW1Oa1IwWnhXVmhvUm1WSVVteGliVkZ2U1Vkd1VtUlhWbmxsVXpWb1lXMUdORlV5VmpCa1IyeDFXak5OYzBsSVVtaGpiV1JzWkVOQmNFOHhlSFZZU0ZJNVRFWjRkVmhITldOa1IwWnhXVmhvVVdOdFZtMWhWM2d3V2xoSk5rbEhSbXRhUmxKMlZVaEtiRnB0YkhOa1IxWjVZekE1ZVZaSVNtaGliazUzWWpOS01HTjVaMmRqU0Vwc1dtMXNjMlJIVm5samVVRndURVo0ZFZoSVVtaGhiVVkwVmtoS2FHSnVUbmRpTTBvd1QybENhRnBIVWxWaU1VSjVXbGRhY0dKSVVteGpiazVRWTJ4U2VWbFhOWHBqUnpsNVpFaE5iMGxJVW5sWlZ6VjZZMGM1ZVdSSVRXZExVM2hqWW14NGRWaElVWFpNZVVKT1dWZHNkVWxITVd4a1IyaDJXa1o0ZFZoSVVtaGhiVVkwVDJsQ2JXUlhOV3BrUjJ4MlltbG5aMlJZU25OTVEwSjJZMGhTY0dJeU5YcEpRMnRuWlRGNGRWaEhOV05rUm5nd1RIazRaMU5YV1dka1dFcHpTVWRzZWtsSFJuVkpSemxwWVcxV2FtUkRkMmRqTW14MFpGZDRhR1JIVldkalNFcHNURlJGZFU1VFFucGhWMlIxV1ZoU01XTnRWbU5pYkhnd1dFaFNjRnBwUVc5SlNGSTFZMGRXZGxwcFFqRmpiWGRuVUZRd09VbEdkMmxpTWtweFdsZE9NRmhEU1dkTFUwSTNXRWMxWTJSR2VEQllTRkoyWTBoU2NHSXlOWHBKUkRCblpGaEtjMDh4ZUhWWVNGSmpaRVo0TUdSWVNuTkpSREJuWkZjMWExcFhXbkJpYlZaclR6RjRkVmhJVW1Oa1NERmpZbXg0ZFZoSVVtTmtRemgyU1VWYWRtTnRUbXhKUnpsM1pFZHNkbUp1VFdka1J6aG5XVzFWWjFsWE5HZGlNa3B4V2xkT01GaEhOV05rUm5nd1lqTkNNR0ZYT1hWamVVRTVTVWM1ZDJSSGJIWmliazFuWmtoM1oyVXpNRGRZUnpWallteDRNRmhJVWpKWldFbG5aRWhLYUdKdVRuZGlNMG93VEVaNGRWaEhOV05rUm5nd1dFaFJka3g1UWxaVmEzZG5aREpzTUdGSE9URmtRMEpvWW01U2NFeFhUbWhaTW1oc1NVaENhR050Um5SWVJ6VmpaRVo0TUZoSVVtcFpWMDV2V2xaV1UxUkRlR05pYkhoMVdFaFNZMlJHZURCTWVUaG5WVzFXZW1OSE9YVmpNbFZuWVVkV2FGcEhWbmxqTVhoMVdFaFNZMlJHZURCamJWWjZZMGM1ZFdNeVZrbGFWMFpyV2xoS2VsVXpVbmxoVnpWdVRFWjRkVmhJVW1Oa1JuZ3dZMjFXZW1OSE9YVmpNbFpKV2xkR2ExcFlTbnBNUm5oMVdFYzFZMlJHZURCWVNGRjJUSGxDTUdGWE1XeGlNMVl3U1Vkb2FHSnRVbk5hVm5oMVdFaFNZMlJHZURCa1IyeDBXbGM1TVdSR1VuQmlWMVo1VEVaNGRWaEhOV05rUm5nd1dFaFJka3g1UWxaamJYZG5XVEo0YkZsWE5URmpRMEl5V1ZoS1kySnNlREJZU0ZKalpFaFdlV0pGUm5WWk1taDJZMmw0WTJKc2VIVllTRkpqWkVaNE1FeDVPR2RWYlZaNFpGZFdlbVJEUW5wa1IwWXdXbE5CYjFsdFZtcGlNakZzWTNsQ2JWbFhlSHBhVTBJeFkwYzVkVWxJVG14aWJWRm5XVmMxYTBsSVVubGtWMVZuWkZoQ2RtSnBRbXBpTWpGM1lrZFdNR0ZYT1hWTFZuaDFXRWhTWTJSR2VEQlpNamwwWTBkNGJHUkhWbXRNUm5oMVdFYzFZMlJHZURCWVNGRjJUSGxDVldKNVFuSmliVGt6U1Vkc2JVbEhaSE5pTWtwb1lrTkNiR1J0Vm5Wa1NFMW5XVmhLYkVsSVVuWkpSMHBzU1VkU2NHTXpRbWhrUjA1dldsZFNZMkpzZURCWVNGSmpaRWRhY0dOdFZraGlSemxwV1ZkNGVreEdlSFZZUnpWalpFWjRNRmhJVVhaTWVVSk5Zakk1ZDBsSVdtaGpiV3hvV1cxNGJGaEhOV05rUm5nd1dFaFNjRXhHZUhWWVJ6VmpaRVo0TUZoSVVYWk1lVUl4WW0xT2FGa3lhR3hhUTBKM1dWaEtNRWxIT1cxSlNGSnZXbE5DTVdOdGVHTmliSGd3V0VoU1kyUklWblZaTWtacVlVZFdhMHhHZUhWWVJ6VmpaRVo0TUZoSVVYWk1lVUpFWTIxV2FHUkhWV2RrUjJoc1NVZGFjR0p0Um5OSlJ6bDNaRWRzZG1KdVRXZGlNa3B4V2xkT01GaEhOV05rUm5nd1dFaFNla2xFTUdkaGJFWXhXbGhLTlV4dFJuRlpXR2hVV2xoU01XTkRaMmRsTXpCelNVYzVkMlJIYkhaaWJrMW5TMU40WTJKc2VIVllTRkpqWkVaNE1FeDVPR2RSTWtaellrZEthRmt5ZEhwSlIwNTJZbTVTYkdWSVVtTmliSGd3V0VoU1kyUkhUbWhpUjNocFdWZE9jbEV5T1hWa1IxWTBaRU5CT1VsSVRYVlpNamwxWkVkV05HUkRRamhtUTBKNlRFWjRkVmhITldOa1JuZ3dXRWhSZGt4NVFrUmlNalV3V2xob01FbEhXblpqYVVKdVlrYzVhVmxYZDJkYVdGcHNZbTVTZWtsSGJIcEpSMDVvWWtkNGFWbFhUbkpSTWpsMVpFZFdOR1JEUW5CYWFVSndaRU5DY0dONVFtaEpSVkpRVkZOQ2RXSXlVbXhKUnpsNVNVZHdVbVJYVm5sbFUwSnFZako0YzFwWFRqQmhWemwxV0VjMVkyUkdlREJZU0ZKdVlrYzVhVmxYZUVaa2JWWjFaRVZPZG1KdVVteGxTRkZuVUZOQ2VreHRUblppYmxKc1pVaFJaMHBwV21OaWJIZ3dXRWhTWTJSR2VEQkxRMEpxV1ZkNGMxbHRSbXBoTUU1MlltNVNiR1ZJVVhWaWJUbHJXbFpTTldOSFZXZG1TSGRuV1RKR2MySkhTbWhaTW5SRVlqSTFNRnBZYURCTWJYQjRaRmRXZVdWVFFYQkpSRGxqWW14NE1GaElVbU5rUm5nd1dFaFNjVlZZVm14amJtdHZTVWRPYUdKSGVHbFpWMDV5VVRJNWRXUkhWalJrUTBGd1NVUndZMkpzZURCWVNGSmpaRVo0TUZoSVVuRlZXRlpzWTI1cmRWcFlXbXhpYmxGeldFYzFZMkpzZURCWVNGSmpaRU00ZGtsRlVteGFiVlo1WTIxV2EyTXhlSFZZU0ZKalpFWjRNRnBIVm0xYVdFcDVXbGRSWjFCVFFuRlZXRlpzWTI1cmRWSkhWbTFhV0VwNVdsZFJiMHRUZUdOaWJIZ3dXRWhTWTJSSFRuWmlXRUp6V2xoU2JGSkhWbTFhV0VwNVdsZFJaMUJUUW5GVldGWnNZMjVyZFZFeVJuTmlSMHBvV1RKMGVrdERRbU5KYlRsMVdUSlZaMkpYVm5SaU0wbzFXRU5KWjB0VGVHTmliSGgxV0VoU1kyUkdlREJNZVRoblZUTlNhR1JJVm5wTVYxSnNZMGRXZFZwSFZuVmtRMEpxV1ZkNGMxbHRSbXBoTTA1allteDRNRmhJVW1Oa1NFNHdXVmhTTVdNd1RuWmFSMVZuVUZOQ2VreHVUakJaV0ZJeFl6Qk9kbHBIVldkbVNIZG5aVE13YzFoSE5XTmliSGd3V0VoU1kyUkRPSFpKUldoc1dWZFNiR051VFdkTFNGSnZXbGhyWjFsWVNteEpTRTVzWW01UloxbFhlSE5KUjBZd1NVYzVkVmt5VlhCWVJ6VmpaRVo0TUZoSVVubGFXRVl4V2xoT01GTkhWbWhhUjFaNVkzbEJPVWxJZERsTVJuaDFXRWhTWTJSR2VEQmpiVlo0WkZkV2VtUkZhR3haVjFKc1kyNU9UMWxYTVd4amVVRTVTVWgwT1V4R2VIVllSelZqWkVaNE1GaElVWFpNZVVKRldsZGFhR1JYZURCSlIwWnBZak5LTUVsSE1XeGpNMDVvV2pKV1kySnNlREJZU0ZKalpFaE9NR05yUm1saU0wb3dTVVF3WjFoRFNtcFpWelZxV2xkNGJGcEdkMmxNUm5oMVdFYzFZMlJHZURCWVNGRjJUSGxDUjFsWGRHeEpTR2h2WTJ4NGRWaElVbU5rUm5nd1lXNUdXVk5HU1dkUVUwSTNXRWMxWTJSR2VEQllTRkpqWkVoS2JGbFhValZWTTFKb1pFZFZOa2xFUVhOWVJ6VmpZbXg0TUZoSVVtTmtSbmd3VEhrNFoxRnVWbkJpUjFKNlNVZG9iRmxYVW14amJrMW5ZVWRHZW1GSVVtaFpiWGhzU1Vkc2JVbEhOV3hhVjFKc1drWjRkVmhJVW1Oa1JuZ3dXRWhTYmxwWVVsTmFXRTUzWWpJMWVscFZhR3haVjFKc1kycHZaMXB1Vm5WWk0xSndZakkwYjBsSGRHeGxVMEZ3U1VoMFkySnNlREJZU0ZKalpFWjRNRmhJVWpKWldFbG5ZbGRHTUZreVp6ZFlSelZqWkVaNE1GaElVbU5rUm5nd1lWZFpaMHREUW1waU1qRjNZa2RXTUZwWFVXZExVMEkzV0VjMVkyUkdlREJZU0ZKalpFWjRNRmhJVW5CYWFVRnZTVU5HZVZwWVRuZGlNalY2V2xWb2JGbFhVbXhqYmsxblMxTkNOMWhITldOa1JuZ3dXRWhTWTJSR2VEQllTRkpqWkVoS2JHTXpRblppYms1c1UwZFdhRnBIVm5samVVRTVTVWgwT1U4eGVIVllTRkpqWkVaNE1GaElVbU5rUm5nd1dFaFNNMkZIYkhOYVUwRnZTVU5uWjJKWFJqQlpNbWRuVUZOQ2VXRkhWbWhhUjFaNVkzazFiR1ZIVm1wTFEwSjVXbGhPZDJJeU5YcGFWV2hzV1ZkU2JHTnVUbFJrU0Vwd1ltMWpaMHRUUVhCSlEydG5aVEY0ZFZoSVVtTmtSbmd3V0VoU1kyUkdlREJZU0ZKalpFaEtiR016UW5aaWJrNXNVMGRXYUZwSFZubGpNWE5uWWxkR01Ga3lhR0pKUkVWbldGTTFNR0l3ZUhaa01sWjVVVEpHZWxwVFozQkpSakJuVUZOQ2RGbFlVbXBoUm5OblRXbENaRTh4ZUhWWVNGSmpaRVo0TUZoSVVtTmtSbmd3V0VoU09WaEhOV05rUm5nd1dFaFNZMlJHZURCWVNGSTVXRWMxWTJSR2VEQllTRkpqWkVaNE1GaElVblJaV0ZKcVlVTkJPVWxJU214ak0wSjJZbTVPYkZOSFZtaGFSMVo1WXpGeloyRXlWalZNYmxKMlZFYzVNMXBZU2tSWldFNXNTME5yWjFoVWRHTmliSGd3V0VoU1kyUkdlREJZU0ZJNVdFYzFZMlJHZURCWVNGSmpaRVo0TUdOdFZqQmtXRXAxU1VjeGFHUkhUbTlKUkRBNVNVYzFNV0pIZDJkUWVVSjFaRmQ0YzBsRWIyZGlWMFl3V1RKbk4xaEhOV05rUm5nd1dFaFNZMlJJTUhOWVJ6VmpZbXg0TUZoSVVtTmtSbmd3VEhrNFoxVnRSak5KU0U0d1kyMXNkVm94ZUhWWVNGSmpaRVo0TUZoSVVtNWFXRkpDWWtkNFUxcFlUbmRpTWpWNldsVm9iRmxYVW14amJrMDJTVWRhTVdKdFRqQmhWemwxUzBOcloyVXhlSFZZU0ZKalpFWjRNRmhJVW1Oa1NFcHNaRWhXZVdKcFFtcGlNakYzWWtkV01GcFhVV2RRZVVKNVdsaE9kMkl5TlhwYVZXaHNXVmRTYkdOdVRsUmtTRXB3WW0xalowOXBRblZrVjNoelR6RjRkVmhJVW1Oa1JuZ3dXRWhTT1V4R2VIVllSelZqWkVaNE1GaElVbU5rUXpoMlNVVk9hRmt5YUd4amVVSXdZVWRWWjJGSFZtaGFSMVo1V0VjMVkyUkdlREJZU0ZKalpFaE9iR1JHU214aldGWnNZek5TU1ZwWFJtdGFXRWsyU1VkYU1XSnRUakJoVnpsMVMwTkNkVmxYTVd4TVEwSXlXVmQ0TVZwVFFYQkpTSFJqWW14NE1GaElVbU5rUm5nd1dFaFNjRnBwUVc5SlIwNTJZbGhDYzFwWVVteGFRMEU1VUZOQ2RXUlhlSE5KUTJ0blpURjRkVmhJVW1Oa1JuZ3dXRWhTWTJSR2VEQmliVVowV2xOQk9VbElTbXhqV0Zac1l6TlNTVnBYUm10YVdFcDZWRzFHZEZwWVRtSkpSelZvWWxkVmRXUkhPVTFpTTJSc1kydE9hR015Vlc5TFUwSmtTVVF4WTJKc2VEQllTRkpqWkVaNE1GaElVbU5rUm5nd1kyMVdlR1JYVm5wa1JXaHNXVmRTYkdOdVRrOVpWekZzWXpGeloySnRSblJhVXpVd1lqQjRkbVF5Vm5sUk1rWjZXbE5uY0VsR01HZG1TSGRuWW0xR2RGcFVkR05pYkhnd1dFaFNZMlJHZURCWVNGSmpaRWhLYkdOWVZteGpNMUpKV2xkR2ExcFlTbnBYZVVKMVdWY3hiRWxHTUdkUVUwSXlXVmQ0TVZwVWRHTmliSGd3V0VoU1kyUkdlREJZU0ZJNVdFYzFZMlJHZURCWVNGSmpaRVo0TUdOdFZqQmtXRXAxU1VoU2IyRllUVGRZUnpWalpFWjRNRmhJVW1Oa1NEQnpXRWMxWTJKc2VEQllTRkpqWkVaNE1FeDVPR2RVTTFwc1kyNUtjRnBIVm5wSlNFcHNZek5DZG1KdVRteEpSMDUyWW01U2JHSnVVWFJrU0d4M1dsTkNiMXBYUm10YVdFcGpZbXg0TUZoSVVtTmtSbmd3WWpOYWJHTnVTbkJhUjFaT1lWY3hiRlpJYkhkYVZHOW5XbTVXZFZrelVuQmlNalJ2U1VoU05XTkhWV2RMVTBJM1dFYzFZMlJHZURCWVNGSmpaRVo0TUdGWFdXZExRMEpxWWpJeGQySkhWakJhVjFGblVGUXdaMkp1Vm5OaVEwRndTVWgwWTJKc2VEQllTRkpqWkVaNE1GaElVbU5rU0UxMVlsZHNkRnBXVWpWalIxVm5VRk5DTUdWWVFteFBNWGgxV0VoU1kyUkdlREJZU0ZKalpFZ3hZMkpzZURCWVNGSmpaRVo0TUZoSVVubGFXRkl4WTIwMFoyUkhhSEJqZW5SallteDRNRmhJVW1Oa1JuZ3dabE40WTJKc2VIVllTRkpqWkVaNE1GaElVWFpNZVVKVVpFZEdNR1JZVFhSYVIxWjNXbGMxYTFwWE5UQkpSMDVvWWtkNGFWbFhUbkpqTVhoMVdFaFNZMlJHZURCWVNGSjZaRWRHTUdSWVRrUmlNbEpzVDJsQ2JXUlhOV3BrUjJ4MlltbG5aMkpYUm5kSlEydG5aVEY0ZFZoSVVtTmtSbmd3V0VoU1kyUklXbWhqYVVKcVlqSlNiRTh4ZUhWWVNGSmpaRVo0TUZoSVVtTmtSMnh0U1VObloySlhSbmRKUTJ0blpURjRkVmhJVW1Oa1JuZ3dXRWhTWTJSR2VEQmhWMWxuUzBOQ2FtSXlNWGRpUjFZd1dsZFJaMHRUUWpkWVJ6VmpZbXg0TUZoSVVtTmtSbmd3V0VoU1kyUkdlREJNZVRoblVsaG9iRmt6VmpCYVUwSXdZVWRWWjFsWVFuZGpiVGwzWTIxc2FHUkhWV2RaTWtaellrZEthRmt5ZEhwWVJ6VmpaRVo0TUZoSVVtTmtSbmd3V0VoU1kyUkhjSGhYUldoVFRHMUdjMlF5UmpWamVXZG5ZbGRHZDFkNVFuRmpWbWhKVldrMWVtUkhSakJrV0UxbldGTkJjRTh4ZUhWWVNGSmpaRVo0TUZoSVVtTmtSbmd3WmxOQ2JHSklUbXhKU0hSallteDRkVmhJVW1Oa1JuZ3dXRWhTWTJSR2VEQllTRkYyVEhsQ1RWbFljRFZNVjBacldrTkNNR0ZIVldkaWJWWXpTVWRPYUdKSGVHbFpWMDV5WTNsQ2NHSnBRbWhKU0dSb1pWTkNNR0ZIUmpCSlNFSjVXbGhPYkdOdVdteGplVUoyWWtkUloySXlOV3hqTVhoMVdFaFNZMlJHZURCWVNGSmpaRVo0TUZoSVVtMWlNMGxuUzBOQ2FtSXlVbXhKUjJ4MVNVY3hhR05EUVhCSlNIUmpZbXg0TUZoSVVtTmtSbmd3V0VoU1kyUkdlREJZU0ZKNlpFZEdNR1JZVGtSaU1sSnNWM2xDYW1JeVVteEpSakJuVUZOQ1lrbElUakJaV0ZJeFl6Qk9kbHBIVm1KSlIwNTJXa2RWWjFoVGQyZGlWMFozVjNsQ2FtSXlVbXhKUmpCbldGUjBZMkpzZURCWVNGSmpaRVo0TUZoSVVtTmtSbmd3WmxaNGRWaElVbU5rUm5nd1dFaFNZMlJHZURCbVZuaDFXRWhTWTJSR2VEQllTRkpqWkVneFkySnNlREJZU0ZKalpFWjRNRmhJVW5sYVdGSXhZMjAwWjJSSGFIQmplblJqWW14NE1GaElVbU5rUm5nd1psTjRZMkpzZUhWWVNGSmpaRVo0TUZoSVVYWk1lVUpFV1ZjMWFscFhkMmRrUjJoc1NVaEtiR05ZVm14ak0xSmpZbXg0TUZoSVVtTmtSbmd3V1ZkS2RtTnVVVFpKUjFveFltMU9NR0ZYT1hWTFEwSjZaRWRHTUdSWVRsVmFXR2d3U1VOcloyVXhlSFZZU0ZKalpFWjRNRmhJVW1Oa1NGcG9ZMmxDYldGWE5XaGlSbEpzWlVoUloxQlRRbnBrUjBZd1pGaE9WVnBZYURCSlNIZzRTVWhPTUdOclJtbGlNMG93VHpGNGRWaElVbU5rUm5nd1dFaFNZMlJIYkcxSlEyZG5aRWhLYUdKdVRuZGlNMG93U1VOcloyVXhlSFZZU0ZKalpFWjRNRmhJVW1Oa1JuZ3daRWhLYUdKdVRuZGlNMG93VEcxR2FXSXpTakJMUTBKdFlWYzFhR0pHVW14bFNGRm5TMVIwWTJKc2VEQllTRkpqWkVaNE1GaElVamxZUnpWalpFWjRNRmhJVW1Oa1JuZ3dXa2M1ZFZwVFoyZE5RM2RuV20xc2RWbFhlRlZhV0dnd1NVTnJOMWhITldOa1JuZ3dXRWhTWTJSR2VEQmpiVll3WkZoS2RVbElVbTloV0UwM1dFYzFZMlJHZURCWVNGSmpaRWd4WTJKc2VEQllTRkpqWkVnd04xaEhOV05pYkhnd1dFaFJka3g1UWtKa1NGSm9XVEpuWjFwSFZtMWFXRXA1V2xkU2VsaEhOV05rUm5nd1drZFdiVnBZU25sYVYxRjFZMGhLZG1KWGJIcGFVMmRuWVc1R1dWTkdTV2RMVkhSallteDRkVmhJVW1Oa1F6aDJTVVZHYTFwRFFuZGpiVGt3WWpKT2RtSkRRbkJhYVVKMVlqTlJaMk5JU25aa2JXeHJXbGRSWjB0SVFubGFWMXB3WWtoU2JHTnVUV2RpVjJ4dVlVaFJaMXBZYUhkYVYwNHdTVWRzTUV0V2VIVllTRkpqWkVNNGRrbEZhR2hpYlZKeldsTkNiVmxYZUhwbFUwSXhZMjEzWjJGWE5HZGtSMmhzU1VoT2JHUklVbkJpYldSNlNVYzVhV0Z0Vm1wa1EwRnZTWHBGZDAxRWEzcFBhVUpxWWpJMWVtRllUakJhVnpWcVpWTkNNMkZZVW05SlJ6bHpXa05DZW1GWFpIVlpXRkl4WTIxVmNGaEhOV05rUm5nd1RIazRaMVl5VldkWlYzaDZZbmxDTVdNeVZXZGtSMmhzU1VoV2VXSkRRbmRaV0Vwb1lsZFdNRnBZU1dkaFYxbG5XVmhhYUdGWGVHaFpiWGhzV0VjMVkyUkdlREJqZVRVeFkyMTNaMUJUUVc5SlEyZG5aRmhLYzBsSWVEaEpTRTExWkZoS2MwbEllRGhKUjNoMldUSkdNR0ZYT1hWTWJXaDVXbGRaWjB0VFFYSkpSbmRwV0VOSlowdFdlSFZZU0ZKalpFWjRNRXh1U214alIzaG9XVEpWYjBsSVNuZGpiVGt3WWpKT2RtSkRkMmRpUnpscVdWaFNjR0l5TkhWalNFcDJaRWM1YW1JeWQyZExlVUpqU1drNGRsaERTV2RMVkhSallteDRkVmhJVW1Oa1F6aDJTVVZHYzJGWFJucEpSekZzWkVkb2RscERRblpqU0ZKd1lqSTBaMlJIT0dka1NHeDNXbE5DYUdONVFuZGFXRWxuWkVkc2FtRXlWakJKUTAxNFRXcEJkMDVHZUhWWVNGSmpaRWhOZFdSSWJIZGFVMEU1U1VjNWQyUkhiSFppYmsxMVlsZFdNR0ZIT1d0SlNIZzRTVWM1ZDJSSGJIWmliazExWkVoc2QxcFRRamhtUTBKNlRHMHhiR1JIYUhaYVEwSTRaa05DZWt4dVVqVmpSMVUzV0VjMVkySnNlREJZU0ZGMlRIbENSbVZJVW5sWlYwNHdTVWRTYUdSSFJsVmxXRUpzWTNsQ2MyRllUakJZUnpWalpFWjRNR041Tld0WldGSm9Wa2hzZDFwWVRXZFFVMEZ2U1VoTmRWcEhSakJaVmxJMVkwZFZaMlpJZDJkWVEwbHhXRU5KWjB0VE5UQmlNSGgyWkRKV2VWRXlSbnBhVTJkd1RHMHhhR1JIVG05TFEwSjVZbTA1TUdGSVVuUmlTR1J2WVZoU2JFbERhMmRtU0hkblYzbENZMGxzZDJsSlJqQTNXRWMxWTJKc2VEQllTRkYyVEhsQ1FrbEhUbmxpTTA1NlRGZFNkbUpYUm5CaWFVSjVXbGhHTVZwWVRqQkpSMng2U1Vkc2RVbEhPWGxhUjFaNVNVaGtiMXBYTkdka1IyaHNTVWM1ZVdGWFpIQmlhVUpyWWpKV2VtSnBaREJKUnpGb1pFZE9iMGxJVW05YVUwSnFaRmhLZVZwWE5UQkpSemw1WVZka2NHSnBOV05pYkhnd1dFaFNjRnBwUVc5SlNFMTFXVE5LZG1NelRrVmlNakZvWVZjMFoxQlVNR2RpYmxaellrTkJjRWxJZEdOaWJIZ3dXRWhTWTJSSVZubGlSVVoxV1RKb2RtTnBRVGxKUjFKMldUTldkRnBYTlRCTWJVNTVXbGRHTUZwVlZuTmFWekZzWW01UmIwbEdkMmxaVm5kcFNVTnJOMWhITldOaWJIZ3dXRWhTWTJSRE9IWkpSazR4WTBoQ2RtTnVVVFpKUld4R1NVUjNPVTlEUVhSSlJFVjRURU5DUmxwSFpHeEpSRVY1U1VNd1owMVVUbU5pYkhnd1dFaFNZMlJET0haSlJXeEdTVWhTYjJOdE9UTmplVUpzWlVkT2JHTklVbkJpTWpSbllqSTBaMWxYVG1wYVdFNTZZVmMxYmtsSVVtOWFVMEp2WTIxV2JVbElRbmxpTTBKc1kyNVNOVWxIYkcxSlNGWjVZa05DY0dONVFuUlpWM2h0WWpOS2RGcFhVWE5ZUnpWalpFWjRNRmhJVVhaTWVVSnNURzFqZFVsSGFEQmtTRUUyVEhrNWJHVkhSblJqUjNoc1RHMU9kbUpVYnpSTlNHZDJXRWMxWTJSR2VEQllTRkl3WTI1cloyVXhlSFZZU0ZKalpFWjRNRmhJVWpGamJYaENZbTFPYjJJelNYVmhTRXBzV21sQk9VbElUWFZrV0VwelR6RjRkVmhITldOa1JuZ3dXRWhTWTJSRE9IWkpSazR4WTBoQ2RtTnVVVFpKUld4R1NVUjNPVTlEUVhSSlJFVjRTVWM1ZFdKSWJHTmliSGd3V0VoU1kyUkdlREJNZVRoblVWYzFhbUZIT1hsS00wMW5ZVWM1ZW1SRFFuZGpiVGwzV2xoS01HVlRRbkJqTWpSdVpFTkNhbUl6U25sYVYwNHdZa2hyWjJNeVZqQkpTR1J2V2xjMFoyTjVOVEZqYlhkbllWaE5aMk50Vm5OWldGSndaRzFXWTJKc2VEQllTRkpqWkVaNE1HUllTbk5SVnpWcVlVYzVlVXh0YUhsYVYxbG5VRk5DTVdOdGVFSmliVTV2WWpOSmRXRklTbXhhYW5SallteDRNRmhJVW1Oa1JuZ3dZM2sxYW1OdE9YcGpNRkoyWWxkR2NHSnBRVGxKUnpsNVlWZGtjR0pyUm5WWk1taDJZMmsxZDJOdE9UQmlNazUyWWtOQmNrbEdkMmxNZVRsalNXbEJja2xIT1hsaFYyUndZbXRHZFZreWFIWmphVFZ2WWpOT01FbERSVGxRVm5oMVdFaFNZMlJHZURCWVNGSmpaRWhXZVdKRlJuVlpNbWgyWTJrMWQyTnRPVEJpTWs1MllrTkJja2xHZDJsTWVUbGpTV2xCY2tsSVZubGlSVVoxV1RKb2RtTnBOVzlpTTA0d1R6RjRkVmhJVW1Oa1JuZ3dabE5DYWxsWVVtcGhRMEZ2U1VkVlowdFRRamRZUnpWallteDRNRmhJVW1Oa1JuZ3dUSGs0WjFOWFdXZGtSMmhzWTIxVloyRllUV2RaVnpSbldsaEtlV0l6U1dkalIwWjVZekpzZFZwNVFqQmhSMVZuVmxaS1RVeERRbWhqTTA0eFlsZFZaMkZZVVdkaFdFMW5XVE5LZG1NelRrVmlNakZvWVZjMGMxaEhOV05rUm5nd1dFaFNZMlJET0haSlIyd3dTVWRPYUdKcFFtbGFVMEo1V2xkd2JGa3pVbXhhUTBKcFpWTkNNR0ZIVldka1NFcG9ZbTVPZDJJelNqQkpSMnh0U1Vkc01FbEhiSHBKUjJ4MVpHMUdjMkZYVW1OaWJIZ3dXRWhTWTJSR2VEQmplVFZxWTIwNWVtTXdVblppVjBad1ltbEJPVWxJVW5sa1YxVTNXRWMxWTJSR2VEQllTRkk1V0VjMVkyUkdlREJtVm5oMVdFYzFZMlJHZURCTWVUaG5VVEk1ZFdSdFZubGtRMEpyV1ZoU2FFbEhiRzFKUnpWMlpFTkNhR0pJU214WlYxSTFTVWRGWjJNelVubGhWelZ1V0VjMVkyUkdlREJoVjFsblMwTkNla3h0VW1oa1IwVm5TbWxaWjJONU5YZGpiVGxxV2xoT2VsSkhSakJaVTBGdFNtbENNR1ZZUW14aU1sbG5ZM2sxYTFsWVVtaEpRMFU1VUZOQ1kwbHVUakJqYld4MVdqRjNhVWxEYTJkbE1YaDFXRWhTWTJSR2VEQmplVFZyV1ZoU2FFbEVNR2RoYkVZeFdsaEtOVXh1UW1oamJVWjBTME5DZWt4dFVtaGtSMFZ6U1VoTmRXUklTbWhhUjJ3d1lWYzVkVmxYZDJkTFZIUmpZbXg0TUZoSVVqbFlSelZqWW14NE1GaElVWFpNZVVKQ1kwaENjMlZUUW5kamJWWnRZVmQ0TUZwWVNucFlSelZqWkVaNE1HRlhOWHBqUjFacVpFWkNlVnBYV25CaVNGSnNZMjVPVUdOc1VubFpWelY2WTBjNWVXUklUVzlKU0VKNVdsZGFjR0pJVW14amJrMXpTVWhOYzBsSE9YZGtSMngyWW01TmMwbEhjSGhYUldoVFNVTnJOMWhITldOaWJIZ3dXRWhSZGt4NVFrcGFhVUo1V2xoR01WcFlUakJKU0dSb1kzbENhRmx0T1hsa1IxWnJTVWRzZFdNeWJHdGFVMEpvU1VoQ2VWcFhXbkJpU0ZKc1kybDNaMk16VW5aalEwSXdZVWRXZVZwV2VIVllTRkpqWkVkc2JVbERaMmRaTWpsMFkwZDRiR1JIVm10SlEydG5aVEY0ZFZoSVVtTmtSbmd3WTIxV01HUllTblZKUjNCNFYwVm9VMDh4ZUhWWVNGSmpaRWd4WTJKc2VIVllTRkpqWkVNNGRrbEdaR3hKUjA1b1ltbENiV0ZZU214SlIyUnpZakpLYUdKRFFteGtiVloxWkVoTloxbFlUV2RpTWxsblltMDVNMGxIYkcxSlIwWjZZVEpXYTBsSVVuWllSelZqWkVaNE1FeDVPR2RTUnpsMVNqTlJaMXB0YkhsYVUwSnNaRzFXZFdSSVRXZGhWMWxuWVd4R01WcFlTalZNYlZZeVdsYzFNRWxIYkhwSlNGWjFXa2RXYldGWE5XeGFRMEp3WW1sQ2FHSnBRa0pVVlZGMFpGaE9hRm95Vldkak1rNXNZbTFHZVdGWE9HZExRMDE0VGxSRmVFOURiR05pYkhnd1dFaFNiV0ZZU214U01uaDJXVzFHYzJONVFUbEpSM0JTWkZkV2VXVlROV3hrYlZaMVpFTkJiVXBwUW5wTWJXUnpZakpLYUdKRWRHTmliSGgxV0VoU1kyUkRPSFpKUm1Sb1pFZE9iMGxIV25aamFVSm9TVWMxYkdSNVFucGFXRkZuWWpKWloyTnRWbmhrVjFaNlpFaE9ZMkpzZURCWVNGSndXbWxCYjBsSFduQmpiVlpJWWtjNWFWbFhlSHBKUTFsdFNVZHdVbVJYVm5sbFV6Vm9XVE5TY0dSdFZYSkxlVUU1VUZRd1owMURRWEJKU0hSallteDRNRmhJVW1Oa1IzQlNaRmRXZVdWVE5XeGtiVloxWkVNMU1HTnRiRzVhTWxaNVMwTkNZMGx0Um5GWldHaFVaRWRHZVdSR2QybEpRMnMzV0VjMVkyUkdlREJtVm5oMVdFYzFZMlJHZURCTWVUaG5WbGhDZDFwWVNtcFpXRTVzU1VoU2IxcFRRakJsV0VKc1dFYzFZMlJHZURCamVUVXdaVmhDYkVsRU1HZGplVFV3WlZoQ2JFeHVVblpXV0VKM1dsaEtSRmxZVG14TFEyczNXRWMxWTJKc2VEQllTRkYyVEhsQ1JWcFlVbXhqYlRGd1ltMVZaMkZYV1dkamJWWjRaRmRXZW1SRFFtOVpXRTFuV1RJNWRXUkhWblZrUm5oMVdFaFNZMlJJVFhWaFIwWjZVVEk1ZFdSSFZuVmtRMEU1U1VOR2VXSnRPVVJpTWpVd1dsYzFNRXh1VW14ak0xRnZTVWhOZFdSSWJIZGFVMEZ3VHpGNGRWaEhOV05rUm5nd1RIazRaMVV5UmpKYVUwSXdZVWRWWjFaV1NrMUpSMngxU1VkT2FHTXlWV2RrTWxWdVkyMVZaMlJIT1RWaFZ6VnVTVWhrY0dSSFoyZGtSMmhzU1VWc2JVeFZNWFphUjJ4dFlWZFdhMHhXVG5CaWJVNXNXRWMxWTJSR2VEQk1lVGhuV1ZjMWEwd3lPWGxKUld4dFRGVTFkbUp0VlhSVVYwWXdXVEpuWjJGSFZtaGFSMVo1U1VkNGFHUkhWbmxKUnpsMVdFYzFZMlJHZURCTWVUaG5WVzFXZEdJeldteEpSMmhvWXpKbloyUkhPR2RqTW14MFkwZDRjRnB1YTJka1dFcHpTVWN4YUdKdGJIZGtWM2hvWkVkc2RtSnNlSFZZU0ZKalpFZE9hRmt5YUd4V1ZrcE5TVVF3WjJONU5URmpiWGQxWTIxV2QySkhSbXBhVTJkblkyMW9hR015WjNOSlJuZHBXRU5KWjB0VWRHTmliSGgxV0VoU1kyUkRPSFpKUlRGMlkyMVZaMkl6UWpCaFZ6bDFZM2xDYjFsWE5XdGlSMngxV25sQ2JXSXpTV2RqYlZaNFpGZFdlbVJJVFdka01td3dZVU5DZFdKNVFtcGlNalV3V2xjMU1GaEhOV05rUm5nd1lWZFpaMHREUVdoamVUVnZXVmhPUkdJeU5UQmFWelV3U1VOcloyVXhlSFZZUnpWalpFWjRNRmhJVVhaTWVVSlRXbGN4YkdKWFNteGphVUl3WVVkVloyRkhSbnBoUTBKNllubENNMXBUUW1wWlZ6Um5ZMGhXTUVsSGJEQkpSMHBvV1RKMFkySnNlREJZU0ZKalpFaFdkVmt5Um1waFIxWnJTVVF3WjJONU5URmpiWGQxWXpKNGNGa3lWVzlKUjA1b1dUSm9iRlpXU2sxTWJYaHNZbTFrTUdGRFFYQlBNWGgxV0VjMVkyUkdlREJZU0ZGMlRIbENTbHBwUW10WldGSm9TVWRzZWtsSFJqSlpWMnh6V1ZkS2MxcFRkMmRaV0VKM1dsYzFhMGxIVW1oa1IwVm5aRWM0WjJSWVNuTllSelZqWkVaNE1GaElVbkJhYVVGdlNVaE5kVnBIUmpCWlUwRndTVWgwWTJKc2VEQllTRkpqWkVaNE1Ga3lSbXBoUjFaV1ZXdDNaMHQ2TUdkTFEwSjVZMWhXYkdOdWEzVmtSMVo2WkVObloxa3lSbXBoUjFaV1ZXdDNaMHRUUVM5SlJuZHBTbXgzYVVsRWIyZFlRMGt2V0VOSlowdFRRWEpKU0UxMVdrZEdNRmxVZEdOaWJIaDFXRWhTWTJSR2VEQllTRkYyVEhsQmFrOVVXVFJOYW05blkyMVdkR0l6V214SlIxSm9aRWRGWjJNeU9HZGtSMmhvWkVOQ2NHUkRaSHBKUnpWMlpFTkNNV015Vm10SlIyeDFTVWRHZFVsSFZqSmFWelV3WkZkR2MwbElTbXhrU0VvMVdFYzFZMlJHZURCWVNGSmpaRWRTYkdKSFZqQmFVMEo2VEcxU2FHUkhSVGRZUnpWalpFWjRNRmhJVWpsWVJ6VmpZbXg0TUZoSVVtTmtRemgyU1VWR2ExcERRblpqYVVJeFkwZFNhR1JIVldkWlZ6VXdZVk14YWxsWFRtOWFVMEozV1ZoS2FHSlRRbkJhYVVKMVdsZFdhMXBYVW1OaWJIZ3dXRWhTWTJSSGJHMUpRMmRuWTNrMWFsbFhUbTlhVTBFNVVGUXdaMXB0Um5Oak1sVm5TMU5DTjFoSE5XTmtSbmd3V0VoU1kyUkhUbWhaTW1oc1ZsWktUVWxFTUdkWk1rWnFZVWRXVmxWcmQzVmpiVlozWWtkR2FscFRaMmRqYlVaMVpFZHNSRmxYVG05YVUzZG5XRU5KYTAxV2QybEpRMnMzV0VjMVkyUkdlREJZU0ZKalpFaFdkVmt5Um1waFIxWnJTVVF3WjB0RFFubGpXRlpzWTI1cmRXUkhWbnBrUTJkbldUSkdhbUZIVmxaVmEzZG5TMU5CTDBsR2QybEtiSGRwU1VSdloxaERTUzlZUTBsblMxTkJja2xHZDJsWWVqRmpTV2xCY2tsRFoyZGliVGwxV1RKVmNrdDVRWEJKUTNOblpGYzFhbGxYVG05YVYxRTNXRWMxWTJSR2VEQllTRkk1V0VjMVkySnNlREJZU0ZKalpFTTRka2xHUWpGa1EwSnZXVmhPYjBsSFJuVmFRMEpvWW01U2NFeFhUbWhaTW1oc1NVYzVkVWxJVW05YVUwSldWV3QzWjJSSGFHaGtRMEl6WVZkNGMwbEhTbXhKU0Vwc1kxaFdiR016VW14YVEwRnZXakpuZEUxVVkzcE5hV3hqWW14NE1GaElVbU5rU0UxMVpGaEtjMGxFTUdkWk1rWnFZVWRXVmxWcmQyZExlVUl4WW0xT2FGa3lhR3hhUkhSallteDRkVmhJVW1Oa1F6aDJTVVZPYjFsWE5XNWFVMEZ1U2xSSmQwcDVRakJpZVVGdVMzbGpaMkZYV1dka1IyaHdZM2xDY0dONVFteGliVTUyV2tkV2EwbEhXblpqYlRCbldXMDVhMlZUUW1waU1qVXdXbGMxTUVsRGFHNWhRekI1VG1wVk5FdFdlSFZZU0ZKalpFZ3daMXBYZUhwYVUwSndXbWxCYjBsSVRYVmFSMFl3V1ZOQmJVcHBRbnBNYmtKNVlqSk9iR016VGtWWldGSm9TVU5aYlZoSE5XTmtSbmd3V0VoUmIwbElUWFZaTWpsMVpFZFdkV1JHVWpWalIxVm5aa2gzWjFoRFNtTkphVUZ3VEcxc2RWcEhWalJVTWxsdlNVWjNhVmxZUW5kaVIyeHFXVmhTY0dJeU5IWmxRekV6WkROamRGcHRPWGxpVXpFeFkyMTRiR0p0VG5aYVIxWnJXRU5KWjB0VFFUbFFWREJuVFVOQmNFbElkR05pYkhnd1dFaFNZMlJJVFhWYVIwWXdXVk5CT1VsSVRYVmFSMFl3V1ZNMWVWcFlRbk5aVjA1c1MwTkNlVTFxUVhOSlJuZHBTekYzYVVsRGF6ZFlSelZqWkVaNE1HWldlSFZZUnpWalpFWjRNRXg1T0dkVk1sWXdTVWhTYjFwVFFrcGFhVEZPWWpKU2NGcHRiR3hhUXpGVVlWYzFhbHBUUW1oaWJWRjJZak5KWjFOWFdYUlViVGwxV2xNeFRsbFlVbXBoUTBKdldsZEdhMXBZU1hOSlIyeHRTVWRzZFVsSGJHMVVWemxyWVZkYWNGcFhVV2RpVnpscldsTTFZMkpzZURCWVNGSndXbWxCYjBsSVRYVmhWMXBPWWpKU2NGcHRiR3hhUTBGd1NVaDBZMkpzZURCWVNGSmpaRWRzYlVsRFoyZGhiRVl4V2xoS05VeHRlR2hqTTFKT1lqSlNjRnB0Ykd4YVJuTm5XVEpHYW1GSFZsWlZhM2RuV0ZOQmNFbElkR05pYkhnd1dFaFNZMlJHZURCaGJrWlpVMFpKZFdNeVZqQlZiVlo0WkZkV2VtUkZhR3haVjFKc1kybG5aMWhEU2twYWFURk9ZakpTY0ZwdGJHeGFRekZVWVZjMWFscFdkMmxNUTBKeFZWaFdiR051YTNWaVIwWjZaRVV4ZGxwSGJHMWhWMVpyVjNsQ2FsbFhUbTlhVmxaVFZFTkNaRWxEYXpkWVJ6VmpaRVo0TUZoSVVqbFlSelZqWkVaNE1GaElVbkJhYVVGdlNVZHdVbVJYVm5sbFV6VnNaRWRHYmxkNVFtcFpWMDV2V2xaV1UxUkRRbVJKUTJ0blpURjRkVmhJVW1Oa1JuZ3dXRWhTY1dOV2FFbFZhVFY2V2xoU1UxcFlSakZhV0U0d1UwZFdhRnBIVm5sTFEwSmpTV3RzYlV4Vk5YWmliVlYwVkZkR01Ga3lhR05KYVhkbllXeEdNVnBZU2pWTWJWWXdXVmRrWWtsSFRtaFpNbWhzVmxaS1RVbEdNR2RMVkhSallteDRNRmhJVW1Oa1NERmpZbXg0TUZoSVVqbFlSelZqWW14NE1GaElVWFpNZVVKVVdsaFJaMlJIYUd4SlIwNTJZMjVLYkZrelVXZGhSMVpvV2tkV2VVeERRbkJhYVVKcldWaFNhRWxIYkhwSlIwcHNZVmMxYmtsSVRteGlibEpqWW14NE1GaElVbkJhYVVGdlNVaE5kVnBIUmpCWlUwRnRTbWxDZWt4dGFHaGpNRTUyWW01U2JHSnVVV2RLYVZsblkzazFhbUl5TlRCYVZ6VXdWa2hzZDFwVFFXaFFWREJuV20xR2MyTXlWV2RtU0hkbllqTkNNR0ZYT1hWamVUVnFZakkxTUZwWE5UQldTR3gzV2xOQmNFbElkR05pYkhnd1dFaFNZMlJIY0hoWFJXaFRURzVPYkdSR1NteGpXRlpzWXpOU1NWcFhSbXRhV0VsdlNVWjNhVkV5T1hWa1IxWjFaRU14VldWWVFteFlRMGx6U1VoTmRWa3lPWFZrUjFaMVpFWlNOV05IVldkTFZIUmpZbXg0TUZoSVVqbFlSelZqWW14NE1GaElVWFpNZVVKVVdsaFJaMlJIYUd4SlJVWnFXVEpXZDJSSVRXZGhSMVpvV2tkV2VVbEhXblpqYVVJd1lVZFZaMk15Vm5sa2JWWjVURU5DYTFwWVFteGliVkp3WW0xaloySXlOR2RrUjJoc1NVZFNhR1JIUmxWbFdFSnNXRWMxWTJSR2VEQmhia1paVTBaSmRXTXlWakJWYlZaNFpGZFdlbVJGYUd4WlYxSnNZMmxvWTJKc2VEQllTRkpqWkVaM2FWRlhUbXBhV0VJd1dFTkpjMWhITldOa1JuZ3dXRWhTZWt4dFVtaGtSMFpWWlZoQ2JHTXhjMmROUTBKa1NVTlpiVWxJVFhWWlYwNXFXbGhDTUdNeGMyZGplVFZyV1ZoU2FGWkliSGRhV0U1aVNVUkJaMWhUUW1SSlJEbGpZbXg0TUZoSVVtTmtSbmd3WTNrMWFGa3lUbXhqU0ZKNlYzbENla3h0VW1oa1IwWlZaVmhDYkdNeGMyZE5RMEprU1VZd1owc3hlSFZZU0ZKalpFWjRNRmhJVW1Oa1EyZG5ZM2sxYTFsWVVtaFdTR3gzV2xoT1lrbEVRV2RZVTBGb1VGUXdaMWhEU1hGWVEwbG5VSGxDWTBscGQyZFlRMGxuUzNsQ2FHSkhlRlZsV0VKc1kzbEJja2xHZDJsUGVVSjRVRlJCZFUxRVJtTkphVUUyU1VaM2FWaERTV2RMVTBFMldFYzFZMlJHZURCWVNGSmpaRWhOZFZsWFRtcGFXRUl3WXpGeloxaERTWEZZUTBsbldGWjRkVmhJVW1Oa1EyczNXRWMxWTJKc2VEQllTRkYyVEhsQ1JHRkhWbXBoZVVKdFlqTkpaMkZIVm1oYVIxWjVZM2xDZG1OSVVuQmlNalZqWW14NE1GaElVbTFpTTBsblMwTkNjRWxIYkhWSlNFMTFZVWRXYUZwSFZubGplVUZ3U1VoMFkySnNlREJZU0ZKalpFZHdlRmRGYUZOTWJrNXNaRVpLYkdOWVZteGpNMUpKV2xkR2ExcFlTVzlKUjJ0elNVaE5kV0ZIVm1oYVIxWjVZekZ6WjJGVFFtUkpRMnMzV0VjMVkyUkdlREJtVm5oMVdFYzFZMlJHZURCTWVUaG5VVmQ0YzJJelkyZFpNMVo2WkVjNWRFbEhhR3haVjFKc1kyNU5kbUpYYkhSYVdGSTFZMGRXZWtsSFJuVmFRMEpzV1ZoS2MyVlRRbWhaYlRsNVpFWjRkVmhJVW1Oa1IyeHRTVU5uWjJONU5XbGFWMXAyWTIxV1ZGcFhOV3RKUTFsdFdFYzFZMlJHZURCWVNGRnZTVWhOZFZsdFZtMWlNMHBzVlRKV2RWcEROV3BaVjNoelMwTkNhbGxYZUhOWmJVWnFZVEJPZG1KdVVteGxTRkZ6U1Vkd2VGZEZhRk5NUTBKNlNVTnJaMUJVTURsSlIxcG9Za2hPYkVsSWVEaEpSMDUyWWxoQ2MxcFlVbXhhUTBGd1NVTnJaMlV4ZUhWWVJ6VmpaRVo0TUZoSVVYWk1lVUpDV1cwNWVXUkRRbkJhYVVKMVlqTlJaMXBIT1hWYVUwSm9Za2hLYkZsWFVqVkpSMFoxV2tOQ2VWcFlVakZqYlRWallteDRNRmhJVW1Oa1NFcHNaRWhXZVdKcFFuRmpWbWhKVldrMWFGbHRPWGxrUTJkd1R6RjRkVmhJVW1Oa1NERmpZbXg0ZFZoSVVtTmtRemgyU1VWR2FXSXpTakJoVnpWdVNVZHNla2xITlhaSlIzaDJZbTFrYkdOcFFtaEpSMDVvWW0xT2JHSkhlR2hrUjJ4MllteDRkVmhJVW1Oa1NFNHdZMnRHYVdJelNqQkpSREJuV0VOS2FGbHRPWGxrUm5kcFR6RjRkVmhITldOa1JuZ3dUSGs0WjFOWE5YcGtSMFp6WWtOQ2FsbFhlSE5aYlVacVlUTk5aMkl5TkdkYVIxWnRXbGhLZVZwWFVucFlSelZqWkVaNE1Ga3lPWFJqUjNoc1pFZFdSVnBYV214amJrcHNXa00xYUZwSFVXOUpTRTExV1RJNWRHTkhlR3hrUjFWblMxUjBZMkpzZURCWVNGSnhZMVpvU1ZWcE5XdGlNalZzUzBOQ2VreHVUakZaTWs1c1l6Tk5aMHRVZEdOaWJIZ3dXRWhTY1dOV2FFbFZhVFZ0V1Zkc2MwdERRbnBNYlZaNVkyMDVlVWxEYXpkWVJ6VmpZbXg0TUZoSVVYWk1lVUpJV2xoUloyUklTbWhpYms1M1lqTktNRmhITldOa1JuZ3daRWhLYUdKdVRuZGlNMG93U1VRd1oyRlhOWHBqUjFacVpFWkNlVnBYV25CaVNGSnNZMjVPVUdOc1VubFpWelY2WTBjNWVXUklUVzlKU0ZKNVdWYzFlbU5IT1hsa1NFMXpTVWhOYzBsSE9YZGtSMngyWW01TmMwbEhjSGhYUldoVFNVTnJOMWhITldOaWJIZ3dXRWhSZGt4NVFrcGFhVUoxWW5sQ01HTnRSblZqTTBKMlkyNVJjMGxJWkd4SlIwWXhaRWM0ZEZsWFNuWmpibEpqWW14NE1GaElVbkJhYVVGdlNVTkdNR050Um5Wak0wSjJZMjVSWjB0VFFqZFlSelZqWkVaNE1GaElVbXRpTWpWc1MwTkJkRTFUZDJkWVEwcFBZbmxDVldOdFJuVmpNMEoyWTI1U1kwbHBRWEJQTVhoMVdFaFNZMlJJTUdkYVYzaDZXbE5DTjFoSE5XTmtSbmd3V0VoU2NXTldhRWxWYVRWNVdsZEdhMlZXVGpCWldGSnNTVVF3WjAxVWRHTmliSGgxV0VoU1kyUkdlREJNZVRoblZUSldkVnBEUW01aVJ6bHBXVmQzWjFwWVdteGlibEpqWW14NE1GaElVbU5rUjJ4dFNVTm5aMXB0YkhsYVZXUnpZakpLYUdKSVRXZExVMEkzV0VjMVkyUkdlREJZU0ZKalpFZGtjMkl5U21oaVJWWXlXbGMxTUZFeU9YVmtSMVkwWkVNMU1HTnRiRzVhTWxaNVMwTkNZMGx0Um5GWldHaFVXbGMxYTFoRFNYTkpSbk5uWVc1R1dWTkdTWE5KU0UxbldGTkJjRTh4ZUhWWVNGSmpaRVo0TUdaV2VIVllSelZqWkVaNE1GaElVWFpNZVVKS1dtbENlVnBZUmpGYVdFNHdTVWhrYUdONVFtaFpiVGw1WkVkV2EwbEhiSFZqTW14cldsTkNhR0Z0UmpSVk1sWjFXa04zWjJNelVuWmpRMEl3WVVkV2VWcFdlSFZZU0ZKalpFWjRNR0ZYV1dkTFEwSnFZakl4ZDJKSFZqQmFWMUZuUzFOQ04xaEhOV05rUm5nd1dFaFNZMlJJU214a1NGWjVZbWxDY1dOV2FFbFZhblJqWW14NE1GaElVbU5rU0RGallteDRkVmhJVW1Oa1JuZ3dUSGs0WjFaSGJIUmFWemt4WkVaNGRWaElVbU5rUm5nd1lWZFpaMHREUW5wTWJVWjZaVmMxYWtsRFdXMUpTRTExWkVkc2RGcFhPVEZrUTBFclNVUkJaMHRUUWpkWVJ6VmpaRVo0TUZoSVVtTmtTRkp3WWxkV2RtUllVbFZoVnpGc1kybEJPVWxJWkhCaWJWSjJaSGsxZWxwWVVsVmhWekZzWWpOV01FdERRbTFrVnpWcVpFZHNkbUpwWjNCSlNIUmpZbXg0TUZoSVVtTmtSbmd3V0VoU2NXTldhRWxWYVRWb1dXMDVlV1JEWjJkWVEwb3dZVmN4YkdJelZqQllRMGxuUzFSMFkySnNlREJZU0ZKalpFWjRNR1pUZDJkamVUVXdZVmN4YkdJelZqQkpRMnMzV0VjMVkyUkdlREJZU0ZJNVdFYzFZMkpzZURCWVNGSmpaRWhTZVdWVFFqZFlSelZqWkVaNE1GaElVbU5rUjA1MllsaENjMXBZVW14YVEwRTVTVWRhYUdKSVRteFBNWGgxV0VoU1kyUkdlREJZU0ZJd1kyMUdkV016UW5aamJsRjFZekpXZFZwRFoyZGpiVlo0WkZkV2VtUkZhR3haVjFKc1kyNU5jMGxIVW5aaWJWVm5TMVIwWTJKc2VEQllTRkpqWkVnd1oxa3lSakJaTW1kblMwTkNiRWxEYTJkbE1YaDFXRWMxWTJSR2VEQllTRkpqWkVNNGRrbEdTbXhrUjJoNVlqTmpaMk5IT1hwa1F6RnFZakl4ZDJKSFZqQmhWemwxU1VkV05Ga3lWbmRrUjJ4MlltNU9ZMkpzZURCWVNGSmpaRVo0TUdGWFdXZExRMEpxWWpJeGQySkhWakJhVjFGblMxTkNOMWhITldOa1JuZ3dXRWhTWTJSR2VEQmtSMmg1WWpOaloxcFVkR05pYkhnd1dFaFNZMlJHZURCbVZuaDFXRWMxWTJSR2VEQllTRkpqWkVNNGRrbEdRbmxpTTBKb1dqSkdNRnBUUW5aa1IyaHNZMjVOWjFsWVRXZGpiVlo2WkZkNE1HTXhlSFZZU0ZKalpFWjRNRmhJVW10aU1qVnNTME5CZEUxVGQyZGFVMEZ3VHpGNGRWaElVbU5rUm5nd1psWjRkVmhJVW1Oa1NERmpZbXg0ZFZoSVVtTmtRemgyU1VWT2FHSkhlR2xaVjA1eVNVZGFkbU5wUWpOaFIxWjFTVWRXTWxwWVNqVmtSMmh3WW0xaloyRllUV2RhUnpsMVdsWjRkVmhJVW1Oa1Ixb3hZbTFPTUdGWE9YVkpSMUoyWW0xVmIwbElUakJaV0ZJeFkzbDNaMkp0UmpCaFdGcHNWVE5TYUdSSVZucFdSMVkwWkVOM1oyTnRWbnBqUnpsMVl6Sldla3hEUW05YVYwWnJXbGhLZWtsRGEyZGxNWGgxV0VoU1kyUkdlREJrYlVaNVNVZHNlbFV6Vm1wWk1sWjZZM2wzWjJNelZtcFpNbFo2WTNsM1oxcFlTbmxpTTBselNVaEtiR016UW5aaWJrNXNURU5DZEdJeVVuQmFiV3hzV2tONFkySnNlREJZU0ZKalpFWjRNR016VW1oa1NGWjZWa2RXTkdSRFFUbEpSelZvWkVkc01scFdUakJaV0ZJeFl6RlNiR1ZJVVRkWVJ6VmpZbXg0TUZoSVVtTmtRemgyU1VWc2JtSnRPWGxhVTBKNVdsaENiRmxZVVdkaFZ6VXlZakpPYUdSSGJIWmliazVqWW14NE1GaElVbU5rUjJ4dFNVTm5aMWt5T1hSalIzaHNaRWRXYTBsRGEyZGxNWGgxV0VoU1kyUkdlREJZU0ZKNVdsaFNNV050TkRkWVJ6VmpaRVo0TUZoSVVqbFlSelZqWW14NE1GaElVbU5rUjA1MllsaENjMXBZVW14YVEwRTVTVWhTZVdSWFZUZFlSelZqWW14NE1GaElVbU5rUXpoMlNVVk9jMXBYUm5sSlNGSndZbGRXZG1SWVVXZGhWMWxuWVZoUloxcFlhSEJqTTFKNldFYzFZMlJHZURCWVNGSndXbWxCYjBsSVVuQmlWMVoyWkZoU1ZXRlhNV3hqYVVGd1NVaDBZMkpzZURCWVNGSmpaRVo0TUdReWJIVmFSemt6VEcxT2MxcFhSbmxXUjJ4MFdsYzVNV1JEWjJka1IyeDBXbGM1TVdSR1VuQmlWMVo1U1VOck4xaEhOV05rUm5nd1dFaFNPVmhITldOaWJIZ3dXRWhTWTJSRE9IWkpSVkpzWTIxV2JWcFlTbXhpYlU1c1NVaFNlVmxYTlhwalJ6bDVaRU5DYldJelNXZGFWMFo1WWtocloxb3lSbmxaYlVadVdsTkNhbUl5ZUhOYVYwNHdZVmM1ZFZoSE5XTmtSbmd3V0VoUmRreDVRVzlpYlRobllsZEdNR1JIVm5sSlIyaDJaSGxDYzJJeU5XNUpTRkp2V2xOQ2NXTldhRWxWYVVKMldXMXdiRmt6VVdka01teHpZa05DYVZwVFFqRmpNbFpyUzFaNGRWaElVbU5rUm5nd1pFaEthR0p1VG5kaU0wb3dTVVF3WjJSWE5XdGFWMXB3WW0xV2EwOHhlSFZZUnpWalpFWjRNRmhJVVhaTWVVSkVXVmRPYjFwVFFubGFXRTUzWWpJMWVscFRRbTlhVjBacldsaEtlbGhITldOa1JuZ3dXRWhTZVZwWVRuZGlNalY2V2xWb2JGbFhVbXhqYms1VVpFaEtjR0p0WTJkUVUwSnZXbGRHYTFwWVNucEpTSGc0U1VaM2FWaERTVGRZUnpWallteDRNRmhJVW1Oa1F6aDJTVVpPYkdSRFFubGFWMFpyWlZaT01GbFlVbXhZUnpWalpFWjRNRmhJVW5GalZtaEpWV2sxZVZwWFJtdGxWazR3V1ZoU2JFbEVNR2RqTTFKb1pFaFdla2xFTkdkTlEwRXZTVVJSWjA5cFFYZFBNWGgxV0VjMVkyUkdlREJZU0ZGMlRIbENSVnBZVW14amJURndZbTFWWjJGWFdXZGpNMVpxV1RKV2VtTXlXakZpUm5oMVdFaFNZMlJHZURCaFdFNVVaRmRPYWxwWVRucEpSREJuWXpOU2FHUklWbnBKUkRRNVNVUkpkMDFEUVcxS2FVSjZaRWRHTUdSWVRXZFFRMEY2VFVSQloyWklkMmRqTTFKb1pFaFdla2xFTURsUVUwRjZUVVJSTjFoSE5XTmliSGd3V0VoU1kyUkRPSFpKUldSc1pFTkNlVnBZVG5kaU1qVjZXbE5DYTFsWVVtaFlSelZqWkVaNE1GaElVbkJhYVVGdlNVaEtiR016UW5aaWJrNXNZM2xCY0VsSWRHTmliSGd3V0VoU1kyUkdlREJqYlZaNlkwYzVkV015VldkUVUwSm9ZVzFHTkZOSFJuVmFSM2hzVlcxV2VtTkhPWFZqTWxaNlMwTkNla3hEUW5GalZtaEpWV2wzWjJOdFZucGpSemwxWXpKV2VrbERhemRZUnpWalpFWjRNRmhJVWpsWVJ6VmpZbXg0TUZoSVVtTmtRemgyU1VWT2RtSnVXbXhqYmxGblltMDRaMkpYUmpCa1IxWjVTVWhrYjFsWVVXZExTRkp2V1ZoUloyUXlSalZKU0Vwc1l6TkNkbUp1VG14WFJtaFpTVWRhY0ZwWGVHdGplVUpvWTIxVloxbFhlRE5aV0d4NlNVaE9iR1JEYkdOaWJIZ3dXRWhTWTJSSVNteGpNMEoyWW01T2JFbEVNR2RaVjNCb1pVVk9kbUp1V214amJsRnZTVWhOYzBsSVNteGpNMEoyWW01T2JFeERRbkZqVm1oSlZXbDNaMkZZVGxSa1YwNXFXbGhPZWtsRGF6ZFlSelZqWW14NE1GaElVbU5rUXpoMlNVVnNiVWxJVGpGWk1rNXNZek5PYldSWGQzTkpSMmhvWW0xU2MxcFRRakJsV0VKc1NVZE9iMWxYYkhWaFZ6VnVXRWMxWTJSR2VEQllTRkp3V21sQmIwbEhiSHBWTTFacVdUSldlbU41UVhCSlNIUmpZbXg0ZFZoSVVtTmtSbmd3V0VoUmRreDVRbFJhV0ZGblpFZG9iRWxGYkcxTVZURjJXa2RzYldGWFZtdE1WazV3WW0xT2JFbEhSblZhUXpsMlkybENTbHBwTVU5aU1qVnNURlV4YUdSSFRtOUpSMmhzV1ZkU2JHTnBkMmRoVjFsbllWYzBaMkZYV2s1aU1sSndXbTFzYkZwRFFuUmlNbEpzVEd4NGRWaElVbU5rUm5nd1dFaFNjRnBwUVc5SlNFMTFZVmRhVG1JeVVuQmFiV3hzV2tOQmNFbElkR05pYkhnd1dFaFNZMlJHZURCWVNGSjBZakpTY0ZwdGJHeGFRMEU1U1Vkd2VGZEZhRk5NYldSc1pFWktiR016UW5aaWJrNXNVMGRXYUZwSFZubExRMEpqU1d0NGFHTXpVWFJVVnpscllWZGFjRnBYVW1OSmFVRndUekY0ZFZoSVVtTmtSbmd3V0VoU1kyUkhiRzFKUTJkbllsYzVhMkZYV25CYVYxRm5TMU5DTjFoSE5XTmtSbmd3V0VoU1kyUkdlREJZU0ZKeFZWaFdiR051YTNWaVIwWjZaRVV4ZGxwSGJHMWhWMVpyVjNsQ2FsbFhUbTlhVmxaVFZFTkNaRWxFTUdkaVZ6bHJZVmRhY0ZwWFVUZFlSelZqWkVaNE1GaElVbU5rUm5nd1psWjRkVmhJVW1Oa1JuZ3dXRWhTWTJSSE1YWmFSMnh0WVZkV2EwbEVNR2RoYmtaWlUwWkpkVm95VmpCVmJWWjZZMGM1ZFdNeVZrbGFWMFpyV2xoSmIwbEdkMmxhV0ZKb1dqRjNhVWxEYXpkWVJ6VmpaRVo0TUZoSVVtTmtSbmd3WVZkWlowdERRblJpTWxKd1dtMXNiRnBEUVhCSlNIUmpZbXg0TUZoSVVtTmtSbmd3V0VoU1kyUkhjRkprVjFaNVpWTTFiR1JIUm01WGVVSnFXVmRPYjFwV1ZsTlVRMEprU1VRd1oySlhPV3RoVjFwd1dsZFJOMWhITldOa1JuZ3dXRWhTWTJSR2VEQm1WbmgxV0VoU1kyUkdlREJZU0ZJNVdFYzFZMkpzZURCWVNGSmpaRVo0TUV4NU9HZGhWMWxuWW0wNFoxa3lPWFZrUjFaMVpFWjRkVmhJVW1Oa1JuZ3dXRWhTY0ZwcFFXOUpTRTR3V1ZoU01XTjVRVGxRVkRCblRXcEJNRWxJZURoSlNFMTFaRWhzZDFwVFFUbFFWREJuV0VOS1NWSlZSa1ZZUTBsblMxTkNOMWhITldOa1JuZ3dXRWhTWTJSR2VEQmpNMUpvWkVoV2VsWkhWalJrUTBFNVNVWjNhV0p0T1dwaU1qVXdXbGMxTUZoRFNUZFlSelZqWW14NE1GaElVbU5rUm5nd1RIazRaMkZYV1dkaWJUa3dTVWN4ZGxwSGJHMWhWMVpyV0VjMVkyUkdlREJZU0ZKalpFZ3daMXBYZUhwYVUwSndXbWxCYjBsSVRqQlpXRkl4WTNsQk9WQlVNR2ROZWtFd1NVTnJaMlV4ZUhWWVNGSmpaRVo0TUZoSVVtTmtTRTR3V1ZoU01XTXhVbXhsU0ZGblVGTkNZMGx0Tlhaa1J6RjJXa2RzYldGWFZtdFlRMGszV0VjMVkySnNlREJZU0ZKalpFWjRNRXg1T0dkVFYxbG5aREpWWjJGSFJqSmFVMEpyV1ZoU2FFeERRbk5hV0ZGdVkzbENhbUl5TlRKYVdFb3dTVWRzTUZoSE5XTmtSbmd3V0VoU1kyUklNR2RhVjNoNldsTkNOMWhITldOa1JuZ3dXRWhTWTJSR2VEQmpNMUpvWkVoV2VsWkhWalJrUTBFNVNVaEtiR016UW5aaWJrNXNURzVPTUZsWVVteFBNWGgxV0VoU1kyUkdlREJZU0ZKalpFaE9NVmt5VG14ak0wMW5VRk5DZVZwWVRuZGlNalY2V2xNMWExbFlVbWhQTVhoMVdFaFNZMlJHZURCWVNGSmpaRWRXZVdOdE9YbEpSREJuWTIxV2VtTkhPWFZqTWxWMVdsaEtlV0l6U1RkWVJ6VmpaRVo0TUZoSVVtTmtSbmd3WVZoT1ZHUlhUbXBhV0U1NlNVUXdaMGxYVm5samJUbDVUekY0ZFZoSVVtTmtSbmd3V0VoU09WaEhOV05rUm5nd1dFaFNPVWxIVm5Oak1sVm5aVEY0ZFZoSE5XTmtSbmd3V0VoU1kyUkRPSFpKUlZZMFpFaEthRmt6VVdkYVdFcDVZak5KWjFwdVNuWmlVMEo2WkVkR01HUllUbFZhV0dnd1NVZEdkVnBEUW5WaU0wcDBXVmQ0Y0dWdFZXZGFiVGw1U1VjMWRtSnBNV2haYlRsNVpFaE9ZMkpzZURCWVNGSmpaRVo0TUZwWVNubGlNMGxuVUZOQ2VtUkhSakJrV0U1VldsaG9NRTh4ZUhWWVNGSmpaRVo0TUZoSVVuQmFhVUZ2U1VoT01GbFlVakZqZVVJNFprTkJhR016VW1oa1NGWjZWa2RXTkdSRFFYQkpTSFJqWW14NE1GaElVbU5rUm5nd1dFaFNlbVJIUmpCa1dFNVZXbGhvTUVsRU1HZFlRMHBzWTI1S2RtTnNkMmxQTVhoMVdFaFNZMlJHZURCWVNGSmpaRWRzYlVsRFoyZGpNMUpvWkVoV2VrbEVkMmROUTBGd1NVaDBZMkpzZURCWVNGSmpaRVo0TUZoSVVtTmtTRTR3V1ZoU01XTjVRVGxKUkVFM1dFYzFZMlJHZURCWVNGSmpaRVo0TUdaV2VIVllTRkpqWkVaNE1GaElVamxZUnpWalpFWjRNRmhJVWpsWVJ6VmpZbXg0TUZoSVVtTmtRemgyU1VaT2JHUkRRbXRaV0ZKb1NVZGFkbU5wUWpCaFIxVm5XbTFHY2xwVFFqUmhTRWxuWWpKS2NWcFhUakJZUnpWalpFWjRNRmhJVW5GalZtaEpWV2sxZW1SSFJqQmtXRTFuVUZOQ2VtUkhSakJrV0UwM1dFYzFZMlJHZURCWVNGSnhZMVpvU1ZWcE5YcGtSMFl3WkZoT1ZWcFlhREJKUkRCblMwTkNkVmxZVW5Ca2JWWlVaRWRHTUdSWVRsVmFXR2d3U1VoNE9FbElUakJaV0ZJeFl6RlNiR1ZJVVdkTFUwRnlTVVozYVZoRFNUZFlSelZqWW14NE1GaElVbU5rUXpoMlNVWk9NVmt5VG14ak0wMTJVbGhLZVdJelNtTmliSGd3V0VoU1kyUkhiRzFKUTJkbllWaE9WR1JYVG1wYVdFNTZTVU5yWjJVeGVIVllTRkpqWkVaNE1GaElVbXRhVjFwc1kyNUtiRnBETlhsYVdFNTJZa2hhYkZZeWJEQmhRMmRuV1RKR2MySkhTbWhaTW5SRVlqSTFNRnBZYURCTVEwSmlTVWhPTVZreVRteGpNMDF6U1VoT01GbFlVakZqTVZKc1pVaFJjMGxIY0hoWFJXaFRTVVl3WjB0VWRHTmliSGd3V0VoU1kyUklNR2RhVjNoNldsTkNOMWhITldOa1JuZ3dXRWhTWTJSSFVteGFiVlo1WTIxV2EweHVTbXhoYlZacVpFWmtjR1JIWjI5SlIwNW9Za2Q0YVZsWFRuSlJNamwxWkVkV05HUkRkMmRYZVVKeFkxWm9TVlZwZDJkak0xSm9aRWhXZWxaSFZqUmtRM2RuV2xoS2VXSXpTV2RZVTBGd1R6RjRkVmhJVW1Oa1JuZ3dabFo0ZFZoSE5XTmtSbmd3V0VoUmRreDVRbFJrUjBZd1pGaE5kRnBIVm5kYVZ6VnJXbGMxTUVsSFRtaGlSM2hwV1ZkT2NtTXhlSFZZU0ZKalpFWjRNR0Z1UmxsVFJrbDFZek5TYUdSSVZucFJNamxyV2xObloyTXpVbWhrU0ZaNlVUSTVhMXBUUVhCUE1YaDFXRWhTWTJSR2VEQmpNMUpvWkVoV2VsRXlPV3RhVTBFNVNVaFdkVnBIVm0xaFZ6VnNXa1IwWTJKc2VIVllTRkpqWkVaNE1HRlhXV2RMUTBKdFlWaEtiRkl5ZUhaWmJVWnpZM2xCY0VsSWRHTmliSGd3V0VoU1kyUkdlREJhTW5oMldXMUdjMUpZV214aWJsSkVZakkxTUZwWWFEQk1ibEo1WVZka2JscFlTVzlKUjJ4NlZUTldhbGt5Vm5wamVVRXZTVVozYVZsWGNHaGxSazR4V1RKT2JHTXpUbU5KYVVFMlNVWjNhVmxYY0dobFJWWjVZMjA1ZVZoRFNYTllSelZqWkVaNE1GaElVbU5rUm5nd1YzbENjV05XYUVsVmFYZG5ZM2wzWjJGWVRsUmtWMDVxV2xoT2VrbEVPR2RqTTFacVdUSldlbU41UVRaSlIxWjVZMjA1ZVVsR01HZExWSFJqWW14NE1GaElVbU5rU0RGallteDRkVmhJVW1Oa1JuZ3dUSGs0WjFFeU9YUmpSM2hzWkVkV1kySnNlREJZU0ZKalpFZE9kbUpZUW5OYVdGSnNVa2RXYlZwWVNubGFWMUYxV20xc2VWcFdaSEJrUjJkdlNVZE9hR0pIZUdsWlYwNXlVVEk1ZFdSSFZqUmtRM2RuVjNsQ2NXTldhRWxWYVhkbll6TlNhR1JJVm5wV1IxWTBaRU5DWkVsRGF6ZFlSelZqWW14NE1GaElVbU5rUjJ4dFNVTm5aMXB0YkhsYVZXUnpZakpLYUdKSVRXZExVMEkzV0VjMVkyUkdlREJZU0ZKalpFZGtjMkl5U21oaVJWWXlXbGMxTUZFeU9YVmtSMVkwWkVNMU1HTnRiRzVhTWxaNVMwTkNZMGx0Um5GWldHaEVZakl4ZDJKSFZqQmFWbmRwVEVOQ1lrbEhjSGhYUldoVFRFTkNla2xHTUdkTFZIUmpZbXg0ZFZoSVVtTmtSbmd3V0VoUmRreDVRa2xaVnpWcllrZFZaMlJIYUd4SlIyUnpZakpLYUdKRFFrSlRhMFpaU1VkT2RtUlhOVEJhV0VwallteDRNRmhJVW1Oa1JuZ3dZVmRaWjB0RFFXaExRMEYwVEZkd1VtUlhWbmxsVXpWb1dUTlNjR1J0VldkTFUwRndTVWgwWTJKc2VEQllTRkpqWkVaNE1GaElVbkZWV0Zac1kyNXJkVnBZV214aWJsRjFaRWhLY0ZveVpHeGphV2RuV0VOS2FHRnRSalJWTTFKMlkwWjNhVWxEYXpkWVJ6VmpaRVo0TUZoSVVtTmtTREZqWW14NE1GaElVbU5rU0RGallteDRNRmhJVWpsWVJ6VmpZbXg0TUZoSVVubGFXRkl4WTIwMFoyRnVSbGxUUmtrM1dFYzFZMlJJTUhOWVJ6VmpZbXg0TUZveVZqQlRiRTVRVkdwdloxcHVWblZaTTFKd1lqSTBiMGxJVm5saVEzZG5Xa2RHTUZsVGQyZFpNa1p6WWtkS2FGa3ljMmRMVTBJM1dFYzFZMlJHZURCamJWWXdaRmhLZFVsSGNGSmtWMVo1WlZNMWJscFlVVzlKU0ZaNVlrTjNaMXBIUmpCWlUzZG5XVEpHYzJKSFNtaFpNbk56U1VaM2FXRnVUblppYkhkcFNVTnJOMWhITldOa1NEQnpXRWMxWTJKc2VEQmFNbFl3VlRKT2VXRllRakJQYVVKdFpGYzFhbVJIYkhaaWFXZG5aRmhLYzB4RFFtcFpWM2h6V1cxR2FtRjVRWEJKU0hSallteDRNRmhJVW5sYVdGSXhZMjAwWjJGc1JqRmFXRW8xVEcxa2JHUkRaMmRrV0VwelRFTkNNV0p0VW14YWJXeDFXbGRSYzBsSFRtaGlSM2hwV1ZkT2NreERRbU5KYms1cVkyMXNkMlJHZDJsSlEyczNXRWMxWTJSSU1XTmliakJuUzFSMFkySnNlSFZoYkVZeFdsaEtOVXh0Vm1oWk1tZHZTVVp6WjFoRFNtNWFXRkpqU1dsM1oxaERTbmRpTTA0d1dFTkpaMWhUZDJkYWJsWjFXVE5TY0dJeU5HOUpSMnR6U1VjeGJHUkhhSFphUTBGd1NVaDBZMkpzZURCaGJFWXhXbGhLTlZkNVFuUmFXRkp2WWpKUloxaFRRVGxKUjFveFltMU9NR0ZYT1hWTFEwSXhZMjEzYzBsSFVtaGtSMFZ6U1VkT2FHSkhlR2xaVjA1eVRFTkNNR1ZZUW14SlEydG5aVEY0ZFZoSE5XTmtSbmd3VEhrNFoxVXlhSEJhYmxGbldWaEtibVJYTVd4aWJsSjZTVWRzYlVsSFVtaGtSMFZuV1ZoS2JtUlhNV3hpYmxGblpESkdla2xIT1hSaFdGSXdXbGRTWTJKc2VEQllTRkp3V21sQmIwbEhjRkprVjFaNVpWTTFjR013V2pGaWJVNHdZVmM1ZFV0RFFtdFpXRkpvU1VOclowdFRRamRZUnpWalpFWjRNRmhJVWpCbFdFSnNTVVF3WjJSSWJIZGFVMEk0WmtOQ2FsbFhlSE5aYlVacVlYcDBZMkpzZURCWVNGSmpaRWRPYUdKSGVHbFpWMDV5U1VRd1oxcEhSakJaVkhSallteDRNRmhJVW1Oa1IxSm9aRWRGWjFCVFFqRmliVkpzV20xc2RWcFhVVGRZUnpWalpFWjRNR1pXZUhWWVJ6VmpaRVo0TUV4NU9HZFdSMmhzU1VoV2VXSkRRbXBaVnpSbldXMVZaMWxYTkdkaU0wSXdZVmM1ZFdONVFuWlpiWEJzV1ROUlowdElaRzloVjA1dlNVaFNiMXBYTkdkaVdGWjZaRU5DYjFsWVdteEpRelV4WTIxM2NGaEhOV05rUm5nd1kyMVdNR1JZU25WSlIzQlNaRmRXZVdWVE5XaGhiVVkwUzBOQ2NWVllWbXhqYm10MVdsaG9NRnBYTld0TFEwSTNXRWMxWTJSR2VEQllTRkl4WTIxM05rbElWbmxpUTNoallteDRNRmhJVW1Oa1NGSTFZMGRWTmtsSE1XeGtSMmgyV2tONFkySnNlREJZU0ZKalpFZFNhR1JIUmxWbFdFSnNUMmxDTUdWWVFteE1SbmgxV0VoU1kyUkdlREJhUjBZd1dWUnZaMXBIUmpCWlUzaGpZbXg0TUZoSVVtTmtTRTR4V1RKT2JHTXpUVFpKUjA1b1lrZDRhVmxYVG5KWVJ6VmpaRVo0TUdaVGQyZGhiRVl4V2xoS05VeHRiSHBWUjNob1lWYzFVRmx0Y0d4Wk0xRnZTVWhXZVdKRFFYQkpRMWx0U1VoV2VXSkRRWEJKUTJzM1dFYzFZMlJJTURkWVJ6VTVTVU5yTjFoSE5XTmlia3BzWkVoV2VXSnBRbkZWV0Zac1kyNXJOMWhITlRsSlEyczNXRWMwYVZoWU1EMWNiaUpkZlE9PVxuIl19
