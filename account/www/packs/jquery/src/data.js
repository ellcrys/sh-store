define([
    "./core",
    "./core/access",
    "./data/var/dataPriv",
    "./data/var/dataUser"
], function (jQuery, access, dataPriv, dataUser) {
    "use strict";
    //	Implementation Summary
    //
    //	1. Enforce API surface and semantic compatibility with 1.9.x branch
    //	2. Improve the module's maintainability by reducing the storage
    //		paths to a single mechanism.
    //	3. Use the same single mechanism to support "private" and "user" data.
    //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
    //	5. Avoid exposing implementation details on user objects (eg. expando properties)
    //	6. Provide a clear path for implementation upgrade to WeakMap in 2014
    var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /[A-Z]/g;
    function getData(data) {
        if (data === "true") {
            return true;
        }
        if (data === "false") {
            return false;
        }
        if (data === "null") {
            return null;
        }
        // Only convert to a number if it doesn't change the string
        if (data === +data + "") {
            return +data;
        }
        if (rbrace.test(data)) {
            return JSON.parse(data);
        }
        return data;
    }
    function dataAttr(elem, key, data) {
        var name;
        // If nothing was found internally, try to fetch any
        // data from the HTML5 data-* attribute
        if (data === undefined && elem.nodeType === 1) {
            name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
            data = elem.getAttribute(name);
            if (typeof data === "string") {
                try {
                    data = getData(data);
                }
                catch (e) { }
                // Make sure we set the data so it isn't changed later
                dataUser.set(elem, key, data);
            }
            else {
                data = undefined;
            }
        }
        return data;
    }
    jQuery.extend({
        hasData: function (elem) {
            return dataUser.hasData(elem) || dataPriv.hasData(elem);
        },
        data: function (elem, name, data) {
            return dataUser.access(elem, name, data);
        },
        removeData: function (elem, name) {
            dataUser.remove(elem, name);
        },
        // TODO: Now that all calls to _data and _removeData have been replaced
        // with direct calls to dataPriv methods, these can be deprecated.
        _data: function (elem, name, data) {
            return dataPriv.access(elem, name, data);
        },
        _removeData: function (elem, name) {
            dataPriv.remove(elem, name);
        }
    });
    jQuery.fn.extend({
        data: function (key, value) {
            var i, name, data, elem = this[0], attrs = elem && elem.attributes;
            // Gets all values
            if (key === undefined) {
                if (this.length) {
                    data = dataUser.get(elem);
                    if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
                        i = attrs.length;
                        while (i--) {
                            // Support: IE 11 only
                            // The attrs elements can be null (#14894)
                            if (attrs[i]) {
                                name = attrs[i].name;
                                if (name.indexOf("data-") === 0) {
                                    name = jQuery.camelCase(name.slice(5));
                                    dataAttr(elem, name, data[name]);
                                }
                            }
                        }
                        dataPriv.set(elem, "hasDataAttrs", true);
                    }
                }
                return data;
            }
            // Sets multiple values
            if (typeof key === "object") {
                return this.each(function () {
                    dataUser.set(this, key);
                });
            }
            return access(this, function (value) {
                var data;
                // The calling jQuery object (element matches) is not empty
                // (and therefore has an element appears at this[ 0 ]) and the
                // `value` parameter was not undefined. An empty jQuery object
                // will result in `undefined` for elem = this[ 0 ] which will
                // throw an exception if an attempt to read a data cache is made.
                if (elem && value === undefined) {
                    // Attempt to get data from the cache
                    // The key will always be camelCased in Data
                    data = dataUser.get(elem, key);
                    if (data !== undefined) {
                        return data;
                    }
                    // Attempt to "discover" the data in
                    // HTML5 custom data-* attrs
                    data = dataAttr(elem, key);
                    if (data !== undefined) {
                        return data;
                    }
                    // We tried really hard, but the data doesn't exist.
                    return;
                }
                // Set the data...
                this.each(function () {
                    // We always store the camelCased key
                    dataUser.set(this, key, value);
                });
            }, null, value, arguments.length > 1, null, true);
        },
        removeData: function (key) {
            return this.each(function () {
                dataUser.remove(this, key);
            });
        }
    });
    return jQuery;
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInd3dy9wYWNrcy9qcXVlcnkvc3JjL2RhdGEuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDO0lBQ0gsUUFBUTtJQUNSLGVBQWU7SUFDZixxQkFBcUI7SUFDckIscUJBQXFCO0NBQ3hCLEVBQUUsVUFBVSxNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxRQUFRO0lBQzNDLFlBQVksQ0FBQztJQUNiLHlCQUF5QjtJQUN6QixFQUFFO0lBQ0Ysc0VBQXNFO0lBQ3RFLGtFQUFrRTtJQUNsRSxnQ0FBZ0M7SUFDaEMseUVBQXlFO0lBQ3pFLGdGQUFnRjtJQUNoRixvRkFBb0Y7SUFDcEYsd0VBQXdFO0lBQ3hFLElBQUksTUFBTSxHQUFHLCtCQUErQixFQUFFLFVBQVUsR0FBRyxRQUFRLENBQUM7SUFDcEUsaUJBQWlCLElBQUk7UUFDakIsRUFBRSxDQUFDLENBQUMsSUFBSSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDbEIsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNoQixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsSUFBSSxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDbkIsTUFBTSxDQUFDLEtBQUssQ0FBQztRQUNqQixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsSUFBSSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDbEIsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNoQixDQUFDO1FBQ0QsMkRBQTJEO1FBQzNELEVBQUUsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNqQixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEIsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUIsQ0FBQztR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QUM7QUFFSCx1MVlBQXUxWSIsImZpbGUiOiJ3d3cvcGFja3MvanF1ZXJ5L3NyYy9kYXRhLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKFtcbiAgICBcIi4vY29yZVwiLFxuICAgIFwiLi9jb3JlL2FjY2Vzc1wiLFxuICAgIFwiLi9kYXRhL3Zhci9kYXRhUHJpdlwiLFxuICAgIFwiLi9kYXRhL3Zhci9kYXRhVXNlclwiXG5dLCBmdW5jdGlvbiAoalF1ZXJ5LCBhY2Nlc3MsIGRhdGFQcml2LCBkYXRhVXNlcikge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIC8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG4gICAgLy9cbiAgICAvL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuICAgIC8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2VcbiAgICAvL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4gICAgLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG4gICAgLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcbiAgICAvL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4gICAgLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuICAgIHZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sIHJtdWx0aURhc2ggPSAvW0EtWl0vZztcbiAgICBmdW5jdGlvbiBnZXREYXRhKGRhdGEpIHtcbiAgICAgICAgaWYgKGRhdGEgPT09IFwidHJ1ZVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YSA9PT0gXCJmYWxzZVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEgPT09IFwibnVsbFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICAvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuICAgICAgICBpZiAoZGF0YSA9PT0gK2RhdGEgKyBcIlwiKSB7XG4gICAgICAgICAgICByZXR1cm4gK2RhdGE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJicmFjZS50ZXN0KGRhdGEpKSB7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZGF0YUF0dHIoZWxlbSwga2V5LCBkYXRhKSB7XG4gICAgICAgIHZhciBuYW1lO1xuICAgICAgICAvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG4gICAgICAgIC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuICAgICAgICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgICAgIG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZShybXVsdGlEYXNoLCBcIi0kJlwiKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IGdldERhdGEoZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7IH1cbiAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcbiAgICAgICAgICAgICAgICBkYXRhVXNlci5zZXQoZWxlbSwga2V5LCBkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGRhdGEgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGpRdWVyeS5leHRlbmQoe1xuICAgICAgICBoYXNEYXRhOiBmdW5jdGlvbiAoZWxlbSkge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGFVc2VyLmhhc0RhdGEoZWxlbSkgfHwgZGF0YVByaXYuaGFzRGF0YShlbGVtKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGF0YTogZnVuY3Rpb24gKGVsZW0sIG5hbWUsIGRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRhVXNlci5hY2Nlc3MoZWxlbSwgbmFtZSwgZGF0YSk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbW92ZURhdGE6IGZ1bmN0aW9uIChlbGVtLCBuYW1lKSB7XG4gICAgICAgICAgICBkYXRhVXNlci5yZW1vdmUoZWxlbSwgbmFtZSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXG4gICAgICAgIC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFQcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuICAgICAgICBfZGF0YTogZnVuY3Rpb24gKGVsZW0sIG5hbWUsIGRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRhUHJpdi5hY2Nlc3MoZWxlbSwgbmFtZSwgZGF0YSk7XG4gICAgICAgIH0sXG4gICAgICAgIF9yZW1vdmVEYXRhOiBmdW5jdGlvbiAoZWxlbSwgbmFtZSkge1xuICAgICAgICAgICAgZGF0YVByaXYucmVtb3ZlKGVsZW0sIG5hbWUpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgalF1ZXJ5LmZuLmV4dGVuZCh7XG4gICAgICAgIGRhdGE6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgaSwgbmFtZSwgZGF0YSwgZWxlbSA9IHRoaXNbMF0sIGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG4gICAgICAgICAgICAvLyBHZXRzIGFsbCB2YWx1ZXNcbiAgICAgICAgICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhID0gZGF0YVVzZXIuZ2V0KGVsZW0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YVByaXYuZ2V0KGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gYXR0cnMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cnNbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSA9IGF0dHJzW2ldLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYW1lLmluZGV4T2YoXCJkYXRhLVwiKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSA9IGpRdWVyeS5jYW1lbENhc2UobmFtZS5zbGljZSg1KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhQXR0cihlbGVtLCBuYW1lLCBkYXRhW25hbWVdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFQcml2LnNldChlbGVtLCBcImhhc0RhdGFBdHRyc1wiLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG4gICAgICAgICAgICBpZiAodHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhVXNlci5zZXQodGhpcywga2V5KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhY2Nlc3ModGhpcywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGE7XG4gICAgICAgICAgICAgICAgLy8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcbiAgICAgICAgICAgICAgICAvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuICAgICAgICAgICAgICAgIC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG4gICAgICAgICAgICAgICAgLy8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxuICAgICAgICAgICAgICAgIC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG4gICAgICAgICAgICAgICAgaWYgKGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBrZXkgd2lsbCBhbHdheXMgYmUgY2FtZWxDYXNlZCBpbiBEYXRhXG4gICAgICAgICAgICAgICAgICAgIGRhdGEgPSBkYXRhVXNlci5nZXQoZWxlbSwga2V5KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cbiAgICAgICAgICAgICAgICAgICAgLy8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xuICAgICAgICAgICAgICAgICAgICBkYXRhID0gZGF0YUF0dHIoZWxlbSwga2V5KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgZGF0YS4uLlxuICAgICAgICAgICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGFsd2F5cyBzdG9yZSB0aGUgY2FtZWxDYXNlZCBrZXlcbiAgICAgICAgICAgICAgICAgICAgZGF0YVVzZXIuc2V0KHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlRGF0YTogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZGF0YVVzZXIucmVtb3ZlKHRoaXMsIGtleSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBqUXVlcnk7XG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmQzZHk5d1lXTnJjeTlxY1hWbGNua3ZjM0pqTDJSaGRHRXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1RVRkJUU3hEUVVGRk8wbEJRMUFzVVVGQlVUdEpRVU5TTEdWQlFXVTdTVUZEWml4eFFrRkJjVUk3U1VGRGNrSXNjVUpCUVhGQ08wTkJRM0pDTEVWQlFVVXNWVUZCVlN4TlFVRk5MRVZCUVVVc1RVRkJUU3hGUVVGRkxGRkJRVkVzUlVGQlJTeFJRVUZSTzBsQlJTOURMRmxCUVZrc1EwRkJRenRKUVVWaUxIbENRVUY1UWp0SlFVTjZRaXhGUVVGRk8wbEJRMFlzYzBWQlFYTkZPMGxCUTNSRkxHdEZRVUZyUlR0SlFVTnNSU3huUTBGQlowTTdTVUZEYUVNc2VVVkJRWGxGTzBsQlEzcEZMR2RHUVVGblJqdEpRVU5vUml4dlJrRkJiMFk3U1VGRGNFWXNkMFZCUVhkRk8wbEJSWGhGTEVsQlFVa3NUVUZCVFN4SFFVRkhMQ3RDUVVFclFpeEZRVU16UXl4VlFVRlZMRWRCUVVjc1VVRkJVU3hEUVVGRE8wbEJSWFpDTEdsQ1FVRnJRaXhKUVVGSk8xRkJRM0pDTEVWQlFVVXNRMEZCUXl4RFFVRkZMRWxCUVVrc1MwRkJTeXhOUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEzWkNMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU03VVVGRFlpeERRVUZETzFGQlJVUXNSVUZCUlN4RFFVRkRMRU5CUVVVc1NVRkJTU3hMUVVGTExFOUJRVkVzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEZUVJc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF6dFJRVU5rTEVOQlFVTTdVVUZGUkN4RlFVRkZMRU5CUVVNc1EwRkJSU3hKUVVGSkxFdEJRVXNzVFVGQlR5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTjJRaXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETzFGQlEySXNRMEZCUXp0UlFVVkVMREpFUVVFeVJEdFJRVU16UkN4RlFVRkZMRU5CUVVNc1EwRkJSU3hKUVVGSkxFdEJRVXNzUTBGQlF5eEpRVUZKTEVkQlFVY3NSVUZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVNelFpeE5RVUZOTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNN1VVRkRaQ3hEUVVGRE8xRkJSVVFzUlVGQlJTeERRVUZETEVOQlFVVXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJSU3hKUVVGSkxFTkJRVWNzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZETTBJc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVVXNTVUZCU1N4RFFVRkZMRU5CUVVNN1VVRkRNMElzUTBGQlF6dFJRVVZFTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNN1NVRkRZaXhEUVVGRE8wbEJSVVFzYTBKQlFXMUNMRWxCUVVrc1JVRkJSU3hIUVVGSExFVkJRVVVzU1VGQlNUdFJRVU5xUXl4SlFVRkpMRWxCUVVrc1EwRkJRenRSUVVWVUxHOUVRVUZ2UkR0UlFVTndSQ3gxUTBGQmRVTTdVVUZEZGtNc1JVRkJSU3hEUVVGRExFTkJRVVVzU1VGQlNTeExRVUZMTEZOQlFWTXNTVUZCU1N4SlFVRkpMRU5CUVVNc1VVRkJVU3hMUVVGTExFTkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEYWtRc1NVRkJTU3hIUVVGSExFOUJRVThzUjBGQlJ5eEhRVUZITEVOQlFVTXNUMEZCVHl4RFFVRkZMRlZCUVZVc1JVRkJSU3hMUVVGTExFTkJRVVVzUTBGQlF5eFhRVUZYTEVWQlFVVXNRMEZCUXp0WlFVTm9SU3hKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUlN4SlFVRkpMRU5CUVVVc1EwRkJRenRaUVVWcVF5eEZRVUZGTEVOQlFVTXNRMEZCUlN4UFFVRlBMRWxCUVVrc1MwRkJTeXhSUVVGVExFTkJRVU1zUTBGQlF5eERRVUZETzJkQ1FVTm9ReXhKUVVGSkxFTkJRVU03YjBKQlEwb3NTVUZCU1N4SFFVRkhMRTlCUVU4c1EwRkJSU3hKUVVGSkxFTkJRVVVzUTBGQlF6dG5Ra0ZEZUVJc1EwRkJRenRuUWtGQlF5eExRVUZMTEVOQlFVTXNRMEZCUlN4RFFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVUVzUTBGQlF6dG5Ra0ZGYUVJc2MwUkJRWE5FTzJkQ1FVTjBSQ3hSUVVGUkxFTkJRVU1zUjBGQlJ5eERRVUZGTEVsQlFVa3NSVUZCUlN4SFFVRkhMRVZCUVVVc1NVRkJTU3hEUVVGRkxFTkJRVU03V1VGRGFrTXNRMEZCUXp0WlFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8yZENRVU5RTEVsQlFVa3NSMEZCUnl4VFFVRlRMRU5CUVVNN1dVRkRiRUlzUTBGQlF6dFJRVU5HTEVOQlFVTTdVVUZEUkN4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRE8wbEJRMklzUTBGQlF6dEpRVVZFTEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVVN1VVRkRaQ3hQUVVGUExFVkJRVVVzVlVGQlZTeEpRVUZKTzFsQlEzUkNMRTFCUVUwc1EwRkJReXhSUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZGTEVsQlFVa3NRMEZCUlN4SlFVRkpMRkZCUVZFc1EwRkJReXhQUVVGUExFTkJRVVVzU1VGQlNTeERRVUZGTEVOQlFVTTdVVUZETjBRc1EwRkJRenRSUVVWRUxFbEJRVWtzUlVGQlJTeFZRVUZWTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTVHRaUVVNdlFpeE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRTFCUVUwc1EwRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUlN4RFFVRkRPMUZCUXpWRExFTkJRVU03VVVGRlJDeFZRVUZWTEVWQlFVVXNWVUZCVlN4SlFVRkpMRVZCUVVVc1NVRkJTVHRaUVVNdlFpeFJRVUZSTEVOQlFVTXNUVUZCVFN4RFFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFTkJRVVVzUTBGQlF6dFJRVU12UWl4RFFVRkRPMUZCUlVRc2RVVkJRWFZGTzFGQlEzWkZMR3RGUVVGclJUdFJRVU5zUlN4TFFVRkxMRVZCUVVVc1ZVRkJWU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVazdXVUZEYUVNc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eE5RVUZOTEVOQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFTkJRVVVzUTBGQlF6dFJRVU0xUXl4RFFVRkRPMUZCUlVRc1YwRkJWeXhGUVVGRkxGVkJRVlVzU1VGQlNTeEZRVUZGTEVsQlFVazdXVUZEYUVNc1VVRkJVU3hEUVVGRExFMUJRVTBzUTBGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RFFVRkZMRU5CUVVNN1VVRkRMMElzUTBGQlF6dExRVU5FTEVOQlFVVXNRMEZCUXp0SlFVVktMRTFCUVUwc1EwRkJReXhGUVVGRkxFTkJRVU1zVFVGQlRTeERRVUZGTzFGQlEycENMRWxCUVVrc1JVRkJSU3hWUVVGVkxFZEJRVWNzUlVGQlJTeExRVUZMTzFsQlEzcENMRWxCUVVrc1EwRkJReXhGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlEyaENMRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVVVzUTBGQlF5eERRVUZGTEVWQlEyaENMRXRCUVVzc1IwRkJSeXhKUVVGSkxFbEJRVWtzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXp0WlFVVnFReXhyUWtGQmEwSTdXVUZEYkVJc1JVRkJSU3hEUVVGRExFTkJRVVVzUjBGQlJ5eExRVUZMTEZOQlFWVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRM3BDTEVWQlFVVXNRMEZCUXl4RFFVRkZMRWxCUVVrc1EwRkJReXhOUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETzI5Q1FVTnVRaXhKUVVGSkxFZEJRVWNzVVVGQlVTeERRVUZETEVkQlFVY3NRMEZCUlN4SlFVRkpMRU5CUVVVc1EwRkJRenR2UWtGRk5VSXNSVUZCUlN4RFFVRkRMRU5CUVVVc1NVRkJTU3hEUVVGRExGRkJRVkVzUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1IwRkJSeXhEUVVGRkxFbEJRVWtzUlVGQlJTeGpRVUZqTEVOQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNN2QwSkJRM0JGTEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRE8zZENRVU5xUWl4UFFVRlJMRU5CUVVNc1JVRkJSU3hGUVVGSExFTkJRVU03TkVKQlJXUXNjMEpCUVhOQ096UkNRVU4wUWl3d1EwRkJNRU03TkVKQlF6RkRMRVZCUVVVc1EwRkJReXhEUVVGRkxFdEJRVXNzUTBGQlJTeERRVUZETEVOQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNN1owTkJRMnhDTEVsQlFVa3NSMEZCUnl4TFFVRkxMRU5CUVVVc1EwRkJReXhEUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETzJkRFFVTjJRaXhGUVVGRkxFTkJRVU1zUTBGQlJTeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkZMRTlCUVU4c1EwRkJSU3hMUVVGTExFTkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdiME5CUTNKRExFbEJRVWtzUjBGQlJ5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkZMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVVVzUTBGQlF5eERRVUZGTEVOQlFVVXNRMEZCUXp0dlEwRkRNME1zVVVGQlVTeERRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hEUVVGRkxFbEJRVWtzUTBGQlJTeERRVUZGTEVOQlFVTTdaME5CUTNSRExFTkJRVU03TkVKQlEwWXNRMEZCUXp0M1FrRkRSaXhEUVVGRE8zZENRVU5FTEZGQlFWRXNRMEZCUXl4SFFVRkhMRU5CUVVVc1NVRkJTU3hGUVVGRkxHTkJRV01zUlVGQlJTeEpRVUZKTEVOQlFVVXNRMEZCUXp0dlFrRkROVU1zUTBGQlF6dG5Ra0ZEUml4RFFVRkRPMmRDUVVWRUxFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTTdXVUZEWWl4RFFVRkRPMWxCUlVRc2RVSkJRWFZDTzFsQlEzWkNMRVZCUVVVc1EwRkJReXhEUVVGRkxFOUJRVThzUjBGQlJ5eExRVUZMTEZGQlFWTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJReTlDTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRk8yOUNRVU5xUWl4UlFVRlJMRU5CUVVNc1IwRkJSeXhEUVVGRkxFbEJRVWtzUlVGQlJTeEhRVUZITEVOQlFVVXNRMEZCUXp0blFrRkRNMElzUTBGQlF5eERRVUZGTEVOQlFVTTdXVUZEVEN4RFFVRkRPMWxCUlVRc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlJTeEpRVUZKTEVWQlFVVXNWVUZCVlN4TFFVRkxPMmRDUVVOdVF5eEpRVUZKTEVsQlFVa3NRMEZCUXp0blFrRkZWQ3d5UkVGQk1rUTdaMEpCUXpORUxEaEVRVUU0UkR0blFrRkRPVVFzT0VSQlFUaEVPMmRDUVVNNVJDdzJSRUZCTmtRN1owSkJRemRFTEdsRlFVRnBSVHRuUWtGRGFrVXNSVUZCUlN4RFFVRkRMRU5CUVVVc1NVRkJTU3hKUVVGSkxFdEJRVXNzUzBGQlN5eFRRVUZWTEVOQlFVTXNRMEZCUXl4RFFVRkRPMjlDUVVWdVF5eHhRMEZCY1VNN2IwSkJRM0pETERSRFFVRTBRenR2UWtGRE5VTXNTVUZCU1N4SFFVRkhMRkZCUVZFc1EwRkJReXhIUVVGSExFTkJRVVVzU1VGQlNTeEZRVUZGTEVkQlFVY3NRMEZCUlN4RFFVRkRPMjlDUVVOcVF5eEZRVUZGTEVOQlFVTXNRMEZCUlN4SlFVRkpMRXRCUVVzc1UwRkJWU3hEUVVGRExFTkJRVU1zUTBGQlF6dDNRa0ZETVVJc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF6dHZRa0ZEWWl4RFFVRkRPMjlDUVVWRUxHOURRVUZ2UXp0dlFrRkRjRU1zTkVKQlFUUkNPMjlDUVVNMVFpeEpRVUZKTEVkQlFVY3NVVUZCVVN4RFFVRkZMRWxCUVVrc1JVRkJSU3hIUVVGSExFTkJRVVVzUTBGQlF6dHZRa0ZETjBJc1JVRkJSU3hEUVVGRExFTkJRVVVzU1VGQlNTeExRVUZMTEZOQlFWVXNRMEZCUXl4RFFVRkRMRU5CUVVNN2QwSkJRekZDTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNN2IwSkJRMklzUTBGQlF6dHZRa0ZGUkN4dlJFRkJiMFE3YjBKQlEzQkVMRTFCUVUwc1EwRkJRenRuUWtGRFVpeERRVUZETzJkQ1FVVkVMR3RDUVVGclFqdG5Ra0ZEYkVJc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlJUdHZRa0ZGVml4eFEwRkJjVU03YjBKQlEzSkRMRkZCUVZFc1EwRkJReXhIUVVGSExFTkJRVVVzU1VGQlNTeEZRVUZGTEVkQlFVY3NSVUZCUlN4TFFVRkxMRU5CUVVVc1EwRkJRenRuUWtGRGJFTXNRMEZCUXl4RFFVRkZMRU5CUVVNN1dVRkRUQ3hEUVVGRExFVkJRVVVzU1VGQlNTeEZRVUZGTEV0QlFVc3NSVUZCUlN4VFFVRlRMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RFFVRkZMRU5CUVVNN1VVRkRjRVFzUTBGQlF6dFJRVVZFTEZWQlFWVXNSVUZCUlN4VlFVRlZMRWRCUVVjN1dVRkRlRUlzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVVN1owSkJRMnBDTEZGQlFWRXNRMEZCUXl4TlFVRk5MRU5CUVVVc1NVRkJTU3hGUVVGRkxFZEJRVWNzUTBGQlJTeERRVUZETzFsQlF6bENMRU5CUVVNc1EwRkJSU3hEUVVGRE8xRkJRMHdzUTBGQlF6dExRVU5FTEVOQlFVVXNRMEZCUXp0SlFVVktMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU03UVVGRFpDeERRVUZETEVOQlFVVXNRMEZCUXlJc0ltWnBiR1VpT2lKM2QzY3ZjR0ZqYTNNdmFuRjFaWEo1TDNOeVl5OWtZWFJoTG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2laR1ZtYVc1bEtDQmJYRzVjZEZ3aUxpOWpiM0psWENJc1hHNWNkRndpTGk5amIzSmxMMkZqWTJWemMxd2lMRnh1WEhSY0lpNHZaR0YwWVM5MllYSXZaR0YwWVZCeWFYWmNJaXhjYmx4MFhDSXVMMlJoZEdFdmRtRnlMMlJoZEdGVmMyVnlYQ0pjYmwwc0lHWjFibU4wYVc5dUtDQnFVWFZsY25rc0lHRmpZMlZ6Y3l3Z1pHRjBZVkJ5YVhZc0lHUmhkR0ZWYzJWeUlDa2dlMXh1WEc1Y0luVnpaU0J6ZEhKcFkzUmNJanRjYmx4dUx5OWNkRWx0Y0d4bGJXVnVkR0YwYVc5dUlGTjFiVzFoY25sY2JpOHZYRzR2TDF4ME1TNGdSVzVtYjNKalpTQkJVRWtnYzNWeVptRmpaU0JoYm1RZ2MyVnRZVzUwYVdNZ1kyOXRjR0YwYVdKcGJHbDBlU0IzYVhSb0lERXVPUzU0SUdKeVlXNWphRnh1THk5Y2RESXVJRWx0Y0hKdmRtVWdkR2hsSUcxdlpIVnNaU2R6SUcxaGFXNTBZV2x1WVdKcGJHbDBlU0JpZVNCeVpXUjFZMmx1WnlCMGFHVWdjM1J2Y21GblpWeHVMeTljZEZ4MGNHRjBhSE1nZEc4Z1lTQnphVzVuYkdVZ2JXVmphR0Z1YVhOdExseHVMeTljZERNdUlGVnpaU0IwYUdVZ2MyRnRaU0J6YVc1bmJHVWdiV1ZqYUdGdWFYTnRJSFJ2SUhOMWNIQnZjblFnWENKd2NtbDJZWFJsWENJZ1lXNWtJRndpZFhObGNsd2lJR1JoZEdFdVhHNHZMMXgwTkM0Z1gwNWxkbVZ5WHlCbGVIQnZjMlVnWENKd2NtbDJZWFJsWENJZ1pHRjBZU0IwYnlCMWMyVnlJR052WkdVZ0tGUlBSRTg2SUVSeWIzQWdYMlJoZEdFc0lGOXlaVzF2ZG1WRVlYUmhLVnh1THk5Y2REVXVJRUYyYjJsa0lHVjRjRzl6YVc1bklHbHRjR3hsYldWdWRHRjBhVzl1SUdSbGRHRnBiSE1nYjI0Z2RYTmxjaUJ2WW1wbFkzUnpJQ2hsWnk0Z1pYaHdZVzVrYnlCd2NtOXdaWEowYVdWektWeHVMeTljZERZdUlGQnliM1pwWkdVZ1lTQmpiR1ZoY2lCd1lYUm9JR1p2Y2lCcGJYQnNaVzFsYm5SaGRHbHZiaUIxY0dkeVlXUmxJSFJ2SUZkbFlXdE5ZWEFnYVc0Z01qQXhORnh1WEc1MllYSWdjbUp5WVdObElEMGdMMTRvUHpwY1hIdGJYRngzWEZ4WFhTcGNYSDE4WEZ4YlcxeGNkMXhjVjEwcVhGeGRLU1F2TEZ4dVhIUnliWFZzZEdsRVlYTm9JRDBnTDF0QkxWcGRMMmM3WEc1Y2JtWjFibU4wYVc5dUlHZGxkRVJoZEdFb0lHUmhkR0VnS1NCN1hHNWNkR2xtSUNnZ1pHRjBZU0E5UFQwZ1hDSjBjblZsWENJZ0tTQjdYRzVjZEZ4MGNtVjBkWEp1SUhSeWRXVTdYRzVjZEgxY2JseHVYSFJwWmlBb0lHUmhkR0VnUFQwOUlGd2labUZzYzJWY0lpQXBJSHRjYmx4MFhIUnlaWFIxY200Z1ptRnNjMlU3WEc1Y2RIMWNibHh1WEhScFppQW9JR1JoZEdFZ1BUMDlJRndpYm5Wc2JGd2lJQ2tnZTF4dVhIUmNkSEpsZEhWeWJpQnVkV3hzTzF4dVhIUjlYRzVjYmx4MEx5OGdUMjVzZVNCamIyNTJaWEowSUhSdklHRWdiblZ0WW1WeUlHbG1JR2wwSUdSdlpYTnVKM1FnWTJoaGJtZGxJSFJvWlNCemRISnBibWRjYmx4MGFXWWdLQ0JrWVhSaElEMDlQU0FyWkdGMFlTQXJJRndpWENJZ0tTQjdYRzVjZEZ4MGNtVjBkWEp1SUN0a1lYUmhPMXh1WEhSOVhHNWNibHgwYVdZZ0tDQnlZbkpoWTJVdWRHVnpkQ2dnWkdGMFlTQXBJQ2tnZTF4dVhIUmNkSEpsZEhWeWJpQktVMDlPTG5CaGNuTmxLQ0JrWVhSaElDazdYRzVjZEgxY2JseHVYSFJ5WlhSMWNtNGdaR0YwWVR0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWkdGMFlVRjBkSElvSUdWc1pXMHNJR3RsZVN3Z1pHRjBZU0FwSUh0Y2JseDBkbUZ5SUc1aGJXVTdYRzVjYmx4MEx5OGdTV1lnYm05MGFHbHVaeUIzWVhNZ1ptOTFibVFnYVc1MFpYSnVZV3hzZVN3Z2RISjVJSFJ2SUdabGRHTm9JR0Z1ZVZ4dVhIUXZMeUJrWVhSaElHWnliMjBnZEdobElFaFVUVXcxSUdSaGRHRXRLaUJoZEhSeWFXSjFkR1ZjYmx4MGFXWWdLQ0JrWVhSaElEMDlQU0IxYm1SbFptbHVaV1FnSmlZZ1pXeGxiUzV1YjJSbFZIbHdaU0E5UFQwZ01TQXBJSHRjYmx4MFhIUnVZVzFsSUQwZ1hDSmtZWFJoTFZ3aUlDc2dhMlY1TG5KbGNHeGhZMlVvSUhKdGRXeDBhVVJoYzJnc0lGd2lMU1FtWENJZ0tTNTBiMHh2ZDJWeVEyRnpaU2dwTzF4dVhIUmNkR1JoZEdFZ1BTQmxiR1Z0TG1kbGRFRjBkSEpwWW5WMFpTZ2dibUZ0WlNBcE8xeHVYRzVjZEZ4MGFXWWdLQ0IwZVhCbGIyWWdaR0YwWVNBOVBUMGdYQ0p6ZEhKcGJtZGNJaUFwSUh0Y2JseDBYSFJjZEhSeWVTQjdYRzVjZEZ4MFhIUmNkR1JoZEdFZ1BTQm5aWFJFWVhSaEtDQmtZWFJoSUNrN1hHNWNkRngwWEhSOUlHTmhkR05vSUNnZ1pTQXBJSHQ5WEc1Y2JseDBYSFJjZEM4dklFMWhhMlVnYzNWeVpTQjNaU0J6WlhRZ2RHaGxJR1JoZEdFZ2MyOGdhWFFnYVhOdUozUWdZMmhoYm1kbFpDQnNZWFJsY2x4dVhIUmNkRngwWkdGMFlWVnpaWEl1YzJWMEtDQmxiR1Z0TENCclpYa3NJR1JoZEdFZ0tUdGNibHgwWEhSOUlHVnNjMlVnZTF4dVhIUmNkRngwWkdGMFlTQTlJSFZ1WkdWbWFXNWxaRHRjYmx4MFhIUjlYRzVjZEgxY2JseDBjbVYwZFhKdUlHUmhkR0U3WEc1OVhHNWNibXBSZFdWeWVTNWxlSFJsYm1Rb0lIdGNibHgwYUdGelJHRjBZVG9nWm5WdVkzUnBiMjRvSUdWc1pXMGdLU0I3WEc1Y2RGeDBjbVYwZFhKdUlHUmhkR0ZWYzJWeUxtaGhjMFJoZEdFb0lHVnNaVzBnS1NCOGZDQmtZWFJoVUhKcGRpNW9ZWE5FWVhSaEtDQmxiR1Z0SUNrN1hHNWNkSDBzWEc1Y2JseDBaR0YwWVRvZ1puVnVZM1JwYjI0b0lHVnNaVzBzSUc1aGJXVXNJR1JoZEdFZ0tTQjdYRzVjZEZ4MGNtVjBkWEp1SUdSaGRHRlZjMlZ5TG1GalkyVnpjeWdnWld4bGJTd2dibUZ0WlN3Z1pHRjBZU0FwTzF4dVhIUjlMRnh1WEc1Y2RISmxiVzkyWlVSaGRHRTZJR1oxYm1OMGFXOXVLQ0JsYkdWdExDQnVZVzFsSUNrZ2UxeHVYSFJjZEdSaGRHRlZjMlZ5TG5KbGJXOTJaU2dnWld4bGJTd2dibUZ0WlNBcE8xeHVYSFI5TEZ4dVhHNWNkQzh2SUZSUFJFODZJRTV2ZHlCMGFHRjBJR0ZzYkNCallXeHNjeUIwYnlCZlpHRjBZU0JoYm1RZ1gzSmxiVzkyWlVSaGRHRWdhR0YyWlNCaVpXVnVJSEpsY0d4aFkyVmtYRzVjZEM4dklIZHBkR2dnWkdseVpXTjBJR05oYkd4eklIUnZJR1JoZEdGUWNtbDJJRzFsZEdodlpITXNJSFJvWlhObElHTmhiaUJpWlNCa1pYQnlaV05oZEdWa0xseHVYSFJmWkdGMFlUb2dablZ1WTNScGIyNG9JR1ZzWlcwc0lHNWhiV1VzSUdSaGRHRWdLU0I3WEc1Y2RGeDBjbVYwZFhKdUlHUmhkR0ZRY21sMkxtRmpZMlZ6Y3lnZ1pXeGxiU3dnYm1GdFpTd2daR0YwWVNBcE8xeHVYSFI5TEZ4dVhHNWNkRjl5WlcxdmRtVkVZWFJoT2lCbWRXNWpkR2x2YmlnZ1pXeGxiU3dnYm1GdFpTQXBJSHRjYmx4MFhIUmtZWFJoVUhKcGRpNXlaVzF2ZG1Vb0lHVnNaVzBzSUc1aGJXVWdLVHRjYmx4MGZWeHVmU0FwTzF4dVhHNXFVWFZsY25rdVptNHVaWGgwWlc1a0tDQjdYRzVjZEdSaGRHRTZJR1oxYm1OMGFXOXVLQ0JyWlhrc0lIWmhiSFZsSUNrZ2UxeHVYSFJjZEhaaGNpQnBMQ0J1WVcxbExDQmtZWFJoTEZ4dVhIUmNkRngwWld4bGJTQTlJSFJvYVhOYklEQWdYU3hjYmx4MFhIUmNkR0YwZEhKeklEMGdaV3hsYlNBbUppQmxiR1Z0TG1GMGRISnBZblYwWlhNN1hHNWNibHgwWEhRdkx5QkhaWFJ6SUdGc2JDQjJZV3gxWlhOY2JseDBYSFJwWmlBb0lHdGxlU0E5UFQwZ2RXNWtaV1pwYm1Wa0lDa2dlMXh1WEhSY2RGeDBhV1lnS0NCMGFHbHpMbXhsYm1kMGFDQXBJSHRjYmx4MFhIUmNkRngwWkdGMFlTQTlJR1JoZEdGVmMyVnlMbWRsZENnZ1pXeGxiU0FwTzF4dVhHNWNkRngwWEhSY2RHbG1JQ2dnWld4bGJTNXViMlJsVkhsd1pTQTlQVDBnTVNBbUppQWhaR0YwWVZCeWFYWXVaMlYwS0NCbGJHVnRMQ0JjSW1oaGMwUmhkR0ZCZEhSeWMxd2lJQ2tnS1NCN1hHNWNkRngwWEhSY2RGeDBhU0E5SUdGMGRISnpMbXhsYm1kMGFEdGNibHgwWEhSY2RGeDBYSFIzYUdsc1pTQW9JR2t0TFNBcElIdGNibHh1WEhSY2RGeDBYSFJjZEZ4MEx5OGdVM1Z3Y0c5eWREb2dTVVVnTVRFZ2IyNXNlVnh1WEhSY2RGeDBYSFJjZEZ4MEx5OGdWR2hsSUdGMGRISnpJR1ZzWlcxbGJuUnpJR05oYmlCaVpTQnVkV3hzSUNnak1UUTRPVFFwWEc1Y2RGeDBYSFJjZEZ4MFhIUnBaaUFvSUdGMGRISnpXeUJwSUYwZ0tTQjdYRzVjZEZ4MFhIUmNkRngwWEhSY2RHNWhiV1VnUFNCaGRIUnljMXNnYVNCZExtNWhiV1U3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkR2xtSUNnZ2JtRnRaUzVwYm1SbGVFOW1LQ0JjSW1SaGRHRXRYQ0lnS1NBOVBUMGdNQ0FwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSdVlXMWxJRDBnYWxGMVpYSjVMbU5oYldWc1EyRnpaU2dnYm1GdFpTNXpiR2xqWlNnZ05TQXBJQ2s3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWkdGMFlVRjBkSElvSUdWc1pXMHNJRzVoYldVc0lHUmhkR0ZiSUc1aGJXVWdYU0FwTzF4dVhIUmNkRngwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSY2RHUmhkR0ZRY21sMkxuTmxkQ2dnWld4bGJTd2dYQ0pvWVhORVlYUmhRWFIwY25OY0lpd2dkSEoxWlNBcE8xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkSEpsZEhWeWJpQmtZWFJoTzF4dVhIUmNkSDFjYmx4dVhIUmNkQzh2SUZObGRITWdiWFZzZEdsd2JHVWdkbUZzZFdWelhHNWNkRngwYVdZZ0tDQjBlWEJsYjJZZ2EyVjVJRDA5UFNCY0ltOWlhbVZqZEZ3aUlDa2dlMXh1WEhSY2RGeDBjbVYwZFhKdUlIUm9hWE11WldGamFDZ2dablZ1WTNScGIyNG9LU0I3WEc1Y2RGeDBYSFJjZEdSaGRHRlZjMlZ5TG5ObGRDZ2dkR2hwY3l3Z2EyVjVJQ2s3WEc1Y2RGeDBYSFI5SUNrN1hHNWNkRngwZlZ4dVhHNWNkRngwY21WMGRYSnVJR0ZqWTJWemN5Z2dkR2hwY3l3Z1puVnVZM1JwYjI0b0lIWmhiSFZsSUNrZ2UxeHVYSFJjZEZ4MGRtRnlJR1JoZEdFN1hHNWNibHgwWEhSY2RDOHZJRlJvWlNCallXeHNhVzVuSUdwUmRXVnllU0J2WW1wbFkzUWdLR1ZzWlcxbGJuUWdiV0YwWTJobGN5a2dhWE1nYm05MElHVnRjSFI1WEc1Y2RGeDBYSFF2THlBb1lXNWtJSFJvWlhKbFptOXlaU0JvWVhNZ1lXNGdaV3hsYldWdWRDQmhjSEJsWVhKeklHRjBJSFJvYVhOYklEQWdYU2tnWVc1a0lIUm9aVnh1WEhSY2RGeDBMeThnWUhaaGJIVmxZQ0J3WVhKaGJXVjBaWElnZDJGeklHNXZkQ0IxYm1SbFptbHVaV1F1SUVGdUlHVnRjSFI1SUdwUmRXVnllU0J2WW1wbFkzUmNibHgwWEhSY2RDOHZJSGRwYkd3Z2NtVnpkV3gwSUdsdUlHQjFibVJsWm1sdVpXUmdJR1p2Y2lCbGJHVnRJRDBnZEdocGMxc2dNQ0JkSUhkb2FXTm9JSGRwYkd4Y2JseDBYSFJjZEM4dklIUm9jbTkzSUdGdUlHVjRZMlZ3ZEdsdmJpQnBaaUJoYmlCaGRIUmxiWEIwSUhSdklISmxZV1FnWVNCa1lYUmhJR05oWTJobElHbHpJRzFoWkdVdVhHNWNkRngwWEhScFppQW9JR1ZzWlcwZ0ppWWdkbUZzZFdVZ1BUMDlJSFZ1WkdWbWFXNWxaQ0FwSUh0Y2JseHVYSFJjZEZ4MFhIUXZMeUJCZEhSbGJYQjBJSFJ2SUdkbGRDQmtZWFJoSUdaeWIyMGdkR2hsSUdOaFkyaGxYRzVjZEZ4MFhIUmNkQzh2SUZSb1pTQnJaWGtnZDJsc2JDQmhiSGRoZVhNZ1ltVWdZMkZ0Wld4RFlYTmxaQ0JwYmlCRVlYUmhYRzVjZEZ4MFhIUmNkR1JoZEdFZ1BTQmtZWFJoVlhObGNpNW5aWFFvSUdWc1pXMHNJR3RsZVNBcE8xeHVYSFJjZEZ4MFhIUnBaaUFvSUdSaGRHRWdJVDA5SUhWdVpHVm1hVzVsWkNBcElIdGNibHgwWEhSY2RGeDBYSFJ5WlhSMWNtNGdaR0YwWVR0Y2JseDBYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmNkQzh2SUVGMGRHVnRjSFFnZEc4Z1hDSmthWE5qYjNabGNsd2lJSFJvWlNCa1lYUmhJR2x1WEc1Y2RGeDBYSFJjZEM4dklFaFVUVXcxSUdOMWMzUnZiU0JrWVhSaExTb2dZWFIwY25OY2JseDBYSFJjZEZ4MFpHRjBZU0E5SUdSaGRHRkJkSFJ5S0NCbGJHVnRMQ0JyWlhrZ0tUdGNibHgwWEhSY2RGeDBhV1lnS0NCa1lYUmhJQ0U5UFNCMWJtUmxabWx1WldRZ0tTQjdYRzVjZEZ4MFhIUmNkRngwY21WMGRYSnVJR1JoZEdFN1hHNWNkRngwWEhSY2RIMWNibHh1WEhSY2RGeDBYSFF2THlCWFpTQjBjbWxsWkNCeVpXRnNiSGtnYUdGeVpDd2dZblYwSUhSb1pTQmtZWFJoSUdSdlpYTnVKM1FnWlhocGMzUXVYRzVjZEZ4MFhIUmNkSEpsZEhWeWJqdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBMeThnVTJWMElIUm9aU0JrWVhSaExpNHVYRzVjZEZ4MFhIUjBhR2x6TG1WaFkyZ29JR1oxYm1OMGFXOXVLQ2tnZTF4dVhHNWNkRngwWEhSY2RDOHZJRmRsSUdGc2QyRjVjeUJ6ZEc5eVpTQjBhR1VnWTJGdFpXeERZWE5sWkNCclpYbGNibHgwWEhSY2RGeDBaR0YwWVZWelpYSXVjMlYwS0NCMGFHbHpMQ0JyWlhrc0lIWmhiSFZsSUNrN1hHNWNkRngwWEhSOUlDazdYRzVjZEZ4MGZTd2diblZzYkN3Z2RtRnNkV1VzSUdGeVozVnRaVzUwY3k1c1pXNW5kR2dnUGlBeExDQnVkV3hzTENCMGNuVmxJQ2s3WEc1Y2RIMHNYRzVjYmx4MGNtVnRiM1psUkdGMFlUb2dablZ1WTNScGIyNG9JR3RsZVNBcElIdGNibHgwWEhSeVpYUjFjbTRnZEdocGN5NWxZV05vS0NCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSY2RHUmhkR0ZWYzJWeUxuSmxiVzkyWlNnZ2RHaHBjeXdnYTJWNUlDazdYRzVjZEZ4MGZTQXBPMXh1WEhSOVhHNTlJQ2s3WEc1Y2JuSmxkSFZ5YmlCcVVYVmxjbms3WEc1OUlDazdYRzRpWFgwPVxuIl19

//# sourceMappingURL=data:application/json;charset=utf8;base64,
