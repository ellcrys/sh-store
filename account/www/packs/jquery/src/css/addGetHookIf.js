define(function () {
    "use strict";
    function addGetHookIf(conditionFn, hookFn) {
        // Define the hook, we'll check on the first run if it's really needed.
        return {
            get: function () {
                if (conditionFn()) {
                    // Hook not needed (or it's not possible to use it due
                    // to missing dependency), remove it.
                    delete this.get;
                    return;
                }
                // Hook needed; redefine it so that the support test is not executed again.
                return (this.get = hookFn).apply(this, arguments);
            }
        };
    }
    return addGetHookIf;
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInd3dy9wYWNrcy9qcXVlcnkvc3JjL2Nzcy9hZGRHZXRIb29rSWYuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFFO0lBRVIsWUFBWSxDQUFDO0lBRWIsc0JBQXVCLFdBQVcsRUFBRSxNQUFNO1FBRXpDLHVFQUF1RTtRQUN2RSxNQUFNLENBQUM7WUFDTixHQUFHLEVBQUU7Z0JBQ0osRUFBRSxDQUFDLENBQUUsV0FBVyxFQUFHLENBQUMsQ0FBQyxDQUFDO29CQUVyQixzREFBc0Q7b0JBQ3RELHFDQUFxQztvQkFDckMsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDO29CQUNoQixNQUFNLENBQUM7Z0JBQ1IsQ0FBQztnQkFFRCwyRUFBMkU7Z0JBQzNFLE1BQU0sQ0FBQyxDQUFFLElBQUksQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFFLENBQUMsS0FBSyxDQUFFLElBQUksRUFBRSxTQUFTLENBQUUsQ0FBQztZQUN2RCxDQUFDO1NBQ0QsQ0FBQztJQUNILENBQUM7SUFFRCxNQUFNLENBQUMsWUFBWSxDQUFDO0FBRXBCLENBQUMsQ0FBRSxDQUFDIiwiZmlsZSI6Ind3dy9wYWNrcy9qcXVlcnkvc3JjL2Nzcy9hZGRHZXRIb29rSWYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoIGZ1bmN0aW9uKCkge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xuXG5cdC8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggY29uZGl0aW9uRm4oKSApIHtcblxuXHRcdFx0XHQvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWVcblx0XHRcdFx0Ly8gdG8gbWlzc2luZyBkZXBlbmRlbmN5KSwgcmVtb3ZlIGl0LlxuXHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSG9vayBuZWVkZWQ7IHJlZGVmaW5lIGl0IHNvIHRoYXQgdGhlIHN1cHBvcnQgdGVzdCBpcyBub3QgZXhlY3V0ZWQgYWdhaW4uXG5cdFx0XHRyZXR1cm4gKCB0aGlzLmdldCA9IGhvb2tGbiApLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9XG5cdH07XG59XG5cbnJldHVybiBhZGRHZXRIb29rSWY7XG5cbn0gKTtcbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInd3dy9wYWNrcy9qcXVlcnkvc3JjL2Nzcy9hZGRHZXRIb29rSWYuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDO0lBQ0gsWUFBWSxDQUFDO0lBQ2Isc0JBQXNCLFdBQVcsRUFBRSxNQUFNO1FBQ3JDLHVFQUF1RTtRQUN2RSxNQUFNLENBQUM7WUFDSCxHQUFHLEVBQUU7Z0JBQ0QsRUFBRSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUNoQixzREFBc0Q7b0JBQ3RELHFDQUFxQztvQkFDckMsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDO29CQUNoQixNQUFNLENBQUM7Z0JBQ1gsQ0FBQztnQkFDRCwyRUFBMkU7Z0JBQzNFLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztZQUN0RCxDQUFDO1NBQ0osQ0FBQztJQUNOLENBQUM7SUFDRCxNQUFNLENBQUMsWUFBWSxDQUFDO0FBQ3hCLENBQUMsQ0FBQyxDQUFDO0FBRUgsK2xEQUErbEQiLCJmaWxlIjoid3d3L3BhY2tzL2pxdWVyeS9zcmMvY3NzL2FkZEdldEhvb2tJZi5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZShmdW5jdGlvbiAoKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgZnVuY3Rpb24gYWRkR2V0SG9va0lmKGNvbmRpdGlvbkZuLCBob29rRm4pIHtcbiAgICAgICAgLy8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChjb25kaXRpb25GbigpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuICAgICAgICAgICAgICAgICAgICAvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmdldDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuZ2V0ID0gaG9va0ZuKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gYWRkR2V0SG9va0lmO1xufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zjg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kM2R5OXdZV05yY3k5cWNYVmxjbmt2YzNKakwyTnpjeTloWkdSSFpYUkliMjlyU1dZdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzVFVGQlRTeERRVUZGTzBsQlJWSXNXVUZCV1N4RFFVRkRPMGxCUldJc2MwSkJRWFZDTEZkQlFWY3NSVUZCUlN4TlFVRk5PMUZCUlhwRExIVkZRVUYxUlR0UlFVTjJSU3hOUVVGTkxFTkJRVU03V1VGRFRpeEhRVUZITEVWQlFVVTdaMEpCUTBvc1JVRkJSU3hEUVVGRExFTkJRVVVzVjBGQlZ5eEZRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRPMjlDUVVWeVFpeHpSRUZCYzBRN2IwSkJRM1JFTEhGRFFVRnhRenR2UWtGRGNrTXNUMEZCVHl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRE8yOUNRVU5vUWl4TlFVRk5MRU5CUVVNN1owSkJRMUlzUTBGQlF6dG5Ra0ZGUkN3eVJVRkJNa1U3WjBKQlF6TkZMRTFCUVUwc1EwRkJReXhEUVVGRkxFbEJRVWtzUTBGQlF5eEhRVUZITEVkQlFVY3NUVUZCVFN4RFFVRkZMRU5CUVVNc1MwRkJTeXhEUVVGRkxFbEJRVWtzUlVGQlJTeFRRVUZUTEVOQlFVVXNRMEZCUXp0WlFVTjJSQ3hEUVVGRE8xTkJRMFFzUTBGQlF6dEpRVU5JTEVOQlFVTTdTVUZGUkN4TlFVRk5MRU5CUVVNc1dVRkJXU3hEUVVGRE8wRkJSWEJDTEVOQlFVTXNRMEZCUlN4RFFVRkRJaXdpWm1sc1pTSTZJbmQzZHk5d1lXTnJjeTlxY1hWbGNua3ZjM0pqTDJOemN5OWhaR1JIWlhSSWIyOXJTV1l1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SmtaV1pwYm1Vb0lHWjFibU4wYVc5dUtDa2dlMXh1WEc1Y0luVnpaU0J6ZEhKcFkzUmNJanRjYmx4dVpuVnVZM1JwYjI0Z1lXUmtSMlYwU0c5dmEwbG1LQ0JqYjI1a2FYUnBiMjVHYml3Z2FHOXZhMFp1SUNrZ2UxeHVYRzVjZEM4dklFUmxabWx1WlNCMGFHVWdhRzl2YXl3Z2QyVW5iR3dnWTJobFkyc2diMjRnZEdobElHWnBjbk4wSUhKMWJpQnBaaUJwZENkeklISmxZV3hzZVNCdVpXVmtaV1F1WEc1Y2RISmxkSFZ5YmlCN1hHNWNkRngwWjJWME9pQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUmNkR2xtSUNnZ1kyOXVaR2wwYVc5dVJtNG9LU0FwSUh0Y2JseHVYSFJjZEZ4MFhIUXZMeUJJYjI5cklHNXZkQ0J1WldWa1pXUWdLRzl5SUdsMEozTWdibTkwSUhCdmMzTnBZbXhsSUhSdklIVnpaU0JwZENCa2RXVmNibHgwWEhSY2RGeDBMeThnZEc4Z2JXbHpjMmx1WnlCa1pYQmxibVJsYm1ONUtTd2djbVZ0YjNabElHbDBMbHh1WEhSY2RGeDBYSFJrWld4bGRHVWdkR2hwY3k1blpYUTdYRzVjZEZ4MFhIUmNkSEpsZEhWeWJqdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBMeThnU0c5dmF5QnVaV1ZrWldRN0lISmxaR1ZtYVc1bElHbDBJSE52SUhSb1lYUWdkR2hsSUhOMWNIQnZjblFnZEdWemRDQnBjeUJ1YjNRZ1pYaGxZM1YwWldRZ1lXZGhhVzR1WEc1Y2RGeDBYSFJ5WlhSMWNtNGdLQ0IwYUdsekxtZGxkQ0E5SUdodmIydEdiaUFwTG1Gd2NHeDVLQ0IwYUdsekxDQmhjbWQxYldWdWRITWdLVHRjYmx4MFhIUjlYRzVjZEgwN1hHNTlYRzVjYm5KbGRIVnliaUJoWkdSSFpYUkliMjlyU1dZN1hHNWNibjBnS1R0Y2JpSmRmUT09XG4iXX0=

//# sourceMappingURL=data:application/json;charset=utf8;base64,
