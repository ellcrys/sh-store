define([
    "../core",
    "../var/rcssNum"
], function (jQuery, rcssNum) {
    "use strict";
    function adjustCSS(elem, prop, valueParts, tween) {
        var adjusted, scale = 1, maxIterations = 20, currentValue = tween ?
            function () {
                return tween.cur();
            } :
            function () {
                return jQuery.css(elem, prop, "");
            }, initial = currentValue(), unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"), 
        // Starting value computation is required for potential unit mismatches
        initialInUnit = (jQuery.cssNumber[prop] || unit !== "px" && +initial) &&
            rcssNum.exec(jQuery.css(elem, prop));
        if (initialInUnit && initialInUnit[3] !== unit) {
            // Trust units reported by jQuery.css
            unit = unit || initialInUnit[3];
            // Make sure we update the tween properties later on
            valueParts = valueParts || [];
            // Iteratively approximate from a nonzero starting point
            initialInUnit = +initial || 1;
            do {
                // If previous iteration zeroed out, double until we get *something*.
                // Use string for doubling so we don't accidentally see scale as unchanged below
                scale = scale || ".5";
                // Adjust and apply
                initialInUnit = initialInUnit / scale;
                jQuery.style(elem, prop, initialInUnit + unit);
                // Update scale, tolerating zero or NaN from tween.cur()
                // Break the loop if scale is unchanged or perfect, or if we've just had enough.
            } while (scale !== (scale = currentValue() / initial) && scale !== 1 && --maxIterations);
        }
        if (valueParts) {
            initialInUnit = +initialInUnit || +initial || 0;
            // Apply relative offset (+=/-=) if specified
            adjusted = valueParts[1] ?
                initialInUnit + (valueParts[1] + 1) * valueParts[2] :
                +valueParts[2];
            if (tween) {
                tween.unit = unit;
                tween.start = initialInUnit;
                tween.end = adjusted;
            }
        }
        return adjusted;
    }
    return adjustCSS;
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInd3dy9wYWNrcy9qcXVlcnkvc3JjL2Nzcy9hZGp1c3RDU1MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFFO0lBQ1AsU0FBUztJQUNULGdCQUFnQjtDQUNoQixFQUFFLFVBQVUsTUFBTSxFQUFFLE9BQU87SUFFNUIsWUFBWSxDQUFDO0lBRWIsbUJBQW9CLElBQUksRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLEtBQUs7UUFDaEQsSUFBSSxRQUFRLEVBQ1gsS0FBSyxHQUFHLENBQUMsRUFDVCxhQUFhLEdBQUcsRUFBRSxFQUNsQixZQUFZLEdBQUcsS0FBSztZQUNuQjtnQkFDQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ3BCLENBQUM7WUFDRDtnQkFDQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBRSxDQUFDO1lBQ3JDLENBQUMsRUFDRixPQUFPLEdBQUcsWUFBWSxFQUFFLEVBQ3hCLElBQUksR0FBRyxVQUFVLElBQUksVUFBVSxDQUFFLENBQUMsQ0FBRSxJQUFJLENBQUUsTUFBTSxDQUFDLFNBQVMsQ0FBRSxJQUFJLENBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFFO1FBRWhGLHVFQUF1RTtRQUN2RSxhQUFhLEdBQUcsQ0FBRSxNQUFNLENBQUMsU0FBUyxDQUFFLElBQUksQ0FBRSxJQUFJLElBQUksS0FBSyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUU7WUFDeEUsT0FBTyxDQUFDLElBQUksQ0FBRSxNQUFNLENBQUMsR0FBRyxDQUFFLElBQUksRUFBRSxJQUFJLENBQUUsQ0FBRSxDQUFDO1FBRTNDLEVBQUUsQ0FBQyxDQUFFLGFBQWEsSUFBSSxhQUFhLENBQUUsQ0FBQyxDQUFFLEtBQUssSUFBSyxDQUFDLENBQUMsQ0FBQztZQUVwRCxxQ0FBcUM7WUFDckMsSUFBSSxHQUFHLElBQUksSUFBSSxhQUFhLENBQUUsQ0FBQyxDQUFFLENBQUM7WUFFbEMsb0RBQW9EO1lBQ3BELFVBQVUsR0FBRyxVQUFVLElBQUksRUFBRSxDQUFDO1lBRTlCLHdEQUF3RDtZQUN4RCxhQUFhLEdBQUcsQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDO1lBRTlCLEdBQUcsQ0FBQztnQkFFSCxxRUFBcUU7Z0JBQ3JFLGdGQUFnRjtnQkFDaEYsS0FBSyxHQUFHLEtBQUssSUFBSSxJQUFJLENBQUM7Z0JBRXRCLG1CQUFtQjtnQkFDbkIsYUFBYSxHQUFHLGFBQWEsR0FBRyxLQUFLLENBQUM7Z0JBQ3RDLE1BQU0sQ0FBQyxLQUFLLENBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxhQUFhLEdBQUcsSUFBSSxDQUFFLENBQUM7Z0JBRWxELHdEQUF3RDtnQkFDeEQsZ0ZBQWdGO1lBQ2hGLENBQUMsUUFDQSxLQUFLLEtBQUssQ0FBRSxLQUFLLEdBQUcsWUFBWSxFQUFFLEdBQUcsT0FBTyxDQUFFLElBQUksS0FBSyxLQUFLLENBQUMsSUFBSSxFQUFFLGFBQWEsRUFDL0U7UUFDSCxDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUUsVUFBVyxDQUFDLENBQUMsQ0FBQztZQUNsQixhQUFhLEdBQUcsQ0FBQyxhQUFhLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDO1lBRWhELDZDQUE2QztZQUM3QyxRQUFRLEdBQUcsVUFBVSxDQUFFLENBQUMsQ0FBRTtnQkFDekIsYUFBYSxHQUFHLENBQUUsVUFBVSxDQUFFLENBQUMsQ0FBRSxHQUFHLENBQUMsQ0FBRSxHQUFHLFVBQVUsQ0FBRSxDQUFDLENBQUU7Z0JBQ3pELENBQUMsVUFBVSxDQUFFLENBQUMsQ0FBRSxDQUFDO1lBQ2xCLEVBQUUsQ0FBQyxDQUFFLEtBQU0sQ0FBQyxDQUFDLENBQUM7Z0JBQ2IsS0FBSyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7Z0JBQ2xCLEtBQUssQ0FBQyxLQUFLLEdBQUcsYUFBYSxDQUFDO2dCQUM1QixLQUFLLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQztZQUN0QixDQUFDO1FBQ0YsQ0FBQztRQUNELE1BQU0sQ0FBQyxRQUFRLENBQUM7SUFDakIsQ0FBQztJQUVELE1BQU0sQ0FBQyxTQUFTLENBQUM7QUFDakIsQ0FBQyxDQUFFLENBQUMiLCJmaWxlIjoid3d3L3BhY2tzL2pxdWVyeS9zcmMvY3NzL2FkanVzdENTUy5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSggW1xuXHRcIi4uL2NvcmVcIixcblx0XCIuLi92YXIvcmNzc051bVwiXG5dLCBmdW5jdGlvbiggalF1ZXJ5LCByY3NzTnVtICkge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLFxuXHRcdHNjYWxlID0gMSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7XG5cdFx0XHR9LFxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XG5cblx0XHRkbyB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIGl0ZXJhdGlvbiB6ZXJvZWQgb3V0LCBkb3VibGUgdW50aWwgd2UgZ2V0ICpzb21ldGhpbmcqLlxuXHRcdFx0Ly8gVXNlIHN0cmluZyBmb3IgZG91Ymxpbmcgc28gd2UgZG9uJ3QgYWNjaWRlbnRhbGx5IHNlZSBzY2FsZSBhcyB1bmNoYW5nZWQgYmVsb3dcblx0XHRcdHNjYWxlID0gc2NhbGUgfHwgXCIuNVwiO1xuXG5cdFx0XHQvLyBBZGp1c3QgYW5kIGFwcGx5XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXG5cdFx0Ly8gVXBkYXRlIHNjYWxlLCB0b2xlcmF0aW5nIHplcm8gb3IgTmFOIGZyb20gdHdlZW4uY3VyKClcblx0XHQvLyBCcmVhayB0aGUgbG9vcCBpZiBzY2FsZSBpcyB1bmNoYW5nZWQgb3IgcGVyZmVjdCwgb3IgaWYgd2UndmUganVzdCBoYWQgZW5vdWdoLlxuXHRcdH0gd2hpbGUgKFxuXHRcdFx0c2NhbGUgIT09ICggc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwgKSAmJiBzY2FsZSAhPT0gMSAmJiAtLW1heEl0ZXJhdGlvbnNcblx0XHQpO1xuXHR9XG5cblx0aWYgKCB2YWx1ZVBhcnRzICkge1xuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuXG5cdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xuXHRcdFx0aW5pdGlhbEluVW5pdCArICggdmFsdWVQYXJ0c1sgMSBdICsgMSApICogdmFsdWVQYXJ0c1sgMiBdIDpcblx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XG5cdFx0aWYgKCB0d2VlbiApIHtcblx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBhZGp1c3RlZDtcbn1cblxucmV0dXJuIGFkanVzdENTUztcbn0gKTtcbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInd3dy9wYWNrcy9qcXVlcnkvc3JjL2Nzcy9hZGp1c3RDU1MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDO0lBQ0gsU0FBUztJQUNULGdCQUFnQjtDQUNuQixFQUFFLFVBQVUsTUFBTSxFQUFFLE9BQU87SUFDeEIsWUFBWSxDQUFDO0lBQ2IsbUJBQW1CLElBQUksRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLEtBQUs7UUFDNUMsSUFBSSxRQUFRLEVBQUUsS0FBSyxHQUFHLENBQUMsRUFBRSxhQUFhLEdBQUcsRUFBRSxFQUFFLFlBQVksR0FBRyxLQUFLO1lBQzdEO2dCQUNJLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDdkIsQ0FBQztZQUNEO2dCQUNJLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDdEMsQ0FBQyxFQUFFLE9BQU8sR0FBRyxZQUFZLEVBQUUsRUFBRSxJQUFJLEdBQUcsVUFBVSxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztRQUMzRyx1RUFBdUU7UUFDdkUsYUFBYSxHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLEtBQUssSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ2pFLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUN6QyxFQUFFLENBQUMsQ0FBQyxhQUFhLElBQUksYUFBYSxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDN0MscUNBQXFDO1lBQ3JDLElBQUksR0FBRyxJQUFJLElBQUksYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLG9EQUFvRDtZQUNwRCxVQUFVLEdBQUcsVUFBVSxJQUFJLEVBQUUsQ0FBQztZQUM5Qix3REFBd0Q7WUFDeEQsYUFBYSxHQUFHLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQztZQUM5QixHQUFHLENBQUM7Z0JBQ0EscUVBQXFFO2dCQUNyRSxnRkFBZ0Y7Z0JBQ2hGLEtBQUssR0FBRyxLQUFLLElBQUksSUFBSSxDQUFDO2dCQUN0QixtQkFBbUI7Z0JBQ25CLGFBQWEsR0FBRyxhQUFhLEdBQUcsS0FBSyxDQUFDO2dCQUN0QyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsYUFBYSxHQUFHLElBQUksQ0FBQyxDQUFDO2dCQUMvQyx3REFBd0Q7Z0JBQ3hELGdGQUFnRjtZQUNwRixDQUFDLFFBQVEsS0FBSyxLQUFLLENBQUMsS0FBSyxHQUFHLFlBQVksRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLEtBQUssS0FBSyxDQUFDLElBQUksRUFBRSxhQUFhLEVBQUU7UUFDN0YsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDYixhQUFhLEdBQUcsQ0FBQyxhQUFhLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDO1lBQ2hELDZDQUE2QztZQUM3QyxRQUFRLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQztnQkFDcEIsYUFBYSxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUM7Z0JBQ25ELENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25CLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ1IsS0FBSyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7Z0JBQ2xCLEtBQUssQ0FBQyxLQUFLLEdBQUcsYUFBYSxDQUFDO2dCQUM1QixLQUFLLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQztZQUN6QixDQUFDO1FBQ0wsQ0FBQztRQUNELE1BQU0sQ0FBQyxRQUFRLENBQUM7SUFDcEIsQ0FBQztJQUNELE1BQU0sQ0FBQyxTQUFTLENBQUM7QUFDckIsQ0FBQyxDQUFDLENBQUM7QUFFSCxtMEtBQW0wSyIsImZpbGUiOiJ3d3cvcGFja3MvanF1ZXJ5L3NyYy9jc3MvYWRqdXN0Q1NTLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKFtcbiAgICBcIi4uL2NvcmVcIixcbiAgICBcIi4uL3Zhci9yY3NzTnVtXCJcbl0sIGZ1bmN0aW9uIChqUXVlcnksIHJjc3NOdW0pIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICBmdW5jdGlvbiBhZGp1c3RDU1MoZWxlbSwgcHJvcCwgdmFsdWVQYXJ0cywgdHdlZW4pIHtcbiAgICAgICAgdmFyIGFkanVzdGVkLCBzY2FsZSA9IDEsIG1heEl0ZXJhdGlvbnMgPSAyMCwgY3VycmVudFZhbHVlID0gdHdlZW4gP1xuICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0d2Vlbi5jdXIoKTtcbiAgICAgICAgICAgIH0gOlxuICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBqUXVlcnkuY3NzKGVsZW0sIHByb3AsIFwiXCIpO1xuICAgICAgICAgICAgfSwgaW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLCB1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWzNdIHx8IChqUXVlcnkuY3NzTnVtYmVyW3Byb3BdID8gXCJcIiA6IFwicHhcIiksIFxuICAgICAgICAvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuICAgICAgICBpbml0aWFsSW5Vbml0ID0gKGpRdWVyeS5jc3NOdW1iZXJbcHJvcF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICtpbml0aWFsKSAmJlxuICAgICAgICAgICAgcmNzc051bS5leGVjKGpRdWVyeS5jc3MoZWxlbSwgcHJvcCkpO1xuICAgICAgICBpZiAoaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WzNdICE9PSB1bml0KSB7XG4gICAgICAgICAgICAvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG4gICAgICAgICAgICB1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WzNdO1xuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuICAgICAgICAgICAgdmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XG4gICAgICAgICAgICAvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuICAgICAgICAgICAgaW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgLy8gSWYgcHJldmlvdXMgaXRlcmF0aW9uIHplcm9lZCBvdXQsIGRvdWJsZSB1bnRpbCB3ZSBnZXQgKnNvbWV0aGluZyouXG4gICAgICAgICAgICAgICAgLy8gVXNlIHN0cmluZyBmb3IgZG91Ymxpbmcgc28gd2UgZG9uJ3QgYWNjaWRlbnRhbGx5IHNlZSBzY2FsZSBhcyB1bmNoYW5nZWQgYmVsb3dcbiAgICAgICAgICAgICAgICBzY2FsZSA9IHNjYWxlIHx8IFwiLjVcIjtcbiAgICAgICAgICAgICAgICAvLyBBZGp1c3QgYW5kIGFwcGx5XG4gICAgICAgICAgICAgICAgaW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgLyBzY2FsZTtcbiAgICAgICAgICAgICAgICBqUXVlcnkuc3R5bGUoZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQpO1xuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBzY2FsZSwgdG9sZXJhdGluZyB6ZXJvIG9yIE5hTiBmcm9tIHR3ZWVuLmN1cigpXG4gICAgICAgICAgICAgICAgLy8gQnJlYWsgdGhlIGxvb3AgaWYgc2NhbGUgaXMgdW5jaGFuZ2VkIG9yIHBlcmZlY3QsIG9yIGlmIHdlJ3ZlIGp1c3QgaGFkIGVub3VnaC5cbiAgICAgICAgICAgIH0gd2hpbGUgKHNjYWxlICE9PSAoc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwpICYmIHNjYWxlICE9PSAxICYmIC0tbWF4SXRlcmF0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlUGFydHMpIHtcbiAgICAgICAgICAgIGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuICAgICAgICAgICAgLy8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXG4gICAgICAgICAgICBhZGp1c3RlZCA9IHZhbHVlUGFydHNbMV0gP1xuICAgICAgICAgICAgICAgIGluaXRpYWxJblVuaXQgKyAodmFsdWVQYXJ0c1sxXSArIDEpICogdmFsdWVQYXJ0c1syXSA6XG4gICAgICAgICAgICAgICAgK3ZhbHVlUGFydHNbMl07XG4gICAgICAgICAgICBpZiAodHdlZW4pIHtcbiAgICAgICAgICAgICAgICB0d2Vlbi51bml0ID0gdW5pdDtcbiAgICAgICAgICAgICAgICB0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG4gICAgICAgICAgICAgICAgdHdlZW4uZW5kID0gYWRqdXN0ZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFkanVzdGVkO1xuICAgIH1cbiAgICByZXR1cm4gYWRqdXN0Q1NTO1xufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zjg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kM2R5OXdZV05yY3k5cWNYVmxjbmt2YzNKakwyTnpjeTloWkdwMWMzUkRVMU11YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNUVUZCVFN4RFFVRkZPMGxCUTFBc1UwRkJVenRKUVVOVUxHZENRVUZuUWp0RFFVTm9RaXhGUVVGRkxGVkJRVlVzVFVGQlRTeEZRVUZGTEU5QlFVODdTVUZGTlVJc1dVRkJXU3hEUVVGRE8wbEJSV0lzYlVKQlFXOUNMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzVlVGQlZTeEZRVUZGTEV0QlFVczdVVUZEYUVRc1NVRkJTU3hSUVVGUkxFVkJRMWdzUzBGQlN5eEhRVUZITEVOQlFVTXNSVUZEVkN4aFFVRmhMRWRCUVVjc1JVRkJSU3hGUVVOc1FpeFpRVUZaTEVkQlFVY3NTMEZCU3p0WlFVTnVRanRuUWtGRFF5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRE8xbEJRM0JDTEVOQlFVTTdXVUZEUkR0blFrRkRReXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFVkJRVVVzUTBGQlJTeERRVUZETzFsQlEzSkRMRU5CUVVNc1JVRkRSaXhQUVVGUExFZEJRVWNzV1VGQldTeEZRVUZGTEVWQlEzaENMRWxCUVVrc1IwRkJSeXhWUVVGVkxFbEJRVWtzVlVGQlZTeERRVUZGTEVOQlFVTXNRMEZCUlN4SlFVRkpMRU5CUVVVc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlJTeEpRVUZKTEVOQlFVVXNSMEZCUnl4RlFVRkZMRWRCUVVjc1NVRkJTU3hEUVVGRk8xRkJSV2hHTEhWRlFVRjFSVHRSUVVOMlJTeGhRVUZoTEVkQlFVY3NRMEZCUlN4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRkxFbEJRVWtzUTBGQlJTeEpRVUZKTEVsQlFVa3NTMEZCU3l4SlFVRkpMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVVU3V1VGRGVFVXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJSU3hOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVVc1EwRkJSU3hEUVVGRE8xRkJSVE5ETEVWQlFVVXNRMEZCUXl4RFFVRkZMR0ZCUVdFc1NVRkJTU3hoUVVGaExFTkJRVVVzUTBGQlF5eERRVUZGTEV0QlFVc3NTVUZCU3l4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVWd1JDeHhRMEZCY1VNN1dVRkRja01zU1VGQlNTeEhRVUZITEVsQlFVa3NTVUZCU1N4aFFVRmhMRU5CUVVVc1EwRkJReXhEUVVGRkxFTkJRVU03V1VGRmJFTXNiMFJCUVc5RU8xbEJRM0JFTEZWQlFWVXNSMEZCUnl4VlFVRlZMRWxCUVVrc1JVRkJSU3hEUVVGRE8xbEJSVGxDTEhkRVFVRjNSRHRaUVVONFJDeGhRVUZoTEVkQlFVY3NRMEZCUXl4UFFVRlBMRWxCUVVrc1EwRkJReXhEUVVGRE8xbEJSVGxDTEVkQlFVY3NRMEZCUXp0blFrRkZTQ3h4UlVGQmNVVTdaMEpCUTNKRkxHZEdRVUZuUmp0blFrRkRhRVlzUzBGQlN5eEhRVUZITEV0QlFVc3NTVUZCU1N4SlFVRkpMRU5CUVVNN1owSkJSWFJDTEcxQ1FVRnRRanRuUWtGRGJrSXNZVUZCWVN4SFFVRkhMR0ZCUVdFc1IwRkJSeXhMUVVGTExFTkJRVU03WjBKQlEzUkRMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4aFFVRmhMRWRCUVVjc1NVRkJTU3hEUVVGRkxFTkJRVU03WjBKQlJXeEVMSGRFUVVGM1JEdG5Ra0ZEZUVRc1owWkJRV2RHTzFsQlEyaEdMRU5CUVVNc1VVRkRRU3hMUVVGTExFdEJRVXNzUTBGQlJTeExRVUZMTEVkQlFVY3NXVUZCV1N4RlFVRkZMRWRCUVVjc1QwRkJUeXhEUVVGRkxFbEJRVWtzUzBGQlN5eExRVUZMTEVOQlFVTXNTVUZCU1N4RlFVRkZMR0ZCUVdFc1JVRkRMMFU3VVVGRFNDeERRVUZETzFGQlJVUXNSVUZCUlN4RFFVRkRMRU5CUVVVc1ZVRkJWeXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU5zUWl4aFFVRmhMRWRCUVVjc1EwRkJReXhoUVVGaExFbEJRVWtzUTBGQlF5eFBRVUZQTEVsQlFVa3NRMEZCUXl4RFFVRkRPMWxCUldoRUxEWkRRVUUyUXp0WlFVTTNReXhSUVVGUkxFZEJRVWNzVlVGQlZTeERRVUZGTEVOQlFVTXNRMEZCUlR0blFrRkRla0lzWVVGQllTeEhRVUZITEVOQlFVVXNWVUZCVlN4RFFVRkZMRU5CUVVNc1EwRkJSU3hIUVVGSExFTkJRVU1zUTBGQlJTeEhRVUZITEZWQlFWVXNRMEZCUlN4RFFVRkRMRU5CUVVVN1owSkJRM3BFTEVOQlFVTXNWVUZCVlN4RFFVRkZMRU5CUVVNc1EwRkJSU3hEUVVGRE8xbEJRMnhDTEVWQlFVVXNRMEZCUXl4RFFVRkZMRXRCUVUwc1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlEySXNTMEZCU3l4RFFVRkRMRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU03WjBKQlEyeENMRXRCUVVzc1EwRkJReXhMUVVGTExFZEJRVWNzWVVGQllTeERRVUZETzJkQ1FVTTFRaXhMUVVGTExFTkJRVU1zUjBGQlJ5eEhRVUZITEZGQlFWRXNRMEZCUXp0WlFVTjBRaXhEUVVGRE8xRkJRMFlzUTBGQlF6dFJRVU5FTEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNN1NVRkRha0lzUTBGQlF6dEpRVVZFTEUxQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNN1FVRkRha0lzUTBGQlF5eERRVUZGTEVOQlFVTWlMQ0ptYVd4bElqb2lkM2QzTDNCaFkydHpMMnB4ZFdWeWVTOXpjbU12WTNOekwyRmthblZ6ZEVOVFV5NXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1SbFptbHVaU2dnVzF4dVhIUmNJaTR1TDJOdmNtVmNJaXhjYmx4MFhDSXVMaTkyWVhJdmNtTnpjMDUxYlZ3aVhHNWRMQ0JtZFc1amRHbHZiaWdnYWxGMVpYSjVMQ0J5WTNOelRuVnRJQ2tnZTF4dVhHNWNJblZ6WlNCemRISnBZM1JjSWp0Y2JseHVablZ1WTNScGIyNGdZV1JxZFhOMFExTlRLQ0JsYkdWdExDQndjbTl3TENCMllXeDFaVkJoY25SekxDQjBkMlZsYmlBcElIdGNibHgwZG1GeUlHRmthblZ6ZEdWa0xGeHVYSFJjZEhOallXeGxJRDBnTVN4Y2JseDBYSFJ0WVhoSmRHVnlZWFJwYjI1eklEMGdNakFzWEc1Y2RGeDBZM1Z5Y21WdWRGWmhiSFZsSUQwZ2RIZGxaVzRnUDF4dVhIUmNkRngwWm5WdVkzUnBiMjRvS1NCN1hHNWNkRngwWEhSY2RISmxkSFZ5YmlCMGQyVmxiaTVqZFhJb0tUdGNibHgwWEhSY2RIMGdPbHh1WEhSY2RGeDBablZ1WTNScGIyNG9LU0I3WEc1Y2RGeDBYSFJjZEhKbGRIVnliaUJxVVhWbGNua3VZM056S0NCbGJHVnRMQ0J3Y205d0xDQmNJbHdpSUNrN1hHNWNkRngwWEhSOUxGeHVYSFJjZEdsdWFYUnBZV3dnUFNCamRYSnlaVzUwVm1Gc2RXVW9LU3hjYmx4MFhIUjFibWwwSUQwZ2RtRnNkV1ZRWVhKMGN5QW1KaUIyWVd4MVpWQmhjblJ6V3lBeklGMGdmSHdnS0NCcVVYVmxjbmt1WTNOelRuVnRZbVZ5V3lCd2NtOXdJRjBnUHlCY0lsd2lJRG9nWENKd2VGd2lJQ2tzWEc1Y2JseDBYSFF2THlCVGRHRnlkR2x1WnlCMllXeDFaU0JqYjIxd2RYUmhkR2x2YmlCcGN5QnlaWEYxYVhKbFpDQm1iM0lnY0c5MFpXNTBhV0ZzSUhWdWFYUWdiV2x6YldGMFkyaGxjMXh1WEhSY2RHbHVhWFJwWVd4SmJsVnVhWFFnUFNBb0lHcFJkV1Z5ZVM1amMzTk9kVzFpWlhKYklIQnliM0FnWFNCOGZDQjFibWwwSUNFOVBTQmNJbkI0WENJZ0ppWWdLMmx1YVhScFlXd2dLU0FtSmx4dVhIUmNkRngwY21OemMwNTFiUzVsZUdWaktDQnFVWFZsY25rdVkzTnpLQ0JsYkdWdExDQndjbTl3SUNrZ0tUdGNibHh1WEhScFppQW9JR2x1YVhScFlXeEpibFZ1YVhRZ0ppWWdhVzVwZEdsaGJFbHVWVzVwZEZzZ015QmRJQ0U5UFNCMWJtbDBJQ2tnZTF4dVhHNWNkRngwTHk4Z1ZISjFjM1FnZFc1cGRITWdjbVZ3YjNKMFpXUWdZbmtnYWxGMVpYSjVMbU56YzF4dVhIUmNkSFZ1YVhRZ1BTQjFibWwwSUh4OElHbHVhWFJwWVd4SmJsVnVhWFJiSURNZ1hUdGNibHh1WEhSY2RDOHZJRTFoYTJVZ2MzVnlaU0IzWlNCMWNHUmhkR1VnZEdobElIUjNaV1Z1SUhCeWIzQmxjblJwWlhNZ2JHRjBaWElnYjI1Y2JseDBYSFIyWVd4MVpWQmhjblJ6SUQwZ2RtRnNkV1ZRWVhKMGN5QjhmQ0JiWFR0Y2JseHVYSFJjZEM4dklFbDBaWEpoZEdsMlpXeDVJR0Z3Y0hKdmVHbHRZWFJsSUdaeWIyMGdZU0J1YjI1NlpYSnZJSE4wWVhKMGFXNW5JSEJ2YVc1MFhHNWNkRngwYVc1cGRHbGhiRWx1Vlc1cGRDQTlJQ3RwYm1sMGFXRnNJSHg4SURFN1hHNWNibHgwWEhSa2J5QjdYRzVjYmx4MFhIUmNkQzh2SUVsbUlIQnlaWFpwYjNWeklHbDBaWEpoZEdsdmJpQjZaWEp2WldRZ2IzVjBMQ0JrYjNWaWJHVWdkVzUwYVd3Z2QyVWdaMlYwSUNwemIyMWxkR2hwYm1jcUxseHVYSFJjZEZ4MEx5OGdWWE5sSUhOMGNtbHVaeUJtYjNJZ1pHOTFZbXhwYm1jZ2MyOGdkMlVnWkc5dUozUWdZV05qYVdSbGJuUmhiR3g1SUhObFpTQnpZMkZzWlNCaGN5QjFibU5vWVc1blpXUWdZbVZzYjNkY2JseDBYSFJjZEhOallXeGxJRDBnYzJOaGJHVWdmSHdnWENJdU5Wd2lPMXh1WEc1Y2RGeDBYSFF2THlCQlpHcDFjM1FnWVc1a0lHRndjR3g1WEc1Y2RGeDBYSFJwYm1sMGFXRnNTVzVWYm1sMElEMGdhVzVwZEdsaGJFbHVWVzVwZENBdklITmpZV3hsTzF4dVhIUmNkRngwYWxGMVpYSjVMbk4wZVd4bEtDQmxiR1Z0TENCd2NtOXdMQ0JwYm1sMGFXRnNTVzVWYm1sMElDc2dkVzVwZENBcE8xeHVYRzVjZEZ4MEx5OGdWWEJrWVhSbElITmpZV3hsTENCMGIyeGxjbUYwYVc1bklIcGxjbThnYjNJZ1RtRk9JR1p5YjIwZ2RIZGxaVzR1WTNWeUtDbGNibHgwWEhRdkx5QkNjbVZoYXlCMGFHVWdiRzl2Y0NCcFppQnpZMkZzWlNCcGN5QjFibU5vWVc1blpXUWdiM0lnY0dWeVptVmpkQ3dnYjNJZ2FXWWdkMlVuZG1VZ2FuVnpkQ0JvWVdRZ1pXNXZkV2RvTGx4dVhIUmNkSDBnZDJocGJHVWdLRnh1WEhSY2RGeDBjMk5oYkdVZ0lUMDlJQ2dnYzJOaGJHVWdQU0JqZFhKeVpXNTBWbUZzZFdVb0tTQXZJR2x1YVhScFlXd2dLU0FtSmlCelkyRnNaU0FoUFQwZ01TQW1KaUF0TFcxaGVFbDBaWEpoZEdsdmJuTmNibHgwWEhRcE8xeHVYSFI5WEc1Y2JseDBhV1lnS0NCMllXeDFaVkJoY25SeklDa2dlMXh1WEhSY2RHbHVhWFJwWVd4SmJsVnVhWFFnUFNBcmFXNXBkR2xoYkVsdVZXNXBkQ0I4ZkNBcmFXNXBkR2xoYkNCOGZDQXdPMXh1WEc1Y2RGeDBMeThnUVhCd2JIa2djbVZzWVhScGRtVWdiMlptYzJWMElDZ3JQUzh0UFNrZ2FXWWdjM0JsWTJsbWFXVmtYRzVjZEZ4MFlXUnFkWE4wWldRZ1BTQjJZV3gxWlZCaGNuUnpXeUF4SUYwZ1AxeHVYSFJjZEZ4MGFXNXBkR2xoYkVsdVZXNXBkQ0FySUNnZ2RtRnNkV1ZRWVhKMGMxc2dNU0JkSUNzZ01TQXBJQ29nZG1Gc2RXVlFZWEowYzFzZ01pQmRJRHBjYmx4MFhIUmNkQ3QyWVd4MVpWQmhjblJ6V3lBeUlGMDdYRzVjZEZ4MGFXWWdLQ0IwZDJWbGJpQXBJSHRjYmx4MFhIUmNkSFIzWldWdUxuVnVhWFFnUFNCMWJtbDBPMXh1WEhSY2RGeDBkSGRsWlc0dWMzUmhjblFnUFNCcGJtbDBhV0ZzU1c1VmJtbDBPMXh1WEhSY2RGeDBkSGRsWlc0dVpXNWtJRDBnWVdScWRYTjBaV1E3WEc1Y2RGeDBmVnh1WEhSOVhHNWNkSEpsZEhWeWJpQmhaR3AxYzNSbFpEdGNibjFjYmx4dWNtVjBkWEp1SUdGa2FuVnpkRU5UVXp0Y2JuMGdLVHRjYmlKZGZRPT1cbiJdfQ==

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInd3dy9wYWNrcy9qcXVlcnkvc3JjL2Nzcy9hZGp1c3RDU1MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDO0lBQ0gsU0FBUztJQUNULGdCQUFnQjtDQUNuQixFQUFFLFVBQVUsTUFBTSxFQUFFLE9BQU87SUFDeEIsWUFBWSxDQUFDO0lBQ2IsbUJBQW1CLElBQUksRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLEtBQUs7UUFDNUMsSUFBSSxRQUFRLEVBQUUsS0FBSyxHQUFHLENBQUMsRUFBRSxhQUFhLEdBQUcsRUFBRSxFQUFFLFlBQVksR0FBRyxLQUFLO1lBQzdEO2dCQUNJLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDdkIsQ0FBQztZQUNEO2dCQUNJLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDdEMsQ0FBQyxFQUFFLE9BQU8sR0FBRyxZQUFZLEVBQUUsRUFBRSxJQUFJLEdBQUcsVUFBVSxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztRQUMzRyx1RUFBdUU7UUFDdkUsYUFBYSxHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLEtBQUssSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ2pFLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUN6QyxFQUFFLENBQUMsQ0FBQyxhQUFhLElBQUksYUFBYSxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDN0MscUNBQXFDO1lBQ3JDLElBQUksR0FBRyxJQUFJLElBQUksYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLG9EQUFvRDtZQUNwRCxVQUFVLEdBQUcsVUFBVSxJQUFJLEVBQUUsQ0FBQztZQUM5Qix3REFBd0Q7WUFDeEQsYUFBYSxHQUFHLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQztZQUM5QixHQUFHLENBQUM7Z0JBQ0EscUVBQXFFO2dCQUNyRSxnRkFBZ0Y7Z0JBQ2hGLEtBQUssR0FBRyxLQUFLLElBQUksSUFBSSxDQUFDO2dCQUN0QixtQkFBbUI7Z0JBQ25CLGFBQWEsR0FBRyxhQUFhLEdBQUcsS0FBSyxDQUFDO2dCQUN0QyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsYUFBYSxHQUFHLElBQUksQ0FBQyxDQUFDO2dCQUMvQyx3REFBd0Q7Z0JBQ3hELGdGQUFnRjtZQUNwRixDQUFDLFFBQVEsS0FBSyxLQUFLLENBQUMsS0FBSyxHQUFHLFlBQVksRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLEtBQUssS0FBSyxDQUFDLElBQUksRUFBRSxhQUFhLEVBQUU7UUFDN0YsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDYixhQUFhLEdBQUcsQ0FBQyxhQUFhLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDO1lBQ2hELDZDQUE2QztZQUM3QyxRQUFRLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQztnQkFDcEIsYUFBYSxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUM7Z0JBQ25ELENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25CLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ1IsS0FBSyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7Z0JBQ2xCLEtBQUssQ0FBQyxLQUFLLEdBQUcsYUFBYSxDQUFDO2dCQUM1QixLQUFLLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQztZQUN6QixDQUFDO1FBQ0wsQ0FBQztRQUNELE1BQU0sQ0FBQyxRQUFRLENBQUM7SUFDcEIsQ0FBQztJQUNELE1BQU0sQ0FBQyxTQUFTLENBQUM7QUFDckIsQ0FBQyxDQUFDLENBQUM7QUFDSCxtMEtBQW0wSztBQUVuMEssK3VaQUErdVoiLCJmaWxlIjoid3d3L3BhY2tzL2pxdWVyeS9zcmMvY3NzL2FkanVzdENTUy5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZShbXG4gICAgXCIuLi9jb3JlXCIsXG4gICAgXCIuLi92YXIvcmNzc051bVwiXG5dLCBmdW5jdGlvbiAoalF1ZXJ5LCByY3NzTnVtKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgZnVuY3Rpb24gYWRqdXN0Q1NTKGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuKSB7XG4gICAgICAgIHZhciBhZGp1c3RlZCwgc2NhbGUgPSAxLCBtYXhJdGVyYXRpb25zID0gMjAsIGN1cnJlbnRWYWx1ZSA9IHR3ZWVuID9cbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHdlZW4uY3VyKCk7XG4gICAgICAgICAgICB9IDpcbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4galF1ZXJ5LmNzcyhlbGVtLCBwcm9wLCBcIlwiKTtcbiAgICAgICAgICAgIH0sIGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSwgdW5pdCA9IHZhbHVlUGFydHMgJiYgdmFsdWVQYXJ0c1szXSB8fCAoalF1ZXJ5LmNzc051bWJlcltwcm9wXSA/IFwiXCIgOiBcInB4XCIpLCBcbiAgICAgICAgLy8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcbiAgICAgICAgaW5pdGlhbEluVW5pdCA9IChqUXVlcnkuY3NzTnVtYmVyW3Byb3BdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCkgJiZcbiAgICAgICAgICAgIHJjc3NOdW0uZXhlYyhqUXVlcnkuY3NzKGVsZW0sIHByb3ApKTtcbiAgICAgICAgaWYgKGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFszXSAhPT0gdW5pdCkge1xuICAgICAgICAgICAgLy8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuICAgICAgICAgICAgdW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFszXTtcbiAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cbiAgICAgICAgICAgIHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuICAgICAgICAgICAgLy8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcbiAgICAgICAgICAgIGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIC8vIElmIHByZXZpb3VzIGl0ZXJhdGlvbiB6ZXJvZWQgb3V0LCBkb3VibGUgdW50aWwgd2UgZ2V0ICpzb21ldGhpbmcqLlxuICAgICAgICAgICAgICAgIC8vIFVzZSBzdHJpbmcgZm9yIGRvdWJsaW5nIHNvIHdlIGRvbid0IGFjY2lkZW50YWxseSBzZWUgc2NhbGUgYXMgdW5jaGFuZ2VkIGJlbG93XG4gICAgICAgICAgICAgICAgc2NhbGUgPSBzY2FsZSB8fCBcIi41XCI7XG4gICAgICAgICAgICAgICAgLy8gQWRqdXN0IGFuZCBhcHBseVxuICAgICAgICAgICAgICAgIGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG4gICAgICAgICAgICAgICAgalF1ZXJ5LnN0eWxlKGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0KTtcbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgc2NhbGUsIHRvbGVyYXRpbmcgemVybyBvciBOYU4gZnJvbSB0d2Vlbi5jdXIoKVxuICAgICAgICAgICAgICAgIC8vIEJyZWFrIHRoZSBsb29wIGlmIHNjYWxlIGlzIHVuY2hhbmdlZCBvciBwZXJmZWN0LCBvciBpZiB3ZSd2ZSBqdXN0IGhhZCBlbm91Z2guXG4gICAgICAgICAgICB9IHdoaWxlIChzY2FsZSAhPT0gKHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsKSAmJiBzY2FsZSAhPT0gMSAmJiAtLW1heEl0ZXJhdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZVBhcnRzKSB7XG4gICAgICAgICAgICBpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcbiAgICAgICAgICAgIC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxuICAgICAgICAgICAgYWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWzFdID9cbiAgICAgICAgICAgICAgICBpbml0aWFsSW5Vbml0ICsgKHZhbHVlUGFydHNbMV0gKyAxKSAqIHZhbHVlUGFydHNbMl0gOlxuICAgICAgICAgICAgICAgICt2YWx1ZVBhcnRzWzJdO1xuICAgICAgICAgICAgaWYgKHR3ZWVuKSB7XG4gICAgICAgICAgICAgICAgdHdlZW4udW5pdCA9IHVuaXQ7XG4gICAgICAgICAgICAgICAgdHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xuICAgICAgICAgICAgICAgIHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhZGp1c3RlZDtcbiAgICB9XG4gICAgcmV0dXJuIGFkanVzdENTUztcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmQzZHk5d1lXTnJjeTlxY1hWbGNua3ZjM0pqTDJOemN5OWhaR3AxYzNSRFUxTXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1RVRkJUU3hEUVVGRk8wbEJRMUFzVTBGQlV6dEpRVU5VTEdkQ1FVRm5RanREUVVOb1FpeEZRVUZGTEZWQlFWVXNUVUZCVFN4RlFVRkZMRTlCUVU4N1NVRkZOVUlzV1VGQldTeERRVUZETzBsQlJXSXNiVUpCUVc5Q0xFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNWVUZCVlN4RlFVRkZMRXRCUVVzN1VVRkRhRVFzU1VGQlNTeFJRVUZSTEVWQlExZ3NTMEZCU3l4SFFVRkhMRU5CUVVNc1JVRkRWQ3hoUVVGaExFZEJRVWNzUlVGQlJTeEZRVU5zUWl4WlFVRlpMRWRCUVVjc1MwRkJTenRaUVVOdVFqdG5Ra0ZEUXl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZETzFsQlEzQkNMRU5CUVVNN1dVRkRSRHRuUWtGRFF5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVWQlFVVXNRMEZCUlN4RFFVRkRPMWxCUTNKRExFTkJRVU1zUlVGRFJpeFBRVUZQTEVkQlFVY3NXVUZCV1N4RlFVRkZMRVZCUTNoQ0xFbEJRVWtzUjBGQlJ5eFZRVUZWTEVsQlFVa3NWVUZCVlN4RFFVRkZMRU5CUVVNc1EwRkJSU3hKUVVGSkxFTkJRVVVzVFVGQlRTeERRVUZETEZOQlFWTXNRMEZCUlN4SlFVRkpMRU5CUVVVc1IwRkJSeXhGUVVGRkxFZEJRVWNzU1VGQlNTeERRVUZGTzFGQlJXaEdMSFZGUVVGMVJUdFJRVU4yUlN4aFFVRmhMRWRCUVVjc1EwRkJSU3hOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZGTEVsQlFVa3NRMEZCUlN4SlFVRkpMRWxCUVVrc1MwRkJTeXhKUVVGSkxFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVVTdXVUZEZUVVc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlJTeE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFTkJRVVVzUTBGQlJTeERRVUZETzFGQlJUTkRMRVZCUVVVc1EwRkJReXhEUVVGRkxHRkJRV0VzU1VGQlNTeGhRVUZoTEVOQlFVVXNRMEZCUXl4RFFVRkZMRXRCUVVzc1NVRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVVZ3UkN4eFEwRkJjVU03V1VGRGNrTXNTVUZCU1N4SFFVRkhMRWxCUVVrc1NVRkJTU3hoUVVGaExFTkJRVVVzUTBGQlF5eERRVUZGTEVOQlFVTTdXVUZGYkVNc2IwUkJRVzlFTzFsQlEzQkVMRlZCUVZVc1IwRkJSeXhWUVVGVkxFbEJRVWtzUlVGQlJTeERRVUZETzFsQlJUbENMSGRFUVVGM1JEdFpRVU40UkN4aFFVRmhMRWRCUVVjc1EwRkJReXhQUVVGUExFbEJRVWtzUTBGQlF5eERRVUZETzFsQlJUbENMRWRCUVVjc1EwRkJRenRuUWtGRlNDeHhSVUZCY1VVN1owSkJRM0pGTEdkR1FVRm5SanRuUWtGRGFFWXNTMEZCU3l4SFFVRkhMRXRCUVVzc1NVRkJTU3hKUVVGSkxFTkJRVU03WjBKQlJYUkNMRzFDUVVGdFFqdG5Ra0ZEYmtJc1lVRkJZU3hIUVVGSExHRkJRV0VzUjBGQlJ5eExRVUZMTEVOQlFVTTdaMEpCUTNSRExFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hoUVVGaExFZEJRVWNzU1VGQlNTeERRVUZGTEVOQlFVTTdaMEpCUld4RUxIZEVRVUYzUkR0blFrRkRlRVFzWjBaQlFXZEdPMWxCUTJoR0xFTkJRVU1zVVVGRFFTeExRVUZMTEV0QlFVc3NRMEZCUlN4TFFVRkxMRWRCUVVjc1dVRkJXU3hGUVVGRkxFZEJRVWNzVDBGQlR5eERRVUZGTEVsQlFVa3NTMEZCU3l4TFFVRkxMRU5CUVVNc1NVRkJTU3hGUVVGRkxHRkJRV0VzUlVGREwwVTdVVUZEU0N4RFFVRkRPMUZCUlVRc1JVRkJSU3hEUVVGRExFTkJRVVVzVlVGQlZ5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTnNRaXhoUVVGaExFZEJRVWNzUTBGQlF5eGhRVUZoTEVsQlFVa3NRMEZCUXl4UFFVRlBMRWxCUVVrc1EwRkJReXhEUVVGRE8xbEJSV2hFTERaRFFVRTJRenRaUVVNM1F5eFJRVUZSTEVkQlFVY3NWVUZCVlN4RFFVRkZMRU5CUVVNc1EwRkJSVHRuUWtGRGVrSXNZVUZCWVN4SFFVRkhMRU5CUVVVc1ZVRkJWU3hEUVVGRkxFTkJRVU1zUTBGQlJTeEhRVUZITEVOQlFVTXNRMEZCUlN4SFFVRkhMRlZCUVZVc1EwRkJSU3hEUVVGRExFTkJRVVU3WjBKQlEzcEVMRU5CUVVNc1ZVRkJWU3hEUVVGRkxFTkJRVU1zUTBGQlJTeERRVUZETzFsQlEyeENMRVZCUVVVc1EwRkJReXhEUVVGRkxFdEJRVTBzUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUTJJc1MwRkJTeXhEUVVGRExFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTTdaMEpCUTJ4Q0xFdEJRVXNzUTBGQlF5eExRVUZMTEVkQlFVY3NZVUZCWVN4RFFVRkRPMmRDUVVNMVFpeExRVUZMTEVOQlFVTXNSMEZCUnl4SFFVRkhMRkZCUVZFc1EwRkJRenRaUVVOMFFpeERRVUZETzFGQlEwWXNRMEZCUXp0UlFVTkVMRTFCUVUwc1EwRkJReXhSUVVGUkxFTkJRVU03U1VGRGFrSXNRMEZCUXp0SlFVVkVMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU03UVVGRGFrSXNRMEZCUXl4RFFVRkZMRU5CUVVNaUxDSm1hV3hsSWpvaWQzZDNMM0JoWTJ0ekwycHhkV1Z5ZVM5emNtTXZZM056TDJGa2FuVnpkRU5UVXk1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbVJsWm1sdVpTZ2dXMXh1WEhSY0lpNHVMMk52Y21WY0lpeGNibHgwWENJdUxpOTJZWEl2Y21OemMwNTFiVndpWEc1ZExDQm1kVzVqZEdsdmJpZ2dhbEYxWlhKNUxDQnlZM056VG5WdElDa2dlMXh1WEc1Y0luVnpaU0J6ZEhKcFkzUmNJanRjYmx4dVpuVnVZM1JwYjI0Z1lXUnFkWE4wUTFOVEtDQmxiR1Z0TENCd2NtOXdMQ0IyWVd4MVpWQmhjblJ6TENCMGQyVmxiaUFwSUh0Y2JseDBkbUZ5SUdGa2FuVnpkR1ZrTEZ4dVhIUmNkSE5qWVd4bElEMGdNU3hjYmx4MFhIUnRZWGhKZEdWeVlYUnBiMjV6SUQwZ01qQXNYRzVjZEZ4MFkzVnljbVZ1ZEZaaGJIVmxJRDBnZEhkbFpXNGdQMXh1WEhSY2RGeDBablZ1WTNScGIyNG9LU0I3WEc1Y2RGeDBYSFJjZEhKbGRIVnliaUIwZDJWbGJpNWpkWElvS1R0Y2JseDBYSFJjZEgwZ09seHVYSFJjZEZ4MFpuVnVZM1JwYjI0b0tTQjdYRzVjZEZ4MFhIUmNkSEpsZEhWeWJpQnFVWFZsY25rdVkzTnpLQ0JsYkdWdExDQndjbTl3TENCY0lsd2lJQ2s3WEc1Y2RGeDBYSFI5TEZ4dVhIUmNkR2x1YVhScFlXd2dQU0JqZFhKeVpXNTBWbUZzZFdVb0tTeGNibHgwWEhSMWJtbDBJRDBnZG1Gc2RXVlFZWEowY3lBbUppQjJZV3gxWlZCaGNuUnpXeUF6SUYwZ2ZId2dLQ0JxVVhWbGNua3VZM056VG5WdFltVnlXeUJ3Y205d0lGMGdQeUJjSWx3aUlEb2dYQ0p3ZUZ3aUlDa3NYRzVjYmx4MFhIUXZMeUJUZEdGeWRHbHVaeUIyWVd4MVpTQmpiMjF3ZFhSaGRHbHZiaUJwY3lCeVpYRjFhWEpsWkNCbWIzSWdjRzkwWlc1MGFXRnNJSFZ1YVhRZ2JXbHpiV0YwWTJobGMxeHVYSFJjZEdsdWFYUnBZV3hKYmxWdWFYUWdQU0FvSUdwUmRXVnllUzVqYzNOT2RXMWlaWEpiSUhCeWIzQWdYU0I4ZkNCMWJtbDBJQ0U5UFNCY0luQjRYQ0lnSmlZZ0sybHVhWFJwWVd3Z0tTQW1KbHh1WEhSY2RGeDBjbU56YzA1MWJTNWxlR1ZqS0NCcVVYVmxjbmt1WTNOektDQmxiR1Z0TENCd2NtOXdJQ2tnS1R0Y2JseHVYSFJwWmlBb0lHbHVhWFJwWVd4SmJsVnVhWFFnSmlZZ2FXNXBkR2xoYkVsdVZXNXBkRnNnTXlCZElDRTlQU0IxYm1sMElDa2dlMXh1WEc1Y2RGeDBMeThnVkhKMWMzUWdkVzVwZEhNZ2NtVndiM0owWldRZ1lua2dhbEYxWlhKNUxtTnpjMXh1WEhSY2RIVnVhWFFnUFNCMWJtbDBJSHg4SUdsdWFYUnBZV3hKYmxWdWFYUmJJRE1nWFR0Y2JseHVYSFJjZEM4dklFMWhhMlVnYzNWeVpTQjNaU0IxY0dSaGRHVWdkR2hsSUhSM1pXVnVJSEJ5YjNCbGNuUnBaWE1nYkdGMFpYSWdiMjVjYmx4MFhIUjJZV3gxWlZCaGNuUnpJRDBnZG1Gc2RXVlFZWEowY3lCOGZDQmJYVHRjYmx4dVhIUmNkQzh2SUVsMFpYSmhkR2wyWld4NUlHRndjSEp2ZUdsdFlYUmxJR1p5YjIwZ1lTQnViMjU2WlhKdklITjBZWEowYVc1bklIQnZhVzUwWEc1Y2RGeDBhVzVwZEdsaGJFbHVWVzVwZENBOUlDdHBibWwwYVdGc0lIeDhJREU3WEc1Y2JseDBYSFJrYnlCN1hHNWNibHgwWEhSY2RDOHZJRWxtSUhCeVpYWnBiM1Z6SUdsMFpYSmhkR2x2YmlCNlpYSnZaV1FnYjNWMExDQmtiM1ZpYkdVZ2RXNTBhV3dnZDJVZ1oyVjBJQ3B6YjIxbGRHaHBibWNxTGx4dVhIUmNkRngwTHk4Z1ZYTmxJSE4wY21sdVp5Qm1iM0lnWkc5MVlteHBibWNnYzI4Z2QyVWdaRzl1SjNRZ1lXTmphV1JsYm5SaGJHeDVJSE5sWlNCelkyRnNaU0JoY3lCMWJtTm9ZVzVuWldRZ1ltVnNiM2RjYmx4MFhIUmNkSE5qWVd4bElEMGdjMk5oYkdVZ2ZId2dYQ0l1TlZ3aU8xeHVYRzVjZEZ4MFhIUXZMeUJCWkdwMWMzUWdZVzVrSUdGd2NHeDVYRzVjZEZ4MFhIUnBibWwwYVdGc1NXNVZibWwwSUQwZ2FXNXBkR2xoYkVsdVZXNXBkQ0F2SUhOallXeGxPMXh1WEhSY2RGeDBhbEYxWlhKNUxuTjBlV3hsS0NCbGJHVnRMQ0J3Y205d0xDQnBibWwwYVdGc1NXNVZibWwwSUNzZ2RXNXBkQ0FwTzF4dVhHNWNkRngwTHk4Z1ZYQmtZWFJsSUhOallXeGxMQ0IwYjJ4bGNtRjBhVzVuSUhwbGNtOGdiM0lnVG1GT0lHWnliMjBnZEhkbFpXNHVZM1Z5S0NsY2JseDBYSFF2THlCQ2NtVmhheUIwYUdVZ2JHOXZjQ0JwWmlCelkyRnNaU0JwY3lCMWJtTm9ZVzVuWldRZ2IzSWdjR1Z5Wm1WamRDd2diM0lnYVdZZ2QyVW5kbVVnYW5WemRDQm9ZV1FnWlc1dmRXZG9MbHh1WEhSY2RIMGdkMmhwYkdVZ0tGeHVYSFJjZEZ4MGMyTmhiR1VnSVQwOUlDZ2djMk5oYkdVZ1BTQmpkWEp5Wlc1MFZtRnNkV1VvS1NBdklHbHVhWFJwWVd3Z0tTQW1KaUJ6WTJGc1pTQWhQVDBnTVNBbUppQXRMVzFoZUVsMFpYSmhkR2x2Ym5OY2JseDBYSFFwTzF4dVhIUjlYRzVjYmx4MGFXWWdLQ0IyWVd4MVpWQmhjblJ6SUNrZ2UxeHVYSFJjZEdsdWFYUnBZV3hKYmxWdWFYUWdQU0FyYVc1cGRHbGhiRWx1Vlc1cGRDQjhmQ0FyYVc1cGRHbGhiQ0I4ZkNBd08xeHVYRzVjZEZ4MEx5OGdRWEJ3YkhrZ2NtVnNZWFJwZG1VZ2IyWm1jMlYwSUNnclBTOHRQU2tnYVdZZ2MzQmxZMmxtYVdWa1hHNWNkRngwWVdScWRYTjBaV1FnUFNCMllXeDFaVkJoY25Seld5QXhJRjBnUDF4dVhIUmNkRngwYVc1cGRHbGhiRWx1Vlc1cGRDQXJJQ2dnZG1Gc2RXVlFZWEowYzFzZ01TQmRJQ3NnTVNBcElDb2dkbUZzZFdWUVlYSjBjMXNnTWlCZElEcGNibHgwWEhSY2RDdDJZV3gxWlZCaGNuUnpXeUF5SUYwN1hHNWNkRngwYVdZZ0tDQjBkMlZsYmlBcElIdGNibHgwWEhSY2RIUjNaV1Z1TG5WdWFYUWdQU0IxYm1sME8xeHVYSFJjZEZ4MGRIZGxaVzR1YzNSaGNuUWdQU0JwYm1sMGFXRnNTVzVWYm1sME8xeHVYSFJjZEZ4MGRIZGxaVzR1Wlc1a0lEMGdZV1JxZFhOMFpXUTdYRzVjZEZ4MGZWeHVYSFI5WEc1Y2RISmxkSFZ5YmlCaFpHcDFjM1JsWkR0Y2JuMWNibHh1Y21WMGRYSnVJR0ZrYW5WemRFTlRVenRjYm4wZ0tUdGNiaUpkZlE9PVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGY4O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZDNkeTl3WVdOcmN5OXFjWFZsY25rdmMzSmpMMk56Y3k5aFpHcDFjM1JEVTFNdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzVFVGQlRTeERRVUZETzBsQlEwZ3NVMEZCVXp0SlFVTlVMR2RDUVVGblFqdERRVU51UWl4RlFVRkZMRlZCUVZVc1RVRkJUU3hGUVVGRkxFOUJRVTg3U1VGRGVFSXNXVUZCV1N4RFFVRkRPMGxCUTJJc2JVSkJRVzFDTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1ZVRkJWU3hGUVVGRkxFdEJRVXM3VVVGRE5VTXNTVUZCU1N4UlFVRlJMRVZCUVVVc1MwRkJTeXhIUVVGSExFTkJRVU1zUlVGQlJTeGhRVUZoTEVkQlFVY3NSVUZCUlN4RlFVRkZMRmxCUVZrc1IwRkJSeXhMUVVGTE8xbEJRemRFTzJkQ1FVTkpMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVTTdXVUZEZGtJc1EwRkJRenRaUVVORU8yZENRVU5KTEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNN1dVRkRkRU1zUTBGQlF5eEZRVUZGTEU5QlFVOHNSMEZCUnl4WlFVRlpMRVZCUVVVc1JVRkJSU3hKUVVGSkxFZEJRVWNzVlVGQlZTeEpRVUZKTEZWQlFWVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1JVRkJSU3hIUVVGSExFbEJRVWtzUTBGQlF6dFJRVU16Unl4MVJVRkJkVVU3VVVGRGRrVXNZVUZCWVN4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4SlFVRkpMRXRCUVVzc1NVRkJTU3hKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETzFsQlEycEZMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU42UXl4RlFVRkZMRU5CUVVNc1EwRkJReXhoUVVGaExFbEJRVWtzWVVGQllTeERRVUZETEVOQlFVTXNRMEZCUXl4TFFVRkxMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRE4wTXNjVU5CUVhGRE8xbEJRM0pETEVsQlFVa3NSMEZCUnl4SlFVRkpMRWxCUVVrc1lVRkJZU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEyaERMRzlFUVVGdlJEdFpRVU53UkN4VlFVRlZMRWRCUVVjc1ZVRkJWU3hKUVVGSkxFVkJRVVVzUTBGQlF6dFpRVU01UWl4M1JFRkJkMFE3V1VGRGVFUXNZVUZCWVN4SFFVRkhMRU5CUVVNc1QwRkJUeXhKUVVGSkxFTkJRVU1zUTBGQlF6dFpRVU01UWl4SFFVRkhMRU5CUVVNN1owSkJRMEVzY1VWQlFYRkZPMmRDUVVOeVJTeG5Sa0ZCWjBZN1owSkJRMmhHTEV0QlFVc3NSMEZCUnl4TFFVRkxMRWxCUVVrc1NVRkJTU3hEUVVGRE8yZENRVU4wUWl4dFFrRkJiVUk3WjBKQlEyNUNMR0ZCUVdFc1IwRkJSeXhoUVVGaExFZEJRVWNzUzBGQlN5eERRVUZETzJkQ1FVTjBReXhOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1lVRkJZU3hIUVVGSExFbEJRVWtzUTBGQlF5eERRVUZETzJkQ1FVTXZReXgzUkVGQmQwUTdaMEpCUTNoRUxHZEdRVUZuUmp0WlFVTndSaXhEUVVGRExGRkJRVkVzUzBGQlN5eExRVUZMTEVOQlFVTXNTMEZCU3l4SFFVRkhMRmxCUVZrc1JVRkJSU3hIUVVGSExFOUJRVThzUTBGQlF5eEpRVUZKTEV0QlFVc3NTMEZCU3l4RFFVRkRMRWxCUVVrc1JVRkJSU3hoUVVGaExFVkJRVVU3VVVGRE4wWXNRMEZCUXp0UlFVTkVMRVZCUVVVc1EwRkJReXhEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEWWl4aFFVRmhMRWRCUVVjc1EwRkJReXhoUVVGaExFbEJRVWtzUTBGQlF5eFBRVUZQTEVsQlFVa3NRMEZCUXl4RFFVRkRPMWxCUTJoRUxEWkRRVUUyUXp0WlFVTTNReXhSUVVGUkxFZEJRVWNzVlVGQlZTeERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkRjRUlzWVVGQllTeEhRVUZITEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eEhRVUZITEZWQlFWVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRMjVFTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRMjVDTEVWQlFVVXNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlExSXNTMEZCU3l4RFFVRkRMRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU03WjBKQlEyeENMRXRCUVVzc1EwRkJReXhMUVVGTExFZEJRVWNzWVVGQllTeERRVUZETzJkQ1FVTTFRaXhMUVVGTExFTkJRVU1zUjBGQlJ5eEhRVUZITEZGQlFWRXNRMEZCUXp0WlFVTjZRaXhEUVVGRE8xRkJRMHdzUTBGQlF6dFJRVU5FTEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNN1NVRkRjRUlzUTBGQlF6dEpRVU5FTEUxQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNN1FVRkRja0lzUTBGQlF5eERRVUZETEVOQlFVTTdRVUZGU0N4dE1FdEJRVzB3U3lJc0ltWnBiR1VpT2lKM2QzY3ZjR0ZqYTNNdmFuRjFaWEo1TDNOeVl5OWpjM012WVdScWRYTjBRMU5UTG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2laR1ZtYVc1bEtGdGNiaUFnSUNCY0lpNHVMMk52Y21WY0lpeGNiaUFnSUNCY0lpNHVMM1poY2k5eVkzTnpUblZ0WENKY2JsMHNJR1oxYm1OMGFXOXVJQ2hxVVhWbGNua3NJSEpqYzNOT2RXMHBJSHRjYmlBZ0lDQmNJblZ6WlNCemRISnBZM1JjSWp0Y2JpQWdJQ0JtZFc1amRHbHZiaUJoWkdwMWMzUkRVMU1vWld4bGJTd2djSEp2Y0N3Z2RtRnNkV1ZRWVhKMGN5d2dkSGRsWlc0cElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdGa2FuVnpkR1ZrTENCelkyRnNaU0E5SURFc0lHMWhlRWwwWlhKaGRHbHZibk1nUFNBeU1Dd2dZM1Z5Y21WdWRGWmhiSFZsSUQwZ2RIZGxaVzRnUDF4dUlDQWdJQ0FnSUNBZ0lDQWdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwZDJWbGJpNWpkWElvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBnT2x4dUlDQWdJQ0FnSUNBZ0lDQWdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJxVVhWbGNua3VZM056S0dWc1pXMHNJSEJ5YjNBc0lGd2lYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU3dnYVc1cGRHbGhiQ0E5SUdOMWNuSmxiblJXWVd4MVpTZ3BMQ0IxYm1sMElEMGdkbUZzZFdWUVlYSjBjeUFtSmlCMllXeDFaVkJoY25Seld6TmRJSHg4SUNocVVYVmxjbmt1WTNOelRuVnRZbVZ5VzNCeWIzQmRJRDhnWENKY0lpQTZJRndpY0hoY0lpa3NJRnh1SUNBZ0lDQWdJQ0F2THlCVGRHRnlkR2x1WnlCMllXeDFaU0JqYjIxd2RYUmhkR2x2YmlCcGN5QnlaWEYxYVhKbFpDQm1iM0lnY0c5MFpXNTBhV0ZzSUhWdWFYUWdiV2x6YldGMFkyaGxjMXh1SUNBZ0lDQWdJQ0JwYm1sMGFXRnNTVzVWYm1sMElEMGdLR3BSZFdWeWVTNWpjM05PZFcxaVpYSmJjSEp2Y0YwZ2ZId2dkVzVwZENBaFBUMGdYQ0p3ZUZ3aUlDWW1JQ3RwYm1sMGFXRnNLU0FtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdjbU56YzA1MWJTNWxlR1ZqS0dwUmRXVnllUzVqYzNNb1pXeGxiU3dnY0hKdmNDa3BPMXh1SUNBZ0lDQWdJQ0JwWmlBb2FXNXBkR2xoYkVsdVZXNXBkQ0FtSmlCcGJtbDBhV0ZzU1c1VmJtbDBXek5kSUNFOVBTQjFibWwwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCVWNuVnpkQ0IxYm1sMGN5QnlaWEJ2Y25SbFpDQmllU0JxVVhWbGNua3VZM056WEc0Z0lDQWdJQ0FnSUNBZ0lDQjFibWwwSUQwZ2RXNXBkQ0I4ZkNCcGJtbDBhV0ZzU1c1VmJtbDBXek5kTzF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnVFdGclpTQnpkWEpsSUhkbElIVndaR0YwWlNCMGFHVWdkSGRsWlc0Z2NISnZjR1Z5ZEdsbGN5QnNZWFJsY2lCdmJseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVlFZWEowY3lBOUlIWmhiSFZsVUdGeWRITWdmSHdnVzEwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCSmRHVnlZWFJwZG1Wc2VTQmhjSEJ5YjNocGJXRjBaU0JtY205dElHRWdibTl1ZW1WeWJ5QnpkR0Z5ZEdsdVp5QndiMmx1ZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdhVzVwZEdsaGJFbHVWVzVwZENBOUlDdHBibWwwYVdGc0lIeDhJREU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtieUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1NXWWdjSEpsZG1sdmRYTWdhWFJsY21GMGFXOXVJSHBsY205bFpDQnZkWFFzSUdSdmRXSnNaU0IxYm5ScGJDQjNaU0JuWlhRZ0tuTnZiV1YwYUdsdVp5b3VYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnVlhObElITjBjbWx1WnlCbWIzSWdaRzkxWW14cGJtY2djMjhnZDJVZ1pHOXVKM1FnWVdOamFXUmxiblJoYkd4NUlITmxaU0J6WTJGc1pTQmhjeUIxYm1Ob1lXNW5aV1FnWW1Wc2IzZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpZMkZzWlNBOUlITmpZV3hsSUh4OElGd2lMalZjSWp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QkJaR3AxYzNRZ1lXNWtJR0Z3Y0d4NVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXNXBkR2xoYkVsdVZXNXBkQ0E5SUdsdWFYUnBZV3hKYmxWdWFYUWdMeUJ6WTJGc1pUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnFVWFZsY25rdWMzUjViR1VvWld4bGJTd2djSEp2Y0N3Z2FXNXBkR2xoYkVsdVZXNXBkQ0FySUhWdWFYUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUZWd1pHRjBaU0J6WTJGc1pTd2dkRzlzWlhKaGRHbHVaeUI2WlhKdklHOXlJRTVoVGlCbWNtOXRJSFIzWldWdUxtTjFjaWdwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1FuSmxZV3NnZEdobElHeHZiM0FnYVdZZ2MyTmhiR1VnYVhNZ2RXNWphR0Z1WjJWa0lHOXlJSEJsY21abFkzUXNJRzl5SUdsbUlIZGxKM1psSUdwMWMzUWdhR0ZrSUdWdWIzVm5hQzVjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdkMmhwYkdVZ0tITmpZV3hsSUNFOVBTQW9jMk5oYkdVZ1BTQmpkWEp5Wlc1MFZtRnNkV1VvS1NBdklHbHVhWFJwWVd3cElDWW1JSE5qWVd4bElDRTlQU0F4SUNZbUlDMHRiV0Y0U1hSbGNtRjBhVzl1Y3lrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0haaGJIVmxVR0Z5ZEhNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsdWFYUnBZV3hKYmxWdWFYUWdQU0FyYVc1cGRHbGhiRWx1Vlc1cGRDQjhmQ0FyYVc1cGRHbGhiQ0I4ZkNBd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1FYQndiSGtnY21Wc1lYUnBkbVVnYjJabWMyVjBJQ2dyUFM4dFBTa2dhV1lnYzNCbFkybG1hV1ZrWEc0Z0lDQWdJQ0FnSUNBZ0lDQmhaR3AxYzNSbFpDQTlJSFpoYkhWbFVHRnlkSE5iTVYwZ1AxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbHVhWFJwWVd4SmJsVnVhWFFnS3lBb2RtRnNkV1ZRWVhKMGMxc3hYU0FySURFcElDb2dkbUZzZFdWUVlYSjBjMXN5WFNBNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0szWmhiSFZsVUdGeWRITmJNbDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhkbFpXNHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwZDJWbGJpNTFibWwwSUQwZ2RXNXBkRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwZDJWbGJpNXpkR0Z5ZENBOUlHbHVhWFJwWVd4SmJsVnVhWFE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhkbFpXNHVaVzVrSUQwZ1lXUnFkWE4wWldRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdGa2FuVnpkR1ZrTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z1lXUnFkWE4wUTFOVE8xeHVmU2s3WEc1Y2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QV1JoZEdFNllYQndiR2xqWVhScGIyNHZhbk52Ymp0amFHRnljMlYwUFhWMFpqZzdZbUZ6WlRZMExHVjVTakphV0VwNllWYzVkVWxxYjNwTVEwcDZZak5XZVZreVZucEphbkJpU1c1a00yUjVPWGRaVjA1eVkzazVjV05ZVm14amJtdDJZek5LYWt3eVRucGplVGxvV2tkd01XTXpVa1JWTVUxMVlXNU5hVmhUZDJsaWJVWjBXbGhOYVU5c2RHUk1RMHAwV1ZoQ2QyRlhOVzVqZVVrMlNXdEdRbEZWUlhOVVZVWkNWRk40UkZGVlJrWlBNR3hDVVRGQmMxVXdSa0pWZW5SS1VWVk9WVXhIWkVOUlZVWnVVV3AwUkZGVlRtOVJhWGhHVVZWR1JreEdWa0pSVmxWelZGVkdRbFJUZUVaUlZVWkdURVU1UWxGVk9EZFRWVVpHVGxWSmMxZFZSa0pYVTNoRVVWVkdSRTh3YkVKU1YwbHpZbFZLUWxGWE9VTk1SV3hDVVZWcmMxSlZSa0pTVTNoS1VWVkdTa3hGVmtKUlZWVnpWbFZHUWxaVGVFWlJWVVpHVEVWMFFsRlZjemRWVlVaRVlVVlJjMU5WUmtKVFUzaFNVVlZHVWt4RlZrSlJNV2R6VXpCR1FsTjVlRWhSVlVaSVRFVk9RbEZWVFhOU1ZVWkVWa040YUZGVlJtaE1SV1JDVVZWamMxSlZSa0pTVTNoR1VWVk9jMUZwZUZwUlZVWmFURVZrUWxGVlkzTlRNRVpDVTNwMFdsRlZUblZSYW5SdVVXdEdSRkY1ZUU1UlZVWk9URVZPUWxGVlRYTlRNRVpDVTNsNFJGRlZSa1JNUldSQ1VWVmpjMUpWUmtKU1UzaEVVVlZHUkU4eGJFSlJNMEpEVEVWT1FsRlZUVGRYVlVaRVVrUjBibEZyUmtSUmVYaE9VVlZHVGt4RlRrSlJWVTF6VkZWR1FsUlRlRVJSVlVaRVRFVmtRbEZWWTNOUk1FWkNVbE40U2xGVlJrcE1SVlpDVVZWVmMxTlZSa0pUVTNoR1VWVkdSa3hGVmtKUlZWVnpVVEJHUWxKVGVFUlJWVVpFVHpGc1FsRXpTa1JNUlU1Q1VWVk5jMUpWUmtSU2FYaFFVVlZHVUV4RlpFSlJWV056VjFWR1FsZFRlRVpSVlVaR1RFVldRbEV6YUVOTVJXeENVVlZyYzFJd1JrSlNlWGhXVVZWR1ZreEZiRUpSVld0elZsVkdRbFpUZUVSUlZVWkdURVZPUWxGVlRYTlJNRVpDVWxONFNsRlZSa3BNUlU1Q1VWVlZjMVJWUmtKVVUzaEVVVlZHUkV4R1RrSlJWazF6VVRCR1FsSlRlRXBSVlVaS1RFVk9RbEZWVlhOU01FWkNVbmw0UmxGVlJrWk1SV1JDVVZWamMxTlZSa0pUVTNoRVVWVkdSazh4UmtKU1YyaEhURWhXUmxGVlJqRlNWSFJTVVZWT01sSlRlR2hSVlVab1RFVmtRbEZWWTNOUk1FWkNVbE40VGxGVlJrNU1SVTVDVVZWTmMxVXdSa0pWZVhoRVVWVkdSa3hGYkVKUlZXdHpVVEJHUWxKVGVFcFJWVVpLVEVWc1FsRlZhM05UTUVaQ1UzbDRTbEZWUmtwTVJXeENVVlZyYzFFd1JrSlJlWGhRVVZWR1VFeEZUa0pSVlZVM1YxVkdSR1ZGVlhOVU1FWkNWSGw0UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pTVTNoT1VWVkdUa3hGVGtKUlZVMXpVakJHUWxKNWVFUlJWVVpHVEVWc1FsRlZhM05TVlVaQ1VsTjRTbEZWUmtwTVJVNUNVVlZWYzFFd1JrSlNVM2hFVVZWR1JFOHhSa0pTVkU1RVRFVldRbEZWVlhOUk1FWkNVWGw0UkZGVlJrWk1SMFpDVVZkRmMxTlZSa0pUVTNob1VWVkdhRXhGVGtKUlZWVnpVVEJHUWxGNWVFUlJWVVpHVEVWMFFsRlZjM05UVlVaQ1UzbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlblJhVVZWV2QxSkRlSGhSTUVaQ1kxVk5OMWRWUmtSamEwMXpVMVZHUWxOVGVFaFJWVVpJVEVWc1FsRlZhM05UVlVaQ1UxTjRhRkZWUm1oTVJVNUNVVlZWYzFFd1JrSlJlWGhFVVZWR1JreEZUa0pSVlUwM1YxVkdSbUpGVFhOaU1GSkNVVmM1UlU4eGJFSlJNMEpGVEVaV1FsRldWWE5TTUVaQ1VubDRWbEZWUmxaTVJXeENVVlZyYzFKVlJrSlNVM2hFVVZWR1JFOHhiRUpTVkd4RFRFaGtSVkZWUmpOU1JIUmFVVlZPTkZKRGVHaFJWVVpvVEVWa1FsRlZZM05STUVaQ1VYbDRVRkZWUmxCTVJXeENVVlZyYzFFd1JrSlJlWGhFVVZWR1JFOHhiRUpTVkd4RFRFVmtRbEZWWTNOUk1FWkNVWHAwYmxGclJrWlRRM2g0VWxWR1FtTlZWVGRhTUVwQ1VUTktSa3hIWkVkUlZVWnVVbXAwYmxGclJrUmhSVmx6VXpCR1FsTjVlRWhSVlVaSVRFVjBRbEZWYzNOVFZVWkNVMU40U2xGVlJrcE1SVTVDVVZWTk4xb3dTa0pTV0ZKRFRFY3hRMUZWUm5SUmFuUnVVV3RHUkdKclNYTlpWVVpDV1ZONFNGRlZSa2hNUjBaQ1VWZEZjMUl3UmtKU2VYaE1VVlZHVEV4RlRrSlJWVTAzV2pCS1FsRXpVa1JNUlRGQ1VWVXdjMUV3UmtKUmVYaE1VVlZHVEV4RlRrSlJWVlZ6VTFWR1FsTlRlRVpSVlVaR1RFVnNRbEZWYTNOU1ZVWkNVbE40YUZGVlJtaE1SV1JDVVZWamMxTlZSa0pUVTNoRVVWVkdSa3hGVGtKUlZVMDNXakJLUWxKWGVFVk1TR1JGVVZWR00xSkVkRzVSYTBaRVpVVlJjMW93V2tKUlYyUkhUekZzUWxFeWFFZE1SVTVDVVZWTmMxVlZSa1JSVTNoTVVWVkdURXhGZEVKUlZYTnpVVEJHUWxKVGVFeFJWVVpNVEVWa1FsRlZZM05YVlVaQ1YxTjRSbEZWUmtaTVJXUkNVVlZqYzFRd1JrSlVlWGhFVVZWR1JreEZiRUpSVld0elV6QkdRbE41ZUV4UlZVWk1URVZPUWxGVlRYTlRWVVpDVTFONFJsRlZSa1pNUjBaQ1VWZEZjMUpWUmtSTU1GVTNWVlZHUkZORGVFUlJWVVpFVHpGR1FsSlZVWE5TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZWYzFaVlJrSldlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEZwUlZVNXpVV2w0YUZGVlJtaE1SV1JDVVZWamMxRXdSa0pSZVhob1VWVkdhRXhGYkVKUlZXdHpVVEJHUWxGNWVGQlJWVVpRVEVWc1FsRlZhM05STUVaQ1VYbDRSRkZWUmtSUE1XeENVbGRvUlV4RVdrUlJWVVV5VVhwMFdsRlZUVE5SZVhoU1VWVkdVa3hGWkVKUlZXTnpWbFZHUWxaVGVFUlJWVVpHVEVWT1FsRlZUWE5STUVaQ1VsUjBibEZyUmtSbGEwbHpXVlZHUWxsVGVFaFJWVVpJVEVWT1FsRlZWWE5XVlVaQ1ZsTjRSRkZWUmtaTVJVNUNVVlZOYzFFd1JrSlNVM2hJVVZWR1NFeEZUa0pSVlUxelVUQkdRbEpUZUVoUlZVWklURVpXUWxGV1ZYTlJNRVpDVWxONFJGRlZSa1JNUlU1Q1VWVlZOMW93U2tKUk0zQkZURVZPUWxGVlRYTldWVVpDVmxONFJGRlZSa1pNUlU1Q1VWVk5jMUV3UmtKU1UzaEVVVlZHUkU4eGJFSlJNbmhEVEVWV1FsRlZWWE5STUVaQ1VYbDRSRkZWUmtaTVJYUkNVVlV3YzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUwM1dqQktRbEV5U1hOVE1FWkNVM2w0UkZGVlJrUk1SV3hDVVZWcmMxSXdSa0pTZVhoS1VWVkdTa3hGVGtKUlZVMDNXakJLUWxFeWVFTk1SWFJDVVZWemMxRXdSa0pSZVhoTVVWVkdURXhGWkVKUlZXTnpXVlZHUWxsVGVFUlJWVVpFVHpKa1ExRlZUVEZSYVhoTVVWVkdURXhGVGtKUlZVMXpVakJHUWxKNWVFaFJWVVpJVEVaR1FsRldSWE5STUVaQ1VYcDBXbEZWVGpCUmFYaEVVVlZHUkU4eFJrSlJNRmx6VVRCR1FsRjZkRkpSVlU1RlRFVXhRbEZWTUhOUk1FWkNVWGw0VWxGVlJsSk1SVTVDVVZWTk4xTlZSa1JoYTBselVUQkdRbEY2ZEVwUlZWWkZURVV4UWxGVk1ITlJNRVpDVVhsNFZGRlZSbFJNUlU1Q1VWVk5OMUZWUmtSaGEwbHpVVEJHUWxGNWVFUlJWVVpHVEVWT1FsRlZUV2xNUTBwdFlWZDRiRWxxYjJsa00yUXpURE5DYUZreWRIcE1NbkI0WkZkV2VXVlRPWHBqYlUxMldUTk9la3d5Um10aGJsWjZaRVZPVkZWNU5YRmplVWx6U1c1T2RtUllTbXBhV0U1RVlqSTFNRnBYTlRCSmFuQmlTVzFTYkZwdGJIVmFVMmRuVnpGNGRWaElVbU5KYVRSMVRESk9kbU50Vm1OSmFYaGpZbXg0TUZoRFNYVk1hVGt5V1ZoSmRtTnRUbnBqTURVeFlsWjNhVmhITldSTVEwSnRaRmMxYW1SSGJIWmlhV2RuWVd4R01WcFlTalZNUTBKNVdUTk9lbFJ1Vm5SSlEydG5aVEY0ZFZoSE5XTkpibFo2V2xOQ2VtUklTbkJaTTFKalNXcDBZMkpzZUhWYWJsWjFXVE5TY0dJeU5HZFpWMUp4WkZoT01GRXhUbFJMUTBKc1lrZFdkRXhEUW5kamJUbDNURU5DTWxsWGVERmFWa0pvWTI1U2VreERRakJrTWxac1ltbEJjRWxJZEdOaWJIZ3daRzFHZVVsSFJtdGhibFo2WkVkV2EweEdlSFZZU0ZKalpFaE9hbGxYZUd4SlJEQm5UVk40WTJKc2VEQllTRkowV1Zob1NtUkhWbmxaV0ZKd1lqSTFla2xFTUdkTmFrRnpXRWMxWTJSR2VEQlpNMVo1WTIxV2RXUkdXbWhpU0Zac1NVUXdaMlJJWkd4YVZ6Um5VREY0ZFZoSVVtTmtSbmd3V201V2RWa3pVbkJpTWpSdlMxTkNOMWhITldOa1JuZ3dXRWhTWTJSSVNteGtTRlo1WW1sQ01HUXlWbXhpYVRWcVpGaEpiMHRVZEdOaWJIZ3dXRWhTWTJSSU1HZFBiSGgxV0VoU1kyUkdlREJhYmxaMVdUTlNjR0l5Tkc5TFUwSTNXRWMxWTJSR2VEQllTRkpqWkVoS2JHUklWbmxpYVVKeFZWaFdiR051YTNWWk0wNTZTME5DYkdKSFZuUk1RMEozWTIwNWQweERRbU5KYkhkcFNVTnJOMWhITldOa1JuZ3dXRWhTT1V4R2VIVllTRkpqWkVkc2RXRllVbkJaVjNkblVGTkNhbVJZU25sYVZ6VXdWbTFHYzJSWFZXOUxVM2hqWW14NE1GaElVakZpYld3d1NVUXdaMlJ0Um5Oa1YxWlJXVmhLTUdONVFXMUthVUl5V1ZkNE1WcFdRbWhqYmxKNlYzbEJla2xHTUdkbVNIZG5TME5DY1ZWWVZteGpibXQxV1ROT2VsUnVWblJaYlZaNVYzbENkMk50T1hkSlJqQm5VSGxDWTBsc2QybEpSRzluV0VOS2QyVkdkMmxKUTJ0eldFYzFZMkpzZURCWVNGRjJUSGxDVkdSSFJubGtSMngxV25sQ01sbFhlREZhVTBKcVlqSXhkMlJZVW1oa1IyeDJZbWxDY0dONVFubGFXRVl4WVZoS2JGcERRbTFpTTBsblkwYzVNRnBYTlRCaFYwWnpTVWhXZFdGWVVXZGlWMng2WWxkR01Ga3lhR3hqTVhoMVdFaFNZMlJIYkhWaFdGSndXVmQ0U21Kc1ZuVmhXRkZuVUZOQmIwbEhjRkprVjFaNVpWTTFhbU16VGs5a1Z6RnBXbGhLWWtsSVFubGlNMEZuV0ZOQ09HWkRRakZpYld3d1NVTkZPVkJUUW1OSmJrSTBXRU5KWjBwcFdXZExNbXgxWVZoU2NGbFhkMmRMVTBGdFNteDRkVmhJVW1Oa1JuZ3dZMjFPZW1Nd05URmlVelZzWlVkV2FrdERRbkZWV0Zac1kyNXJkVmt6VG5wTFEwSnNZa2RXZEV4RFFuZGpiVGwzU1VOclowdFVkR05pYkhoMVdFaFNjRnBwUVc5SlIyeDFZVmhTY0ZsWGVFcGliRloxWVZoUlowcHBXV2RoVnpWd1pFZHNhR0pGYkhWV1Z6VndaRVp6WjAxNVFtUkpRMFU1VUZOQ01XSnRiREJKUTJ0blpURjRkVmhITldOa1JuZ3dUSGs0WjFaSVNqRmpNMUZuWkZjMWNHUklUV2RqYlZaM1lqTktNRnBYVVdkWmJtdG5ZV3hHTVZwWVNqVk1iVTU2WXpGNGRWaElVbU5rU0ZaMVlWaFJaMUJUUWpGaWJXd3dTVWg0T0VsSGJIVmhXRkp3V1ZkNFNtSnNWblZoV0ZKaVNVUk5aMWhVZEdOaWJIaDFXRWhTWTJSRE9IWkpSVEZvWVRKVloyTXpWbmxhVTBJeldsTkNNV05IVW1oa1IxVm5aRWRvYkVsSVVqTmFWMVoxU1VoQ2VXSXpRbXhqYmxKd1dsaE5aMkpIUmpCYVdFbG5ZakkxWTJKc2VEQllTRkl5V1ZkNE1WcFdRbWhqYmxKNlNVUXdaMlJ0Um5Oa1YxWlJXVmhLTUdONVFqaG1RMEppV0ZSMFkySnNlSFZZU0ZKalpFTTRka2xGYkRCYVdFcG9aRWRzTWxwWGVEVkpSMFozWTBoS2RtVkhiSFJaV0ZKc1NVZGFlV0l5TUdkWlUwSjFZakkxTmxwWVNuWkpTRTR3V1ZoS01HRlhOVzVKU0VKMllWYzFNRmhITldOa1JuZ3dZVmMxY0dSSGJHaGlSV3gxVmxjMWNHUkRRVGxKUTNSd1ltMXNNR0ZYUm5OSlNIZzRTVVJGTjFoSE5XTmliSGd3V0VoU2EySjVRamRZUnpWallteDRNRmhJVW1Oa1F6aDJTVVZzYlVsSVFubGFXRnB3WWpOV2VrbEhiREJhV0Vwb1pFZHNkbUpwUWpaYVdFcDJXbGRSWjJJelZqQk1RMEpyWWpOV2FXSkhWV2RrVnpVd1lWZDNaMlF5VldkYU1sWXdTVU53ZW1JeU1XeGtSMmh3WW0xamNVeHNlSFZZU0ZKalpFWjRNRXg1T0dkV1dFNXNTVWhPTUdOdGJIVmFlVUp0WWpOSloxcEhPVEZaYlhod1ltMWpaMk15T0dka01sVm5Xa2M1ZFVvelVXZFpWMDVxWVZkU2JHSnVVbWhpUjNnMVNVaE9iRnBUUW5wWk1rWnpXbE5DYUdONVFqRmliVTV2V1ZjMWJscFhVV2RaYlZaellqTmtZMkpzZURCWVNGSmpaRWhPYWxsWGVHeEpSREJuWXpKT2FHSkhWV2RtU0hkbldFTkpkVTVXZDJsUE1YaDFXRWMxWTJSR2VEQllTRkYyVEhsQ1FscEhjREZqTTFGbldWYzFhMGxIUm5kalIzZzFXRWMxWTJSR2VEQllTRkp3WW0xc01HRlhSbk5UVnpWV1ltMXNNRWxFTUdkaFZ6VndaRWRzYUdKRmJIVldWelZ3WkVOQmRrbElUbXBaVjNoc1R6RjRkVmhJVW1Oa1JuZ3dZV3hHTVZwWVNqVk1iazR3WlZkNGJFdERRbXhpUjFaMFRFTkNkMk50T1hkTVEwSndZbTFzTUdGWFJuTlRWelZXWW0xc01FbERjMmRrVnpWd1pFTkJjRTh4ZUhWWVJ6VmpaRVo0TUV4NU9HZFdXRUpyV1ZoU2JFbElUbXBaVjNoc1RFTkNNR0l5ZUd4amJVWXdZVmMxYmtsSWNHeGpiVGhuWWpOSloxUnRSazlKUjFwNVlqSXdaMlJJWkd4YVZ6UjFXVE5XZVV0RGJHTmliSGd3V0VoUmRreDVRa05qYlZab1lYbENNR0ZIVldkaVJ6bDJZME5DY0ZwcFFucFpNa1p6V2xOQ2NHTjVRakZpYlU1dldWYzFibHBYVVdkaU0wbG5ZMGRXZVZwdFZtcGtRM2RuWWpOSloyRlhXV2RrTWxWdVpHMVZaMkZ1Vm5wa1EwSnZXVmRSWjFwWE5YWmtWMlJ2VEd4NGRWaElVbU5rU0RCblpESm9jR0pIVldkTFJuaDFXRWhTWTJSR2VEQmpNazVvWWtkVlowbFVNRGxKUTJkbll6Sk9hR0pIVldkUVUwSnFaRmhLZVZwWE5UQldiVVp6WkZkVmIwdFRRWFpKUjJ4MVlWaFNjRmxYZDJkTFUwRnRTbWxDZWxreVJuTmFVMEZvVUZRd1owMVRRVzFLYVVGMFRGY3hhR1ZGYkRCYVdFcG9aRWRzZG1KdVRtTmliSGd3V0VoUmNFOHhlSFZZU0ZJNVdFYzFZMkpzZURCaFYxbG5TME5DTWxsWGVERmFWa0pvWTI1U2VrbERhMmRsTVhoMVdFaFNZMlJIYkhWaFdGSndXVmQ0U21Kc1ZuVmhXRkZuVUZOQmNtRlhOWEJrUjJ4b1lrVnNkVlpYTlhCa1EwSTRaa05CY21GWE5YQmtSMnhvWWtOQ09HWkRRWGRQTVhoMVdFYzFZMlJHZURCTWVUaG5VVmhDZDJKSWEyZGpiVlp6V1ZoU2NHUnRWV2RpTWxwdFl6SldNRWxEWjNKUVV6aDBVRk5yWjJGWFdXZGpNMEpzV1RKc2JXRlhWbXRZUnpWalpFWjRNRmxYVW5Ga1dFNHdXbGRSWjFCVFFqSlpWM2d4V2xaQ2FHTnVVbnBYZVVGNFNVWXdaMUF4ZUhWWVNGSmpaRVo0TUdGWE5YQmtSMnhvWWtWc2RWWlhOWEJrUTBGeVNVTm5aMlJ0Um5Oa1YxWlJXVmhLTUdNeGMyZE5VMEprU1VOelowMVRRWEJKUTI5blpHMUdjMlJYVmxGWldFb3dZekZ6WjAxcFFtUkpSSEJqWW14NE1GaElVbU5rUTNReVdWZDRNVnBXUW1oamJsSjZWM2xCZVVsR01EZFlSelZqWkVaNE1HRlhXV2RMUTBJd1pESldiR0pwUVhCSlNIUmpZbXg0TUZoSVVtTmtTRkl6V2xkV2RVeHVWblZoV0ZGblVGTkNNV0p0YkRCUE1YaDFXRWhTWTJSR2VEQmtTR1JzV2xjMGRXTXpVbWhqYmxGblVGTkNjR0p0YkRCaFYwWnpVMWMxVm1KdGJEQlBNWGgxV0VoU1kyUkdlREJrU0dSc1dsYzBkVnBYTld0SlJEQm5XVmRTY1dSWVRqQmFWMUUzV0VjMVkyUkdlREJtVm5oMVdFaFNPVmhITldOa1NFcHNaRWhXZVdKcFFtaGFSM0F4WXpOU2JGcEVkR05pYmpGallteDRkV050VmpCa1dFcDFTVWRHYTJGdVZucGtSVTVVVlhwMFkySnVNR2RMVkhSalltbEtaR1pSUFQxY2JpSmRmUT09XG4iXX0=
