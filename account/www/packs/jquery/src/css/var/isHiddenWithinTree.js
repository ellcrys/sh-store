define([
    "../../core",
    "../../selector"
    // css is assumed
], function (jQuery) {
    "use strict";
    // isHiddenWithinTree reports if an element has a non-"none" display style (inline and/or
    // through the CSS cascade), which is useful in deciding whether or not to make it visible.
    // It differs from the :hidden selector (jQuery.expr.pseudos.hidden) in two important ways:
    // * A hidden ancestor does not force an element to be classified as hidden.
    // * Being disconnected from the document does not force an element to be classified as hidden.
    // These differences improve the behavior of .toggle() et al. when applied to elements that are
    // detached or contained within hidden ancestors (gh-2404, gh-2863).
    return function (elem, el) {
        // isHiddenWithinTree might be called from jQuery#filter function;
        // in that case, element will be second argument
        elem = el || elem;
        // Inline style trumps all
        return elem.style.display === "none" ||
            elem.style.display === "" &&
                // Otherwise, check computed style
                // Support: Firefox <=43 - 45
                // Disconnected elements can have computed display: none, so first confirm that elem is
                // in the document.
                jQuery.contains(elem.ownerDocument, elem) &&
                jQuery.css(elem, "display") === "none";
    };
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInd3dy9wYWNrcy9qcXVlcnkvc3JjL2Nzcy92YXIvaXNIaWRkZW5XaXRoaW5UcmVlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBRTtJQUNQLFlBQVk7SUFDWixnQkFBZ0I7SUFFaEIsaUJBQWlCO0NBQ2pCLEVBQUUsVUFBVSxNQUFNO0lBQ2xCLFlBQVksQ0FBQztJQUViLHlGQUF5RjtJQUN6RiwyRkFBMkY7SUFDM0YsMkZBQTJGO0lBQzNGLDRFQUE0RTtJQUM1RSwrRkFBK0Y7SUFDL0YsK0ZBQStGO0lBQy9GLG9FQUFvRTtJQUNwRSxNQUFNLENBQUMsVUFBVSxJQUFJLEVBQUUsRUFBRTtRQUV4QixrRUFBa0U7UUFDbEUsZ0RBQWdEO1FBQ2hELElBQUksR0FBRyxFQUFFLElBQUksSUFBSSxDQUFDO1FBRWxCLDBCQUEwQjtRQUMxQixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEtBQUssTUFBTTtZQUNuQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sS0FBSyxFQUFFO2dCQUV6QixrQ0FBa0M7Z0JBQ2xDLDZCQUE2QjtnQkFDN0IsdUZBQXVGO2dCQUN2RixtQkFBbUI7Z0JBQ25CLE1BQU0sQ0FBQyxRQUFRLENBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUU7Z0JBRTNDLE1BQU0sQ0FBQyxHQUFHLENBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBRSxLQUFLLE1BQU0sQ0FBQztJQUMzQyxDQUFDLENBQUM7QUFDSCxDQUFDLENBQUUsQ0FBQyIsImZpbGUiOiJ3d3cvcGFja3MvanF1ZXJ5L3NyYy9jc3MvdmFyL2lzSGlkZGVuV2l0aGluVHJlZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSggW1xuXHRcIi4uLy4uL2NvcmVcIixcblx0XCIuLi8uLi9zZWxlY3RvclwiXG5cblx0Ly8gY3NzIGlzIGFzc3VtZWRcbl0sIGZ1bmN0aW9uKCBqUXVlcnkgKSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdC8vIGlzSGlkZGVuV2l0aGluVHJlZSByZXBvcnRzIGlmIGFuIGVsZW1lbnQgaGFzIGEgbm9uLVwibm9uZVwiIGRpc3BsYXkgc3R5bGUgKGlubGluZSBhbmQvb3Jcblx0Ly8gdGhyb3VnaCB0aGUgQ1NTIGNhc2NhZGUpLCB3aGljaCBpcyB1c2VmdWwgaW4gZGVjaWRpbmcgd2hldGhlciBvciBub3QgdG8gbWFrZSBpdCB2aXNpYmxlLlxuXHQvLyBJdCBkaWZmZXJzIGZyb20gdGhlIDpoaWRkZW4gc2VsZWN0b3IgKGpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuKSBpbiB0d28gaW1wb3J0YW50IHdheXM6XG5cdC8vICogQSBoaWRkZW4gYW5jZXN0b3IgZG9lcyBub3QgZm9yY2UgYW4gZWxlbWVudCB0byBiZSBjbGFzc2lmaWVkIGFzIGhpZGRlbi5cblx0Ly8gKiBCZWluZyBkaXNjb25uZWN0ZWQgZnJvbSB0aGUgZG9jdW1lbnQgZG9lcyBub3QgZm9yY2UgYW4gZWxlbWVudCB0byBiZSBjbGFzc2lmaWVkIGFzIGhpZGRlbi5cblx0Ly8gVGhlc2UgZGlmZmVyZW5jZXMgaW1wcm92ZSB0aGUgYmVoYXZpb3Igb2YgLnRvZ2dsZSgpIGV0IGFsLiB3aGVuIGFwcGxpZWQgdG8gZWxlbWVudHMgdGhhdCBhcmVcblx0Ly8gZGV0YWNoZWQgb3IgY29udGFpbmVkIHdpdGhpbiBoaWRkZW4gYW5jZXN0b3JzIChnaC0yNDA0LCBnaC0yODYzKS5cblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cblx0XHRcdGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgJiZcblxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCI7XG5cdH07XG59ICk7XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInd3dy9wYWNrcy9qcXVlcnkvc3JjL2Nzcy92YXIvaXNIaWRkZW5XaXRoaW5UcmVlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQztJQUNILFlBQVk7SUFDWixnQkFBZ0I7SUFDaEIsaUJBQWlCO0NBQ3BCLEVBQUUsVUFBVSxNQUFNO0lBQ2YsWUFBWSxDQUFDO0lBQ2IseUZBQXlGO0lBQ3pGLDJGQUEyRjtJQUMzRiwyRkFBMkY7SUFDM0YsNEVBQTRFO0lBQzVFLCtGQUErRjtJQUMvRiwrRkFBK0Y7SUFDL0Ysb0VBQW9FO0lBQ3BFLE1BQU0sQ0FBQyxVQUFVLElBQUksRUFBRSxFQUFFO1FBQ3JCLGtFQUFrRTtRQUNsRSxnREFBZ0Q7UUFDaEQsSUFBSSxHQUFHLEVBQUUsSUFBSSxJQUFJLENBQUM7UUFDbEIsMEJBQTBCO1FBQzFCLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sS0FBSyxNQUFNO1lBQ2hDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxLQUFLLEVBQUU7Z0JBQ3JCLGtDQUFrQztnQkFDbEMsNkJBQTZCO2dCQUM3Qix1RkFBdUY7Z0JBQ3ZGLG1CQUFtQjtnQkFDbkIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQztnQkFDekMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLEtBQUssTUFBTSxDQUFDO0lBQ25ELENBQUMsQ0FBQztBQUNOLENBQUMsQ0FBQyxDQUFDO0FBRUgsKzNGQUErM0YiLCJmaWxlIjoid3d3L3BhY2tzL2pxdWVyeS9zcmMvY3NzL3Zhci9pc0hpZGRlbldpdGhpblRyZWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoW1xuICAgIFwiLi4vLi4vY29yZVwiLFxuICAgIFwiLi4vLi4vc2VsZWN0b3JcIlxuICAgIC8vIGNzcyBpcyBhc3N1bWVkXG5dLCBmdW5jdGlvbiAoalF1ZXJ5KSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgLy8gaXNIaWRkZW5XaXRoaW5UcmVlIHJlcG9ydHMgaWYgYW4gZWxlbWVudCBoYXMgYSBub24tXCJub25lXCIgZGlzcGxheSBzdHlsZSAoaW5saW5lIGFuZC9vclxuICAgIC8vIHRocm91Z2ggdGhlIENTUyBjYXNjYWRlKSwgd2hpY2ggaXMgdXNlZnVsIGluIGRlY2lkaW5nIHdoZXRoZXIgb3Igbm90IHRvIG1ha2UgaXQgdmlzaWJsZS5cbiAgICAvLyBJdCBkaWZmZXJzIGZyb20gdGhlIDpoaWRkZW4gc2VsZWN0b3IgKGpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuKSBpbiB0d28gaW1wb3J0YW50IHdheXM6XG4gICAgLy8gKiBBIGhpZGRlbiBhbmNlc3RvciBkb2VzIG5vdCBmb3JjZSBhbiBlbGVtZW50IHRvIGJlIGNsYXNzaWZpZWQgYXMgaGlkZGVuLlxuICAgIC8vICogQmVpbmcgZGlzY29ubmVjdGVkIGZyb20gdGhlIGRvY3VtZW50IGRvZXMgbm90IGZvcmNlIGFuIGVsZW1lbnQgdG8gYmUgY2xhc3NpZmllZCBhcyBoaWRkZW4uXG4gICAgLy8gVGhlc2UgZGlmZmVyZW5jZXMgaW1wcm92ZSB0aGUgYmVoYXZpb3Igb2YgLnRvZ2dsZSgpIGV0IGFsLiB3aGVuIGFwcGxpZWQgdG8gZWxlbWVudHMgdGhhdCBhcmVcbiAgICAvLyBkZXRhY2hlZCBvciBjb250YWluZWQgd2l0aGluIGhpZGRlbiBhbmNlc3RvcnMgKGdoLTI0MDQsIGdoLTI4NjMpLlxuICAgIHJldHVybiBmdW5jdGlvbiAoZWxlbSwgZWwpIHtcbiAgICAgICAgLy8gaXNIaWRkZW5XaXRoaW5UcmVlIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG4gICAgICAgIC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuICAgICAgICBlbGVtID0gZWwgfHwgZWxlbTtcbiAgICAgICAgLy8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcbiAgICAgICAgcmV0dXJuIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHxcbiAgICAgICAgICAgIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJlxuICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcbiAgICAgICAgICAgICAgICAvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDMgLSA0NVxuICAgICAgICAgICAgICAgIC8vIERpc2Nvbm5lY3RlZCBlbGVtZW50cyBjYW4gaGF2ZSBjb21wdXRlZCBkaXNwbGF5OiBub25lLCBzbyBmaXJzdCBjb25maXJtIHRoYXQgZWxlbSBpc1xuICAgICAgICAgICAgICAgIC8vIGluIHRoZSBkb2N1bWVudC5cbiAgICAgICAgICAgICAgICBqUXVlcnkuY29udGFpbnMoZWxlbS5vd25lckRvY3VtZW50LCBlbGVtKSAmJlxuICAgICAgICAgICAgICAgIGpRdWVyeS5jc3MoZWxlbSwgXCJkaXNwbGF5XCIpID09PSBcIm5vbmVcIjtcbiAgICB9O1xufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zjg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kM2R5OXdZV05yY3k5cWNYVmxjbmt2YzNKakwyTnpjeTkyWVhJdmFYTklhV1JrWlc1WGFYUm9hVzVVY21WbExtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEUxQlFVMHNRMEZCUlR0SlFVTlFMRmxCUVZrN1NVRkRXaXhuUWtGQlowSTdTVUZGYUVJc2FVSkJRV2xDTzBOQlEycENMRVZCUVVVc1ZVRkJWU3hOUVVGTk8wbEJRMnhDTEZsQlFWa3NRMEZCUXp0SlFVVmlMSGxHUVVGNVJqdEpRVU42Uml3eVJrRkJNa1k3U1VGRE0wWXNNa1pCUVRKR08wbEJRek5HTERSRlFVRTBSVHRKUVVNMVJTd3JSa0ZCSzBZN1NVRkRMMFlzSzBaQlFTdEdPMGxCUXk5R0xHOUZRVUZ2UlR0SlFVTndSU3hOUVVGTkxFTkJRVU1zVlVGQlZTeEpRVUZKTEVWQlFVVXNSVUZCUlR0UlFVVjRRaXhyUlVGQmEwVTdVVUZEYkVVc1owUkJRV2RFTzFGQlEyaEVMRWxCUVVrc1IwRkJSeXhGUVVGRkxFbEJRVWtzU1VGQlNTeERRVUZETzFGQlJXeENMREJDUVVFd1FqdFJRVU14UWl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFBRVUZQTEV0QlFVc3NUVUZCVFR0WlFVTnVReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEU5QlFVOHNTMEZCU3l4RlFVRkZPMmRDUVVWNlFpeHJRMEZCYTBNN1owSkJRMnhETERaQ1FVRTJRanRuUWtGRE4wSXNkVVpCUVhWR08yZENRVU4yUml4dFFrRkJiVUk3WjBKQlEyNUNMRTFCUVUwc1EwRkJReXhSUVVGUkxFTkJRVVVzU1VGQlNTeERRVUZETEdGQlFXRXNSVUZCUlN4SlFVRkpMRU5CUVVVN1owSkJSVE5ETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVVc1NVRkJTU3hGUVVGRkxGTkJRVk1zUTBGQlJTeExRVUZMTEUxQlFVMHNRMEZCUXp0SlFVTXpReXhEUVVGRExFTkJRVU03UVVGRFNDeERRVUZETEVOQlFVVXNRMEZCUXlJc0ltWnBiR1VpT2lKM2QzY3ZjR0ZqYTNNdmFuRjFaWEo1TDNOeVl5OWpjM012ZG1GeUwybHpTR2xrWkdWdVYybDBhR2x1VkhKbFpTNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1SbFptbHVaU2dnVzF4dVhIUmNJaTR1THk0dUwyTnZjbVZjSWl4Y2JseDBYQ0l1TGk4dUxpOXpaV3hsWTNSdmNsd2lYRzVjYmx4MEx5OGdZM056SUdseklHRnpjM1Z0WldSY2JsMHNJR1oxYm1OMGFXOXVLQ0JxVVhWbGNua2dLU0I3WEc1Y2RGd2lkWE5sSUhOMGNtbGpkRndpTzF4dVhHNWNkQzh2SUdselNHbGtaR1Z1VjJsMGFHbHVWSEpsWlNCeVpYQnZjblJ6SUdsbUlHRnVJR1ZzWlcxbGJuUWdhR0Z6SUdFZ2JtOXVMVndpYm05dVpWd2lJR1JwYzNCc1lYa2djM1I1YkdVZ0tHbHViR2x1WlNCaGJtUXZiM0pjYmx4MEx5OGdkR2h5YjNWbmFDQjBhR1VnUTFOVElHTmhjMk5oWkdVcExDQjNhR2xqYUNCcGN5QjFjMlZtZFd3Z2FXNGdaR1ZqYVdScGJtY2dkMmhsZEdobGNpQnZjaUJ1YjNRZ2RHOGdiV0ZyWlNCcGRDQjJhWE5wWW14bExseHVYSFF2THlCSmRDQmthV1ptWlhKeklHWnliMjBnZEdobElEcG9hV1JrWlc0Z2MyVnNaV04wYjNJZ0tHcFJkV1Z5ZVM1bGVIQnlMbkJ6WlhWa2IzTXVhR2xrWkdWdUtTQnBiaUIwZDI4Z2FXMXdiM0owWVc1MElIZGhlWE02WEc1Y2RDOHZJQ29nUVNCb2FXUmtaVzRnWVc1alpYTjBiM0lnWkc5bGN5QnViM1FnWm05eVkyVWdZVzRnWld4bGJXVnVkQ0IwYnlCaVpTQmpiR0Z6YzJsbWFXVmtJR0Z6SUdocFpHUmxiaTVjYmx4MEx5OGdLaUJDWldsdVp5QmthWE5qYjI1dVpXTjBaV1FnWm5KdmJTQjBhR1VnWkc5amRXMWxiblFnWkc5bGN5QnViM1FnWm05eVkyVWdZVzRnWld4bGJXVnVkQ0IwYnlCaVpTQmpiR0Z6YzJsbWFXVmtJR0Z6SUdocFpHUmxiaTVjYmx4MEx5OGdWR2hsYzJVZ1pHbG1abVZ5Wlc1alpYTWdhVzF3Y205MlpTQjBhR1VnWW1Wb1lYWnBiM0lnYjJZZ0xuUnZaMmRzWlNncElHVjBJR0ZzTGlCM2FHVnVJR0Z3Y0d4cFpXUWdkRzhnWld4bGJXVnVkSE1nZEdoaGRDQmhjbVZjYmx4MEx5OGdaR1YwWVdOb1pXUWdiM0lnWTI5dWRHRnBibVZrSUhkcGRHaHBiaUJvYVdSa1pXNGdZVzVqWlhOMGIzSnpJQ2huYUMweU5EQTBMQ0JuYUMweU9EWXpLUzVjYmx4MGNtVjBkWEp1SUdaMWJtTjBhVzl1S0NCbGJHVnRMQ0JsYkNBcElIdGNibHh1WEhSY2RDOHZJR2x6U0dsa1pHVnVWMmwwYUdsdVZISmxaU0J0YVdkb2RDQmlaU0JqWVd4c1pXUWdabkp2YlNCcVVYVmxjbmtqWm1sc2RHVnlJR1oxYm1OMGFXOXVPMXh1WEhSY2RDOHZJR2x1SUhSb1lYUWdZMkZ6WlN3Z1pXeGxiV1Z1ZENCM2FXeHNJR0psSUhObFkyOXVaQ0JoY21kMWJXVnVkRnh1WEhSY2RHVnNaVzBnUFNCbGJDQjhmQ0JsYkdWdE8xeHVYRzVjZEZ4MEx5OGdTVzVzYVc1bElITjBlV3hsSUhSeWRXMXdjeUJoYkd4Y2JseDBYSFJ5WlhSMWNtNGdaV3hsYlM1emRIbHNaUzVrYVhOd2JHRjVJRDA5UFNCY0ltNXZibVZjSWlCOGZGeHVYSFJjZEZ4MFpXeGxiUzV6ZEhsc1pTNWthWE53YkdGNUlEMDlQU0JjSWx3aUlDWW1YRzVjYmx4MFhIUmNkQzh2SUU5MGFHVnlkMmx6WlN3Z1kyaGxZMnNnWTI5dGNIVjBaV1FnYzNSNWJHVmNibHgwWEhSY2RDOHZJRk4xY0hCdmNuUTZJRVpwY21WbWIzZ2dQRDAwTXlBdElEUTFYRzVjZEZ4MFhIUXZMeUJFYVhOamIyNXVaV04wWldRZ1pXeGxiV1Z1ZEhNZ1kyRnVJR2hoZG1VZ1kyOXRjSFYwWldRZ1pHbHpjR3hoZVRvZ2JtOXVaU3dnYzI4Z1ptbHljM1FnWTI5dVptbHliU0IwYUdGMElHVnNaVzBnYVhOY2JseDBYSFJjZEM4dklHbHVJSFJvWlNCa2IyTjFiV1Z1ZEM1Y2JseDBYSFJjZEdwUmRXVnllUzVqYjI1MFlXbHVjeWdnWld4bGJTNXZkMjVsY2tSdlkzVnRaVzUwTENCbGJHVnRJQ2tnSmlaY2JseHVYSFJjZEZ4MGFsRjFaWEo1TG1OemN5Z2daV3hsYlN3Z1hDSmthWE53YkdGNVhDSWdLU0E5UFQwZ1hDSnViMjVsWENJN1hHNWNkSDA3WEc1OUlDazdYRzRpWFgwPVxuIl19

//# sourceMappingURL=data:application/json;charset=utf8;base64,
