define([
    "../core",
    "../deferred"
], function (jQuery) {
    "use strict";
    // These usually indicate a programmer mistake during development,
    // warn about them ASAP rather than swallowing them by default.
    var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
    jQuery.Deferred.exceptionHook = function (error, stack) {
        // Support: IE 8 - 9 only
        // Console exists when dev tools are open, which can happen at any time
        if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
            window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);
        }
    };
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInd3dy9wYWNrcy9qcXVlcnkvc3JjL2RlZmVycmVkL2V4Y2VwdGlvbkhvb2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFFO0lBQ1AsU0FBUztJQUNULGFBQWE7Q0FDYixFQUFFLFVBQVUsTUFBTTtJQUVuQixZQUFZLENBQUM7SUFFYixrRUFBa0U7SUFDbEUsK0RBQStEO0lBQy9ELElBQUksV0FBVyxHQUFHLHdEQUF3RCxDQUFDO0lBRTNFLE1BQU0sQ0FBQyxRQUFRLENBQUMsYUFBYSxHQUFHLFVBQVUsS0FBSyxFQUFFLEtBQUs7UUFFckQseUJBQXlCO1FBQ3pCLHVFQUF1RTtRQUN2RSxFQUFFLENBQUMsQ0FBRSxNQUFNLENBQUMsT0FBTyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLEtBQUssSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFFLEtBQUssQ0FBQyxJQUFJLENBQUcsQ0FBQyxDQUFDLENBQUM7WUFDeEYsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUUsNkJBQTZCLEdBQUcsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBRSxDQUFDO1FBQzFGLENBQUM7SUFDRixDQUFDLENBQUM7QUFFRixDQUFDLENBQUUsQ0FBQyIsImZpbGUiOiJ3d3cvcGFja3MvanF1ZXJ5L3NyYy9kZWZlcnJlZC9leGNlcHRpb25Ib29rLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBbXG5cdFwiLi4vY29yZVwiLFxuXHRcIi4uL2RlZmVycmVkXCJcbl0sIGZ1bmN0aW9uKCBqUXVlcnkgKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vLyBUaGVzZSB1c3VhbGx5IGluZGljYXRlIGEgcHJvZ3JhbW1lciBtaXN0YWtlIGR1cmluZyBkZXZlbG9wbWVudCxcbi8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxudmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cbmpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBzdGFjayApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG5cdGlmICggd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KCBlcnJvci5uYW1lICkgKSB7XG5cdFx0d2luZG93LmNvbnNvbGUud2FybiggXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrLCBzdGFjayApO1xuXHR9XG59O1xuXG59ICk7XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInd3dy9wYWNrcy9qcXVlcnkvc3JjL2RlZmVycmVkL2V4Y2VwdGlvbkhvb2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDO0lBQ0gsU0FBUztJQUNULGFBQWE7Q0FDaEIsRUFBRSxVQUFVLE1BQU07SUFDZixZQUFZLENBQUM7SUFDYixrRUFBa0U7SUFDbEUsK0RBQStEO0lBQy9ELElBQUksV0FBVyxHQUFHLHdEQUF3RCxDQUFDO0lBQzNFLE1BQU0sQ0FBQyxRQUFRLENBQUMsYUFBYSxHQUFHLFVBQVUsS0FBSyxFQUFFLEtBQUs7UUFDbEQseUJBQXlCO1FBQ3pCLHVFQUF1RTtRQUN2RSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLEtBQUssSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakYsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsNkJBQTZCLEdBQUcsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzNGLENBQUM7SUFDTCxDQUFDLENBQUM7QUFDTixDQUFDLENBQUMsQ0FBQztBQUVILHUwREFBdTBEIiwiZmlsZSI6Ind3dy9wYWNrcy9qcXVlcnkvc3JjL2RlZmVycmVkL2V4Y2VwdGlvbkhvb2suanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoW1xuICAgIFwiLi4vY29yZVwiLFxuICAgIFwiLi4vZGVmZXJyZWRcIlxuXSwgZnVuY3Rpb24gKGpRdWVyeSkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIC8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuICAgIC8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxuICAgIHZhciByZXJyb3JOYW1lcyA9IC9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO1xuICAgIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24gKGVycm9yLCBzdGFjaykge1xuICAgICAgICAvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG4gICAgICAgIC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG4gICAgICAgIGlmICh3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS53YXJuICYmIGVycm9yICYmIHJlcnJvck5hbWVzLnRlc3QoZXJyb3IubmFtZSkpIHtcbiAgICAgICAgICAgIHdpbmRvdy5jb25zb2xlLndhcm4oXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICB9O1xufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zjg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kM2R5OXdZV05yY3k5cWNYVmxjbmt2YzNKakwyUmxabVZ5Y21Wa0wyVjRZMlZ3ZEdsdmJraHZiMnN1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNUVUZCVFN4RFFVRkZPMGxCUTFBc1UwRkJVenRKUVVOVUxHRkJRV0U3UTBGRFlpeEZRVUZGTEZWQlFWVXNUVUZCVFR0SlFVVnVRaXhaUVVGWkxFTkJRVU03U1VGRllpeHJSVUZCYTBVN1NVRkRiRVVzSzBSQlFTdEVPMGxCUXk5RUxFbEJRVWtzVjBGQlZ5eEhRVUZITEhkRVFVRjNSQ3hEUVVGRE8wbEJSVE5GTEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1lVRkJZU3hIUVVGSExGVkJRVlVzUzBGQlN5eEZRVUZGTEV0QlFVczdVVUZGY2tRc2VVSkJRWGxDTzFGQlEzcENMSFZGUVVGMVJUdFJRVU4yUlN4RlFVRkZMRU5CUVVNc1EwRkJSU3hOUVVGTkxFTkJRVU1zVDBGQlR5eEpRVUZKTEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hKUVVGSkxFdEJRVXNzU1VGQlNTeFhRVUZYTEVOQlFVTXNTVUZCU1N4RFFVRkZMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVWNzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEZUVZc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVVXNOa0pCUVRaQ0xFZEJRVWNzUzBGQlN5eERRVUZETEU5QlFVOHNSVUZCUlN4TFFVRkxMRU5CUVVNc1MwRkJTeXhGUVVGRkxFdEJRVXNzUTBGQlJTeERRVUZETzFGQlF6RkdMRU5CUVVNN1NVRkRSaXhEUVVGRExFTkJRVU03UVVGRlJpeERRVUZETEVOQlFVVXNRMEZCUXlJc0ltWnBiR1VpT2lKM2QzY3ZjR0ZqYTNNdmFuRjFaWEo1TDNOeVl5OWtaV1psY25KbFpDOWxlR05sY0hScGIyNUliMjlyTG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2laR1ZtYVc1bEtDQmJYRzVjZEZ3aUxpNHZZMjl5WlZ3aUxGeHVYSFJjSWk0dUwyUmxabVZ5Y21Wa1hDSmNibDBzSUdaMWJtTjBhVzl1S0NCcVVYVmxjbmtnS1NCN1hHNWNibHdpZFhObElITjBjbWxqZEZ3aU8xeHVYRzR2THlCVWFHVnpaU0IxYzNWaGJHeDVJR2x1WkdsallYUmxJR0VnY0hKdlozSmhiVzFsY2lCdGFYTjBZV3RsSUdSMWNtbHVaeUJrWlhabGJHOXdiV1Z1ZEN4Y2JpOHZJSGRoY200Z1lXSnZkWFFnZEdobGJTQkJVMEZRSUhKaGRHaGxjaUIwYUdGdUlITjNZV3hzYjNkcGJtY2dkR2hsYlNCaWVTQmtaV1poZFd4MExseHVkbUZ5SUhKbGNuSnZjazVoYldWeklEMGdMMTRvUlhaaGJIeEpiblJsY201aGJIeFNZVzVuWlh4U1pXWmxjbVZ1WTJWOFUzbHVkR0Y0ZkZSNWNHVjhWVkpKS1VWeWNtOXlKQzg3WEc1Y2JtcFJkV1Z5ZVM1RVpXWmxjbkpsWkM1bGVHTmxjSFJwYjI1SWIyOXJJRDBnWm5WdVkzUnBiMjRvSUdWeWNtOXlMQ0J6ZEdGamF5QXBJSHRjYmx4dVhIUXZMeUJUZFhCd2IzSjBPaUJKUlNBNElDMGdPU0J2Ym14NVhHNWNkQzh2SUVOdmJuTnZiR1VnWlhocGMzUnpJSGRvWlc0Z1pHVjJJSFJ2YjJ4eklHRnlaU0J2Y0dWdUxDQjNhR2xqYUNCallXNGdhR0Z3Y0dWdUlHRjBJR0Z1ZVNCMGFXMWxYRzVjZEdsbUlDZ2dkMmx1Wkc5M0xtTnZibk52YkdVZ0ppWWdkMmx1Wkc5M0xtTnZibk52YkdVdWQyRnliaUFtSmlCbGNuSnZjaUFtSmlCeVpYSnliM0pPWVcxbGN5NTBaWE4wS0NCbGNuSnZjaTV1WVcxbElDa2dLU0I3WEc1Y2RGeDBkMmx1Wkc5M0xtTnZibk52YkdVdWQyRnliaWdnWENKcVVYVmxjbmt1UkdWbVpYSnlaV1FnWlhoalpYQjBhVzl1T2lCY0lpQXJJR1Z5Y205eUxtMWxjM05oWjJVc0lHVnljbTl5TG5OMFlXTnJMQ0J6ZEdGamF5QXBPMXh1WEhSOVhHNTlPMXh1WEc1OUlDazdYRzRpWFgwPVxuIl19

//# sourceMappingURL=data:application/json;charset=utf8;base64,
