define([
    "../core",
    "../event",
    "./trigger"
], function (jQuery) {
    "use strict";
    jQuery.each(("blur focus focusin focusout resize scroll click dblclick " +
        "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
        "change select submit keydown keypress keyup contextmenu").split(" "), function (i, name) {
        // Handle event binding
        jQuery.fn[name] = function (data, fn) {
            return arguments.length > 0 ?
                this.on(name, null, data, fn) :
                this.trigger(name);
        };
    });
    jQuery.fn.extend({
        hover: function (fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        }
    });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInd3dy9wYWNrcy9qcXVlcnkvc3JjL2V2ZW50L2FsaWFzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBRTtJQUNQLFNBQVM7SUFFVCxVQUFVO0lBQ1YsV0FBVztDQUNYLEVBQUUsVUFBVSxNQUFNO0lBRW5CLFlBQVksQ0FBQztJQUViLE1BQU0sQ0FBQyxJQUFJLENBQUUsQ0FBRSwyREFBMkQ7UUFDekUsdUVBQXVFO1FBQ3ZFLHlEQUF5RCxDQUFFLENBQUMsS0FBSyxDQUFFLEdBQUcsQ0FBRSxFQUN4RSxVQUFVLENBQUMsRUFBRSxJQUFJO1FBRWpCLHVCQUF1QjtRQUN2QixNQUFNLENBQUMsRUFBRSxDQUFFLElBQUksQ0FBRSxHQUFHLFVBQVUsSUFBSSxFQUFFLEVBQUU7WUFDckMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQztnQkFDMUIsSUFBSSxDQUFDLEVBQUUsQ0FBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFLENBQUU7Z0JBQy9CLElBQUksQ0FBQyxPQUFPLENBQUUsSUFBSSxDQUFFLENBQUM7UUFDdkIsQ0FBQyxDQUFDO0lBQ0gsQ0FBQyxDQUFFLENBQUM7SUFFSixNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBRTtRQUNqQixLQUFLLEVBQUUsVUFBVSxNQUFNLEVBQUUsS0FBSztZQUM3QixNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBRSxNQUFNLENBQUUsQ0FBQyxVQUFVLENBQUUsS0FBSyxJQUFJLE1BQU0sQ0FBRSxDQUFDO1FBQ2hFLENBQUM7S0FDRCxDQUFFLENBQUM7QUFFSixDQUFDLENBQUUsQ0FBQyIsImZpbGUiOiJ3d3cvcGFja3MvanF1ZXJ5L3NyYy9ldmVudC9hbGlhcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSggW1xuXHRcIi4uL2NvcmVcIixcblxuXHRcIi4uL2V2ZW50XCIsXG5cdFwiLi90cmlnZ2VyXCJcbl0sIGZ1bmN0aW9uKCBqUXVlcnkgKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5qUXVlcnkuZWFjaCggKCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXG5cdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG5cdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fVxufSApO1xuXG59ICk7XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInd3dy9wYWNrcy9qcXVlcnkvc3JjL2V2ZW50L2FsaWFzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQztJQUNILFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztDQUNkLEVBQUUsVUFBVSxNQUFNO0lBQ2YsWUFBWSxDQUFDO0lBQ2IsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLDJEQUEyRDtRQUNwRSx1RUFBdUU7UUFDdkUseURBQXlELENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsSUFBSTtRQUN4Rix1QkFBdUI7UUFDdkIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxVQUFVLElBQUksRUFBRSxFQUFFO1lBQ2hDLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUM7Z0JBQ3ZCLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDO2dCQUM3QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNCLENBQUMsQ0FBQztJQUNOLENBQUMsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUM7UUFDYixLQUFLLEVBQUUsVUFBVSxNQUFNLEVBQUUsS0FBSztZQUMxQixNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxVQUFVLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQyxDQUFDO1FBQy9ELENBQUM7S0FDSixDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQztBQUVILDJqRUFBMmpFIiwiZmlsZSI6Ind3dy9wYWNrcy9qcXVlcnkvc3JjL2V2ZW50L2FsaWFzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKFtcbiAgICBcIi4uL2NvcmVcIixcbiAgICBcIi4uL2V2ZW50XCIsXG4gICAgXCIuL3RyaWdnZXJcIlxuXSwgZnVuY3Rpb24gKGpRdWVyeSkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIGpRdWVyeS5lYWNoKChcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIFwiICtcbiAgICAgICAgXCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG4gICAgICAgIFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiKS5zcGxpdChcIiBcIiksIGZ1bmN0aW9uIChpLCBuYW1lKSB7XG4gICAgICAgIC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG4gICAgICAgIGpRdWVyeS5mbltuYW1lXSA9IGZ1bmN0aW9uIChkYXRhLCBmbikge1xuICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cbiAgICAgICAgICAgICAgICB0aGlzLm9uKG5hbWUsIG51bGwsIGRhdGEsIGZuKSA6XG4gICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKG5hbWUpO1xuICAgICAgICB9O1xuICAgIH0pO1xuICAgIGpRdWVyeS5mbi5leHRlbmQoe1xuICAgICAgICBob3ZlcjogZnVuY3Rpb24gKGZuT3ZlciwgZm5PdXQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1vdXNlZW50ZXIoZm5PdmVyKS5tb3VzZWxlYXZlKGZuT3V0IHx8IGZuT3Zlcik7XG4gICAgICAgIH1cbiAgICB9KTtcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGY4O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZDNkeTl3WVdOcmN5OXFjWFZsY25rdmMzSmpMMlYyWlc1MEwyRnNhV0Z6TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMRTFCUVUwc1EwRkJSVHRKUVVOUUxGTkJRVk03U1VGRlZDeFZRVUZWTzBsQlExWXNWMEZCVnp0RFFVTllMRVZCUVVVc1ZVRkJWU3hOUVVGTk8wbEJSVzVDTEZsQlFWa3NRMEZCUXp0SlFVVmlMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVVVzUTBGQlJTd3lSRUZCTWtRN1VVRkRla1VzZFVWQlFYVkZPMUZCUTNaRkxIbEVRVUY1UkN4RFFVRkZMRU5CUVVNc1MwRkJTeXhEUVVGRkxFZEJRVWNzUTBGQlJTeEZRVU40UlN4VlFVRlZMRU5CUVVNc1JVRkJSU3hKUVVGSk8xRkJSV3BDTEhWQ1FVRjFRanRSUVVOMlFpeE5RVUZOTEVOQlFVTXNSVUZCUlN4RFFVRkZMRWxCUVVrc1EwRkJSU3hIUVVGSExGVkJRVlVzU1VGQlNTeEZRVUZGTEVWQlFVVTdXVUZEY2tNc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUXp0blFrRkRNVUlzU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEZRVUZGTEVOQlFVVTdaMEpCUXk5Q0xFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVVXNTVUZCU1N4RFFVRkZMRU5CUVVNN1VVRkRka0lzUTBGQlF5eERRVUZETzBsQlEwZ3NRMEZCUXl4RFFVRkZMRU5CUVVNN1NVRkZTaXhOUVVGTkxFTkJRVU1zUlVGQlJTeERRVUZETEUxQlFVMHNRMEZCUlR0UlFVTnFRaXhMUVVGTExFVkJRVVVzVlVGQlZTeE5RVUZOTEVWQlFVVXNTMEZCU3p0WlFVTTNRaXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUlN4TlFVRk5MRU5CUVVVc1EwRkJReXhWUVVGVkxFTkJRVVVzUzBGQlN5eEpRVUZKTEUxQlFVMHNRMEZCUlN4RFFVRkRPMUZCUTJoRkxFTkJRVU03UzBGRFJDeERRVUZGTEVOQlFVTTdRVUZGU2l4RFFVRkRMRU5CUVVVc1EwRkJReUlzSW1acGJHVWlPaUozZDNjdmNHRmphM012YW5GMVpYSjVMM055WXk5bGRtVnVkQzloYkdsaGN5NXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1SbFptbHVaU2dnVzF4dVhIUmNJaTR1TDJOdmNtVmNJaXhjYmx4dVhIUmNJaTR1TDJWMlpXNTBYQ0lzWEc1Y2RGd2lMaTkwY21sbloyVnlYQ0pjYmwwc0lHWjFibU4wYVc5dUtDQnFVWFZsY25rZ0tTQjdYRzVjYmx3aWRYTmxJSE4wY21samRGd2lPMXh1WEc1cVVYVmxjbmt1WldGamFDZ2dLQ0JjSW1Kc2RYSWdabTlqZFhNZ1ptOWpkWE5wYmlCbWIyTjFjMjkxZENCeVpYTnBlbVVnYzJOeWIyeHNJR05zYVdOcklHUmliR05zYVdOcklGd2lJQ3RjYmx4MFhDSnRiM1Z6WldSdmQyNGdiVzkxYzJWMWNDQnRiM1Z6WlcxdmRtVWdiVzkxYzJWdmRtVnlJRzF2ZFhObGIzVjBJRzF2ZFhObFpXNTBaWElnYlc5MWMyVnNaV0YyWlNCY0lpQXJYRzVjZEZ3aVkyaGhibWRsSUhObGJHVmpkQ0J6ZFdKdGFYUWdhMlY1Wkc5M2JpQnJaWGx3Y21WemN5QnJaWGwxY0NCamIyNTBaWGgwYldWdWRWd2lJQ2t1YzNCc2FYUW9JRndpSUZ3aUlDa3NYRzVjZEdaMWJtTjBhVzl1S0NCcExDQnVZVzFsSUNrZ2UxeHVYRzVjZEM4dklFaGhibVJzWlNCbGRtVnVkQ0JpYVc1a2FXNW5YRzVjZEdwUmRXVnllUzVtYmxzZ2JtRnRaU0JkSUQwZ1puVnVZM1JwYjI0b0lHUmhkR0VzSUdadUlDa2dlMXh1WEhSY2RISmxkSFZ5YmlCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUQ0Z01DQS9YRzVjZEZ4MFhIUjBhR2x6TG05dUtDQnVZVzFsTENCdWRXeHNMQ0JrWVhSaExDQm1iaUFwSURwY2JseDBYSFJjZEhSb2FYTXVkSEpwWjJkbGNpZ2dibUZ0WlNBcE8xeHVYSFI5TzF4dWZTQXBPMXh1WEc1cVVYVmxjbmt1Wm00dVpYaDBaVzVrS0NCN1hHNWNkR2h2ZG1WeU9pQm1kVzVqZEdsdmJpZ2dabTVQZG1WeUxDQm1iazkxZENBcElIdGNibHgwWEhSeVpYUjFjbTRnZEdocGN5NXRiM1Z6WldWdWRHVnlLQ0JtYms5MlpYSWdLUzV0YjNWelpXeGxZWFpsS0NCbWJrOTFkQ0I4ZkNCbWJrOTJaWElnS1R0Y2JseDBmVnh1ZlNBcE8xeHVYRzU5SUNrN1hHNGlYWDA9XG4iXX0=

//# sourceMappingURL=data:application/json;charset=utf8;base64,
