/* globals TetherBase, performance */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
if (typeof TetherBase === 'undefined') {
    throw new Error('You must include the utils.js file before tether.js');
}
var _b = TetherBase.Utils, getScrollParents = _b.getScrollParents, getBounds = _b.getBounds, getOffsetParent = _b.getOffsetParent, extend = _b.extend, addClass = _b.addClass, removeClass = _b.removeClass, updateClasses = _b.updateClasses, defer = _b.defer, flush = _b.flush, getScrollBarSize = _b.getScrollBarSize, removeUtilElements = _b.removeUtilElements;
function within(a, b, diff) {
    if (diff === void 0) {
        diff = 1;
    }
    return (a + diff >= b && b >= a - diff);
}
var transformKey = (function () {
    if (typeof document === 'undefined') {
        return '';
    }
    var el = document.createElement('div');
    var transforms = ['transform', 'WebkitTransform', 'OTransform', 'MozTransform', 'msTransform'];
    for (var i = 0; i < transforms.length; ++i) {
        var key = transforms[i];
        if (el.style[key] !== undefined) {
            return key;
        }
    }
})();
var tethers = [];
var position = function () {
    tethers.forEach(function (tether) {
        tether.position(false);
    });
    flush();
};
function now() {
    if (typeof performance !== 'undefined' && typeof performance.now !== 'undefined') {
        return performance.now();
    }
    return +new Date;
}
(function () {
    var lastCall = null;
    var lastDuration = null;
    var pendingTimeout = null;
    var tick = function () {
        if (typeof lastDuration !== 'undefined' && lastDuration > 16) {
            // We voluntarily throttle ourselves if we can't manage 60fps
            lastDuration = Math.min(lastDuration - 16, 250);
            // Just in case this is the last event, remember to position just once more
            pendingTimeout = setTimeout(tick, 250);
            return;
        }
        if (typeof lastCall !== 'undefined' && (now() - lastCall) < 10) {
            // Some browsers call events a little too frequently, refuse to run more than is reasonable
            return;
        }
        if (pendingTimeout != null) {
            clearTimeout(pendingTimeout);
            pendingTimeout = null;
        }
        lastCall = now();
        position();
        lastDuration = now() - lastCall;
    };
    if (typeof window !== 'undefined' && typeof window.addEventListener !== 'undefined') {
        ['resize', 'scroll', 'touchmove'].forEach(function (event) {
            window.addEventListener(event, tick);
        });
    }
})();
var MIRROR_LR = {
    center: 'center',
    left: 'right',
    right: 'left'
};
var MIRROR_TB = {
    middle: 'middle',
    top: 'bottom',
    bottom: 'top'
};
var OFFSET_MAP = {
    top: 0,
    left: 0,
    middle: '50%',
    center: '50%',
    bottom: '100%',
    right: '100%'
};
var autoToFixedAttachment = function (attachment, relativeToAttachment) {
    var left = attachment.left, top = attachment.top;
    if (left === 'auto') {
        left = MIRROR_LR[relativeToAttachment.left];
    }
    if (top === 'auto') {
        top = MIRROR_TB[relativeToAttachment.top];
    }
    return { left: left, top: top };
};
var attachmentToOffset = function (attachment) {
    var left = attachment.left;
    var top = attachment.top;
    if (typeof OFFSET_MAP[attachment.left] !== 'undefined') {
        left = OFFSET_MAP[attachment.left];
    }
    if (typeof OFFSET_MAP[attachment.top] !== 'undefined') {
        top = OFFSET_MAP[attachment.top];
    }
    return { left: left, top: top };
};
function addOffset() {
    var offsets = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        offsets[_i] = arguments[_i];
    }
    var out = { top: 0, left: 0 };
    offsets.forEach(function (_b) {
        var top = _b.top, left = _b.left;
        if (typeof top === 'string') {
            top = parseFloat(top, 10);
        }
        if (typeof left === 'string') {
            left = parseFloat(left, 10);
        }
        out.top += top;
        out.left += left;
    });
    return out;
}
function offsetToPx(offset, size) {
    if (typeof offset.left === 'string' && offset.left.indexOf('%') !== -1) {
        offset.left = parseFloat(offset.left, 10) / 100 * size.width;
    }
    if (typeof offset.top === 'string' && offset.top.indexOf('%') !== -1) {
        offset.top = parseFloat(offset.top, 10) / 100 * size.height;
    }
    return offset;
}
var parseOffset = function (value) {
    var _b = value.split(' '), top = _b[0], left = _b[1];
    return { top: top, left: left };
};
var parseAttachment = parseOffset;
var TetherClass = (function (_super) {
    __extends(TetherClass, _super);
    function TetherClass(options) {
        var _this = _super.call(this) || this;
        _this.position = _this.position.bind(_this);
        tethers.push(_this);
        _this.history = [];
        _this.setOptions(options, false);
        TetherBase.modules.forEach(function (module) {
            if (typeof module.initialize !== 'undefined') {
                module.initialize.call(_this);
            }
        });
        _this.position();
        return _this;
    }
    TetherClass.prototype.getClass = function (key) {
        if (key === void 0) {
            key = '';
        }
        var classes = this.options.classes;
        if (typeof classes !== 'undefined' && classes[key]) {
            return this.options.classes[key];
        }
        else if (this.options.classPrefix) {
            return this.options.classPrefix + "-" + key;
        }
        else {
            return key;
        }
    };
    TetherClass.prototype.setOptions = function (options, pos) {
        var _this = this;
        if (pos === void 0) {
            pos = true;
        }
        var defaults = {
            offset: '0 0',
            targetOffset: '0 0',
            targetAttachment: 'auto auto',
            classPrefix: 'tether'
        };
        this.options = extend(defaults, options);
        var _b = this.options, element = _b.element, target = _b.target, targetModifier = _b.targetModifier;
        this.element = element;
        this.target = target;
        this.targetModifier = targetModifier;
        if (this.target === 'viewport') {
            this.target = document.body;
            this.targetModifier = 'visible';
        }
        else if (this.target === 'scroll-handle') {
            this.target = document.body;
            this.targetModifier = 'scroll-handle';
        }
        ['element', 'target'].forEach(function (key) {
            if (typeof _this[key] === 'undefined') {
                throw new Error('Tether Error: Both element and target must be defined');
            }
            if (typeof _this[key].jquery !== 'undefined') {
                _this[key] = _this[key][0];
            }
            else if (typeof _this[key] === 'string') {
                _this[key] = document.querySelector(_this[key]);
            }
        });
        addClass(this.element, this.getClass('element'));
        if (!(this.options.addTargetClasses === false)) {
            addClass(this.target, this.getClass('target'));
        }
        if (!this.options.attachment) {
            throw new Error('Tether Error: You must provide an attachment');
        }
        this.targetAttachment = parseAttachment(this.options.targetAttachment);
        this.attachment = parseAttachment(this.options.attachment);
        this.offset = parseOffset(this.options.offset);
        this.targetOffset = parseOffset(this.options.targetOffset);
        if (typeof this.scrollParents !== 'undefined') {
            this.disable();
        }
        if (this.targetModifier === 'scroll-handle') {
            this.scrollParents = [this.target];
        }
        else {
            this.scrollParents = getScrollParents(this.target);
        }
        if (!(this.options.enabled === false)) {
            this.enable(pos);
        }
    };
    TetherClass.prototype.getTargetBounds = function () {
        if (typeof this.targetModifier !== 'undefined') {
            if (this.targetModifier === 'visible') {
                if (this.target === document.body) {
                    return { top: pageYOffset, left: pageXOffset, height: innerHeight, width: innerWidth };
                }
                else {
                    var bounds = getBounds(this.target);
                    var out = {
                        height: bounds.height,
                        width: bounds.width,
                        top: bounds.top,
                        left: bounds.left
                    };
                    out.height = Math.min(out.height, bounds.height - (pageYOffset - bounds.top));
                    out.height = Math.min(out.height, bounds.height - ((bounds.top + bounds.height) - (pageYOffset + innerHeight)));
                    out.height = Math.min(innerHeight, out.height);
                    out.height -= 2;
                    out.width = Math.min(out.width, bounds.width - (pageXOffset - bounds.left));
                    out.width = Math.min(out.width, bounds.width - ((bounds.left + bounds.width) - (pageXOffset + innerWidth)));
                    out.width = Math.min(innerWidth, out.width);
                    out.width -= 2;
                    if (out.top < pageYOffset) {
                        out.top = pageYOffset;
                    }
                    if (out.left < pageXOffset) {
                        out.left = pageXOffset;
                    }
                    return out;
                }
            }
            else if (this.targetModifier === 'scroll-handle') {
                var bounds = void 0;
                var target = this.target;
                if (target === document.body) {
                    target = document.documentElement;
                    bounds = {
                        left: pageXOffset,
                        top: pageYOffset,
                        height: innerHeight,
                        width: innerWidth
                    };
                }
                else {
                    bounds = getBounds(target);
                }
                var style = getComputedStyle(target);
                var hasBottomScroll = (target.scrollWidth > target.clientWidth ||
                    [style.overflow, style.overflowX].indexOf('scroll') >= 0 ||
                    this.target !== document.body);
                var scrollBottom = 0;
                if (hasBottomScroll) {
                    scrollBottom = 15;
                }
                var height = bounds.height - parseFloat(style.borderTopWidth) - parseFloat(style.borderBottomWidth) - scrollBottom;
                var out = {
                    width: 15,
                    height: height * 0.975 * (height / target.scrollHeight),
                    left: bounds.left + bounds.width - parseFloat(style.borderLeftWidth) - 15
                };
                var fitAdj = 0;
                if (height < 408 && this.target === document.body) {
                    fitAdj = -0.00011 * Math.pow(height, 2) - 0.00727 * height + 22.58;
                }
                if (this.target !== document.body) {
                    out.height = Math.max(out.height, 24);
                }
                var scrollPercentage = this.target.scrollTop / (target.scrollHeight - height);
                out.top = scrollPercentage * (height - out.height - fitAdj) + bounds.top + parseFloat(style.borderTopWidth);
                if (this.target === document.body) {
                    out.height = Math.max(out.height, 24);
                }
                return out;
            }
        }
        else {
            return getBounds(this.target);
        }
    };
    TetherClass.prototype.clearCache = function () {
        this._cache = {};
    };
    TetherClass.prototype.cache = function (k, getter) {
        // More than one module will often need the same DOM info, so
        // we keep a cache which is cleared on each position call
        if (typeof this._cache === 'undefined') {
            this._cache = {};
        }
        if (typeof this._cache[k] === 'undefined') {
            this._cache[k] = getter.call(this);
        }
        return this._cache[k];
    };
    TetherClass.prototype.enable = function (pos) {
        var _this = this;
        if (pos === void 0) {
            pos = true;
        }
        if (!(this.options.addTargetClasses === false)) {
            addClass(this.target, this.getClass('enabled'));
        }
        addClass(this.element, this.getClass('enabled'));
        this.enabled = true;
        this.scrollParents.forEach(function (parent) {
            if (parent !== _this.target.ownerDocument) {
                parent.addEventListener('scroll', _this.position);
            }
        });
        if (pos) {
            this.position();
        }
    };
    TetherClass.prototype.disable = function () {
        var _this = this;
        removeClass(this.target, this.getClass('enabled'));
        removeClass(this.element, this.getClass('enabled'));
        this.enabled = false;
        if (typeof this.scrollParents !== 'undefined') {
            this.scrollParents.forEach(function (parent) {
                parent.removeEventListener('scroll', _this.position);
            });
        }
    };
    TetherClass.prototype.destroy = function () {
        var _this = this;
        this.disable();
        tethers.forEach(function (tether, i) {
            if (tether === _this) {
                tethers.splice(i, 1);
            }
        });
        // Remove any elements we were using for convenience from the DOM
        if (tethers.length === 0) {
            removeUtilElements();
        }
    };
    TetherClass.prototype.updateAttachClasses = function (elementAttach, targetAttach) {
        var _this = this;
        elementAttach = elementAttach || this.attachment;
        targetAttach = targetAttach || this.targetAttachment;
        var sides = ['left', 'top', 'bottom', 'right', 'middle', 'center'];
        if (typeof this._addAttachClasses !== 'undefined' && this._addAttachClasses.length) {
            // updateAttachClasses can be called more than once in a position call, so
            // we need to clean up after ourselves such that when the last defer gets
            // ran it doesn't add any extra classes from previous calls.
            this._addAttachClasses.splice(0, this._addAttachClasses.length);
        }
        if (typeof this._addAttachClasses === 'undefined') {
            this._addAttachClasses = [];
        }
        var add = this._addAttachClasses;
        if (elementAttach.top) {
            add.push(this.getClass('element-attached') + "-" + elementAttach.top);
        }
        if (elementAttach.left) {
            add.push(this.getClass('element-attached') + "-" + elementAttach.left);
        }
        if (targetAttach.top) {
            add.push(this.getClass('target-attached') + "-" + targetAttach.top);
        }
        if (targetAttach.left) {
            add.push(this.getClass('target-attached') + "-" + targetAttach.left);
        }
        var all = [];
        sides.forEach(function (side) {
            all.push(_this.getClass('element-attached') + "-" + side);
            all.push(_this.getClass('target-attached') + "-" + side);
        });
        defer(function () {
            if (!(typeof _this._addAttachClasses !== 'undefined')) {
                return;
            }
            updateClasses(_this.element, _this._addAttachClasses, all);
            if (!(_this.options.addTargetClasses === false)) {
                updateClasses(_this.target, _this._addAttachClasses, all);
            }
            delete _this._addAttachClasses;
        });
    };
    TetherClass.prototype.position = function (flushChanges) {
        // flushChanges commits the changes immediately, leave true unless you are positioning multiple
        // tethers (in which case call Tether.Utils.flush yourself when you're done)
        var _this = this;
        if (flushChanges === void 0) {
            flushChanges = true;
        }
        if (!this.enabled) {
            return;
        }
        this.clearCache();
        // Turn 'auto' attachments into the appropriate corner or edge
        var targetAttachment = autoToFixedAttachment(this.targetAttachment, this.attachment);
        this.updateAttachClasses(this.attachment, targetAttachment);
        var elementPos = this.cache('element-bounds', function () {
            return getBounds(_this.element);
        });
        var width = elementPos.width, height = elementPos.height;
        if (width === 0 && height === 0 && typeof this.lastSize !== 'undefined') {
            // We cache the height and width to make it possible to position elements that are
            // getting hidden.
            (_b = this.lastSize, width = _b.width, height = _b.height);
        }
        else {
            this.lastSize = { width: width, height: height };
        }
        var targetPos = this.cache('target-bounds', function () {
            return _this.getTargetBounds();
        });
        var targetSize = targetPos;
        // Get an actual px offset from the attachment
        var offset = offsetToPx(attachmentToOffset(this.attachment), { width: width, height: height });
        var targetOffset = offsetToPx(attachmentToOffset(targetAttachment), targetSize);
        var manualOffset = offsetToPx(this.offset, { width: width, height: height });
        var manualTargetOffset = offsetToPx(this.targetOffset, targetSize);
        // Add the manually provided offset
        offset = addOffset(offset, manualOffset);
        targetOffset = addOffset(targetOffset, manualTargetOffset);
        // It's now our goal to make (element position + offset) == (target position + target offset)
        var left = targetPos.left + targetOffset.left - offset.left;
        var top = targetPos.top + targetOffset.top - offset.top;
        for (var i = 0; i < TetherBase.modules.length; ++i) {
            var module_1 = TetherBase.modules[i];
            var ret = module_1.position.call(this, {
                left: left,
                top: top,
                targetAttachment: targetAttachment,
                targetPos: targetPos,
                elementPos: elementPos,
                offset: offset,
                targetOffset: targetOffset,
                manualOffset: manualOffset,
                manualTargetOffset: manualTargetOffset,
                scrollbarSize: scrollbarSize,
                attachment: this.attachment
            });
            if (ret === false) {
                return false;
            }
            else if (typeof ret === 'undefined' || typeof ret !== 'object') {
                continue;
            }
            else {
                (top = ret.top, left = ret.left);
            }
        }
        // We describe the position three different ways to give the optimizer
        // a chance to decide the best possible way to position the element
        // with the fewest repaints.
        var next = {
            // It's position relative to the page (absolute positioning when
            // the element is a child of the body)
            page: {
                top: top,
                left: left
            },
            // It's position relative to the viewport (fixed positioning)
            viewport: {
                top: top - pageYOffset,
                bottom: pageYOffset - top - height + innerHeight,
                left: left - pageXOffset,
                right: pageXOffset - left - width + innerWidth
            }
        };
        var doc = this.target.ownerDocument;
        var win = doc.defaultView;
        var scrollbarSize;
        if (win.innerHeight > doc.documentElement.clientHeight) {
            scrollbarSize = this.cache('scrollbar-size', getScrollBarSize);
            next.viewport.bottom -= scrollbarSize.height;
        }
        if (win.innerWidth > doc.documentElement.clientWidth) {
            scrollbarSize = this.cache('scrollbar-size', getScrollBarSize);
            next.viewport.right -= scrollbarSize.width;
        }
        if (['', 'static'].indexOf(doc.body.style.position) === -1 ||
            ['', 'static'].indexOf(doc.body.parentElement.style.position) === -1) {
            // Absolute positioning in the body will be relative to the page, not the 'initial containing block'
            next.page.bottom = doc.body.scrollHeight - top - height;
            next.page.right = doc.body.scrollWidth - left - width;
        }
        if (typeof this.options.optimizations !== 'undefined' &&
            this.options.optimizations.moveElement !== false &&
            !(typeof this.targetModifier !== 'undefined')) {
            var offsetParent_1 = this.cache('target-offsetparent', function () { return getOffsetParent(_this.target); });
            var offsetPosition = this.cache('target-offsetparent-bounds', function () { return getBounds(offsetParent_1); });
            var offsetParentStyle_1 = getComputedStyle(offsetParent_1);
            var offsetParentSize = offsetPosition;
            var offsetBorder_1 = {};
            ['Top', 'Left', 'Bottom', 'Right'].forEach(function (side) {
                offsetBorder_1[side.toLowerCase()] = parseFloat(offsetParentStyle_1["border" + side + "Width"]);
            });
            offsetPosition.right = doc.body.scrollWidth - offsetPosition.left - offsetParentSize.width + offsetBorder_1.right;
            offsetPosition.bottom = doc.body.scrollHeight - offsetPosition.top - offsetParentSize.height + offsetBorder_1.bottom;
            if (next.page.top >= (offsetPosition.top + offsetBorder_1.top) && next.page.bottom >= offsetPosition.bottom) {
                if (next.page.left >= (offsetPosition.left + offsetBorder_1.left) && next.page.right >= offsetPosition.right) {
                    // We're within the visible part of the target's scroll parent
                    var scrollTop = offsetParent_1.scrollTop;
                    var scrollLeft = offsetParent_1.scrollLeft;
                    // It's position relative to the target's offset parent (absolute positioning when
                    // the element is moved to be a child of the target's offset parent).
                    next.offset = {
                        top: next.page.top - offsetPosition.top + scrollTop - offsetBorder_1.top,
                        left: next.page.left - offsetPosition.left + scrollLeft - offsetBorder_1.left
                    };
                }
            }
        }
        // We could also travel up the DOM and try each containing context, rather than only
        // looking at the body, but we're gonna get diminishing returns.
        this.move(next);
        this.history.unshift(next);
        if (this.history.length > 3) {
            this.history.pop();
        }
        if (flushChanges) {
            flush();
        }
        return true;
        var _b;
    };
    // THE ISSUE
    TetherClass.prototype.move = function (pos) {
        var _this = this;
        if (!(typeof this.element.parentNode !== 'undefined')) {
            return;
        }
        var same = {};
        for (var type in pos) {
            same[type] = {};
            for (var key in pos[type]) {
                var found = false;
                for (var i = 0; i < this.history.length; ++i) {
                    var point = this.history[i];
                    if (typeof point[type] !== 'undefined' &&
                        !within(point[type][key], pos[type][key])) {
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    same[type][key] = true;
                }
            }
        }
        var css = { top: '', left: '', right: '', bottom: '' };
        var transcribe = function (_same, _pos) {
            var hasOptimizations = typeof _this.options.optimizations !== 'undefined';
            var gpu = hasOptimizations ? _this.options.optimizations.gpu : null;
            if (gpu !== false) {
                var yPos = void 0, xPos = void 0;
                if (_same.top) {
                    css.top = 0;
                    yPos = _pos.top;
                }
                else {
                    css.bottom = 0;
                    yPos = -_pos.bottom;
                }
                if (_same.left) {
                    css.left = 0;
                    xPos = _pos.left;
                }
                else {
                    css.right = 0;
                    xPos = -_pos.right;
                }
                if (window.matchMedia) {
                    // HubSpot/tether#207
                    var retina = window.matchMedia('only screen and (min-resolution: 1.3dppx)').matches ||
                        window.matchMedia('only screen and (-webkit-min-device-pixel-ratio: 1.3)').matches;
                    if (!retina) {
                        xPos = Math.round(xPos);
                        yPos = Math.round(yPos);
                    }
                }
                css[transformKey] = "translateX(" + xPos + "px) translateY(" + yPos + "px)";
                if (transformKey !== 'msTransform') {
                    // The Z transform will keep this in the GPU (faster, and prevents artifacts),
                    // but IE9 doesn't support 3d transforms and will choke.
                    css[transformKey] += " translateZ(0)";
                }
            }
            else {
                if (_same.top) {
                    css.top = _pos.top + "px";
                }
                else {
                    css.bottom = _pos.bottom + "px";
                }
                if (_same.left) {
                    css.left = _pos.left + "px";
                }
                else {
                    css.right = _pos.right + "px";
                }
            }
        };
        var moved = false;
        if ((same.page.top || same.page.bottom) && (same.page.left || same.page.right)) {
            css.position = 'absolute';
            transcribe(same.page, pos.page);
        }
        else if ((same.viewport.top || same.viewport.bottom) && (same.viewport.left || same.viewport.right)) {
            css.position = 'fixed';
            transcribe(same.viewport, pos.viewport);
        }
        else if (typeof same.offset !== 'undefined' && same.offset.top && same.offset.left) {
            css.position = 'absolute';
            var offsetParent_2 = this.cache('target-offsetparent', function () { return getOffsetParent(_this.target); });
            if (getOffsetParent(this.element) !== offsetParent_2) {
                defer(function () {
                    _this.element.parentNode.removeChild(_this.element);
                    offsetParent_2.appendChild(_this.element);
                });
            }
            transcribe(same.offset, pos.offset);
            moved = true;
        }
        else {
            css.position = 'absolute';
            transcribe({ top: true, left: true }, pos.page);
        }
        if (!moved) {
            if (this.options.bodyElement) {
                this.options.bodyElement.appendChild(this.element);
            }
            else {
                var offsetParentIsBody = true;
                var currentNode = this.element.parentNode;
                while (currentNode && currentNode.nodeType === 1 && currentNode.tagName !== 'BODY') {
                    if (getComputedStyle(currentNode).position !== 'static') {
                        offsetParentIsBody = false;
                        break;
                    }
                    currentNode = currentNode.parentNode;
                }
                if (!offsetParentIsBody) {
                    this.element.parentNode.removeChild(this.element);
                    this.element.ownerDocument.body.appendChild(this.element);
                }
            }
        }
        // Any css change will trigger a repaint, so let's avoid one if nothing changed
        var writeCSS = {};
        var write = false;
        for (var key in css) {
            var val = css[key];
            var elVal = this.element.style[key];
            if (elVal !== val) {
                write = true;
                writeCSS[key] = val;
            }
        }
        if (write) {
            defer(function () {
                extend(_this.element.style, writeCSS);
                _this.trigger('repositioned');
            });
        }
    };
    return TetherClass;
}(Evented));
TetherClass.modules = [];
TetherBase.position = position;
var Tether = extend(TetherClass, TetherBase);
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,
