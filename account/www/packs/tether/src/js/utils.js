var TetherBase;
if (typeof TetherBase === 'undefined') {
    TetherBase = { modules: [] };
}
var zeroElement = null;
// Same as native getBoundingClientRect, except it takes into account parent <frame> offsets
// if the element lies within a nested document (<frame> or <iframe>-like).
function getActualBoundingClientRect(node) {
    var boundingRect = node.getBoundingClientRect();
    // The original object returned by getBoundingClientRect is immutable, so we clone it
    // We can't use extend because the properties are not considered part of the object by hasOwnProperty in IE9
    var rect = {};
    for (var k in boundingRect) {
        rect[k] = boundingRect[k];
    }
    if (node.ownerDocument !== document) {
        var frameElement_1 = node.ownerDocument.defaultView.frameElement;
        if (frameElement_1) {
            var frameRect = getActualBoundingClientRect(frameElement_1);
            rect.top += frameRect.top;
            rect.bottom += frameRect.top;
            rect.left += frameRect.left;
            rect.right += frameRect.left;
        }
    }
    return rect;
}
function getScrollParents(el) {
    // In firefox if the el is inside an iframe with display: none; window.getComputedStyle() will return null;
    // https://bugzilla.mozilla.org/show_bug.cgi?id=548397
    var computedStyle = getComputedStyle(el) || {};
    var position = computedStyle.position;
    var parents = [];
    if (position === 'fixed') {
        return [el];
    }
    var parent = el;
    while ((parent = parent.parentNode) && parent && parent.nodeType === 1) {
        var style = void 0;
        try {
            style = getComputedStyle(parent);
        }
        catch (err) { }
        if (typeof style === 'undefined' || style === null) {
            parents.push(parent);
            return parents;
        }
        var overflow = style.overflow, overflowX = style.overflowX, overflowY = style.overflowY;
        if (/(auto|scroll)/.test(overflow + overflowY + overflowX)) {
            if (position !== 'absolute' || ['relative', 'absolute', 'fixed'].indexOf(style.position) >= 0) {
                parents.push(parent);
            }
        }
    }
    parents.push(el.ownerDocument.body);
    // If the node is within a frame, account for the parent window scroll
    if (el.ownerDocument !== document) {
        parents.push(el.ownerDocument.defaultView);
    }
    return parents;
}
var uniqueId = (function () {
    var id = 0;
    return function () { return ++id; };
})();
var zeroPosCache = {};
var getOrigin = function () {
    // getBoundingClientRect is unfortunately too accurate.  It introduces a pixel or two of
    // jitter as the user scrolls that messes with our ability to detect if two positions
    // are equivilant or not.  We place an element at the top left of the page that will
    // get the same jitter, so we can cancel the two out.
    var node = zeroElement;
    if (!node || !document.body.contains(node)) {
        node = document.createElement('div');
        node.setAttribute('data-tether-id', uniqueId());
        extend(node.style, {
            top: 0,
            left: 0,
            position: 'absolute'
        });
        document.body.appendChild(node);
        zeroElement = node;
    }
    var id = node.getAttribute('data-tether-id');
    if (typeof zeroPosCache[id] === 'undefined') {
        zeroPosCache[id] = getActualBoundingClientRect(node);
        // Clear the cache when this position call is done
        defer(function () {
            delete zeroPosCache[id];
        });
    }
    return zeroPosCache[id];
};
function removeUtilElements() {
    if (zeroElement) {
        document.body.removeChild(zeroElement);
    }
    zeroElement = null;
}
;
function getBounds(el) {
    var doc;
    if (el === document) {
        doc = document;
        el = document.documentElement;
    }
    else {
        doc = el.ownerDocument;
    }
    var docEl = doc.documentElement;
    var box = getActualBoundingClientRect(el);
    var origin = getOrigin();
    box.top -= origin.top;
    box.left -= origin.left;
    if (typeof box.width === 'undefined') {
        box.width = document.body.scrollWidth - box.left - box.right;
    }
    if (typeof box.height === 'undefined') {
        box.height = document.body.scrollHeight - box.top - box.bottom;
    }
    box.top = box.top - docEl.clientTop;
    box.left = box.left - docEl.clientLeft;
    box.right = doc.body.clientWidth - box.width - box.left;
    box.bottom = doc.body.clientHeight - box.height - box.top;
    return box;
}
function getOffsetParent(el) {
    return el.offsetParent || document.documentElement;
}
var _scrollBarSize = null;
function getScrollBarSize() {
    if (_scrollBarSize) {
        return _scrollBarSize;
    }
    var inner = document.createElement('div');
    inner.style.width = '100%';
    inner.style.height = '200px';
    var outer = document.createElement('div');
    extend(outer.style, {
        position: 'absolute',
        top: 0,
        left: 0,
        pointerEvents: 'none',
        visibility: 'hidden',
        width: '200px',
        height: '150px',
        overflow: 'hidden'
    });
    outer.appendChild(inner);
    document.body.appendChild(outer);
    var widthContained = inner.offsetWidth;
    outer.style.overflow = 'scroll';
    var widthScroll = inner.offsetWidth;
    if (widthContained === widthScroll) {
        widthScroll = outer.clientWidth;
    }
    document.body.removeChild(outer);
    var width = widthContained - widthScroll;
    _scrollBarSize = { width: width, height: width };
    return _scrollBarSize;
}
function extend(out) {
    if (out === void 0) {
        out = {};
    }
    var args = [];
    Array.prototype.push.apply(args, arguments);
    args.slice(1).forEach(function (obj) {
        if (obj) {
            for (var key in obj) {
                if ({}.hasOwnProperty.call(obj, key)) {
                    out[key] = obj[key];
                }
            }
        }
    });
    return out;
}
function removeClass(el, name) {
    if (typeof el.classList !== 'undefined') {
        name.split(' ').forEach(function (cls) {
            if (cls.trim()) {
                el.classList.remove(cls);
            }
        });
    }
    else {
        var regex = new RegExp("(^| )" + name.split(' ').join('|') + "( |$)", 'gi');
        var className = getClassName(el).replace(regex, ' ');
        setClassName(el, className);
    }
}
function addClass(el, name) {
    if (typeof el.classList !== 'undefined') {
        name.split(' ').forEach(function (cls) {
            if (cls.trim()) {
                el.classList.add(cls);
            }
        });
    }
    else {
        removeClass(el, name);
        var cls = getClassName(el) + (" " + name);
        setClassName(el, cls);
    }
}
function hasClass(el, name) {
    if (typeof el.classList !== 'undefined') {
        return el.classList.contains(name);
    }
    var className = getClassName(el);
    return new RegExp("(^| )" + name + "( |$)", 'gi').test(className);
}
function getClassName(el) {
    // Can't use just SVGAnimatedString here since nodes within a Frame in IE have
    // completely separately SVGAnimatedString base classes
    if (el.className instanceof el.ownerDocument.defaultView.SVGAnimatedString) {
        return el.className.baseVal;
    }
    return el.className;
}
function setClassName(el, className) {
    el.setAttribute('class', className);
}
function updateClasses(el, add, all) {
    // Of the set of 'all' classes, we need the 'add' classes, and only the
    // 'add' classes to be set.
    all.forEach(function (cls) {
        if (add.indexOf(cls) === -1 && hasClass(el, cls)) {
            removeClass(el, cls);
        }
    });
    add.forEach(function (cls) {
        if (!hasClass(el, cls)) {
            addClass(el, cls);
        }
    });
}
var deferred = [];
var defer = function (fn) {
    deferred.push(fn);
};
var flush = function () {
    var fn;
    while (fn = deferred.pop()) {
        fn();
    }
};
var Evented = (function () {
    function Evented() {
    }
    Evented.prototype.on = function (event, handler, ctx, once) {
        if (once === void 0) {
            once = false;
        }
        if (typeof this.bindings === 'undefined') {
            this.bindings = {};
        }
        if (typeof this.bindings[event] === 'undefined') {
            this.bindings[event] = [];
        }
        this.bindings[event].push({ handler: handler, ctx: ctx, once: once });
    };
    Evented.prototype.once = function (event, handler, ctx) {
        this.on(event, handler, ctx, true);
    };
    Evented.prototype.off = function (event, handler) {
        if (typeof this.bindings === 'undefined' ||
            typeof this.bindings[event] === 'undefined') {
            return;
        }
        if (typeof handler === 'undefined') {
            delete this.bindings[event];
        }
        else {
            var i = 0;
            while (i < this.bindings[event].length) {
                if (this.bindings[event][i].handler === handler) {
                    this.bindings[event].splice(i, 1);
                }
                else {
                    ++i;
                }
            }
        }
    };
    Evented.prototype.trigger = function (event) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (typeof this.bindings !== 'undefined' && this.bindings[event]) {
            var i = 0;
            while (i < this.bindings[event].length) {
                var _b = this.bindings[event][i], handler = _b.handler, ctx = _b.ctx, once = _b.once;
                var context = ctx;
                if (typeof context === 'undefined') {
                    context = this;
                }
                handler.apply(context, args);
                if (once) {
                    this.bindings[event].splice(i, 1);
                }
                else {
                    ++i;
                }
            }
        }
    };
    return Evented;
}());
TetherBase.Utils = {
    getActualBoundingClientRect: getActualBoundingClientRect,
    getScrollParents: getScrollParents,
    getBounds: getBounds,
    getOffsetParent: getOffsetParent,
    extend: extend,
    addClass: addClass,
    removeClass: removeClass,
    hasClass: hasClass,
    updateClasses: updateClasses,
    defer: defer,
    flush: flush,
    uniqueId: uniqueId,
    Evented: Evented,
    getScrollBarSize: getScrollBarSize,
    removeUtilElements: removeUtilElements
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,
