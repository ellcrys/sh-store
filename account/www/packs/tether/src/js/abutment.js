/* globals TetherBase */
var _b = TetherBase.Utils, getBounds = _b.getBounds, updateClasses = _b.updateClasses, defer = _b.defer;
TetherBase.modules.push({
    position: function (_b) {
        var _this = this;
        var top = _b.top, left = _b.left;
        var _c = this.cache('element-bounds', function () {
            return getBounds(_this.element);
        }), height = _c.height, width = _c.width;
        var targetPos = this.getTargetBounds();
        var bottom = top + height;
        var right = left + width;
        var abutted = [];
        if (top <= targetPos.bottom && bottom >= targetPos.top) {
            ['left', 'right'].forEach(function (side) {
                var targetPosSide = targetPos[side];
                if (targetPosSide === left || targetPosSide === right) {
                    abutted.push(side);
                }
            });
        }
        if (left <= targetPos.right && right >= targetPos.left) {
            ['top', 'bottom'].forEach(function (side) {
                var targetPosSide = targetPos[side];
                if (targetPosSide === top || targetPosSide === bottom) {
                    abutted.push(side);
                }
            });
        }
        var allClasses = [];
        var addClasses = [];
        var sides = ['left', 'top', 'right', 'bottom'];
        allClasses.push(this.getClass('abutted'));
        sides.forEach(function (side) {
            allClasses.push(_this.getClass('abutted') + "-" + side);
        });
        if (abutted.length) {
            addClasses.push(this.getClass('abutted'));
        }
        abutted.forEach(function (side) {
            addClasses.push(_this.getClass('abutted') + "-" + side);
        });
        defer(function () {
            if (!(_this.options.addTargetClasses === false)) {
                updateClasses(_this.target, addClasses, allClasses);
            }
            updateClasses(_this.element, addClasses, allClasses);
        });
        return true;
    }
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInd3dy9wYWNrcy90ZXRoZXIvc3JjL2pzL2FidXRtZW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdCQUF3QjtBQUVsQixJQUFBLHFCQUFvRCxFQUFuRCx3QkFBUyxFQUFFLGdDQUFhLEVBQUUsZ0JBQUssQ0FBcUI7QUFFM0QsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7SUFDdEIsUUFBUSxZQUFDLEVBQVc7UUFBcEIsaUJBc0RDO1lBdERTLFlBQUcsRUFBRSxjQUFJO1FBQ1gsSUFBQTs7VUFFSixFQUZLLGtCQUFNLEVBQUUsZ0JBQUssQ0FFakI7UUFFSCxJQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7UUFFekMsSUFBTSxNQUFNLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQztRQUM1QixJQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsS0FBSyxDQUFDO1FBRTNCLElBQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNuQixFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksU0FBUyxDQUFDLE1BQU0sSUFBSSxNQUFNLElBQUksU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDdkQsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsSUFBSTtnQkFDNUIsSUFBTSxhQUFhLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUN0QyxFQUFFLENBQUMsQ0FBQyxhQUFhLEtBQUssSUFBSSxJQUFJLGFBQWEsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDO29CQUN0RCxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNyQixDQUFDO1lBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLFNBQVMsQ0FBQyxLQUFLLElBQUksS0FBSyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ3ZELENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLElBQUk7Z0JBQzVCLElBQU0sYUFBYSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDdEMsRUFBRSxDQUFDLENBQUMsYUFBYSxLQUFLLEdBQUcsSUFBSSxhQUFhLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQztvQkFDdEQsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDckIsQ0FBQztZQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUVELElBQU0sVUFBVSxHQUFHLEVBQUUsQ0FBQztRQUN0QixJQUFNLFVBQVUsR0FBRyxFQUFFLENBQUM7UUFFdEIsSUFBTSxLQUFLLEdBQUcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNqRCxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUMxQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQUEsSUFBSTtZQUNoQixVQUFVLENBQUMsSUFBSSxDQUFLLEtBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLFNBQU0sSUFBTyxDQUFDLENBQUM7UUFDN0QsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNuQixVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUM1QyxDQUFDO1FBRUQsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFBLElBQUk7WUFDbEIsVUFBVSxDQUFDLElBQUksQ0FBSyxLQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxTQUFNLElBQU8sQ0FBQyxDQUFDO1FBQzdELENBQUMsQ0FBQyxDQUFDO1FBRUgsS0FBSyxDQUFDO1lBQ0osRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMvQyxhQUFhLENBQUMsS0FBSSxDQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFDckQsQ0FBQztZQUNELGFBQWEsQ0FBQyxLQUFJLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUN0RCxDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDZCxDQUFDO0NBQ0YsQ0FBQyxDQUFDIiwiZmlsZSI6Ind3dy9wYWNrcy90ZXRoZXIvc3JjL2pzL2FidXRtZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFscyBUZXRoZXJCYXNlICovXG5cbmNvbnN0IHtnZXRCb3VuZHMsIHVwZGF0ZUNsYXNzZXMsIGRlZmVyfSA9IFRldGhlckJhc2UuVXRpbHM7XG5cblRldGhlckJhc2UubW9kdWxlcy5wdXNoKHtcbiAgcG9zaXRpb24oe3RvcCwgbGVmdH0pIHtcbiAgICBjb25zdCB7aGVpZ2h0LCB3aWR0aH0gPSB0aGlzLmNhY2hlKCdlbGVtZW50LWJvdW5kcycsICgpID0+IHtcbiAgICAgIHJldHVybiBnZXRCb3VuZHModGhpcy5lbGVtZW50KTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHRhcmdldFBvcyA9IHRoaXMuZ2V0VGFyZ2V0Qm91bmRzKCk7XG5cbiAgICBjb25zdCBib3R0b20gPSB0b3AgKyBoZWlnaHQ7XG4gICAgY29uc3QgcmlnaHQgPSBsZWZ0ICsgd2lkdGg7XG5cbiAgICBjb25zdCBhYnV0dGVkID0gW107XG4gICAgaWYgKHRvcCA8PSB0YXJnZXRQb3MuYm90dG9tICYmIGJvdHRvbSA+PSB0YXJnZXRQb3MudG9wKSB7XG4gICAgICBbJ2xlZnQnLCAncmlnaHQnXS5mb3JFYWNoKHNpZGUgPT4ge1xuICAgICAgICBjb25zdCB0YXJnZXRQb3NTaWRlID0gdGFyZ2V0UG9zW3NpZGVdO1xuICAgICAgICBpZiAodGFyZ2V0UG9zU2lkZSA9PT0gbGVmdCB8fCB0YXJnZXRQb3NTaWRlID09PSByaWdodCkge1xuICAgICAgICAgIGFidXR0ZWQucHVzaChzaWRlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGxlZnQgPD0gdGFyZ2V0UG9zLnJpZ2h0ICYmIHJpZ2h0ID49IHRhcmdldFBvcy5sZWZ0KSB7XG4gICAgICBbJ3RvcCcsICdib3R0b20nXS5mb3JFYWNoKHNpZGUgPT4ge1xuICAgICAgICBjb25zdCB0YXJnZXRQb3NTaWRlID0gdGFyZ2V0UG9zW3NpZGVdO1xuICAgICAgICBpZiAodGFyZ2V0UG9zU2lkZSA9PT0gdG9wIHx8IHRhcmdldFBvc1NpZGUgPT09IGJvdHRvbSkge1xuICAgICAgICAgIGFidXR0ZWQucHVzaChzaWRlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgYWxsQ2xhc3NlcyA9IFtdO1xuICAgIGNvbnN0IGFkZENsYXNzZXMgPSBbXTtcblxuICAgIGNvbnN0IHNpZGVzID0gWydsZWZ0JywgJ3RvcCcsICdyaWdodCcsICdib3R0b20nXTtcbiAgICBhbGxDbGFzc2VzLnB1c2godGhpcy5nZXRDbGFzcygnYWJ1dHRlZCcpKTtcbiAgICBzaWRlcy5mb3JFYWNoKHNpZGUgPT4ge1xuICAgICAgYWxsQ2xhc3Nlcy5wdXNoKGAkeyB0aGlzLmdldENsYXNzKCdhYnV0dGVkJykgfS0keyBzaWRlIH1gKTtcbiAgICB9KTtcblxuICAgIGlmIChhYnV0dGVkLmxlbmd0aCkge1xuICAgICAgYWRkQ2xhc3Nlcy5wdXNoKHRoaXMuZ2V0Q2xhc3MoJ2FidXR0ZWQnKSk7XG4gICAgfVxuXG4gICAgYWJ1dHRlZC5mb3JFYWNoKHNpZGUgPT4ge1xuICAgICAgYWRkQ2xhc3Nlcy5wdXNoKGAkeyB0aGlzLmdldENsYXNzKCdhYnV0dGVkJykgfS0keyBzaWRlIH1gKTtcbiAgICB9KTtcblxuICAgIGRlZmVyKCgpID0+IHtcbiAgICAgIGlmICghKHRoaXMub3B0aW9ucy5hZGRUYXJnZXRDbGFzc2VzID09PSBmYWxzZSkpIHtcbiAgICAgICAgdXBkYXRlQ2xhc3Nlcyh0aGlzLnRhcmdldCwgYWRkQ2xhc3NlcywgYWxsQ2xhc3Nlcyk7XG4gICAgICB9XG4gICAgICB1cGRhdGVDbGFzc2VzKHRoaXMuZWxlbWVudCwgYWRkQ2xhc3NlcywgYWxsQ2xhc3Nlcyk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufSk7XG4iXX0=

//# sourceMappingURL=data:application/json;charset=utf8;base64,
