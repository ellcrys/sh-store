(function () {
    var init, isMobile, setupBrowserDemo, setupHero, _Drop;
    _Drop = Drop.createContext({
        classPrefix: 'tether'
    });
    isMobile = $(window).width() < 567;
    init = function () {
        setupHero();
        return setupBrowserDemo();
    };
    setupHero = function () {
        var $target, finalDropState, frameLengthMS, frames, openAllDrops, openIndex, openNextDrop, position, positions, _i, _len;
        $target = $('.tether-target-demo');
        positions = ['top left', 'left top', 'left middle', 'left bottom', 'bottom left', 'bottom center', 'bottom right', 'right bottom', 'right middle', 'right top', 'top right', 'top center'];
        if (isMobile) {
            positions = ['top left', 'bottom left', 'bottom right', 'top right'];
        }
        window.drops = {};
        for (_i = 0, _len = positions.length; _i < _len; _i++) {
            position = positions[_i];
            drops[position] = new _Drop({
                target: $target[0],
                classes: 'tether-theme-arrows-dark',
                position: position,
                constrainToWindow: false,
                openOn: '',
                content: '<div style="height: 50px; width: 50px"></div>'
            });
        }
        openIndex = 0;
        frames = 0;
        frameLengthMS = 10;
        openAllDrops = function () {
            var drop, _results;
            _results = [];
            for (position in drops) {
                drop = drops[position];
                _results.push(drop.open());
            }
            return _results;
        };
        openNextDrop = function () {
            var drop;
            for (position in drops) {
                drop = drops[position];
                drop.close();
            }
            drops[positions[openIndex]].open();
            drops[positions[(openIndex + 6) % positions.length]].open();
            openIndex = (openIndex + 1) % positions.length;
            if (frames > 5) {
                finalDropState();
                return;
            }
            frames += 1;
            return setTimeout(openNextDrop, frameLengthMS * frames);
        };
        finalDropState = function () {
            $(drops['top left'].dropContent).html('Marrying DOM elements for life.');
            $(drops['bottom right'].dropContent).html('<a class="button" href="http://github.com/HubSpot/tether">â˜… On Github</a>');
            drops['top left'].open();
            return drops['bottom right'].open();
        };
        if (true || isMobile) {
            drops['top left'].open();
            drops['top left'].tether.position();
            drops['bottom right'].open();
            drops['bottom right'].tether.position();
            return finalDropState();
        }
        else {
            return openNextDrop();
        }
    };
    setupBrowserDemo = function () {
        var $browserContents, $browserDemo, $iframe, $sections, $startPoint, $stopPoint, scrollInterval, scrollTop, scrollTopDirection, setSection;
        $browserDemo = $('.browser-demo.showcase');
        $startPoint = $('.browser-demo-start-point');
        $stopPoint = $('.browser-demo-stop-point');
        $iframe = $('.browser-window iframe');
        $browserContents = $('.browser-content .browser-demo-inner');
        $sections = $('.browser-demo-section');
        $('body').append("<style>\n    table.showcase.browser-demo.fixed-bottom {\n        top: " + $sections.length + "00%\n    }\n</style>");
        $(window).scroll(function () {
            var scrollTop;
            scrollTop = $(window).scrollTop();
            if ($startPoint.position().top < scrollTop && scrollTop + window.innerHeight < $stopPoint.position().top) {
                $browserDemo.removeClass('fixed-bottom');
                $browserDemo.addClass('fixed');
                return $sections.each(function () {
                    var $section;
                    $section = $(this);
                    if (($section.position().top < scrollTop && scrollTop < $section.position().top + $section.outerHeight())) {
                        setSection($section.data('section'));
                    }
                    return true;
                });
            }
            else {
                $browserDemo.removeAttr('data-section');
                $browserDemo.removeClass('fixed');
                if (scrollTop + window.innerHeight > $stopPoint.position().top) {
                    return $browserDemo.addClass('fixed-bottom');
                }
                else {
                    return $browserDemo.removeClass('fixed-bottom');
                }
            }
        });
        $iframe.load(function () {
            var $items, iframeWindow;
            iframeWindow = $iframe[0].contentWindow;
            $items = $iframe.contents().find('.item');
            return $items.each(function (i) {
                var $item, drop, _iframeWindowDrop;
                $item = $(this);
                _iframeWindowDrop = iframeWindow.Drop.createContext({
                    classPrefix: 'tether'
                });
                drop = new _iframeWindowDrop({
                    target: $item[0],
                    classes: 'tether-theme-arrows-dark',
                    position: 'right top',
                    constrainToWindow: true,
                    openOn: 'click',
                    content: '<ul>\n    <li>Action&nbsp;1</li>\n    <li>Action&nbsp;2</li>\n    <li>Action&nbsp;3</li>\n</ul>'
                });
                return $item.data('drop', drop);
            });
        });
        scrollInterval = void 0;
        scrollTop = 0;
        scrollTopDirection = 1;
        return setSection = function (section) {
            var closeAllItems, openExampleItem, scrollLeftSection, stopScrollingLeftSection;
            $browserDemo.attr('data-section', section);
            $('.section-copy').removeClass('active');
            $(".section-copy[data-section=\"" + section + "\"]").addClass('active');
            openExampleItem = function () {
                if (isMobile) {
                    return $iframe.contents().find('.item:first').data().drop.open();
                }
                else {
                    return $iframe.contents().find('.item:eq(2)').data().drop.open();
                }
            };
            closeAllItems = function () {
                return $iframe.contents().find('.item').each(function () {
                    return $(this).data().drop.close() || true;
                });
            };
            scrollLeftSection = function () {
                return scrollInterval = setInterval(function () {
                    $iframe.contents().find('.left').scrollTop(scrollTop);
                    scrollTop += scrollTopDirection;
                    if (scrollTop > 50) {
                        scrollTopDirection = -1;
                    }
                    if (scrollTop < 0) {
                        return scrollTopDirection = 1;
                    }
                }, 30);
            };
            stopScrollingLeftSection = function () {
                return clearInterval(scrollInterval);
            };
            switch (section) {
                case 'what':
                    closeAllItems();
                    openExampleItem();
                    return stopScrollingLeftSection();
                case 'how':
                    closeAllItems();
                    openExampleItem();
                    stopScrollingLeftSection();
                    return scrollLeftSection();
                case 'why':
                    closeAllItems();
                    openExampleItem();
                    stopScrollingLeftSection();
                    return scrollLeftSection();
                case 'outro':
                    closeAllItems();
                    openExampleItem();
                    return stopScrollingLeftSection();
            }
        };
    };
    init();
}).call(this);
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInd3dy9wYWNrcy90ZXRoZXIvZG9jcy93ZWxjb21lL2pzL3dlbGNvbWUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsQ0FBQztJQUNHLElBQUksSUFBSSxFQUFFLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDO0lBQ3ZELEtBQUssR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBQ3ZCLFdBQVcsRUFBRSxRQUFRO0tBQ3hCLENBQUMsQ0FBQztJQUNILFFBQVEsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLEdBQUcsR0FBRyxDQUFDO0lBQ25DLElBQUksR0FBRztRQUNILFNBQVMsRUFBRSxDQUFDO1FBQ1osTUFBTSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDOUIsQ0FBQyxDQUFDO0lBQ0YsU0FBUyxHQUFHO1FBQ1IsSUFBSSxPQUFPLEVBQUUsY0FBYyxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDO1FBQ3pILE9BQU8sR0FBRyxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUNuQyxTQUFTLEdBQUcsQ0FBQyxVQUFVLEVBQUUsVUFBVSxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLGVBQWUsRUFBRSxjQUFjLEVBQUUsY0FBYyxFQUFFLGNBQWMsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQzNMLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDWCxTQUFTLEdBQUcsQ0FBQyxVQUFVLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUN6RSxDQUFDO1FBQ0QsTUFBTSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMs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LENBQUM7b0JBQ0QsRUFBRSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ2hCLE1BQU0sQ0FBQyxrQkFBa0IsR0FBRyxDQUFDLENBQUM7b0JBQ2xDLENBQUM7Z0JBQ0wsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ1gsQ0FBQyxDQUFDO1lBQ0Ysd0JBQXdCLEdBQUc7Z0JBQ3ZCLE1BQU0sQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDekMsQ0FBQyxDQUFDO1lBQ0YsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztnQkFDZCxLQUFLLE1BQU07b0JBQ1AsYUFBYSxFQUFFLENBQUM7b0JBQ2hCLGVBQWUsRUFBRSxDQUFDO29CQUNsQixNQUFNLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztnQkFDdEMsS0FBSyxLQUFLO29CQUNOLGFBQWEsRUFBRSxDQUFDO29CQUNoQixlQUFlLEVBQUUsQ0FBQztvQkFDbEIsd0JBQXdCLEVBQUUsQ0FBQztvQkFDM0IsTUFBTSxDQUFDLGlCQUFpQixFQUFFLENBQUM7Z0JBQy9CLEtBQUssS0FBSztvQkFDTixhQUFhLEVBQUUsQ0FBQztvQkFDaEIsZUFBZSxFQUFFLENBQUM7b0JBQ2xCLHdCQUF3QixFQUFFLENBQUM7b0JBQzNCLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO2dCQUMvQixLQUFLLE9BQU87b0JBQ1IsYUFBYSxFQUFFLENBQUM7b0JBQ2hCLGVBQWUsRUFBRSxDQUFDO29CQUNsQixNQUFNLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztZQUMxQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDO0lBQ04sQ0FBQyxDQUFDO0lBQ0YsSUFBSSxFQUFFLENBQUM7QUFDWCxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFFZCxtOWtCQUFtOWtCIiwiZmlsZSI6Ind3dy9wYWNrcy90ZXRoZXIvZG9jcy93ZWxjb21lL2pzL3dlbGNvbWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKCkge1xuICAgIHZhciBpbml0LCBpc01vYmlsZSwgc2V0dXBCcm93c2VyRGVtbywgc2V0dXBIZXJvLCBfRHJvcDtcbiAgICBfRHJvcCA9IERyb3AuY3JlYXRlQ29udGV4dCh7XG4gICAgICAgIGNsYXNzUHJlZml4OiAndGV0aGVyJ1xuICAgIH0pO1xuICAgIGlzTW9iaWxlID0gJCh3aW5kb3cpLndpZHRoKCkgPCA1Njc7XG4gICAgaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2V0dXBIZXJvKCk7XG4gICAgICAgIHJldHVybiBzZXR1cEJyb3dzZXJEZW1vKCk7XG4gICAgfTtcbiAgICBzZXR1cEhlcm8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkdGFyZ2V0LCBmaW5hbERyb3BTdGF0ZSwgZnJhbWVMZW5ndGhNUywgZnJhbWVzLCBvcGVuQWxsRHJvcHMsIG9wZW5JbmRleCwgb3Blbk5leHREcm9wLCBwb3NpdGlvbiwgcG9zaXRpb25zLCBfaSwgX2xlbjtcbiAgICAgICAgJHRhcmdldCA9ICQoJy50ZXRoZXItdGFyZ2V0LWRlbW8nKTtcbiAgICAgICAgcG9zaXRpb25zID0gWyd0b3AgbGVmdCcsICdsZWZ0IHRvcCcsICdsZWZ0IG1pZGRsZScsICdsZWZ0IGJvdHRvbScsICdib3R0b20gbGVmdCcsICdib3R0b20gY2VudGVyJywgJ2JvdHRvbSByaWdodCcsICdyaWdodCBib3R0b20nLCAncmlnaHQgbWlkZGxlJywgJ3JpZ2h0IHRvcCcsICd0b3AgcmlnaHQnLCAndG9wIGNlbnRlciddO1xuICAgICAgICBpZiAoaXNNb2JpbGUpIHtcbiAgICAgICAgICAgIHBvc2l0aW9ucyA9IFsndG9wIGxlZnQnLCAnYm90dG9tIGxlZnQnLCAnYm90dG9tIHJpZ2h0JywgJ3RvcCByaWdodCddO1xuICAgICAgICB9XG4gICAgICAgIHdpbmRvdy5kcm9wcyA9IHt9O1xuICAgICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IHBvc2l0aW9ucy5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykge1xuICAgICAgICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbnNbX2ldO1xuICAgICAgICAgICAgZHJvcHNbcG9zaXRpb25dID0gbmV3IF9Ecm9wKHtcbiAgICAgICAgICAgICAgICB0YXJnZXQ6ICR0YXJnZXRbMF0sXG4gICAgICAgICAgICAgICAgY2xhc3NlczogJ3RldGhlci10aGVtZS1hcnJvd3MtZGFyaycsXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uLFxuICAgICAgICAgICAgICAgIGNvbnN0cmFpblRvV2luZG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBvcGVuT246ICcnLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICc8ZGl2IHN0eWxlPVwiaGVpZ2h0OiA1MHB4OyB3aWR0aDogNTBweFwiPjwvZGl2PidcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIG9wZW5JbmRleCA9IDA7XG4gICAgICAgIGZyYW1lcyA9IDA7XG4gICAgICAgIGZyYW1lTGVuZ3RoTVMgPSAxMDtcbiAgICAgICAgb3BlbkFsbERyb3BzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGRyb3AsIF9yZXN1bHRzO1xuICAgICAgICAgICAgX3Jlc3VsdHMgPSBbXTtcbiAgICAgICAgICAgIGZvciAocG9zaXRpb24gaW4gZHJvcHMpIHtcbiAgICAgICAgICAgICAgICBkcm9wID0gZHJvcHNbcG9zaXRpb25dO1xuICAgICAgICAgICAgICAgIF9yZXN1bHRzLnB1c2goZHJvcC5vcGVuKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIF9yZXN1bHRzO1xuICAgICAgICB9O1xuICAgICAgICBvcGVuTmV4dERyb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZHJvcDtcbiAgICAgICAgICAgIGZvciAocG9zaXRpb24gaW4gZHJvcHMpIHtcbiAgICAgICAgICAgICAgICBkcm9wID0gZHJvcHNbcG9zaXRpb25dO1xuICAgICAgICAgICAgICAgIGRyb3AuY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRyb3BzW3Bvc2l0aW9uc1tvcGVuSW5kZXhdXS5vcGVuKCk7XG4gICAgICAgICAgICBkcm9wc1twb3NpdGlvbnNbKG9wZW5JbmRleCArIDYpICUgcG9zaXRpb25zLmxlbmd0aF1dLm9wZW4oKTtcbiAgICAgICAgICAgIG9wZW5JbmRleCA9IChvcGVuSW5kZXggKyAxKSAlIHBvc2l0aW9ucy5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoZnJhbWVzID4gNSkge1xuICAgICAgICAgICAgICAgIGZpbmFsRHJvcFN0YXRlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnJhbWVzICs9IDE7XG4gICAgICAgICAgICByZXR1cm4gc2V0VGltZW91dChvcGVuTmV4dERyb3AsIGZyYW1lTGVuZ3RoTVMgKiBmcmFtZXMpO1xuICAgICAgICB9O1xuICAgICAgICBmaW5hbERyb3BTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICQoZHJvcHNbJ3RvcCBsZWZ0J10uZHJvcENvbnRlbnQpLmh0bWwoJ01hcnJ5aW5nIERPTSBlbGVtZW50cyBmb3IgbGlmZS4nKTtcbiAgICAgICAgICAgICQoZHJvcHNbJ2JvdHRvbSByaWdodCddLmRyb3BDb250ZW50KS5odG1sKCc8YSBjbGFzcz1cImJ1dHRvblwiIGhyZWY9XCJodHRwOi8vZ2l0aHViLmNvbS9IdWJTcG90L3RldGhlclwiPuKYhSBPbiBHaXRodWI8L2E+Jyk7XG4gICAgICAgICAgICBkcm9wc1sndG9wIGxlZnQnXS5vcGVuKCk7XG4gICAgICAgICAgICByZXR1cm4gZHJvcHNbJ2JvdHRvbSByaWdodCddLm9wZW4oKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRydWUgfHwgaXNNb2JpbGUpIHtcbiAgICAgICAgICAgIGRyb3BzWyd0b3AgbGVmdCddLm9wZW4oKTtcbiAgICAgICAgICAgIGRyb3BzWyd0b3AgbGVmdCddLnRldGhlci5wb3NpdGlvbigpO1xuICAgICAgICAgICAgZHJvcHNbJ2JvdHRvbSByaWdodCddLm9wZW4oKTtcbiAgICAgICAgICAgIGRyb3BzWydib3R0b20gcmlnaHQnXS50ZXRoZXIucG9zaXRpb24oKTtcbiAgICAgICAgICAgIHJldHVybiBmaW5hbERyb3BTdGF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG9wZW5OZXh0RHJvcCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBzZXR1cEJyb3dzZXJEZW1vID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgJGJyb3dzZXJDb250ZW50cywgJGJyb3dzZXJEZW1vLCAkaWZyYW1lLCAkc2VjdGlvbnMsICRzdGFydFBvaW50LCAkc3RvcFBvaW50LCBzY3JvbGxJbnRlcnZhbCwgc2Nyb2xsVG9wLCBzY3JvbGxUb3BEaXJlY3Rpb24sIHNldFNlY3Rpb247XG4gICAgICAgICRicm93c2VyRGVtbyA9ICQoJy5icm93c2VyLWRlbW8uc2hvd2Nhc2UnKTtcbiAgICAgICAgJHN0YXJ0UG9pbnQgPSAkKCcuYnJvd3Nlci1kZW1vLXN0YXJ0LXBvaW50Jyk7XG4gICAgICAgICRzdG9wUG9pbnQgPSAkKCcuYnJvd3Nlci1kZW1vLXN0b3AtcG9pbnQnKTtcbiAgICAgICAgJGlmcmFtZSA9ICQoJy5icm93c2VyLXdpbmRvdyBpZnJhbWUnKTtcbiAgICAgICAgJGJyb3dzZXJDb250ZW50cyA9ICQoJy5icm93c2VyLWNvbnRlbnQgLmJyb3dzZXItZGVtby1pbm5lcicpO1xuICAgICAgICAkc2VjdGlvbnMgPSAkKCcuYnJvd3Nlci1kZW1vLXNlY3Rpb24nKTtcbiAgICAgICAgJCgnYm9keScpLmFwcGVuZChcIjxzdHlsZT5cXG4gICAgdGFibGUuc2hvd2Nhc2UuYnJvd3Nlci1kZW1vLmZpeGVkLWJvdHRvbSB7XFxuICAgICAgICB0b3A6IFwiICsgJHNlY3Rpb25zLmxlbmd0aCArIFwiMDAlXFxuICAgIH1cXG48L3N0eWxlPlwiKTtcbiAgICAgICAgJCh3aW5kb3cpLnNjcm9sbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc2Nyb2xsVG9wO1xuICAgICAgICAgICAgc2Nyb2xsVG9wID0gJCh3aW5kb3cpLnNjcm9sbFRvcCgpO1xuICAgICAgICAgICAgaWYgKCRzdGFydFBvaW50LnBvc2l0aW9uKCkudG9wIDwgc2Nyb2xsVG9wICYmIHNjcm9sbFRvcCArIHdpbmRvdy5pbm5lckhlaWdodCA8ICRzdG9wUG9pbnQucG9zaXRpb24oKS50b3ApIHtcbiAgICAgICAgICAgICAgICAkYnJvd3NlckRlbW8ucmVtb3ZlQ2xhc3MoJ2ZpeGVkLWJvdHRvbScpO1xuICAgICAgICAgICAgICAgICRicm93c2VyRGVtby5hZGRDbGFzcygnZml4ZWQnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gJHNlY3Rpb25zLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgJHNlY3Rpb247XG4gICAgICAgICAgICAgICAgICAgICRzZWN0aW9uID0gJCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCgkc2VjdGlvbi5wb3NpdGlvbigpLnRvcCA8IHNjcm9sbFRvcCAmJiBzY3JvbGxUb3AgPCAkc2VjdGlvbi5wb3NpdGlvbigpLnRvcCArICRzZWN0aW9uLm91dGVySGVpZ2h0KCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRTZWN0aW9uKCRzZWN0aW9uLmRhdGEoJ3NlY3Rpb24nKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAkYnJvd3NlckRlbW8ucmVtb3ZlQXR0cignZGF0YS1zZWN0aW9uJyk7XG4gICAgICAgICAgICAgICAgJGJyb3dzZXJEZW1vLnJlbW92ZUNsYXNzKCdmaXhlZCcpO1xuICAgICAgICAgICAgICAgIGlmIChzY3JvbGxUb3AgKyB3aW5kb3cuaW5uZXJIZWlnaHQgPiAkc3RvcFBvaW50LnBvc2l0aW9uKCkudG9wKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkYnJvd3NlckRlbW8uYWRkQ2xhc3MoJ2ZpeGVkLWJvdHRvbScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRicm93c2VyRGVtby5yZW1vdmVDbGFzcygnZml4ZWQtYm90dG9tJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgJGlmcmFtZS5sb2FkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciAkaXRlbXMsIGlmcmFtZVdpbmRvdztcbiAgICAgICAgICAgIGlmcmFtZVdpbmRvdyA9ICRpZnJhbWVbMF0uY29udGVudFdpbmRvdztcbiAgICAgICAgICAgICRpdGVtcyA9ICRpZnJhbWUuY29udGVudHMoKS5maW5kKCcuaXRlbScpO1xuICAgICAgICAgICAgcmV0dXJuICRpdGVtcy5lYWNoKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICAgICAgdmFyICRpdGVtLCBkcm9wLCBfaWZyYW1lV2luZG93RHJvcDtcbiAgICAgICAgICAgICAgICAkaXRlbSA9ICQodGhpcyk7XG4gICAgICAgICAgICAgICAgX2lmcmFtZVdpbmRvd0Ryb3AgPSBpZnJhbWVXaW5kb3cuRHJvcC5jcmVhdGVDb250ZXh0KHtcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NQcmVmaXg6ICd0ZXRoZXInXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZHJvcCA9IG5ldyBfaWZyYW1lV2luZG93RHJvcCh7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogJGl0ZW1bMF0sXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzZXM6ICd0ZXRoZXItdGhlbWUtYXJyb3dzLWRhcmsnLFxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3JpZ2h0IHRvcCcsXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cmFpblRvV2luZG93OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBvcGVuT246ICdjbGljaycsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICc8dWw+XFxuICAgIDxsaT5BY3Rpb24mbmJzcDsxPC9saT5cXG4gICAgPGxpPkFjdGlvbiZuYnNwOzI8L2xpPlxcbiAgICA8bGk+QWN0aW9uJm5ic3A7MzwvbGk+XFxuPC91bD4nXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICRpdGVtLmRhdGEoJ2Ryb3AnLCBkcm9wKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgc2Nyb2xsSW50ZXJ2YWwgPSB2b2lkIDA7XG4gICAgICAgIHNjcm9sbFRvcCA9IDA7XG4gICAgICAgIHNjcm9sbFRvcERpcmVjdGlvbiA9IDE7XG4gICAgICAgIHJldHVybiBzZXRTZWN0aW9uID0gZnVuY3Rpb24gKHNlY3Rpb24pIHtcbiAgICAgICAgICAgIHZhciBjbG9zZUFsbEl0ZW1zLCBvcGVuRXhhbXBsZUl0ZW0sIHNjcm9sbExlZnRTZWN0aW9uLCBzdG9wU2Nyb2xsaW5nTGVmdFNlY3Rpb247XG4gICAgICAgICAgICAkYnJvd3NlckRlbW8uYXR0cignZGF0YS1zZWN0aW9uJywgc2VjdGlvbik7XG4gICAgICAgICAgICAkKCcuc2VjdGlvbi1jb3B5JykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgJChcIi5zZWN0aW9uLWNvcHlbZGF0YS1zZWN0aW9uPVxcXCJcIiArIHNlY3Rpb24gKyBcIlxcXCJdXCIpLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgIG9wZW5FeGFtcGxlSXRlbSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNNb2JpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRpZnJhbWUuY29udGVudHMoKS5maW5kKCcuaXRlbTpmaXJzdCcpLmRhdGEoKS5kcm9wLm9wZW4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkaWZyYW1lLmNvbnRlbnRzKCkuZmluZCgnLml0ZW06ZXEoMiknKS5kYXRhKCkuZHJvcC5vcGVuKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNsb3NlQWxsSXRlbXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICRpZnJhbWUuY29udGVudHMoKS5maW5kKCcuaXRlbScpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCh0aGlzKS5kYXRhKCkuZHJvcC5jbG9zZSgpIHx8IHRydWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc2Nyb2xsTGVmdFNlY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjcm9sbEludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAkaWZyYW1lLmNvbnRlbnRzKCkuZmluZCgnLmxlZnQnKS5zY3JvbGxUb3Aoc2Nyb2xsVG9wKTtcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9wICs9IHNjcm9sbFRvcERpcmVjdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNjcm9sbFRvcCA+IDUwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxUb3BEaXJlY3Rpb24gPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoc2Nyb2xsVG9wIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjcm9sbFRvcERpcmVjdGlvbiA9IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCAzMCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc3RvcFNjcm9sbGluZ0xlZnRTZWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjbGVhckludGVydmFsKHNjcm9sbEludGVydmFsKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzd2l0Y2ggKHNlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBjYXNlICd3aGF0JzpcbiAgICAgICAgICAgICAgICAgICAgY2xvc2VBbGxJdGVtcygpO1xuICAgICAgICAgICAgICAgICAgICBvcGVuRXhhbXBsZUl0ZW0oKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0b3BTY3JvbGxpbmdMZWZ0U2VjdGlvbigpO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2hvdyc6XG4gICAgICAgICAgICAgICAgICAgIGNsb3NlQWxsSXRlbXMoKTtcbiAgICAgICAgICAgICAgICAgICAgb3BlbkV4YW1wbGVJdGVtKCk7XG4gICAgICAgICAgICAgICAgICAgIHN0b3BTY3JvbGxpbmdMZWZ0U2VjdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2Nyb2xsTGVmdFNlY3Rpb24oKTtcbiAgICAgICAgICAgICAgICBjYXNlICd3aHknOlxuICAgICAgICAgICAgICAgICAgICBjbG9zZUFsbEl0ZW1zKCk7XG4gICAgICAgICAgICAgICAgICAgIG9wZW5FeGFtcGxlSXRlbSgpO1xuICAgICAgICAgICAgICAgICAgICBzdG9wU2Nyb2xsaW5nTGVmdFNlY3Rpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjcm9sbExlZnRTZWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgY2FzZSAnb3V0cm8nOlxuICAgICAgICAgICAgICAgICAgICBjbG9zZUFsbEl0ZW1zKCk7XG4gICAgICAgICAgICAgICAgICAgIG9wZW5FeGFtcGxlSXRlbSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RvcFNjcm9sbGluZ0xlZnRTZWN0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBpbml0KCk7XG59KS5jYWxsKHRoaXMpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGY4O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZDNkeTl3WVdOcmN5OTBaWFJvWlhJdlpHOWpjeTkzWld4amIyMWxMMnB6TDNkbGJHTnZiV1V1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNRMEZCUXp0SlFVTkRMRWxCUVVrc1NVRkJTU3hGUVVGRkxGRkJRVkVzUlVGQlJTeG5Ra0ZCWjBJc1JVRkJSU3hUUVVGVExFVkJRVVVzUzBGQlN5eERRVUZETzBsQlJYWkVMRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETzFGQlEzcENMRmRCUVZjc1JVRkJSU3hSUVVGUk8wdEJRM1JDTEVOQlFVTXNRMEZCUXp0SlFVVklMRkZCUVZFc1IwRkJSeXhEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNTMEZCU3l4RlFVRkZMRWRCUVVjc1IwRkJSeXhEUVVGRE8wbEJSVzVETEVsQlFVa3NSMEZCUnp0UlFVTk1MRk5CUVZNc1JVRkJSU3hEUVVGRE8xRkJRMW9zVFVGQlRTeERRVUZETEdkQ1FVRm5RaXhGUVVGRkxFTkJRVU03U1VGRE5VSXNRMEZCUXl4RFFVRkRPMGxCUlVZc1UwRkJVeXhIUVVGSE8xRkJRMVlzU1VGQlNTeFBRVUZQTEVWQlFVVXNZMEZCWXl4RlFVRkZMR0ZCUVdFc1JVRkJSU3hOUVVGTkxFVkJRVVVzV1VGQldTeEZRVUZGTEZOQlFWTXNSVUZCUlN4WlFVRlpMRVZCUVVVc1VVRkJVU3hGUVVGRkxGTkJRVk1zUlVGQlJTeEZRVUZGTEVWQlFVVXNTVUZCU1N4RFFVRkRPMUZCUTNwSUxFOUJRVThzUjBGQlJ5eERRVUZETEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zUTBGQlF6dFJRVU51UXl4VFFVRlRMRWRCUVVjc1EwRkJReXhWUVVGVkxFVkJRVVVzVlVGQlZTeEZRVUZGTEdGQlFXRXNSVUZCUlN4aFFVRmhMRVZCUVVVc1lVRkJZU3hGUVVGRkxHVkJRV1VzUlVGQlJTeGpRVUZqTEVWQlFVVXNZMEZCWXl4RlFVRkZMR05CUVdNc1JVRkJSU3hYUVVGWExFVkJRVVVzVjBGQlZ5eEZRVUZGTEZsQlFWa3NRMEZCUXl4RFFVRkRPMUZCUXpOTUxFVkJRVVVzUTBGQlF5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRZaXhUUVVGVExFZEJRVWNzUTBGQlF5eFZRVUZWTEVWQlFVVXNZVUZCWVN4RlFVRkZMR05CUVdNc1JVRkJSU3hYUVVGWExFTkJRVU1zUTBGQlF6dFJRVU4yUlN4RFFVRkRPMUZCUTBRc1RVRkJUU3hEUVVGRExFdEJRVXNzUjBGQlJ5eEZRVUZGTEVOQlFVTTdVVUZEYkVJc1IwRkJSeXhEUVVGRExFTkJRVU1zUlVGQlJTeEhRVUZITEVOQlFVTXNSVUZCUlN4SlFVRkpMRWRCUVVjc1UwRkJVeXhEUVVGRExFMUJRVTBzUlVGQlJTeEZRVUZGTEVkQlFVY3NTVUZCU1N4RlFVRkZMRVZCUVVVc1JVRkJSU3hGUVVGRkxFTkJRVU03V1VGRGRFUXNVVUZCVVN4SFFVRkhMRk5CUVZNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dFpRVU42UWl4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExFZEJRVWNzU1VGQlNTeExRVUZMTEVOQlFVTTdaMEpCUXpGQ0xFMUJRVTBzUlVGQlJTeFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVOc1FpeFBRVUZQTEVWQlFVVXNNRUpCUVRCQ08yZENRVU51UXl4UlFVRlJMRVZCUVVVc1VVRkJVVHRuUWtGRGJFSXNhVUpCUVdsQ0xFVkJRVVVzUzBGQlN6dG5Ra0ZEZUVJc1RVRkJUU3hGUVVGRkxFVkJRVVU3WjBKQlExWXNUMEZCVHl4RlFVRkZMQ3REUVVFclF6dGhRVU42UkN4RFFVRkRMRU5CUVVNN1VVRkRUQ3hEUVVGRE8xRkJRMFFzVTBGQlV5eEhRVUZITEVOQlFVTXNRMEZCUXp0UlFVTmtMRTFCUVUwc1IwRkJSeXhEUVVGRExFTkJRVU03VVVGRFdDeGhRVUZoTEVkQlFVY3NSVUZCUlN4RFFVRkRPMUZCUTI1Q0xGbEJRVmtzUjBGQlJ6dFpRVU5pTEVsQlFVa3NTVUZCU1N4RlFVRkZMRkZCUVZFc1EwRkJRenRaUVVOdVFpeFJRVUZSTEVkQlFVY3NSVUZCUlN4RFFVRkRPMWxCUTJRc1IwRkJSeXhEUVVGRExFTkJRVU1zVVVGQlVTeEpRVUZKTEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRM1pDTEVsQlFVa3NSMEZCUnl4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03WjBKQlEzWkNMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRMRU5CUVVNN1dVRkROMElzUTBGQlF6dFpRVU5FTEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNN1VVRkRiRUlzUTBGQlF5eERRVUZETzFGQlEwWXNXVUZCV1N4SFFVRkhPMWxCUTJJc1NVRkJTU3hKUVVGSkxFTkJRVU03V1VGRFZDeEhRVUZITEVOQlFVTXNRMEZCUXl4UlFVRlJMRWxCUVVrc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF6dG5Ra0ZEZGtJc1NVRkJTU3hIUVVGSExFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0blFrRkRka0lzU1VGQlNTeERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRPMWxCUTJZc1EwRkJRenRaUVVORUxFdEJRVXNzUTBGQlF5eFRRVUZUTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF6dFpRVU51UXl4TFFVRkxMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU1zVTBGQlV5eEhRVUZITEVOQlFVTXNRMEZCUXl4SFFVRkhMRk5CUVZNc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRPMWxCUXpWRUxGTkJRVk1zUjBGQlJ5eERRVUZETEZOQlFWTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1IwRkJSeXhUUVVGVExFTkJRVU1zVFVGQlRTeERRVUZETzFsQlF5OURMRVZCUVVVc1EwRkJReXhEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVObUxHTkJRV01zUlVGQlJTeERRVUZETzJkQ1FVTnFRaXhOUVVGTkxFTkJRVU03V1VGRFZDeERRVUZETzFsQlEwUXNUVUZCVFN4SlFVRkpMRU5CUVVNc1EwRkJRenRaUVVOYUxFMUJRVTBzUTBGQlF5eFZRVUZWTEVOQlFVTXNXVUZCV1N4RlFVRkZMR0ZCUVdFc1IwRkJSeXhOUVVGTkxFTkJRVU1zUTBGQlF6dFJRVU14UkN4RFFVRkRMRU5CUVVNN1VVRkRSaXhqUVVGakxFZEJRVWM3V1VGRFppeERRVUZETEVOQlFVTXNTMEZCU3l4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4cFEwRkJhVU1zUTBGQlF5eERRVUZETzFsQlEzcEZMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExESkZRVUV5UlN4RFFVRkRMRU5CUVVNN1dVRkRka2dzUzBGQlN5eERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRE8xbEJRM3BDTEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTTdVVUZEZEVNc1EwRkJReXhEUVVGRE8xRkJRMFlzUlVGQlJTeERRVUZETEVOQlFVTXNTVUZCU1N4SlFVRkpMRkZCUVZFc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRGNrSXNTMEZCU3l4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETzFsQlEzcENMRXRCUVVzc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlFVTXNVVUZCVVN4RlFVRkZMRU5CUVVNN1dVRkRjRU1zUzBGQlN5eERRVUZETEdOQlFXTXNRMEZCUXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRE8xbEJRemRDTEV0QlFVc3NRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTTdXVUZEZUVNc1RVRkJUU3hEUVVGRExHTkJRV01zUlVGQlJTeERRVUZETzFGQlF6RkNMRU5CUVVNN1VVRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFpRVU5PTEUxQlFVMHNRMEZCUXl4WlFVRlpMRVZCUVVVc1EwRkJRenRSUVVONFFpeERRVUZETzBsQlEwZ3NRMEZCUXl4RFFVRkRPMGxCUlVZc1owSkJRV2RDTEVkQlFVYzdVVUZEYWtJc1NVRkJTU3huUWtGQlowSXNSVUZCUlN4WlFVRlpMRVZCUVVVc1QwRkJUeXhGUVVGRkxGTkJRVk1zUlVGQlJTeFhRVUZYTEVWQlFVVXNWVUZCVlN4RlFVRkZMR05CUVdNc1JVRkJSU3hUUVVGVExFVkJRVVVzYTBKQlFXdENMRVZCUVVVc1ZVRkJWU3hEUVVGRE8xRkJRek5KTEZsQlFWa3NSMEZCUnl4RFFVRkRMRU5CUVVNc2QwSkJRWGRDTEVOQlFVTXNRMEZCUXp0UlFVTXpReXhYUVVGWExFZEJRVWNzUTBGQlF5eERRVUZETERKQ1FVRXlRaXhEUVVGRExFTkJRVU03VVVGRE4wTXNWVUZCVlN4SFFVRkhMRU5CUVVNc1EwRkJReXd3UWtGQk1FSXNRMEZCUXl4RFFVRkRPMUZCUXpORExFOUJRVThzUjBGQlJ5eERRVUZETEVOQlFVTXNkMEpCUVhkQ0xFTkJRVU1zUTBGQlF6dFJRVU4wUXl4blFrRkJaMElzUjBGQlJ5eERRVUZETEVOQlFVTXNjME5CUVhORExFTkJRVU1zUTBGQlF6dFJRVU0zUkN4VFFVRlRMRWRCUVVjc1EwRkJReXhEUVVGRExIVkNRVUYxUWl4RFFVRkRMRU5CUVVNN1VVRkRka01zUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXgzUlVGQmQwVXNSMEZCUnl4VFFVRlRMRU5CUVVNc1RVRkJUU3hIUVVGSExITkNRVUZ6UWl4RFFVRkRMRU5CUVVNN1VVRkRka2tzUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJRenRaUVVObUxFbEJRVWtzVTBGQlV5eERRVUZETzFsQlEyUXNVMEZCVXl4SFFVRkhMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eFRRVUZUTEVWQlFVVXNRMEZCUXp0WlFVTnNReXhGUVVGRkxFTkJRVU1zUTBGQlF5eFhRVUZYTEVOQlFVTXNVVUZCVVN4RlFVRkZMRU5CUVVNc1IwRkJSeXhIUVVGSExGTkJRVk1zU1VGQlNTeFRRVUZUTEVkQlFVY3NUVUZCVFN4RFFVRkRMRmRCUVZjc1IwRkJSeXhWUVVGVkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRenRuUWtGRGVrY3NXVUZCV1N4RFFVRkRMRmRCUVZjc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF6dG5Ra0ZEZWtNc1dVRkJXU3hEUVVGRExGRkJRVkVzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXp0blFrRkRMMElzVFVGQlRTeERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNN2IwSkJRM0JDTEVsQlFVa3NVVUZCVVN4RFFVRkRPMjlDUVVOaUxGRkJRVkVzUjBGQlJ5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN2IwSkJRMjVDTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1VVRkJVU3hEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZETEVkQlFVY3NSMEZCUnl4VFFVRlRMRWxCUVVrc1UwRkJVeXhIUVVGSExGRkJRVkVzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXl4SFFVRkhMRWRCUVVjc1VVRkJVU3hEUVVGRExGZEJRVmNzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPM2RDUVVNeFJ5eFZRVUZWTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF5eERRVUZETzI5Q1FVTjJReXhEUVVGRE8yOUNRVU5FTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNN1owSkJRMlFzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEVEN4RFFVRkRPMWxCUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03WjBKQlEwNHNXVUZCV1N4RFFVRkRMRlZCUVZVc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF6dG5Ra0ZEZUVNc1dVRkJXU3hEUVVGRExGZEJRVmNzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXp0blFrRkRiRU1zUlVGQlJTeERRVUZETEVOQlFVTXNVMEZCVXl4SFFVRkhMRTFCUVUwc1EwRkJReXhYUVVGWExFZEJRVWNzVlVGQlZTeERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU03YjBKQlF5OUVMRTFCUVUwc1EwRkJReXhaUVVGWkxFTkJRVU1zVVVGQlVTeERRVUZETEdOQlFXTXNRMEZCUXl4RFFVRkRPMmRDUVVNdlF5eERRVUZETzJkQ1FVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8yOUNRVU5PTEUxQlFVMHNRMEZCUXl4WlFVRlpMRU5CUVVNc1YwRkJWeXhEUVVGRExHTkJRV01zUTBGQlF5eERRVUZETzJkQ1FVTnNSQ3hEUVVGRE8xbEJRMGdzUTBGQlF6dFJRVU5JTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTBnc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF6dFpRVU5ZTEVsQlFVa3NUVUZCVFN4RlFVRkZMRmxCUVZrc1EwRkJRenRaUVVONlFpeFpRVUZaTEVkQlFVY3NUMEZCVHl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExHRkJRV0VzUTBGQlF6dFpRVU40UXl4TlFVRk5MRWRCUVVjc1QwRkJUeXhEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRenRaUVVNeFF5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVExFTkJRVU03WjBKQlF6TkNMRWxCUVVrc1MwRkJTeXhGUVVGRkxFbEJRVWtzUlVGQlJTeHBRa0ZCYVVJc1EwRkJRenRuUWtGRGJrTXNTMEZCU3l4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dG5Ra0ZEYUVJc2FVSkJRV2xDTEVkQlFVY3NXVUZCV1N4RFFVRkRMRWxCUVVrc1EwRkJReXhoUVVGaExFTkJRVU03YjBKQlEyeEVMRmRCUVZjc1JVRkJSU3hSUVVGUk8ybENRVU4wUWl4RFFVRkRMRU5CUVVNN1owSkJRMGdzU1VGQlNTeEhRVUZITEVsQlFVa3NhVUpCUVdsQ0xFTkJRVU03YjBKQlF6TkNMRTFCUVUwc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETzI5Q1FVTm9RaXhQUVVGUExFVkJRVVVzTUVKQlFUQkNPMjlDUVVOdVF5eFJRVUZSTEVWQlFVVXNWMEZCVnp0dlFrRkRja0lzYVVKQlFXbENMRVZCUVVVc1NVRkJTVHR2UWtGRGRrSXNUVUZCVFN4RlFVRkZMRTlCUVU4N2IwSkJRMllzVDBGQlR5eEZRVUZGTEdsSFFVRnBSenRwUWtGRE0wY3NRMEZCUXl4RFFVRkRPMmRDUVVOSUxFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF6dFpRVU5zUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOTUxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEwZ3NZMEZCWXl4SFFVRkhMRXRCUVVzc1EwRkJReXhEUVVGRE8xRkJRM2hDTEZOQlFWTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1VVRkRaQ3hyUWtGQmEwSXNSMEZCUnl4RFFVRkRMRU5CUVVNN1VVRkRka0lzVFVGQlRTeERRVUZETEZWQlFWVXNSMEZCUnl4VlFVRlRMRTlCUVU4N1dVRkRiRU1zU1VGQlNTeGhRVUZoTEVWQlFVVXNaVUZCWlN4RlFVRkZMR2xDUVVGcFFpeEZRVUZGTEhkQ1FVRjNRaXhEUVVGRE8xbEJRMmhHTEZsQlFWa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1kwRkJZeXhGUVVGRkxFOUJRVThzUTBGQlF5eERRVUZETzFsQlF6TkRMRU5CUVVNc1EwRkJReXhsUVVGbExFTkJRVU1zUTBGQlF5eFhRVUZYTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1dVRkRla01zUTBGQlF5eERRVUZETEN0Q1FVRXJRaXhIUVVGSExFOUJRVThzUjBGQlJ5eExRVUZMTEVOQlFVTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03V1VGRGVFVXNaVUZCWlN4SFFVRkhPMmRDUVVOb1FpeEZRVUZGTEVOQlFVTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRE8yOUNRVU5pTEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1VVRkJVU3hGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXp0blFrRkRia1VzUTBGQlF6dG5Ra0ZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenR2UWtGRFRpeE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRkZCUVZFc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTTdaMEpCUTI1RkxFTkJRVU03V1VGRFNDeERRVUZETEVOQlFVTTdXVUZEUml4aFFVRmhMRWRCUVVjN1owSkJRMlFzVFVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRPMjlDUVVNelF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUVVVc1NVRkJTU3hKUVVGSkxFTkJRVU03WjBKQlF6ZERMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRMHdzUTBGQlF5eERRVUZETzFsQlEwWXNhVUpCUVdsQ0xFZEJRVWM3WjBKQlEyeENMRTFCUVUwc1EwRkJReXhqUVVGakxFZEJRVWNzVjBGQlZ5eERRVUZETzI5Q1FVTnNReXhQUVVGUExFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExGTkJRVk1zUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXp0dlFrRkRkRVFzVTBGQlV5eEpRVUZKTEd0Q1FVRnJRaXhEUVVGRE8yOUNRVU5vUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhUUVVGVExFZEJRVWNzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0M1FrRkRia0lzYTBKQlFXdENMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU03YjBKQlF6RkNMRU5CUVVNN2IwSkJRMFFzUlVGQlJTeERRVUZETEVOQlFVTXNVMEZCVXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03ZDBKQlEyeENMRTFCUVUwc1EwRkJReXhyUWtGQmEwSXNSMEZCUnl4RFFVRkRMRU5CUVVNN2IwSkJRMmhETEVOQlFVTTdaMEpCUTBnc1EwRkJReXhGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETzFsQlExUXNRMEZCUXl4RFFVRkRPMWxCUTBZc2QwSkJRWGRDTEVkQlFVYzdaMEpCUTNwQ0xFMUJRVTBzUTBGQlF5eGhRVUZoTEVOQlFVTXNZMEZCWXl4RFFVRkRMRU5CUVVNN1dVRkRka01zUTBGQlF5eERRVUZETzFsQlEwWXNUVUZCVFN4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF6dG5Ra0ZEYUVJc1MwRkJTeXhOUVVGTk8yOUNRVU5VTEdGQlFXRXNSVUZCUlN4RFFVRkRPMjlDUVVOb1FpeGxRVUZsTEVWQlFVVXNRMEZCUXp0dlFrRkRiRUlzVFVGQlRTeERRVUZETEhkQ1FVRjNRaXhGUVVGRkxFTkJRVU03WjBKQlEzQkRMRXRCUVVzc1MwRkJTenR2UWtGRFVpeGhRVUZoTEVWQlFVVXNRMEZCUXp0dlFrRkRhRUlzWlVGQlpTeEZRVUZGTEVOQlFVTTdiMEpCUTJ4Q0xIZENRVUYzUWl4RlFVRkZMRU5CUVVNN2IwSkJRek5DTEUxQlFVMHNRMEZCUXl4cFFrRkJhVUlzUlVGQlJTeERRVUZETzJkQ1FVTTNRaXhMUVVGTExFdEJRVXM3YjBKQlExSXNZVUZCWVN4RlFVRkZMRU5CUVVNN2IwSkJRMmhDTEdWQlFXVXNSVUZCUlN4RFFVRkRPMjlDUVVOc1FpeDNRa0ZCZDBJc1JVRkJSU3hEUVVGRE8yOUNRVU16UWl4TlFVRk5MRU5CUVVNc2FVSkJRV2xDTEVWQlFVVXNRMEZCUXp0blFrRkROMElzUzBGQlN5eFBRVUZQTzI5Q1FVTldMR0ZCUVdFc1JVRkJSU3hEUVVGRE8yOUNRVU5vUWl4bFFVRmxMRVZCUVVVc1EwRkJRenR2UWtGRGJFSXNUVUZCVFN4RFFVRkRMSGRDUVVGM1FpeEZRVUZGTEVOQlFVTTdXVUZEZEVNc1EwRkJRenRSUVVOSUxFTkJRVU1zUTBGQlF6dEpRVU5LTEVOQlFVTXNRMEZCUXp0SlFVVkdMRWxCUVVrc1JVRkJSU3hEUVVGRE8wRkJSVlFzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRElpd2labWxzWlNJNkluZDNkeTl3WVdOcmN5OTBaWFJvWlhJdlpHOWpjeTkzWld4amIyMWxMMnB6TDNkbGJHTnZiV1V1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SW9ablZ1WTNScGIyNG9LU0I3WEc0Z0lIWmhjaUJwYm1sMExDQnBjMDF2WW1sc1pTd2djMlYwZFhCQ2NtOTNjMlZ5UkdWdGJ5d2djMlYwZFhCSVpYSnZMQ0JmUkhKdmNEdGNibHh1SUNCZlJISnZjQ0E5SUVSeWIzQXVZM0psWVhSbFEyOXVkR1Y0ZENoN1hHNGdJQ0FnWTJ4aGMzTlFjbVZtYVhnNklDZDBaWFJvWlhJblhHNGdJSDBwTzF4dVhHNGdJR2x6VFc5aWFXeGxJRDBnSkNoM2FXNWtiM2NwTG5kcFpIUm9LQ2tnUENBMU5qYzdYRzVjYmlBZ2FXNXBkQ0E5SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUhObGRIVndTR1Z5YnlncE8xeHVJQ0FnSUhKbGRIVnliaUJ6WlhSMWNFSnliM2R6WlhKRVpXMXZLQ2s3WEc0Z0lIMDdYRzVjYmlBZ2MyVjBkWEJJWlhKdklEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdkbUZ5SUNSMFlYSm5aWFFzSUdacGJtRnNSSEp2Y0ZOMFlYUmxMQ0JtY21GdFpVeGxibWQwYUUxVExDQm1jbUZ0WlhNc0lHOXdaVzVCYkd4RWNtOXdjeXdnYjNCbGJrbHVaR1Y0TENCdmNHVnVUbVY0ZEVSeWIzQXNJSEJ2YzJsMGFXOXVMQ0J3YjNOcGRHbHZibk1zSUY5cExDQmZiR1Z1TzF4dUlDQWdJQ1IwWVhKblpYUWdQU0FrS0NjdWRHVjBhR1Z5TFhSaGNtZGxkQzFrWlcxdkp5azdYRzRnSUNBZ2NHOXphWFJwYjI1eklEMGdXeWQwYjNBZ2JHVm1kQ2NzSUNkc1pXWjBJSFJ2Y0Njc0lDZHNaV1owSUcxcFpHUnNaU2NzSUNkc1pXWjBJR0p2ZEhSdmJTY3NJQ2RpYjNSMGIyMGdiR1ZtZENjc0lDZGliM1IwYjIwZ1kyVnVkR1Z5Snl3Z0oySnZkSFJ2YlNCeWFXZG9kQ2NzSUNkeWFXZG9kQ0JpYjNSMGIyMG5MQ0FuY21sbmFIUWdiV2xrWkd4bEp5d2dKM0pwWjJoMElIUnZjQ2NzSUNkMGIzQWdjbWxuYUhRbkxDQW5kRzl3SUdObGJuUmxjaWRkTzF4dUlDQWdJR2xtSUNocGMwMXZZbWxzWlNrZ2UxeHVJQ0FnSUNBZ2NHOXphWFJwYjI1eklEMGdXeWQwYjNBZ2JHVm1kQ2NzSUNkaWIzUjBiMjBnYkdWbWRDY3NJQ2RpYjNSMGIyMGdjbWxuYUhRbkxDQW5kRzl3SUhKcFoyaDBKMTA3WEc0Z0lDQWdmVnh1SUNBZ0lIZHBibVJ2ZHk1a2NtOXdjeUE5SUh0OU8xeHVJQ0FnSUdadmNpQW9YMmtnUFNBd0xDQmZiR1Z1SUQwZ2NHOXphWFJwYjI1ekxteGxibWQwYURzZ1gya2dQQ0JmYkdWdU95QmZhU3NyS1NCN1hHNGdJQ0FnSUNCd2IzTnBkR2x2YmlBOUlIQnZjMmwwYVc5dWMxdGZhVjA3WEc0Z0lDQWdJQ0JrY205d2MxdHdiM05wZEdsdmJsMGdQU0J1WlhjZ1gwUnliM0FvZTF4dUlDQWdJQ0FnSUNCMFlYSm5aWFE2SUNSMFlYSm5aWFJiTUYwc1hHNGdJQ0FnSUNBZ0lHTnNZWE56WlhNNklDZDBaWFJvWlhJdGRHaGxiV1V0WVhKeWIzZHpMV1JoY21zbkxGeHVJQ0FnSUNBZ0lDQndiM05wZEdsdmJqb2djRzl6YVhScGIyNHNYRzRnSUNBZ0lDQWdJR052Ym5OMGNtRnBibFJ2VjJsdVpHOTNPaUJtWVd4elpTeGNiaUFnSUNBZ0lDQWdiM0JsYms5dU9pQW5KeXhjYmlBZ0lDQWdJQ0FnWTI5dWRHVnVkRG9nSnp4a2FYWWdjM1I1YkdVOVhDSm9aV2xuYUhRNklEVXdjSGc3SUhkcFpIUm9PaUExTUhCNFhDSStQQzlrYVhZK0oxeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZWeHVJQ0FnSUc5d1pXNUpibVJsZUNBOUlEQTdYRzRnSUNBZ1puSmhiV1Z6SUQwZ01EdGNiaUFnSUNCbWNtRnRaVXhsYm1kMGFFMVRJRDBnTVRBN1hHNGdJQ0FnYjNCbGJrRnNiRVJ5YjNCeklEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0IyWVhJZ1pISnZjQ3dnWDNKbGMzVnNkSE03WEc0Z0lDQWdJQ0JmY21WemRXeDBjeUE5SUZ0ZE8xeHVJQ0FnSUNBZ1ptOXlJQ2h3YjNOcGRHbHZiaUJwYmlCa2NtOXdjeWtnZTF4dUlDQWdJQ0FnSUNCa2NtOXdJRDBnWkhKdmNITmJjRzl6YVhScGIyNWRPMXh1SUNBZ0lDQWdJQ0JmY21WemRXeDBjeTV3ZFhOb0tHUnliM0F1YjNCbGJpZ3BLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSEpsZEhWeWJpQmZjbVZ6ZFd4MGN6dGNiaUFnSUNCOU8xeHVJQ0FnSUc5d1pXNU9aWGgwUkhKdmNDQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnZG1GeUlHUnliM0E3WEc0Z0lDQWdJQ0JtYjNJZ0tIQnZjMmwwYVc5dUlHbHVJR1J5YjNCektTQjdYRzRnSUNBZ0lDQWdJR1J5YjNBZ1BTQmtjbTl3YzF0d2IzTnBkR2x2YmwwN1hHNGdJQ0FnSUNBZ0lHUnliM0F1WTJ4dmMyVW9LVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR1J5YjNCelczQnZjMmwwYVc5dWMxdHZjR1Z1U1c1a1pYaGRYUzV2Y0dWdUtDazdYRzRnSUNBZ0lDQmtjbTl3YzF0d2IzTnBkR2x2Ym5OYktHOXdaVzVKYm1SbGVDQXJJRFlwSUNVZ2NHOXphWFJwYjI1ekxteGxibWQwYUYxZExtOXdaVzRvS1R0Y2JpQWdJQ0FnSUc5d1pXNUpibVJsZUNBOUlDaHZjR1Z1U1c1a1pYZ2dLeUF4S1NBbElIQnZjMmwwYVc5dWN5NXNaVzVuZEdnN1hHNGdJQ0FnSUNCcFppQW9abkpoYldWeklENGdOU2tnZTF4dUlDQWdJQ0FnSUNCbWFXNWhiRVJ5YjNCVGRHRjBaU2dwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JtY21GdFpYTWdLejBnTVR0Y2JpQWdJQ0FnSUhKbGRIVnliaUJ6WlhSVWFXMWxiM1YwS0c5d1pXNU9aWGgwUkhKdmNDd2dabkpoYldWTVpXNW5kR2hOVXlBcUlHWnlZVzFsY3lrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JtYVc1aGJFUnliM0JUZEdGMFpTQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSkNoa2NtOXdjMXNuZEc5d0lHeGxablFuWFM1a2NtOXdRMjl1ZEdWdWRDa3VhSFJ0YkNnblRXRnljbmxwYm1jZ1JFOU5JR1ZzWlcxbGJuUnpJR1p2Y2lCc2FXWmxMaWNwTzF4dUlDQWdJQ0FnSkNoa2NtOXdjMXNuWW05MGRHOXRJSEpwWjJoMEoxMHVaSEp2Y0VOdmJuUmxiblFwTG1oMGJXd29KenhoSUdOc1lYTnpQVndpWW5WMGRHOXVYQ0lnYUhKbFpqMWNJbWgwZEhBNkx5OW5hWFJvZFdJdVkyOXRMMGgxWWxOd2IzUXZkR1YwYUdWeVhDSSs0cGlGSUU5dUlFZHBkR2gxWWp3dllUNG5LVHRjYmlBZ0lDQWdJR1J5YjNCeld5ZDBiM0FnYkdWbWRDZGRMbTl3Wlc0b0tUdGNiaUFnSUNBZ0lISmxkSFZ5YmlCa2NtOXdjMXNuWW05MGRHOXRJSEpwWjJoMEoxMHViM0JsYmlncE8xeHVJQ0FnSUgwN1hHNGdJQ0FnYVdZZ0tIUnlkV1VnZkh3Z2FYTk5iMkpwYkdVcElIdGNiaUFnSUNBZ0lHUnliM0J6V3lkMGIzQWdiR1ZtZENkZExtOXdaVzRvS1R0Y2JpQWdJQ0FnSUdSeWIzQnpXeWQwYjNBZ2JHVm1kQ2RkTG5SbGRHaGxjaTV3YjNOcGRHbHZiaWdwTzF4dUlDQWdJQ0FnWkhKdmNITmJKMkp2ZEhSdmJTQnlhV2RvZENkZExtOXdaVzRvS1R0Y2JpQWdJQ0FnSUdSeWIzQnpXeWRpYjNSMGIyMGdjbWxuYUhRblhTNTBaWFJvWlhJdWNHOXphWFJwYjI0b0tUdGNiaUFnSUNBZ0lISmxkSFZ5YmlCbWFXNWhiRVJ5YjNCVGRHRjBaU2dwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2IzQmxiazVsZUhSRWNtOXdLQ2s3WEc0Z0lDQWdmVnh1SUNCOU8xeHVYRzRnSUhObGRIVndRbkp2ZDNObGNrUmxiVzhnUFNCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNCMllYSWdKR0p5YjNkelpYSkRiMjUwWlc1MGN5d2dKR0p5YjNkelpYSkVaVzF2TENBa2FXWnlZVzFsTENBa2MyVmpkR2x2Ym5Nc0lDUnpkR0Z5ZEZCdmFXNTBMQ0FrYzNSdmNGQnZhVzUwTENCelkzSnZiR3hKYm5SbGNuWmhiQ3dnYzJOeWIyeHNWRzl3TENCelkzSnZiR3hVYjNCRWFYSmxZM1JwYjI0c0lITmxkRk5sWTNScGIyNDdYRzRnSUNBZ0pHSnliM2R6WlhKRVpXMXZJRDBnSkNnbkxtSnliM2R6WlhJdFpHVnRieTV6YUc5M1kyRnpaU2NwTzF4dUlDQWdJQ1J6ZEdGeWRGQnZhVzUwSUQwZ0pDZ25MbUp5YjNkelpYSXRaR1Z0YnkxemRHRnlkQzF3YjJsdWRDY3BPMXh1SUNBZ0lDUnpkRzl3VUc5cGJuUWdQU0FrS0NjdVluSnZkM05sY2kxa1pXMXZMWE4wYjNBdGNHOXBiblFuS1R0Y2JpQWdJQ0FrYVdaeVlXMWxJRDBnSkNnbkxtSnliM2R6WlhJdGQybHVaRzkzSUdsbWNtRnRaU2NwTzF4dUlDQWdJQ1JpY205M2MyVnlRMjl1ZEdWdWRITWdQU0FrS0NjdVluSnZkM05sY2kxamIyNTBaVzUwSUM1aWNtOTNjMlZ5TFdSbGJXOHRhVzV1WlhJbktUdGNiaUFnSUNBa2MyVmpkR2x2Ym5NZ1BTQWtLQ2N1WW5KdmQzTmxjaTFrWlcxdkxYTmxZM1JwYjI0bktUdGNiaUFnSUNBa0tDZGliMlI1SnlrdVlYQndaVzVrS0Z3aVBITjBlV3hsUGx4Y2JpQWdJQ0IwWVdKc1pTNXphRzkzWTJGelpTNWljbTkzYzJWeUxXUmxiVzh1Wm1sNFpXUXRZbTkwZEc5dElIdGNYRzRnSUNBZ0lDQWdJSFJ2Y0RvZ1hDSWdLeUFrYzJWamRHbHZibk11YkdWdVozUm9JQ3NnWENJd01DVmNYRzRnSUNBZ2ZWeGNiand2YzNSNWJHVStYQ0lwTzF4dUlDQWdJQ1FvZDJsdVpHOTNLUzV6WTNKdmJHd29ablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0IyWVhJZ2MyTnliMnhzVkc5d08xeHVJQ0FnSUNBZ2MyTnliMnhzVkc5d0lEMGdKQ2gzYVc1a2IzY3BMbk5qY205c2JGUnZjQ2dwTzF4dUlDQWdJQ0FnYVdZZ0tDUnpkR0Z5ZEZCdmFXNTBMbkJ2YzJsMGFXOXVLQ2t1ZEc5d0lEd2djMk55YjJ4c1ZHOXdJQ1ltSUhOamNtOXNiRlJ2Y0NBcklIZHBibVJ2ZHk1cGJtNWxja2hsYVdkb2RDQThJQ1J6ZEc5d1VHOXBiblF1Y0c5emFYUnBiMjRvS1M1MGIzQXBJSHRjYmlBZ0lDQWdJQ0FnSkdKeWIzZHpaWEpFWlcxdkxuSmxiVzkyWlVOc1lYTnpLQ2RtYVhobFpDMWliM1IwYjIwbktUdGNiaUFnSUNBZ0lDQWdKR0p5YjNkelpYSkVaVzF2TG1Ga1pFTnNZWE56S0NkbWFYaGxaQ2NwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnSkhObFkzUnBiMjV6TG1WaFkyZ29ablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RtRnlJQ1J6WldOMGFXOXVPMXh1SUNBZ0lDQWdJQ0FnSUNSelpXTjBhVzl1SUQwZ0pDaDBhR2x6S1R0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvS0NSelpXTjBhVzl1TG5CdmMybDBhVzl1S0NrdWRHOXdJRHdnYzJOeWIyeHNWRzl3SUNZbUlITmpjbTlzYkZSdmNDQThJQ1J6WldOMGFXOXVMbkJ2YzJsMGFXOXVLQ2t1ZEc5d0lDc2dKSE5sWTNScGIyNHViM1YwWlhKSVpXbG5hSFFvS1NrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhObGRGTmxZM1JwYjI0b0pITmxZM1JwYjI0dVpHRjBZU2duYzJWamRHbHZiaWNwS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdKR0p5YjNkelpYSkVaVzF2TG5KbGJXOTJaVUYwZEhJb0oyUmhkR0V0YzJWamRHbHZiaWNwTzF4dUlDQWdJQ0FnSUNBa1luSnZkM05sY2tSbGJXOHVjbVZ0YjNabFEyeGhjM01vSjJacGVHVmtKeWs3WEc0Z0lDQWdJQ0FnSUdsbUlDaHpZM0p2Ykd4VWIzQWdLeUIzYVc1a2IzY3VhVzV1WlhKSVpXbG5hSFFnUGlBa2MzUnZjRkJ2YVc1MExuQnZjMmwwYVc5dUtDa3VkRzl3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlDUmljbTkzYzJWeVJHVnRieTVoWkdSRGJHRnpjeWduWm1sNFpXUXRZbTkwZEc5dEp5azdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJQ1JpY205M2MyVnlSR1Z0Ynk1eVpXMXZkbVZEYkdGemN5Z25abWw0WldRdFltOTBkRzl0SnlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtUdGNiaUFnSUNBa2FXWnlZVzFsTG14dllXUW9ablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0IyWVhJZ0pHbDBaVzF6TENCcFpuSmhiV1ZYYVc1a2IzYzdYRzRnSUNBZ0lDQnBabkpoYldWWGFXNWtiM2NnUFNBa2FXWnlZVzFsV3pCZExtTnZiblJsYm5SWGFXNWtiM2M3WEc0Z0lDQWdJQ0FrYVhSbGJYTWdQU0FrYVdaeVlXMWxMbU52Ym5SbGJuUnpLQ2t1Wm1sdVpDZ25MbWwwWlcwbktUdGNiaUFnSUNBZ0lISmxkSFZ5YmlBa2FYUmxiWE11WldGamFDaG1kVzVqZEdsdmJpaHBLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQWthWFJsYlN3Z1pISnZjQ3dnWDJsbWNtRnRaVmRwYm1SdmQwUnliM0E3WEc0Z0lDQWdJQ0FnSUNScGRHVnRJRDBnSkNoMGFHbHpLVHRjYmlBZ0lDQWdJQ0FnWDJsbWNtRnRaVmRwYm1SdmQwUnliM0FnUFNCcFpuSmhiV1ZYYVc1a2IzY3VSSEp2Y0M1amNtVmhkR1ZEYjI1MFpYaDBLSHRjYmlBZ0lDQWdJQ0FnSUNCamJHRnpjMUJ5WldacGVEb2dKM1JsZEdobGNpZGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUdSeWIzQWdQU0J1WlhjZ1gybG1jbUZ0WlZkcGJtUnZkMFJ5YjNBb2UxeHVJQ0FnSUNBZ0lDQWdJSFJoY21kbGREb2dKR2wwWlcxYk1GMHNYRzRnSUNBZ0lDQWdJQ0FnWTJ4aGMzTmxjem9nSjNSbGRHaGxjaTEwYUdWdFpTMWhjbkp2ZDNNdFpHRnlheWNzWEc0Z0lDQWdJQ0FnSUNBZ2NHOXphWFJwYjI0NklDZHlhV2RvZENCMGIzQW5MRnh1SUNBZ0lDQWdJQ0FnSUdOdmJuTjBjbUZwYmxSdlYybHVaRzkzT2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0FnSUc5d1pXNVBiam9nSjJOc2FXTnJKeXhjYmlBZ0lDQWdJQ0FnSUNCamIyNTBaVzUwT2lBblBIVnNQbHhjYmlBZ0lDQThiR2srUVdOMGFXOXVKbTVpYzNBN01Ud3ZiR2srWEZ4dUlDQWdJRHhzYVQ1QlkzUnBiMjRtYm1KemNEc3lQQzlzYVQ1Y1hHNGdJQ0FnUEd4cFBrRmpkR2x2YmladVluTndPek04TDJ4cFBseGNiand2ZFd3K0oxeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJQ1JwZEdWdExtUmhkR0VvSjJSeWIzQW5MQ0JrY205d0tUdGNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMHBPMXh1SUNBZ0lITmpjbTlzYkVsdWRHVnlkbUZzSUQwZ2RtOXBaQ0F3TzF4dUlDQWdJSE5qY205c2JGUnZjQ0E5SURBN1hHNGdJQ0FnYzJOeWIyeHNWRzl3UkdseVpXTjBhVzl1SUQwZ01UdGNiaUFnSUNCeVpYUjFjbTRnYzJWMFUyVmpkR2x2YmlBOUlHWjFibU4wYVc5dUtITmxZM1JwYjI0cElIdGNiaUFnSUNBZ0lIWmhjaUJqYkc5elpVRnNiRWwwWlcxekxDQnZjR1Z1UlhoaGJYQnNaVWwwWlcwc0lITmpjbTlzYkV4bFpuUlRaV04wYVc5dUxDQnpkRzl3VTJOeWIyeHNhVzVuVEdWbWRGTmxZM1JwYjI0N1hHNGdJQ0FnSUNBa1luSnZkM05sY2tSbGJXOHVZWFIwY2lnblpHRjBZUzF6WldOMGFXOXVKeXdnYzJWamRHbHZiaWs3WEc0Z0lDQWdJQ0FrS0NjdWMyVmpkR2x2YmkxamIzQjVKeWt1Y21WdGIzWmxRMnhoYzNNb0oyRmpkR2wyWlNjcE8xeHVJQ0FnSUNBZ0pDaGNJaTV6WldOMGFXOXVMV052Y0hsYlpHRjBZUzF6WldOMGFXOXVQVnhjWENKY0lpQXJJSE5sWTNScGIyNGdLeUJjSWx4Y1hDSmRYQ0lwTG1Ga1pFTnNZWE56S0NkaFkzUnBkbVVuS1R0Y2JpQWdJQ0FnSUc5d1pXNUZlR0Z0Y0d4bFNYUmxiU0E5SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvYVhOTmIySnBiR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z0pHbG1jbUZ0WlM1amIyNTBaVzUwY3lncExtWnBibVFvSnk1cGRHVnRPbVpwY25OMEp5a3VaR0YwWVNncExtUnliM0F1YjNCbGJpZ3BPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUFrYVdaeVlXMWxMbU52Ym5SbGJuUnpLQ2t1Wm1sdVpDZ25MbWwwWlcwNlpYRW9NaWtuS1M1a1lYUmhLQ2t1WkhKdmNDNXZjR1Z1S0NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMDdYRzRnSUNBZ0lDQmpiRzl6WlVGc2JFbDBaVzF6SUQwZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQWthV1p5WVcxbExtTnZiblJsYm5SektDa3VabWx1WkNnbkxtbDBaVzBuS1M1bFlXTm9LR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBa0tIUm9hWE1wTG1SaGRHRW9LUzVrY205d0xtTnNiM05sS0NrZ2ZId2dkSEoxWlR0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdjMk55YjJ4c1RHVm1kRk5sWTNScGIyNGdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOamNtOXNiRWx1ZEdWeWRtRnNJRDBnYzJWMFNXNTBaWEoyWVd3b1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSkdsbWNtRnRaUzVqYjI1MFpXNTBjeWdwTG1acGJtUW9KeTVzWldaMEp5a3VjMk55YjJ4c1ZHOXdLSE5qY205c2JGUnZjQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2MyTnliMnhzVkc5d0lDczlJSE5qY205c2JGUnZjRVJwY21WamRHbHZianRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9jMk55YjJ4c1ZHOXdJRDRnTlRBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhOamNtOXNiRlJ2Y0VScGNtVmpkR2x2YmlBOUlDMHhPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYzJOeWIyeHNWRzl3SUR3Z01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOamNtOXNiRlJ2Y0VScGNtVmpkR2x2YmlBOUlERTdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUxDQXpNQ2s3WEc0Z0lDQWdJQ0I5TzF4dUlDQWdJQ0FnYzNSdmNGTmpjbTlzYkdsdVoweGxablJUWldOMGFXOXVJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCamJHVmhja2x1ZEdWeWRtRnNLSE5qY205c2JFbHVkR1Z5ZG1Gc0tUdGNiaUFnSUNBZ0lIMDdYRzRnSUNBZ0lDQnpkMmwwWTJnZ0tITmxZM1JwYjI0cElIdGNiaUFnSUNBZ0lDQWdZMkZ6WlNBbmQyaGhkQ2M2WEc0Z0lDQWdJQ0FnSUNBZ1kyeHZjMlZCYkd4SmRHVnRjeWdwTzF4dUlDQWdJQ0FnSUNBZ0lHOXdaVzVGZUdGdGNHeGxTWFJsYlNncE8xeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnpkRzl3VTJOeWIyeHNhVzVuVEdWbWRGTmxZM1JwYjI0b0tUdGNiaUFnSUNBZ0lDQWdZMkZ6WlNBbmFHOTNKenBjYmlBZ0lDQWdJQ0FnSUNCamJHOXpaVUZzYkVsMFpXMXpLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2IzQmxia1Y0WVcxd2JHVkpkR1Z0S0NrN1hHNGdJQ0FnSUNBZ0lDQWdjM1J2Y0ZOamNtOXNiR2x1WjB4bFpuUlRaV04wYVc5dUtDazdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSE5qY205c2JFeGxablJUWldOMGFXOXVLQ2s3WEc0Z0lDQWdJQ0FnSUdOaGMyVWdKM2RvZVNjNlhHNGdJQ0FnSUNBZ0lDQWdZMnh2YzJWQmJHeEpkR1Z0Y3lncE8xeHVJQ0FnSUNBZ0lDQWdJRzl3Wlc1RmVHRnRjR3hsU1hSbGJTZ3BPMXh1SUNBZ0lDQWdJQ0FnSUhOMGIzQlRZM0p2Ykd4cGJtZE1aV1owVTJWamRHbHZiaWdwTzF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCelkzSnZiR3hNWldaMFUyVmpkR2x2YmlncE8xeHVJQ0FnSUNBZ0lDQmpZWE5sSUNkdmRYUnlieWM2WEc0Z0lDQWdJQ0FnSUNBZ1kyeHZjMlZCYkd4SmRHVnRjeWdwTzF4dUlDQWdJQ0FnSUNBZ0lHOXdaVzVGZUdGdGNHeGxTWFJsYlNncE8xeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnpkRzl3VTJOeWIyeHNhVzVuVEdWbWRGTmxZM1JwYjI0b0tUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOU8xeHVJQ0I5TzF4dVhHNGdJR2x1YVhRb0tUdGNibHh1ZlNrdVkyRnNiQ2gwYUdsektUdGNiaUpkZlE9PVxuIl19
