var tethers = [];
document.addEventListener('DOMContentLoaded', function () {
    dragging = null;
    document.body.addEventListener('mouseup', function () {
        dragging = null;
    });
    document.body.addEventListener('mousemove', function (e) {
        if (dragging) {
            dragging.style.top = e.clientY + 'px';
            dragging.style.left = e.clientX + 'px';
            Tether.position();
        }
    });
    document.body.addEventListener('mousedown', function (e) {
        if (e.target.getAttribute('data-index'))
            dragging = e.target;
    });
    var count = 60;
    var parent = null;
    var dir = 'left';
    var first = null;
    while (count--) {
        var el = document.createElement('div');
        el.setAttribute('data-index', count);
        document.querySelector('.scroll').appendChild(el);
        if (!first)
            first = el;
        if (count % 10 === 0)
            dir = dir == 'right' ? 'left' : 'right';
        if (parent) {
            tethers.push(new Tether({
                element: el,
                target: parent,
                attachment: 'middle ' + dir,
                targetOffset: (dir == 'left' ? '10px 10px' : '10px -10px')
            }));
        }
        parent = el;
    }
    initAnim(first);
});
function initAnim(el) {
    var start = performance.now();
    var last = 0;
    var lastTop = 0;
    var tick = function () {
        var diff = performance.now() - last;
        if (!last || diff > 50) {
            last = performance.now();
            var nextTop = 50 * Math.sin((last - start) / 1000);
            var curTop = parseFloat(el.style.top || 0);
            var topChange = nextTop - lastTop;
            lastTop = nextTop;
            var top = curTop + topChange;
            el.style.top = top + 'px';
            Tether.position();
        }
        requestAnimationFrame(tick);
    };
    tick();
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInd3dy9wYWNrcy90ZXRoZXIvZXhhbXBsZXMvZG9sbHMvZG9sbHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDO0FBRWpCLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsRUFBRTtJQUM1QyxRQUFRLEdBQUcsSUFBSSxDQUFDO0lBRWhCLFFBQVEsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFO1FBQ3hDLFFBQVEsR0FBRyxJQUFJLENBQUM7SUFDbEIsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxVQUFTLENBQUM7UUFDcEQsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUEsQ0FBQztZQUNaLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1lBQ3RDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1lBRXZDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQTtRQUNuQixDQUFDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxVQUFTLENBQUM7UUFDcEQsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDdEMsUUFBUSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDeEIsQ0FBQyxDQUFDLENBQUE7SUFFRixJQUFJLEtBQUssR0FBRyxFQUFFLENBQUM7SUFDZixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDbEIsSUFBSSxHQUFHLEdBQUcsTUFBTSxDQUFDO0lBQ2pCLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQztJQUVqQixPQUFPLEtBQUssRUFBRSxFQUFDLENBQUM7UUFDZCxJQUFJLEVBQUUsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLEVBQUUsQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3JDLFFBQVEsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRWxELEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1lBQ1QsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUViLEVBQUUsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ25CLEdBQUcsR0FBRyxHQUFHLElBQUksT0FBTyxHQUFHLE1BQU0sR0FBRyxPQUFPLENBQUM7UUFFMUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUEsQ0FBQztZQUNWLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxNQUFNLENBQUM7Z0JBQ3RCLE9BQU8sRUFBRSxFQUFFO2dCQUNYLE1BQU0sRUFBRSxNQUFNO2dCQUNkLFVBQVUsRUFBRSxTQUFTLEdBQUcsR0FBRztnQkFDM0IsWUFBWSxFQUFFLENBQUMsR0FBRyxJQUFJLE1BQU0sR0FBRyxXQUFXLEdBQUcsWUFBWSxDQUFDO2FBQzNELENBQUMsQ0FBQyxDQUFDO1FBRU4sQ0FBQztRQUVELE1BQU0sR0FBRyxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2xCLENBQUMsQ0FBQyxDQUFDO0FBRUgsa0JBQWtCLEVBQUU7SUFDbEIsSUFBSSxLQUFLLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFBO0lBQzdCLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQztJQUNiLElBQUksT0FBTyxHQUFHLENBQUMsQ0FBQztJQUNoQixJQUFJLElBQUksR0FBRztRQUNULElBQUksSUFBSSxHQUFHLFdBQVcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFFcEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFBLENBQUM7WUFDdEIsSUFBSSxHQUFHLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUV6QixJQUFJLE9BQU8sR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztZQUVuRCxJQUFJLE1BQU0sR0FBRyxVQUFVLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDM0MsSUFBSSxTQUFTLEdBQUcsT0FBTyxHQUFHLE9BQU8sQ0FBQztZQUNsQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1lBRWxCLElBQUksR0FBRyxHQUFHLE1BQU0sR0FBRyxTQUFTLENBQUM7WUFFN0IsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQztZQUUxQixNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDcEIsQ0FBQztRQUVELHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlCLENBQUMsQ0FBQztJQUVGLElBQUksRUFBRSxDQUFDO0FBQ1QsQ0FBQyIsImZpbGUiOiJ3d3cvcGFja3MvdGV0aGVyL2V4YW1wbGVzL2RvbGxzL2RvbGxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHRldGhlcnMgPSBbXTtcblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uKCl7XG4gIGRyYWdnaW5nID0gbnVsbDtcblxuICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBmdW5jdGlvbigpe1xuICAgIGRyYWdnaW5nID0gbnVsbDtcbiAgfSk7XG5cbiAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBmdW5jdGlvbihlKXtcbiAgICBpZiAoZHJhZ2dpbmcpe1xuICAgICAgZHJhZ2dpbmcuc3R5bGUudG9wID0gZS5jbGllbnRZICsgJ3B4JztcbiAgICAgIGRyYWdnaW5nLnN0eWxlLmxlZnQgPSBlLmNsaWVudFggKyAncHgnO1xuXG4gICAgICBUZXRoZXIucG9zaXRpb24oKVxuICAgIH1cbiAgfSk7XG5cbiAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBmdW5jdGlvbihlKXtcbiAgICBpZiAoZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWluZGV4JykpXG4gICAgICBkcmFnZ2luZyA9IGUudGFyZ2V0O1xuICB9KVxuXG4gIHZhciBjb3VudCA9IDYwO1xuICB2YXIgcGFyZW50ID0gbnVsbDtcbiAgdmFyIGRpciA9ICdsZWZ0JztcbiAgdmFyIGZpcnN0ID0gbnVsbDtcblxuICB3aGlsZSAoY291bnQtLSl7XG4gICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZWwuc2V0QXR0cmlidXRlKCdkYXRhLWluZGV4JywgY291bnQpO1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zY3JvbGwnKS5hcHBlbmRDaGlsZChlbCk7XG5cbiAgICBpZiAoIWZpcnN0KVxuICAgICAgZmlyc3QgPSBlbDtcbiBcbiAgICBpZiAoY291bnQgJSAxMCA9PT0gMClcbiAgICAgIGRpciA9IGRpciA9PSAncmlnaHQnID8gJ2xlZnQnIDogJ3JpZ2h0JztcblxuICAgIGlmIChwYXJlbnQpe1xuICAgICAgdGV0aGVycy5wdXNoKG5ldyBUZXRoZXIoe1xuICAgICAgICBlbGVtZW50OiBlbCxcbiAgICAgICAgdGFyZ2V0OiBwYXJlbnQsXG4gICAgICAgIGF0dGFjaG1lbnQ6ICdtaWRkbGUgJyArIGRpcixcbiAgICAgICAgdGFyZ2V0T2Zmc2V0OiAoZGlyID09ICdsZWZ0JyA/ICcxMHB4IDEwcHgnIDogJzEwcHggLTEwcHgnKVxuICAgICAgfSkpO1xuXG4gICAgfVxuXG4gICAgcGFyZW50ID0gZWw7XG4gIH1cblxuICBpbml0QW5pbShmaXJzdCk7XG59KTtcblxuZnVuY3Rpb24gaW5pdEFuaW0oZWwpe1xuICB2YXIgc3RhcnQgPSBwZXJmb3JtYW5jZS5ub3coKVxuICB2YXIgbGFzdCA9IDA7XG4gIHZhciBsYXN0VG9wID0gMDtcbiAgdmFyIHRpY2sgPSBmdW5jdGlvbigpe1xuICAgIHZhciBkaWZmID0gcGVyZm9ybWFuY2Uubm93KCkgLSBsYXN0O1xuXG4gICAgaWYgKCFsYXN0IHx8IGRpZmYgPiA1MCl7XG4gICAgICBsYXN0ID0gcGVyZm9ybWFuY2Uubm93KCk7XG5cbiAgICAgIHZhciBuZXh0VG9wID0gNTAgKiBNYXRoLnNpbigobGFzdCAtIHN0YXJ0KSAvIDEwMDApO1xuXG4gICAgICB2YXIgY3VyVG9wID0gcGFyc2VGbG9hdChlbC5zdHlsZS50b3AgfHwgMCk7XG4gICAgICB2YXIgdG9wQ2hhbmdlID0gbmV4dFRvcCAtIGxhc3RUb3A7XG4gICAgICBsYXN0VG9wID0gbmV4dFRvcDtcblxuICAgICAgdmFyIHRvcCA9IGN1clRvcCArIHRvcENoYW5nZTtcblxuICAgICAgZWwuc3R5bGUudG9wID0gdG9wICsgJ3B4JztcblxuICAgICAgVGV0aGVyLnBvc2l0aW9uKCk7XG4gICAgfVxuXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRpY2spO1xuICB9O1xuXG4gIHRpY2soKTtcbn1cbiJdfQ==

//# sourceMappingURL=data:application/json;charset=utf8;base64,
