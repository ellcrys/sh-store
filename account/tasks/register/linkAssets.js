/**
 * `linkAssets`
 *
 * ---------------------------------------------------------------
 *
 * This Grunt tasklist is not designed to be used directly-- rather
 * it is a helper called by the `default` tasklist and the `watch` task
 * (but only if the `grunt-sails-linker` package is in use).
 *
 * For more information see:
 *   http://sailsjs.org/documentation/anatomy/my-app/tasks/register/link-assets-js
 *
 */
module.exports = function (grunt) {
    grunt.registerTask('linkAssets', [
        'sails-linker:devJs',
        'sails-linker:devStyles',
        'sails-linker:devTpl',
        'sails-linker:devJsJade',
        'sails-linker:devStylesJade',
        'sails-linker:devTplJade'
    ]);
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRhc2tzL3JlZ2lzdGVyL2xpbmtBc3NldHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7OztHQVlHO0FBQ0gsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFTLEtBQUs7SUFDN0IsS0FBSyxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUU7UUFDL0Isb0JBQW9CO1FBQ3BCLHdCQUF3QjtRQUN4QixxQkFBcUI7UUFDckIsd0JBQXdCO1FBQ3hCLDRCQUE0QjtRQUM1Qix5QkFBeUI7S0FDMUIsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDIiwiZmlsZSI6InRhc2tzL3JlZ2lzdGVyL2xpbmtBc3NldHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIGBsaW5rQXNzZXRzYFxuICpcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICpcbiAqIFRoaXMgR3J1bnQgdGFza2xpc3QgaXMgbm90IGRlc2lnbmVkIHRvIGJlIHVzZWQgZGlyZWN0bHktLSByYXRoZXJcbiAqIGl0IGlzIGEgaGVscGVyIGNhbGxlZCBieSB0aGUgYGRlZmF1bHRgIHRhc2tsaXN0IGFuZCB0aGUgYHdhdGNoYCB0YXNrXG4gKiAoYnV0IG9ubHkgaWYgdGhlIGBncnVudC1zYWlscy1saW5rZXJgIHBhY2thZ2UgaXMgaW4gdXNlKS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBzZWU6XG4gKiAgIGh0dHA6Ly9zYWlsc2pzLm9yZy9kb2N1bWVudGF0aW9uL2FuYXRvbXkvbXktYXBwL3Rhc2tzL3JlZ2lzdGVyL2xpbmstYXNzZXRzLWpzXG4gKlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGdydW50KSB7XG4gIGdydW50LnJlZ2lzdGVyVGFzaygnbGlua0Fzc2V0cycsIFtcbiAgICAnc2FpbHMtbGlua2VyOmRldkpzJyxcbiAgICAnc2FpbHMtbGlua2VyOmRldlN0eWxlcycsXG4gICAgJ3NhaWxzLWxpbmtlcjpkZXZUcGwnLFxuICAgICdzYWlscy1saW5rZXI6ZGV2SnNKYWRlJyxcbiAgICAnc2FpbHMtbGlua2VyOmRldlN0eWxlc0phZGUnLFxuICAgICdzYWlscy1saW5rZXI6ZGV2VHBsSmFkZSdcbiAgXSk7XG59O1xuIl19
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRhc2tzL3JlZ2lzdGVyL2xpbmtBc3NldHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7OztHQVlHO0FBQ0gsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFVLEtBQUs7SUFDNUIsS0FBSyxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUU7UUFDN0Isb0JBQW9CO1FBQ3BCLHdCQUF3QjtRQUN4QixxQkFBcUI7UUFDckIsd0JBQXdCO1FBQ3hCLDRCQUE0QjtRQUM1Qix5QkFBeUI7S0FDNUIsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDO0FBRUYsdTZDQUF1NkMiLCJmaWxlIjoidGFza3MvcmVnaXN0ZXIvbGlua0Fzc2V0cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogYGxpbmtBc3NldHNgXG4gKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKlxuICogVGhpcyBHcnVudCB0YXNrbGlzdCBpcyBub3QgZGVzaWduZWQgdG8gYmUgdXNlZCBkaXJlY3RseS0tIHJhdGhlclxuICogaXQgaXMgYSBoZWxwZXIgY2FsbGVkIGJ5IHRoZSBgZGVmYXVsdGAgdGFza2xpc3QgYW5kIHRoZSBgd2F0Y2hgIHRhc2tcbiAqIChidXQgb25seSBpZiB0aGUgYGdydW50LXNhaWxzLWxpbmtlcmAgcGFja2FnZSBpcyBpbiB1c2UpLlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uIHNlZTpcbiAqICAgaHR0cDovL3NhaWxzanMub3JnL2RvY3VtZW50YXRpb24vYW5hdG9teS9teS1hcHAvdGFza3MvcmVnaXN0ZXIvbGluay1hc3NldHMtanNcbiAqXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGdydW50KSB7XG4gICAgZ3J1bnQucmVnaXN0ZXJUYXNrKCdsaW5rQXNzZXRzJywgW1xuICAgICAgICAnc2FpbHMtbGlua2VyOmRldkpzJyxcbiAgICAgICAgJ3NhaWxzLWxpbmtlcjpkZXZTdHlsZXMnLFxuICAgICAgICAnc2FpbHMtbGlua2VyOmRldlRwbCcsXG4gICAgICAgICdzYWlscy1saW5rZXI6ZGV2SnNKYWRlJyxcbiAgICAgICAgJ3NhaWxzLWxpbmtlcjpkZXZTdHlsZXNKYWRlJyxcbiAgICAgICAgJ3NhaWxzLWxpbmtlcjpkZXZUcGxKYWRlJ1xuICAgIF0pO1xufTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJblJoYzJ0ekwzSmxaMmx6ZEdWeUwyeHBibXRCYzNObGRITXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN096czdPenM3T3pzN096dEhRVmxITzBGQlEwZ3NUVUZCVFN4RFFVRkRMRTlCUVU4c1IwRkJSeXhWUVVGVExFdEJRVXM3U1VGRE4wSXNTMEZCU3l4RFFVRkRMRmxCUVZrc1EwRkJReXhaUVVGWkxFVkJRVVU3VVVGREwwSXNiMEpCUVc5Q08xRkJRM0JDTEhkQ1FVRjNRanRSUVVONFFpeHhRa0ZCY1VJN1VVRkRja0lzZDBKQlFYZENPMUZCUTNoQ0xEUkNRVUUwUWp0UlFVTTFRaXg1UWtGQmVVSTdTMEZETVVJc1EwRkJReXhEUVVGRE8wRkJRMHdzUTBGQlF5eERRVUZESWl3aVptbHNaU0k2SW5SaGMydHpMM0psWjJsemRHVnlMMnhwYm10QmMzTmxkSE11YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaXBjYmlBcUlHQnNhVzVyUVhOelpYUnpZRnh1SUNwY2JpQXFJQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMVnh1SUNwY2JpQXFJRlJvYVhNZ1IzSjFiblFnZEdGemEyeHBjM1FnYVhNZ2JtOTBJR1JsYzJsbmJtVmtJSFJ2SUdKbElIVnpaV1FnWkdseVpXTjBiSGt0TFNCeVlYUm9aWEpjYmlBcUlHbDBJR2x6SUdFZ2FHVnNjR1Z5SUdOaGJHeGxaQ0JpZVNCMGFHVWdZR1JsWm1GMWJIUmdJSFJoYzJ0c2FYTjBJR0Z1WkNCMGFHVWdZSGRoZEdOb1lDQjBZWE5yWEc0Z0tpQW9ZblYwSUc5dWJIa2dhV1lnZEdobElHQm5jblZ1ZEMxellXbHNjeTFzYVc1clpYSmdJSEJoWTJ0aFoyVWdhWE1nYVc0Z2RYTmxLUzVjYmlBcVhHNGdLaUJHYjNJZ2JXOXlaU0JwYm1admNtMWhkR2x2YmlCelpXVTZYRzRnS2lBZ0lHaDBkSEE2THk5ellXbHNjMnB6TG05eVp5OWtiMk4xYldWdWRHRjBhVzl1TDJGdVlYUnZiWGt2YlhrdFlYQndMM1JoYzJ0ekwzSmxaMmx6ZEdWeUwyeHBibXN0WVhOelpYUnpMV3B6WEc0Z0tseHVJQ292WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0dkeWRXNTBLU0I3WEc0Z0lHZHlkVzUwTG5KbFoybHpkR1Z5VkdGemF5Z25iR2x1YTBGemMyVjBjeWNzSUZ0Y2JpQWdJQ0FuYzJGcGJITXRiR2x1YTJWeU9tUmxka3B6Snl4Y2JpQWdJQ0FuYzJGcGJITXRiR2x1YTJWeU9tUmxkbE4wZVd4bGN5Y3NYRzRnSUNBZ0ozTmhhV3h6TFd4cGJtdGxjanBrWlhaVWNHd25MRnh1SUNBZ0lDZHpZV2xzY3kxc2FXNXJaWEk2WkdWMlNuTktZV1JsSnl4Y2JpQWdJQ0FuYzJGcGJITXRiR2x1YTJWeU9tUmxkbE4wZVd4bGMwcGhaR1VuTEZ4dUlDQWdJQ2R6WVdsc2N5MXNhVzVyWlhJNlpHVjJWSEJzU21Ga1pTZGNiaUFnWFNrN1hHNTlPMXh1SWwxOVxuIl19

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRhc2tzL3JlZ2lzdGVyL2xpbmtBc3NldHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7OztHQVlHO0FBQ0gsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFVLEtBQUs7SUFDNUIsS0FBSyxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUU7UUFDN0Isb0JBQW9CO1FBQ3BCLHdCQUF3QjtRQUN4QixxQkFBcUI7UUFDckIsd0JBQXdCO1FBQ3hCLDRCQUE0QjtRQUM1Qix5QkFBeUI7S0FDNUIsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDO0FBQ0YsdTZDQUF1NkM7QUFFdjZDLCsyR0FBKzJHIiwiZmlsZSI6InRhc2tzL3JlZ2lzdGVyL2xpbmtBc3NldHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIGBsaW5rQXNzZXRzYFxuICpcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICpcbiAqIFRoaXMgR3J1bnQgdGFza2xpc3QgaXMgbm90IGRlc2lnbmVkIHRvIGJlIHVzZWQgZGlyZWN0bHktLSByYXRoZXJcbiAqIGl0IGlzIGEgaGVscGVyIGNhbGxlZCBieSB0aGUgYGRlZmF1bHRgIHRhc2tsaXN0IGFuZCB0aGUgYHdhdGNoYCB0YXNrXG4gKiAoYnV0IG9ubHkgaWYgdGhlIGBncnVudC1zYWlscy1saW5rZXJgIHBhY2thZ2UgaXMgaW4gdXNlKS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBzZWU6XG4gKiAgIGh0dHA6Ly9zYWlsc2pzLm9yZy9kb2N1bWVudGF0aW9uL2FuYXRvbXkvbXktYXBwL3Rhc2tzL3JlZ2lzdGVyL2xpbmstYXNzZXRzLWpzXG4gKlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChncnVudCkge1xuICAgIGdydW50LnJlZ2lzdGVyVGFzaygnbGlua0Fzc2V0cycsIFtcbiAgICAgICAgJ3NhaWxzLWxpbmtlcjpkZXZKcycsXG4gICAgICAgICdzYWlscy1saW5rZXI6ZGV2U3R5bGVzJyxcbiAgICAgICAgJ3NhaWxzLWxpbmtlcjpkZXZUcGwnLFxuICAgICAgICAnc2FpbHMtbGlua2VyOmRldkpzSmFkZScsXG4gICAgICAgICdzYWlscy1saW5rZXI6ZGV2U3R5bGVzSmFkZScsXG4gICAgICAgICdzYWlscy1saW5rZXI6ZGV2VHBsSmFkZSdcbiAgICBdKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGY4O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluUmhjMnR6TDNKbFoybHpkR1Z5TDJ4cGJtdEJjM05sZEhNdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3T3pzN096czdPenM3T3p0SFFWbEhPMEZCUTBnc1RVRkJUU3hEUVVGRExFOUJRVThzUjBGQlJ5eFZRVUZUTEV0QlFVczdTVUZETjBJc1MwRkJTeXhEUVVGRExGbEJRVmtzUTBGQlF5eFpRVUZaTEVWQlFVVTdVVUZETDBJc2IwSkJRVzlDTzFGQlEzQkNMSGRDUVVGM1FqdFJRVU40UWl4eFFrRkJjVUk3VVVGRGNrSXNkMEpCUVhkQ08xRkJRM2hDTERSQ1FVRTBRanRSUVVNMVFpeDVRa0ZCZVVJN1MwRkRNVUlzUTBGQlF5eERRVUZETzBGQlEwd3NRMEZCUXl4RFFVRkRJaXdpWm1sc1pTSTZJblJoYzJ0ekwzSmxaMmx6ZEdWeUwyeHBibXRCYzNObGRITXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdktpcGNiaUFxSUdCc2FXNXJRWE56WlhSellGeHVJQ3BjYmlBcUlDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ3BjYmlBcUlGUm9hWE1nUjNKMWJuUWdkR0Z6YTJ4cGMzUWdhWE1nYm05MElHUmxjMmxuYm1Wa0lIUnZJR0psSUhWelpXUWdaR2x5WldOMGJIa3RMU0J5WVhSb1pYSmNiaUFxSUdsMElHbHpJR0VnYUdWc2NHVnlJR05oYkd4bFpDQmllU0IwYUdVZ1lHUmxabUYxYkhSZ0lIUmhjMnRzYVhOMElHRnVaQ0IwYUdVZ1lIZGhkR05vWUNCMFlYTnJYRzRnS2lBb1luVjBJRzl1YkhrZ2FXWWdkR2hsSUdCbmNuVnVkQzF6WVdsc2N5MXNhVzVyWlhKZ0lIQmhZMnRoWjJVZ2FYTWdhVzRnZFhObEtTNWNiaUFxWEc0Z0tpQkdiM0lnYlc5eVpTQnBibVp2Y20xaGRHbHZiaUJ6WldVNlhHNGdLaUFnSUdoMGRIQTZMeTl6WVdsc2MycHpMbTl5Wnk5a2IyTjFiV1Z1ZEdGMGFXOXVMMkZ1WVhSdmJYa3ZiWGt0WVhCd0wzUmhjMnR6TDNKbFoybHpkR1Z5TDJ4cGJtc3RZWE56WlhSekxXcHpYRzRnS2x4dUlDb3ZYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR2R5ZFc1MEtTQjdYRzRnSUdkeWRXNTBMbkpsWjJsemRHVnlWR0Z6YXlnbmJHbHVhMEZ6YzJWMGN5Y3NJRnRjYmlBZ0lDQW5jMkZwYkhNdGJHbHVhMlZ5T21SbGRrcHpKeXhjYmlBZ0lDQW5jMkZwYkhNdGJHbHVhMlZ5T21SbGRsTjBlV3hsY3ljc1hHNGdJQ0FnSjNOaGFXeHpMV3hwYm10bGNqcGtaWFpVY0d3bkxGeHVJQ0FnSUNkellXbHNjeTFzYVc1clpYSTZaR1YyU25OS1lXUmxKeXhjYmlBZ0lDQW5jMkZwYkhNdGJHbHVhMlZ5T21SbGRsTjBlV3hsYzBwaFpHVW5MRnh1SUNBZ0lDZHpZV2xzY3kxc2FXNXJaWEk2WkdWMlZIQnNTbUZrWlNkY2JpQWdYU2s3WEc1OU8xeHVJbDE5XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zjg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5SaGMydHpMM0psWjJsemRHVnlMMnhwYm10QmMzTmxkSE11YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdPenM3T3pzN096czdPenRIUVZsSE8wRkJRMGdzVFVGQlRTeERRVUZETEU5QlFVOHNSMEZCUnl4VlFVRlZMRXRCUVVzN1NVRkROVUlzUzBGQlN5eERRVUZETEZsQlFWa3NRMEZCUXl4WlFVRlpMRVZCUVVVN1VVRkROMElzYjBKQlFXOUNPMUZCUTNCQ0xIZENRVUYzUWp0UlFVTjRRaXh4UWtGQmNVSTdVVUZEY2tJc2QwSkJRWGRDTzFGQlEzaENMRFJDUVVFMFFqdFJRVU0xUWl4NVFrRkJlVUk3UzBGRE5VSXNRMEZCUXl4RFFVRkRPMEZCUTFBc1EwRkJReXhEUVVGRE8wRkJSVVlzZFRaRFFVRjFOa01pTENKbWFXeGxJam9pZEdGemEzTXZjbVZuYVhOMFpYSXZiR2x1YTBGemMyVjBjeTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLbHh1SUNvZ1lHeHBibXRCYzNObGRITmdYRzRnS2x4dUlDb2dMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRYRzRnS2x4dUlDb2dWR2hwY3lCSGNuVnVkQ0IwWVhOcmJHbHpkQ0JwY3lCdWIzUWdaR1Z6YVdkdVpXUWdkRzhnWW1VZ2RYTmxaQ0JrYVhKbFkzUnNlUzB0SUhKaGRHaGxjbHh1SUNvZ2FYUWdhWE1nWVNCb1pXeHdaWElnWTJGc2JHVmtJR0o1SUhSb1pTQmdaR1ZtWVhWc2RHQWdkR0Z6YTJ4cGMzUWdZVzVrSUhSb1pTQmdkMkYwWTJoZ0lIUmhjMnRjYmlBcUlDaGlkWFFnYjI1c2VTQnBaaUIwYUdVZ1lHZHlkVzUwTFhOaGFXeHpMV3hwYm10bGNtQWdjR0ZqYTJGblpTQnBjeUJwYmlCMWMyVXBMbHh1SUNwY2JpQXFJRVp2Y2lCdGIzSmxJR2x1Wm05eWJXRjBhVzl1SUhObFpUcGNiaUFxSUNBZ2FIUjBjRG92TDNOaGFXeHphbk11YjNKbkwyUnZZM1Z0Wlc1MFlYUnBiMjR2WVc1aGRHOXRlUzl0ZVMxaGNIQXZkR0Z6YTNNdmNtVm5hWE4wWlhJdmJHbHVheTFoYzNObGRITXRhbk5jYmlBcVhHNGdLaTljYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRnS0dkeWRXNTBLU0I3WEc0Z0lDQWdaM0oxYm5RdWNtVm5hWE4wWlhKVVlYTnJLQ2RzYVc1clFYTnpaWFJ6Snl3Z1cxeHVJQ0FnSUNBZ0lDQW5jMkZwYkhNdGJHbHVhMlZ5T21SbGRrcHpKeXhjYmlBZ0lDQWdJQ0FnSjNOaGFXeHpMV3hwYm10bGNqcGtaWFpUZEhsc1pYTW5MRnh1SUNBZ0lDQWdJQ0FuYzJGcGJITXRiR2x1YTJWeU9tUmxkbFJ3YkNjc1hHNGdJQ0FnSUNBZ0lDZHpZV2xzY3kxc2FXNXJaWEk2WkdWMlNuTktZV1JsSnl4Y2JpQWdJQ0FnSUNBZ0ozTmhhV3h6TFd4cGJtdGxjanBrWlhaVGRIbHNaWE5LWVdSbEp5eGNiaUFnSUNBZ0lDQWdKM05oYVd4ekxXeHBibXRsY2pwa1pYWlVjR3hLWVdSbEoxeHVJQ0FnSUYwcE8xeHVmVHRjYmx4dUx5OGpJSE52ZFhKalpVMWhjSEJwYm1kVlVrdzlaR0YwWVRwaGNIQnNhV05oZEdsdmJpOXFjMjl1TzJOb1lYSnpaWFE5ZFhSbU9EdGlZWE5sTmpRc1pYbEtNbHBZU25waFZ6bDFTV3B2ZWt4RFNucGlNMVo1V1RKV2VrbHFjR0pKYmxKb1l6SjBla3d6U214YU1teDZaRWRXZVV3eWVIQmliWFJDWXpOT2JHUklUWFZoYmsxcFdGTjNhV0p0Um5SYVdFMXBUMngwWkV4RFNuUlpXRUozWVZjMWJtTjVTVFpKYTBaQ1VWVkZOMDk2Y3pkUGVuTTNUM3B6TjA5NmRFaFJWbXhJVHpCR1FsRXdaM05VVlVaQ1ZGTjRSRkZWUmtSTVJUbENVVlU0YzFJd1JrSlNlWGhXVVZWR1ZFeEZkRUpSVlhNM1UxVkdSRTR3U1hOVE1FWkNVM2w0UkZGVlJrUk1SbXhDVVZacmMxRXdSa0pSZVhoYVVWVkdXa3hGVmtKUlZWVTNWVlZHUkV3d1NYTmlNRXBDVVZjNVEwOHhSa0pSTTBKRFRFaGtRMUZWUmpOUmFuUlNVVlZPTkZGcGVIaFJhMFpDWTFWSk4xVlZSa1JqYTBselpEQktRbEZZWkVOUE1VWkNVVE5vUTB4RVVrTlJWVVV3VVdwMFVsRlZUVEZSYVhnMVVXdEdRbVZWU1RkVE1FWkVUVlZKYzFFd1JrSlJlWGhFVVZWR1JFOHdSa0pSTUhkelVUQkdRbEY1ZUVSUlZVWkVTV2wzYVZwdGJITmFVMGsyU1c1U2FHTXlkSHBNTTBwc1dqSnNlbVJIVm5sTU1uaHdZbTEwUW1NelRteGtTRTExWVc1TmFVeERTbnBpTTFaNVdUSldlbEV5T1hWa1IxWjFaRU5KTmxkNVNYWkxhWEJqWW1sQmNVbEhRbk5oVnpWeVVWaE9lbHBZVW5wWlJuaDFTVU53WTJKcFFYRkpRekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVm5oMVNVTndZMkpwUVhGSlJsSnZZVmhOWjFJelNqRmlibEZuWkVkR2VtRXllSEJqTTFGbllWaE5aMkp0T1RCSlIxSnNZekpzYm1KdFZtdEpTRkoyU1VkS2JFbElWbnBhVjFGbldrZHNlVnBYVGpCaVNHdDBURk5DZVZsWVVtOWFXRXBqWW1sQmNVbEhiREJKUjJ4NlNVZEZaMkZIVm5OalIxWjVTVWRPYUdKSGVHeGFRMEpwWlZOQ01HRkhWV2RaUjFKc1dtMUdNV0pJVW1kSlNGSm9ZekowYzJGWVRqQkpSMFoxV2tOQ01HRkhWV2RaU0dSb1pFZE9iMWxEUWpCWldFNXlXRWMwWjB0cFFXOVpibFl3U1VjNWRXSklhMmRoVjFsblpFZG9iRWxIUW01amJsWjFaRU14ZWxsWGJITmplVEZ6WVZjMWNscFlTbWRKU0VKb1dUSjBhRm95VldkaFdFMW5ZVmMwWjJSWVRteExVelZqWW1sQmNWaEhOR2RMYVVKSFlqTkpaMkpYT1hsYVUwSndZbTFhZG1OdE1XaGtSMngyWW1sQ2VscFhWVFpZUnpSblMybEJaMGxIYURCa1NFRTJUSGs1ZWxsWGJITmpNbkI2VEcwNWVWcDVPV3RpTWs0eFlsZFdkV1JIUmpCaFZ6bDFUREpHZFZsWVVuWmlXR3QyWWxocmRGbFlRbmRNTTFKb1l6SjBla3d6U214YU1teDZaRWRXZVV3eWVIQmliWE4wV1ZoT2VscFlVbnBNVjNCNldFYzBaMHRzZUhWSlEyOTJXRWMxZEdJeVVqRmlSMVYxV2xob2QySXpTakJqZVVFNVNVZGFNV0p0VGpCaFZ6bDFTMGRrZVdSWE5UQkxVMEkzV0VjMFowbEhaSGxrVnpVd1RHNUtiRm95Ykhwa1IxWjVWa2RHZW1GNVoyNWlSMngxWVRCR2VtTXlWakJqZVdOelNVWjBZMkpwUVdkSlEwRnVZekpHY0dKSVRYUmlSMngxWVRKV2VVOXRVbXhrYTNCNlNubDRZMkpwUVdkSlEwRnVZekpHY0dKSVRYUmlSMngxWVRKV2VVOXRVbXhrYkU0d1pWZDRiR041WTNOWVJ6Um5TVU5CWjBvelRtaGhWM2g2VEZkNGNHSnRkR3hqYW5CcldsaGFWV05IZDI1TVJuaDFTVU5CWjBsRFpIcFpWMnh6WTNreGMyRlhOWEphV0VrMldrZFdNbE51VGt0WlYxSnNTbmw0WTJKcFFXZEpRMEZ1WXpKR2NHSklUWFJpUjJ4MVlUSldlVTl0VW14a2JFNHdaVmQ0YkdNd2NHaGFSMVZ1VEVaNGRVbERRV2RKUTJSNldWZHNjMk41TVhOaFZ6VnlXbGhKTmxwSFZqSldTRUp6VTIxR2ExcFRaR05pYVVGbldGTnJOMWhITlRsUE1YaDFTV3d4T1Z4dUlsMTlcbiJdfQ==
