/**
 * `compileAssets`
 *
 * ---------------------------------------------------------------
 *
 * This Grunt tasklist is not designed to be used directly-- rather
 * it is a helper called by the `default`, `prod`, `build`, and
 * `buildProd` tasklists.
 *
 * For more information see:
 *   http://sailsjs.org/documentation/anatomy/my-app/tasks/register/compile-assets-js
 *
 */
module.exports = function (grunt) {
    grunt.registerTask('compileAssets', [
        'clean:dev',
        'jst:dev',
        'less:dev',
        'copy:dev',
        'coffee:dev'
    ]);
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRhc2tzL3JlZ2lzdGVyL2NvbXBpbGVBc3NldHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7OztHQVlHO0FBQ0gsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFTLEtBQUs7SUFDN0IsS0FBSyxDQUFDLFlBQVksQ0FBQyxlQUFlLEVBQUU7UUFDbEMsV0FBVztRQUNYLFNBQVM7UUFDVCxVQUFVO1FBQ1YsVUFBVTtRQUNWLFlBQVk7S0FDYixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMiLCJmaWxlIjoidGFza3MvcmVnaXN0ZXIvY29tcGlsZUFzc2V0cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogYGNvbXBpbGVBc3NldHNgXG4gKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKlxuICogVGhpcyBHcnVudCB0YXNrbGlzdCBpcyBub3QgZGVzaWduZWQgdG8gYmUgdXNlZCBkaXJlY3RseS0tIHJhdGhlclxuICogaXQgaXMgYSBoZWxwZXIgY2FsbGVkIGJ5IHRoZSBgZGVmYXVsdGAsIGBwcm9kYCwgYGJ1aWxkYCwgYW5kXG4gKiBgYnVpbGRQcm9kYCB0YXNrbGlzdHMuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24gc2VlOlxuICogICBodHRwOi8vc2FpbHNqcy5vcmcvZG9jdW1lbnRhdGlvbi9hbmF0b215L215LWFwcC90YXNrcy9yZWdpc3Rlci9jb21waWxlLWFzc2V0cy1qc1xuICpcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihncnVudCkge1xuICBncnVudC5yZWdpc3RlclRhc2soJ2NvbXBpbGVBc3NldHMnLCBbXG4gICAgJ2NsZWFuOmRldicsXG4gICAgJ2pzdDpkZXYnLFxuICAgICdsZXNzOmRldicsXG4gICAgJ2NvcHk6ZGV2JyxcbiAgICAnY29mZmVlOmRldidcbiAgXSk7XG59O1xuIl19
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRhc2tzL3JlZ2lzdGVyL2NvbXBpbGVBc3NldHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7OztHQVlHO0FBQ0gsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFVLEtBQUs7SUFDNUIsS0FBSyxDQUFDLFlBQVksQ0FBQyxlQUFlLEVBQUU7UUFDaEMsV0FBVztRQUNYLFNBQVM7UUFDVCxVQUFVO1FBQ1YsVUFBVTtRQUNWLFlBQVk7S0FDZixDQUFDLENBQUM7QUFDUCxDQUFDLENBQUM7QUFFRiwydENBQTJ0QyIsImZpbGUiOiJ0YXNrcy9yZWdpc3Rlci9jb21waWxlQXNzZXRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBgY29tcGlsZUFzc2V0c2BcbiAqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqXG4gKiBUaGlzIEdydW50IHRhc2tsaXN0IGlzIG5vdCBkZXNpZ25lZCB0byBiZSB1c2VkIGRpcmVjdGx5LS0gcmF0aGVyXG4gKiBpdCBpcyBhIGhlbHBlciBjYWxsZWQgYnkgdGhlIGBkZWZhdWx0YCwgYHByb2RgLCBgYnVpbGRgLCBhbmRcbiAqIGBidWlsZFByb2RgIHRhc2tsaXN0cy5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBzZWU6XG4gKiAgIGh0dHA6Ly9zYWlsc2pzLm9yZy9kb2N1bWVudGF0aW9uL2FuYXRvbXkvbXktYXBwL3Rhc2tzL3JlZ2lzdGVyL2NvbXBpbGUtYXNzZXRzLWpzXG4gKlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChncnVudCkge1xuICAgIGdydW50LnJlZ2lzdGVyVGFzaygnY29tcGlsZUFzc2V0cycsIFtcbiAgICAgICAgJ2NsZWFuOmRldicsXG4gICAgICAgICdqc3Q6ZGV2JyxcbiAgICAgICAgJ2xlc3M6ZGV2JyxcbiAgICAgICAgJ2NvcHk6ZGV2JyxcbiAgICAgICAgJ2NvZmZlZTpkZXYnXG4gICAgXSk7XG59O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGY4O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluUmhjMnR6TDNKbFoybHpkR1Z5TDJOdmJYQnBiR1ZCYzNObGRITXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN096czdPenM3T3pzN096dEhRVmxITzBGQlEwZ3NUVUZCVFN4RFFVRkRMRTlCUVU4c1IwRkJSeXhWUVVGVExFdEJRVXM3U1VGRE4wSXNTMEZCU3l4RFFVRkRMRmxCUVZrc1EwRkJReXhsUVVGbExFVkJRVVU3VVVGRGJFTXNWMEZCVnp0UlFVTllMRk5CUVZNN1VVRkRWQ3hWUVVGVk8xRkJRMVlzVlVGQlZUdFJRVU5XTEZsQlFWazdTMEZEWWl4RFFVRkRMRU5CUVVNN1FVRkRUQ3hEUVVGRExFTkJRVU1pTENKbWFXeGxJam9pZEdGemEzTXZjbVZuYVhOMFpYSXZZMjl0Y0dsc1pVRnpjMlYwY3k1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2x4dUlDb2dZR052YlhCcGJHVkJjM05sZEhOZ1hHNGdLbHh1SUNvZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdFhHNGdLbHh1SUNvZ1ZHaHBjeUJIY25WdWRDQjBZWE5yYkdsemRDQnBjeUJ1YjNRZ1pHVnphV2R1WldRZ2RHOGdZbVVnZFhObFpDQmthWEpsWTNSc2VTMHRJSEpoZEdobGNseHVJQ29nYVhRZ2FYTWdZU0JvWld4d1pYSWdZMkZzYkdWa0lHSjVJSFJvWlNCZ1pHVm1ZWFZzZEdBc0lHQndjbTlrWUN3Z1lHSjFhV3hrWUN3Z1lXNWtYRzRnS2lCZ1luVnBiR1JRY205a1lDQjBZWE5yYkdsemRITXVYRzRnS2x4dUlDb2dSbTl5SUcxdmNtVWdhVzVtYjNKdFlYUnBiMjRnYzJWbE9seHVJQ29nSUNCb2RIUndPaTh2YzJGcGJITnFjeTV2Y21jdlpHOWpkVzFsYm5SaGRHbHZiaTloYm1GMGIyMTVMMjE1TFdGd2NDOTBZWE5yY3k5eVpXZHBjM1JsY2k5amIyMXdhV3hsTFdGemMyVjBjeTFxYzF4dUlDcGNiaUFxTDF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlobmNuVnVkQ2tnZTF4dUlDQm5jblZ1ZEM1eVpXZHBjM1JsY2xSaGMyc29KMk52YlhCcGJHVkJjM05sZEhNbkxDQmJYRzRnSUNBZ0oyTnNaV0Z1T21SbGRpY3NYRzRnSUNBZ0oycHpkRHBrWlhZbkxGeHVJQ0FnSUNkc1pYTnpPbVJsZGljc1hHNGdJQ0FnSjJOdmNIazZaR1YySnl4Y2JpQWdJQ0FuWTI5bVptVmxPbVJsZGlkY2JpQWdYU2s3WEc1OU8xeHVJbDE5XG4iXX0=

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRhc2tzL3JlZ2lzdGVyL2NvbXBpbGVBc3NldHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7OztHQVlHO0FBQ0gsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFVLEtBQUs7SUFDNUIsS0FBSyxDQUFDLFlBQVksQ0FBQyxlQUFlLEVBQUU7UUFDaEMsV0FBVztRQUNYLFNBQVM7UUFDVCxVQUFVO1FBQ1YsVUFBVTtRQUNWLFlBQVk7S0FDZixDQUFDLENBQUM7QUFDUCxDQUFDLENBQUM7QUFDRiwydENBQTJ0QztBQUUzdEMsKzRGQUErNEYiLCJmaWxlIjoidGFza3MvcmVnaXN0ZXIvY29tcGlsZUFzc2V0cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogYGNvbXBpbGVBc3NldHNgXG4gKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKlxuICogVGhpcyBHcnVudCB0YXNrbGlzdCBpcyBub3QgZGVzaWduZWQgdG8gYmUgdXNlZCBkaXJlY3RseS0tIHJhdGhlclxuICogaXQgaXMgYSBoZWxwZXIgY2FsbGVkIGJ5IHRoZSBgZGVmYXVsdGAsIGBwcm9kYCwgYGJ1aWxkYCwgYW5kXG4gKiBgYnVpbGRQcm9kYCB0YXNrbGlzdHMuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24gc2VlOlxuICogICBodHRwOi8vc2FpbHNqcy5vcmcvZG9jdW1lbnRhdGlvbi9hbmF0b215L215LWFwcC90YXNrcy9yZWdpc3Rlci9jb21waWxlLWFzc2V0cy1qc1xuICpcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZ3J1bnQpIHtcbiAgICBncnVudC5yZWdpc3RlclRhc2soJ2NvbXBpbGVBc3NldHMnLCBbXG4gICAgICAgICdjbGVhbjpkZXYnLFxuICAgICAgICAnanN0OmRldicsXG4gICAgICAgICdsZXNzOmRldicsXG4gICAgICAgICdjb3B5OmRldicsXG4gICAgICAgICdjb2ZmZWU6ZGV2J1xuICAgIF0pO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zjg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5SaGMydHpMM0psWjJsemRHVnlMMk52YlhCcGJHVkJjM05sZEhNdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3T3pzN096czdPenM3T3p0SFFWbEhPMEZCUTBnc1RVRkJUU3hEUVVGRExFOUJRVThzUjBGQlJ5eFZRVUZUTEV0QlFVczdTVUZETjBJc1MwRkJTeXhEUVVGRExGbEJRVmtzUTBGQlF5eGxRVUZsTEVWQlFVVTdVVUZEYkVNc1YwRkJWenRSUVVOWUxGTkJRVk03VVVGRFZDeFZRVUZWTzFGQlExWXNWVUZCVlR0UlFVTldMRmxCUVZrN1MwRkRZaXhEUVVGRExFTkJRVU03UVVGRFRDeERRVUZETEVOQlFVTWlMQ0ptYVd4bElqb2lkR0Z6YTNNdmNtVm5hWE4wWlhJdlkyOXRjR2xzWlVGemMyVjBjeTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLbHh1SUNvZ1lHTnZiWEJwYkdWQmMzTmxkSE5nWEc0Z0tseHVJQ29nTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0WEc0Z0tseHVJQ29nVkdocGN5QkhjblZ1ZENCMFlYTnJiR2x6ZENCcGN5QnViM1FnWkdWemFXZHVaV1FnZEc4Z1ltVWdkWE5sWkNCa2FYSmxZM1JzZVMwdElISmhkR2hsY2x4dUlDb2dhWFFnYVhNZ1lTQm9aV3h3WlhJZ1kyRnNiR1ZrSUdKNUlIUm9aU0JnWkdWbVlYVnNkR0FzSUdCd2NtOWtZQ3dnWUdKMWFXeGtZQ3dnWVc1a1hHNGdLaUJnWW5WcGJHUlFjbTlrWUNCMFlYTnJiR2x6ZEhNdVhHNGdLbHh1SUNvZ1JtOXlJRzF2Y21VZ2FXNW1iM0p0WVhScGIyNGdjMlZsT2x4dUlDb2dJQ0JvZEhSd09pOHZjMkZwYkhOcWN5NXZjbWN2Wkc5amRXMWxiblJoZEdsdmJpOWhibUYwYjIxNUwyMTVMV0Z3Y0M5MFlYTnJjeTl5WldkcGMzUmxjaTlqYjIxd2FXeGxMV0Z6YzJWMGN5MXFjMXh1SUNwY2JpQXFMMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWhuY25WdWRDa2dlMXh1SUNCbmNuVnVkQzV5WldkcGMzUmxjbFJoYzJzb0oyTnZiWEJwYkdWQmMzTmxkSE1uTENCYlhHNGdJQ0FnSjJOc1pXRnVPbVJsZGljc1hHNGdJQ0FnSjJwemREcGtaWFluTEZ4dUlDQWdJQ2RzWlhOek9tUmxkaWNzWEc0Z0lDQWdKMk52Y0hrNlpHVjJKeXhjYmlBZ0lDQW5ZMjltWm1WbE9tUmxkaWRjYmlBZ1hTazdYRzU5TzF4dUlsMTlcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJblJoYzJ0ekwzSmxaMmx6ZEdWeUwyTnZiWEJwYkdWQmMzTmxkSE11YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdPenM3T3pzN096czdPenRIUVZsSE8wRkJRMGdzVFVGQlRTeERRVUZETEU5QlFVOHNSMEZCUnl4VlFVRlZMRXRCUVVzN1NVRkROVUlzUzBGQlN5eERRVUZETEZsQlFWa3NRMEZCUXl4bFFVRmxMRVZCUVVVN1VVRkRhRU1zVjBGQlZ6dFJRVU5ZTEZOQlFWTTdVVUZEVkN4VlFVRlZPMUZCUTFZc1ZVRkJWVHRSUVVOV0xGbEJRVms3UzBGRFppeERRVUZETEVOQlFVTTdRVUZEVUN4RFFVRkRMRU5CUVVNN1FVRkZSaXd5ZEVOQlFUSjBReUlzSW1acGJHVWlPaUowWVhOcmN5OXlaV2RwYzNSbGNpOWpiMjF3YVd4bFFYTnpaWFJ6TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xWEc0Z0tpQmdZMjl0Y0dsc1pVRnpjMlYwYzJCY2JpQXFYRzRnS2lBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMxY2JpQXFYRzRnS2lCVWFHbHpJRWR5ZFc1MElIUmhjMnRzYVhOMElHbHpJRzV2ZENCa1pYTnBaMjVsWkNCMGJ5QmlaU0IxYzJWa0lHUnBjbVZqZEd4NUxTMGdjbUYwYUdWeVhHNGdLaUJwZENCcGN5QmhJR2hsYkhCbGNpQmpZV3hzWldRZ1lua2dkR2hsSUdCa1pXWmhkV3gwWUN3Z1lIQnliMlJnTENCZ1luVnBiR1JnTENCaGJtUmNiaUFxSUdCaWRXbHNaRkJ5YjJSZ0lIUmhjMnRzYVhOMGN5NWNiaUFxWEc0Z0tpQkdiM0lnYlc5eVpTQnBibVp2Y20xaGRHbHZiaUJ6WldVNlhHNGdLaUFnSUdoMGRIQTZMeTl6WVdsc2MycHpMbTl5Wnk5a2IyTjFiV1Z1ZEdGMGFXOXVMMkZ1WVhSdmJYa3ZiWGt0WVhCd0wzUmhjMnR6TDNKbFoybHpkR1Z5TDJOdmJYQnBiR1V0WVhOelpYUnpMV3B6WEc0Z0tseHVJQ292WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1SUNobmNuVnVkQ2tnZTF4dUlDQWdJR2R5ZFc1MExuSmxaMmx6ZEdWeVZHRnpheWduWTI5dGNHbHNaVUZ6YzJWMGN5Y3NJRnRjYmlBZ0lDQWdJQ0FnSjJOc1pXRnVPbVJsZGljc1hHNGdJQ0FnSUNBZ0lDZHFjM1E2WkdWMkp5eGNiaUFnSUNBZ0lDQWdKMnhsYzNNNlpHVjJKeXhjYmlBZ0lDQWdJQ0FnSjJOdmNIazZaR1YySnl4Y2JpQWdJQ0FnSUNBZ0oyTnZabVpsWlRwa1pYWW5YRzRnSUNBZ1hTazdYRzU5TzF4dVhHNHZMeU1nYzI5MWNtTmxUV0Z3Y0dsdVoxVlNURDFrWVhSaE9tRndjR3hwWTJGMGFXOXVMMnB6YjI0N1kyaGhjbk5sZEQxMWRHWTRPMkpoYzJVMk5DeGxlVW95V2xoS2VtRlhPWFZKYW05NlRFTktlbUl6Vm5sWk1sWjZTV3B3WWtsdVVtaGpNblI2VEROS2JGb3liSHBrUjFaNVRESk9kbUpZUW5CaVIxWkNZek5PYkdSSVRYVmhiazFwV0ZOM2FXSnRSblJhV0UxcFQyeDBaRXhEU25SWldFSjNZVmMxYm1ONVNUWkphMFpDVVZWRk4wOTZjemRQZW5NM1QzcHpOMDk2ZEVoUlZteElUekJHUWxFd1ozTlVWVVpDVkZONFJGRlZSa1JNUlRsQ1VWVTRjMUl3UmtKU2VYaFdVVlZHVkV4RmRFSlJWWE0zVTFWR1JFNHdTWE5UTUVaQ1UzbDRSRkZWUmtSTVJteENVVlpyYzFFd1JrSlJlWGhzVVZWR2JFeEZWa0pSVlZVM1ZWVkdSR0pGVFhOV01FWkNWbnAwVWxGVlRsbE1SazVDVVZaTk4xVlZSa1JXUTNoV1VWVkdWazh4UmtKUk1WbHpWbFZHUWxaVWRGSlJWVTVYVEVac1FsRldhemRUTUVaRVdXbDRSRkZWUmtSTVJVNUNVVlZOTjFGVlJrUlVRM2hFVVZWR1JFeEZUa0pSVlUxcFRFTktiV0ZYZUd4SmFtOXBaRWRHZW1FelRYWmpiVlp1WVZoT01GcFlTWFpaTWpsMFkwZHNjMXBWUm5wak1sWXdZM2sxY1dONVNYTkpiazUyWkZoS2FscFlUa1JpTWpVd1dsYzFNRWxxY0dKSmFUaHhTMng0ZFVsRGIyZFpSMDUyWWxoQ2NHSkhWa0pqTTA1c1pFaE9aMWhITkdkTGJIaDFTVU52WjB4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RGaEhOR2RMYkhoMVNVTnZaMVpIYUhCamVVSklZMjVXZFdSRFFqQlpXRTV5WWtkc2VtUkRRbkJqZVVKMVlqTlJaMXBIVm5waFYyUjFXbGRSWjJSSE9HZFpiVlZuWkZoT2JGcERRbXRoV0Vwc1dUTlNjMlZUTUhSSlNFcG9aRWRvYkdOc2VIVkpRMjluWVZoUloyRllUV2RaVTBKdldsZDRkMXBZU1dkWk1rWnpZa2RXYTBsSFNqVkpTRkp2V2xOQ1oxcEhWbTFaV0ZaelpFZEJjMGxIUW5kamJUbHJXVU4zWjFsSFNqRmhWM2hyV1VOM1oxbFhOV3RZUnpSblMybENaMWx1Vm5CaVIxSlJZMjA1YTFsRFFqQlpXRTV5WWtkc2VtUklUWFZZUnpSblMyeDRkVWxEYjJkU2JUbDVTVWN4ZG1OdFZXZGhWelZ0WWpOS2RGbFlVbkJpTWpSbll6SldiRTlzZUhWSlEyOW5TVU5DYjJSSVVuZFBhVGgyWXpKR2NHSklUbkZqZVRWMlkyMWpkbHBIT1dwa1Z6RnNZbTVTYUdSSGJIWmlhVGxvWW0xR01HSXlNVFZNTWpFMVRGZEdkMk5ET1RCWldFNXlZM2s1ZVZwWFpIQmpNMUpzWTJrNWFtSXlNWGRoVjNoc1RGZEdlbU15VmpCamVURnhZekY0ZFVsRGNHTmlhVUZ4VERGNGRXSlhPV3RrVjNoc1RHMVdOR05IT1hsa1NFMW5VRk5DYldSWE5XcGtSMngyWW1sb2JtTnVWblZrUTJ0blpURjRkVWxEUW01amJsWjFaRU0xZVZwWFpIQmpNMUpzWTJ4U2FHTXljMjlLTWs1MllsaENjR0pIVmtKak0wNXNaRWhOYmt4RFFtSllSelJuU1VOQlowb3lUbk5hVjBaMVQyMVNiR1JwWTNOWVJ6Um5TVU5CWjBveWNIcGtSSEJyV2xoWmJreEdlSFZKUTBGblNVTmtjMXBZVG5wUGJWSnNaR2xqYzFoSE5HZEpRMEZuU2pKT2RtTklhelphUjFZeVNubDRZMkpwUVdkSlEwRnVXVEk1YlZwdFZteFBiVkpzWkdsa1kySnBRV2RZVTJzM1dFYzFPVTh4ZUhWSmJERTVYRzRpWFgwPVxuIl19
