/**
 * grunt/pipeline.js
 *
 * The order in which your css, javascript, and template files should be
 * compiled and linked from your views and static HTML files.
 *
 * (Note that you can take advantage of Grunt-style wildcard/glob/splat expressions
 * for matching multiple files, and ! in front of an expression to ignore files.)
 *
 * For more information see:
 *   https://github.com/balderdashy/sails-docs/blob/master/anatomy/myApp/tasks/pipeline.js.md
 */
// CSS files to inject in order
//
// (if you're using LESS with the built-in default config, you'll want
//  to change `assets/styles/importer.less` instead.)
var cssFilesToInject = [
    'styles/**/*.css'
];
// Client-side javascript files to inject in order
// (uses Grunt-style wildcard/glob/splat expressions)
var jsFilesToInject = [
    // Load sails.io before everything else
    'js/dependencies/sails.io.js',
    // Dependencies like jQuery, or Angular are brought in here
    'js/dependencies/**/*.js',
    // All of the rest of your client-side js files
    // will be injected here in no particular order.
    'js/**/*.js'
];
// Client-side HTML templates are injected using the sources below
// The ordering of these templates shouldn't matter.
// (uses Grunt-style wildcard/glob/splat expressions)
//
// By default, Sails uses JST templates and precompiles them into
// functions for you.  If you want to use jade, handlebars, dust, etc.,
// with the linker, no problem-- you'll just want to make sure the precompiled
// templates get spit out to the same file.  Be sure and check out `tasks/README.md`
// for information on customizing and installing new tasks.
var templateFilesToInject = [
    'templates/**/*.html'
];
// Default path for public folder (see documentation for more information)
var tmpPath = '.tmp/public/';
// Prefix relative paths to source files so they point to the proper locations
// (i.e. where the other Grunt tasks spit them out, or in some cases, where
// they reside in the first place)
module.exports.cssFilesToInject = cssFilesToInject.map(function (cssPath) {
    // If we're ignoring the file, make sure the ! is at the beginning of the path
    if (cssPath[0] === '!') {
        return require('path').join('!.tmp/public/', cssPath.substr(1));
    }
    return require('path').join('.tmp/public/', cssPath);
});
module.exports.jsFilesToInject = jsFilesToInject.map(function (jsPath) {
    // If we're ignoring the file, make sure the ! is at the beginning of the path
    if (jsPath[0] === '!') {
        return require('path').join('!.tmp/public/', jsPath.substr(1));
    }
    return require('path').join('.tmp/public/', jsPath);
});
module.exports.templateFilesToInject = templateFilesToInject.map(function (tplPath) {
    // If we're ignoring the file, make sure the ! is at the beginning of the path
    if (tplPath[0] === '!') {
        return require('path').join('!assets/', tplPath.substr(1));
    }
    return require('path').join('assets/', tplPath);
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRhc2tzL3BpcGVsaW5lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztHQVdHO0FBR0gsK0JBQStCO0FBQy9CLEVBQUU7QUFDRixzRUFBc0U7QUFDdEUscURBQXFEO0FBQ3JELElBQUksZ0JBQWdCLEdBQUc7SUFDckIsaUJBQWlCO0NBQ2xCLENBQUM7QUFHRixrREFBa0Q7QUFDbEQscURBQXFEO0FBQ3JELElBQUksZUFBZSxHQUFHO0lBRXBCLHVDQUF1QztJQUN2Qyw2QkFBNkI7SUFFN0IsMkRBQTJEO0lBQzNELHlCQUF5QjtJQUV6QiwrQ0FBK0M7SUFDL0MsZ0RBQWdEO0lBQ2hELFlBQVk7Q0FDYixDQUFDO0FBR0Ysa0VBQWtFO0FBQ2xFLG9EQUFvRDtBQUNwRCxxREFBcUQ7QUFDckQsRUFBRTtBQUNGLGlFQUFpRTtBQUNqRSx1RUFBdUU7QUFDdkUsOEVBQThFO0FBQzlFLG9GQUFvRjtBQUNwRiwyREFBMkQ7QUFDM0QsSUFBSSxxQkFBcUIsR0FBRztJQUMxQixxQkFBcUI7Q0FDdEIsQ0FBQztBQVFGLDBFQUEwRTtBQUMxRSxJQUFJLE9BQU8sR0FBRyxjQUFjLENBQUM7QUFFN0IsOEVBQThFO0FBQzlFLDJFQUEyRTtBQUMzRSxrQ0FBa0M7QUFDbEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsVUFBUyxPQUFPO0lBQ3JFLDhFQUE4RTtJQUM5RSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2QixNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFDRCxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDdkQsQ0FBQyxDQUFDLENBQUM7QUFDSCxNQUFNLENBQUMsT0FBTyxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUMsR0FBRyxDQUFDLFVBQVMsTUFBTTtJQUNsRSw4RUFBOEU7SUFDOUUsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBQ0QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3RELENBQUMsQ0FBQyxDQUFDO0FBQ0gsTUFBTSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsR0FBRyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsVUFBUyxPQUFPO0lBQy9FLDhFQUE4RTtJQUM5RSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2QixNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFDRCxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUMsT0FBTyxDQUFDLENBQUM7QUFDakQsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoidGFza3MvcGlwZWxpbmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIGdydW50L3BpcGVsaW5lLmpzXG4gKlxuICogVGhlIG9yZGVyIGluIHdoaWNoIHlvdXIgY3NzLCBqYXZhc2NyaXB0LCBhbmQgdGVtcGxhdGUgZmlsZXMgc2hvdWxkIGJlXG4gKiBjb21waWxlZCBhbmQgbGlua2VkIGZyb20geW91ciB2aWV3cyBhbmQgc3RhdGljIEhUTUwgZmlsZXMuXG4gKlxuICogKE5vdGUgdGhhdCB5b3UgY2FuIHRha2UgYWR2YW50YWdlIG9mIEdydW50LXN0eWxlIHdpbGRjYXJkL2dsb2Ivc3BsYXQgZXhwcmVzc2lvbnNcbiAqIGZvciBtYXRjaGluZyBtdWx0aXBsZSBmaWxlcywgYW5kICEgaW4gZnJvbnQgb2YgYW4gZXhwcmVzc2lvbiB0byBpZ25vcmUgZmlsZXMuKVxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uIHNlZTpcbiAqICAgaHR0cHM6Ly9naXRodWIuY29tL2JhbGRlcmRhc2h5L3NhaWxzLWRvY3MvYmxvYi9tYXN0ZXIvYW5hdG9teS9teUFwcC90YXNrcy9waXBlbGluZS5qcy5tZFxuICovXG5cblxuLy8gQ1NTIGZpbGVzIHRvIGluamVjdCBpbiBvcmRlclxuLy9cbi8vIChpZiB5b3UncmUgdXNpbmcgTEVTUyB3aXRoIHRoZSBidWlsdC1pbiBkZWZhdWx0IGNvbmZpZywgeW91J2xsIHdhbnRcbi8vICB0byBjaGFuZ2UgYGFzc2V0cy9zdHlsZXMvaW1wb3J0ZXIubGVzc2AgaW5zdGVhZC4pXG52YXIgY3NzRmlsZXNUb0luamVjdCA9IFtcbiAgJ3N0eWxlcy8qKi8qLmNzcydcbl07XG5cblxuLy8gQ2xpZW50LXNpZGUgamF2YXNjcmlwdCBmaWxlcyB0byBpbmplY3QgaW4gb3JkZXJcbi8vICh1c2VzIEdydW50LXN0eWxlIHdpbGRjYXJkL2dsb2Ivc3BsYXQgZXhwcmVzc2lvbnMpXG52YXIganNGaWxlc1RvSW5qZWN0ID0gW1xuXG4gIC8vIExvYWQgc2FpbHMuaW8gYmVmb3JlIGV2ZXJ5dGhpbmcgZWxzZVxuICAnanMvZGVwZW5kZW5jaWVzL3NhaWxzLmlvLmpzJyxcblxuICAvLyBEZXBlbmRlbmNpZXMgbGlrZSBqUXVlcnksIG9yIEFuZ3VsYXIgYXJlIGJyb3VnaHQgaW4gaGVyZVxuICAnanMvZGVwZW5kZW5jaWVzLyoqLyouanMnLFxuXG4gIC8vIEFsbCBvZiB0aGUgcmVzdCBvZiB5b3VyIGNsaWVudC1zaWRlIGpzIGZpbGVzXG4gIC8vIHdpbGwgYmUgaW5qZWN0ZWQgaGVyZSBpbiBubyBwYXJ0aWN1bGFyIG9yZGVyLlxuICAnanMvKiovKi5qcydcbl07XG5cblxuLy8gQ2xpZW50LXNpZGUgSFRNTCB0ZW1wbGF0ZXMgYXJlIGluamVjdGVkIHVzaW5nIHRoZSBzb3VyY2VzIGJlbG93XG4vLyBUaGUgb3JkZXJpbmcgb2YgdGhlc2UgdGVtcGxhdGVzIHNob3VsZG4ndCBtYXR0ZXIuXG4vLyAodXNlcyBHcnVudC1zdHlsZSB3aWxkY2FyZC9nbG9iL3NwbGF0IGV4cHJlc3Npb25zKVxuLy9cbi8vIEJ5IGRlZmF1bHQsIFNhaWxzIHVzZXMgSlNUIHRlbXBsYXRlcyBhbmQgcHJlY29tcGlsZXMgdGhlbSBpbnRvXG4vLyBmdW5jdGlvbnMgZm9yIHlvdS4gIElmIHlvdSB3YW50IHRvIHVzZSBqYWRlLCBoYW5kbGViYXJzLCBkdXN0LCBldGMuLFxuLy8gd2l0aCB0aGUgbGlua2VyLCBubyBwcm9ibGVtLS0geW91J2xsIGp1c3Qgd2FudCB0byBtYWtlIHN1cmUgdGhlIHByZWNvbXBpbGVkXG4vLyB0ZW1wbGF0ZXMgZ2V0IHNwaXQgb3V0IHRvIHRoZSBzYW1lIGZpbGUuICBCZSBzdXJlIGFuZCBjaGVjayBvdXQgYHRhc2tzL1JFQURNRS5tZGBcbi8vIGZvciBpbmZvcm1hdGlvbiBvbiBjdXN0b21pemluZyBhbmQgaW5zdGFsbGluZyBuZXcgdGFza3MuXG52YXIgdGVtcGxhdGVGaWxlc1RvSW5qZWN0ID0gW1xuICAndGVtcGxhdGVzLyoqLyouaHRtbCdcbl07XG5cblxuXG5cblxuXG5cbi8vIERlZmF1bHQgcGF0aCBmb3IgcHVibGljIGZvbGRlciAoc2VlIGRvY3VtZW50YXRpb24gZm9yIG1vcmUgaW5mb3JtYXRpb24pXG52YXIgdG1wUGF0aCA9ICcudG1wL3B1YmxpYy8nO1xuXG4vLyBQcmVmaXggcmVsYXRpdmUgcGF0aHMgdG8gc291cmNlIGZpbGVzIHNvIHRoZXkgcG9pbnQgdG8gdGhlIHByb3BlciBsb2NhdGlvbnNcbi8vIChpLmUuIHdoZXJlIHRoZSBvdGhlciBHcnVudCB0YXNrcyBzcGl0IHRoZW0gb3V0LCBvciBpbiBzb21lIGNhc2VzLCB3aGVyZVxuLy8gdGhleSByZXNpZGUgaW4gdGhlIGZpcnN0IHBsYWNlKVxubW9kdWxlLmV4cG9ydHMuY3NzRmlsZXNUb0luamVjdCA9IGNzc0ZpbGVzVG9JbmplY3QubWFwKGZ1bmN0aW9uKGNzc1BhdGgpIHtcbiAgLy8gSWYgd2UncmUgaWdub3JpbmcgdGhlIGZpbGUsIG1ha2Ugc3VyZSB0aGUgISBpcyBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBwYXRoXG4gIGlmIChjc3NQYXRoWzBdID09PSAnIScpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgncGF0aCcpLmpvaW4oJyEudG1wL3B1YmxpYy8nLCBjc3NQYXRoLnN1YnN0cigxKSk7XG4gIH1cbiAgcmV0dXJuIHJlcXVpcmUoJ3BhdGgnKS5qb2luKCcudG1wL3B1YmxpYy8nLCBjc3NQYXRoKTtcbn0pO1xubW9kdWxlLmV4cG9ydHMuanNGaWxlc1RvSW5qZWN0ID0ganNGaWxlc1RvSW5qZWN0Lm1hcChmdW5jdGlvbihqc1BhdGgpIHtcbiAgLy8gSWYgd2UncmUgaWdub3JpbmcgdGhlIGZpbGUsIG1ha2Ugc3VyZSB0aGUgISBpcyBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBwYXRoXG4gIGlmIChqc1BhdGhbMF0gPT09ICchJykge1xuICAgIHJldHVybiByZXF1aXJlKCdwYXRoJykuam9pbignIS50bXAvcHVibGljLycsIGpzUGF0aC5zdWJzdHIoMSkpO1xuICB9XG4gIHJldHVybiByZXF1aXJlKCdwYXRoJykuam9pbignLnRtcC9wdWJsaWMvJywganNQYXRoKTtcbn0pO1xubW9kdWxlLmV4cG9ydHMudGVtcGxhdGVGaWxlc1RvSW5qZWN0ID0gdGVtcGxhdGVGaWxlc1RvSW5qZWN0Lm1hcChmdW5jdGlvbih0cGxQYXRoKSB7XG4gIC8vIElmIHdlJ3JlIGlnbm9yaW5nIHRoZSBmaWxlLCBtYWtlIHN1cmUgdGhlICEgaXMgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgcGF0aFxuICBpZiAodHBsUGF0aFswXSA9PT0gJyEnKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJ3BhdGgnKS5qb2luKCchYXNzZXRzLycsIHRwbFBhdGguc3Vic3RyKDEpKTtcbiAgfVxuICByZXR1cm4gcmVxdWlyZSgncGF0aCcpLmpvaW4oJ2Fzc2V0cy8nLHRwbFBhdGgpO1xufSk7XG5cblxuIl19
//# sourceMappingURL=data:application/json;charset=utf8;base64,
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRhc2tzL3BpcGVsaW5lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztHQVdHO0FBQ0gsK0JBQStCO0FBQy9CLEVBQUU7QUFDRixzRUFBc0U7QUFDdEUscURBQXFEO0FBQ3JELElBQUksZ0JBQWdCLEdBQUc7SUFDbkIsaUJBQWlCO0NBQ3BCLENBQUM7QUFDRixrREFBa0Q7QUFDbEQscURBQXFEO0FBQ3JELElBQUksZUFBZSxHQUFHO0lBQ2xCLHVDQUF1QztJQUN2Qyw2QkFBNkI7SUFDN0IsMkRBQTJEO0lBQzNELHlCQUF5QjtJQUN6QiwrQ0FBK0M7SUFDL0MsZ0RBQWdEO0lBQ2hELFlBQVk7Q0FDZixDQUFDO0FBQ0Ysa0VBQWtFO0FBQ2xFLG9EQUFvRDtBQUNwRCxxREFBcUQ7QUFDckQsRUFBRTtBQUNGLGlFQUFpRTtBQUNqRSx1RUFBdUU7QUFDdkUsOEVBQThFO0FBQzlFLG9GQUFvRjtBQUNwRiwyREFBMkQ7QUFDM0QsSUFBSSxxQkFBcUIsR0FBRztJQUN4QixxQkFBcUI7Q0FDeEIsQ0FBQztBQUNGLDBFQUEwRTtBQUMxRSxJQUFJLE9BQU8sR0FBRyxjQUFjLENBQUM7QUFDN0IsOEVBQThFO0FBQzlFLDJFQUEyRTtBQUMzRSxrQ0FBa0M7QUFDbEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsVUFBVSxPQUFPO0lBQ3BFLDhFQUE4RTtJQUM5RSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNyQixNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFDRCxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDekQsQ0FBQyxDQUFDLENBQUM7QUFDSCxNQUFNLENBQUMsT0FBTyxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUMsR0FBRyxDQUFDLFVBQVUsTUFBTTtJQUNqRSw4RUFBOEU7SUFDOUUsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDcEIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBQ0QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3hELENBQUMsQ0FBQyxDQUFDO0FBQ0gsTUFBTSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsR0FBRyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsVUFBVSxPQUFPO0lBQzlFLDhFQUE4RTtJQUM5RSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNyQixNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFDRCxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDcEQsQ0FBQyxDQUFDLENBQUM7QUFDSCx1c01BQXVzTTtBQUN2c00sbWdkQUFtZ2Q7QUFFbmdkLHUzakNBQXUzakMiLCJmaWxlIjoidGFza3MvcGlwZWxpbmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIGdydW50L3BpcGVsaW5lLmpzXG4gKlxuICogVGhlIG9yZGVyIGluIHdoaWNoIHlvdXIgY3NzLCBqYXZhc2NyaXB0LCBhbmQgdGVtcGxhdGUgZmlsZXMgc2hvdWxkIGJlXG4gKiBjb21waWxlZCBhbmQgbGlua2VkIGZyb20geW91ciB2aWV3cyBhbmQgc3RhdGljIEhUTUwgZmlsZXMuXG4gKlxuICogKE5vdGUgdGhhdCB5b3UgY2FuIHRha2UgYWR2YW50YWdlIG9mIEdydW50LXN0eWxlIHdpbGRjYXJkL2dsb2Ivc3BsYXQgZXhwcmVzc2lvbnNcbiAqIGZvciBtYXRjaGluZyBtdWx0aXBsZSBmaWxlcywgYW5kICEgaW4gZnJvbnQgb2YgYW4gZXhwcmVzc2lvbiB0byBpZ25vcmUgZmlsZXMuKVxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uIHNlZTpcbiAqICAgaHR0cHM6Ly9naXRodWIuY29tL2JhbGRlcmRhc2h5L3NhaWxzLWRvY3MvYmxvYi9tYXN0ZXIvYW5hdG9teS9teUFwcC90YXNrcy9waXBlbGluZS5qcy5tZFxuICovXG4vLyBDU1MgZmlsZXMgdG8gaW5qZWN0IGluIG9yZGVyXG4vL1xuLy8gKGlmIHlvdSdyZSB1c2luZyBMRVNTIHdpdGggdGhlIGJ1aWx0LWluIGRlZmF1bHQgY29uZmlnLCB5b3UnbGwgd2FudFxuLy8gIHRvIGNoYW5nZSBgYXNzZXRzL3N0eWxlcy9pbXBvcnRlci5sZXNzYCBpbnN0ZWFkLilcbnZhciBjc3NGaWxlc1RvSW5qZWN0ID0gW1xuICAgICdzdHlsZXMvKiovKi5jc3MnXG5dO1xuLy8gQ2xpZW50LXNpZGUgamF2YXNjcmlwdCBmaWxlcyB0byBpbmplY3QgaW4gb3JkZXJcbi8vICh1c2VzIEdydW50LXN0eWxlIHdpbGRjYXJkL2dsb2Ivc3BsYXQgZXhwcmVzc2lvbnMpXG52YXIganNGaWxlc1RvSW5qZWN0ID0gW1xuICAgIC8vIExvYWQgc2FpbHMuaW8gYmVmb3JlIGV2ZXJ5dGhpbmcgZWxzZVxuICAgICdqcy9kZXBlbmRlbmNpZXMvc2FpbHMuaW8uanMnLFxuICAgIC8vIERlcGVuZGVuY2llcyBsaWtlIGpRdWVyeSwgb3IgQW5ndWxhciBhcmUgYnJvdWdodCBpbiBoZXJlXG4gICAgJ2pzL2RlcGVuZGVuY2llcy8qKi8qLmpzJyxcbiAgICAvLyBBbGwgb2YgdGhlIHJlc3Qgb2YgeW91ciBjbGllbnQtc2lkZSBqcyBmaWxlc1xuICAgIC8vIHdpbGwgYmUgaW5qZWN0ZWQgaGVyZSBpbiBubyBwYXJ0aWN1bGFyIG9yZGVyLlxuICAgICdqcy8qKi8qLmpzJ1xuXTtcbi8vIENsaWVudC1zaWRlIEhUTUwgdGVtcGxhdGVzIGFyZSBpbmplY3RlZCB1c2luZyB0aGUgc291cmNlcyBiZWxvd1xuLy8gVGhlIG9yZGVyaW5nIG9mIHRoZXNlIHRlbXBsYXRlcyBzaG91bGRuJ3QgbWF0dGVyLlxuLy8gKHVzZXMgR3J1bnQtc3R5bGUgd2lsZGNhcmQvZ2xvYi9zcGxhdCBleHByZXNzaW9ucylcbi8vXG4vLyBCeSBkZWZhdWx0LCBTYWlscyB1c2VzIEpTVCB0ZW1wbGF0ZXMgYW5kIHByZWNvbXBpbGVzIHRoZW0gaW50b1xuLy8gZnVuY3Rpb25zIGZvciB5b3UuICBJZiB5b3Ugd2FudCB0byB1c2UgamFkZSwgaGFuZGxlYmFycywgZHVzdCwgZXRjLixcbi8vIHdpdGggdGhlIGxpbmtlciwgbm8gcHJvYmxlbS0tIHlvdSdsbCBqdXN0IHdhbnQgdG8gbWFrZSBzdXJlIHRoZSBwcmVjb21waWxlZFxuLy8gdGVtcGxhdGVzIGdldCBzcGl0IG91dCB0byB0aGUgc2FtZSBmaWxlLiAgQmUgc3VyZSBhbmQgY2hlY2sgb3V0IGB0YXNrcy9SRUFETUUubWRgXG4vLyBmb3IgaW5mb3JtYXRpb24gb24gY3VzdG9taXppbmcgYW5kIGluc3RhbGxpbmcgbmV3IHRhc2tzLlxudmFyIHRlbXBsYXRlRmlsZXNUb0luamVjdCA9IFtcbiAgICAndGVtcGxhdGVzLyoqLyouaHRtbCdcbl07XG4vLyBEZWZhdWx0IHBhdGggZm9yIHB1YmxpYyBmb2xkZXIgKHNlZSBkb2N1bWVudGF0aW9uIGZvciBtb3JlIGluZm9ybWF0aW9uKVxudmFyIHRtcFBhdGggPSAnLnRtcC9wdWJsaWMvJztcbi8vIFByZWZpeCByZWxhdGl2ZSBwYXRocyB0byBzb3VyY2UgZmlsZXMgc28gdGhleSBwb2ludCB0byB0aGUgcHJvcGVyIGxvY2F0aW9uc1xuLy8gKGkuZS4gd2hlcmUgdGhlIG90aGVyIEdydW50IHRhc2tzIHNwaXQgdGhlbSBvdXQsIG9yIGluIHNvbWUgY2FzZXMsIHdoZXJlXG4vLyB0aGV5IHJlc2lkZSBpbiB0aGUgZmlyc3QgcGxhY2UpXG5tb2R1bGUuZXhwb3J0cy5jc3NGaWxlc1RvSW5qZWN0ID0gY3NzRmlsZXNUb0luamVjdC5tYXAoZnVuY3Rpb24gKGNzc1BhdGgpIHtcbiAgICAvLyBJZiB3ZSdyZSBpZ25vcmluZyB0aGUgZmlsZSwgbWFrZSBzdXJlIHRoZSAhIGlzIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIHBhdGhcbiAgICBpZiAoY3NzUGF0aFswXSA9PT0gJyEnKSB7XG4gICAgICAgIHJldHVybiByZXF1aXJlKCdwYXRoJykuam9pbignIS50bXAvcHVibGljLycsIGNzc1BhdGguc3Vic3RyKDEpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcXVpcmUoJ3BhdGgnKS5qb2luKCcudG1wL3B1YmxpYy8nLCBjc3NQYXRoKTtcbn0pO1xubW9kdWxlLmV4cG9ydHMuanNGaWxlc1RvSW5qZWN0ID0ganNGaWxlc1RvSW5qZWN0Lm1hcChmdW5jdGlvbiAoanNQYXRoKSB7XG4gICAgLy8gSWYgd2UncmUgaWdub3JpbmcgdGhlIGZpbGUsIG1ha2Ugc3VyZSB0aGUgISBpcyBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBwYXRoXG4gICAgaWYgKGpzUGF0aFswXSA9PT0gJyEnKSB7XG4gICAgICAgIHJldHVybiByZXF1aXJlKCdwYXRoJykuam9pbignIS50bXAvcHVibGljLycsIGpzUGF0aC5zdWJzdHIoMSkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVxdWlyZSgncGF0aCcpLmpvaW4oJy50bXAvcHVibGljLycsIGpzUGF0aCk7XG59KTtcbm1vZHVsZS5leHBvcnRzLnRlbXBsYXRlRmlsZXNUb0luamVjdCA9IHRlbXBsYXRlRmlsZXNUb0luamVjdC5tYXAoZnVuY3Rpb24gKHRwbFBhdGgpIHtcbiAgICAvLyBJZiB3ZSdyZSBpZ25vcmluZyB0aGUgZmlsZSwgbWFrZSBzdXJlIHRoZSAhIGlzIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIHBhdGhcbiAgICBpZiAodHBsUGF0aFswXSA9PT0gJyEnKSB7XG4gICAgICAgIHJldHVybiByZXF1aXJlKCdwYXRoJykuam9pbignIWFzc2V0cy8nLCB0cGxQYXRoLnN1YnN0cigxKSk7XG4gICAgfVxuICAgIHJldHVybiByZXF1aXJlKCdwYXRoJykuam9pbignYXNzZXRzLycsIHRwbFBhdGgpO1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGY4O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluUmhjMnR6TDNCcGNHVnNhVzVsTG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPenM3T3pzN096czdPenRIUVZkSE8wRkJSMGdzSzBKQlFTdENPMEZCUXk5Q0xFVkJRVVU3UVVGRFJpeHpSVUZCYzBVN1FVRkRkRVVzY1VSQlFYRkVPMEZCUTNKRUxFbEJRVWtzWjBKQlFXZENMRWRCUVVjN1NVRkRja0lzYVVKQlFXbENPME5CUTJ4Q0xFTkJRVU03UVVGSFJpeHJSRUZCYTBRN1FVRkRiRVFzY1VSQlFYRkVPMEZCUTNKRUxFbEJRVWtzWlVGQlpTeEhRVUZITzBsQlJYQkNMSFZEUVVGMVF6dEpRVU4yUXl3MlFrRkJOa0k3U1VGRk4wSXNNa1JCUVRKRU8wbEJRek5FTEhsQ1FVRjVRanRKUVVWNlFpd3JRMEZCSzBNN1NVRkRMME1zWjBSQlFXZEVPMGxCUTJoRUxGbEJRVms3UTBGRFlpeERRVUZETzBGQlIwWXNhMFZCUVd0Rk8wRkJRMnhGTEc5RVFVRnZSRHRCUVVOd1JDeHhSRUZCY1VRN1FVRkRja1FzUlVGQlJUdEJRVU5HTEdsRlFVRnBSVHRCUVVOcVJTeDFSVUZCZFVVN1FVRkRka1VzT0VWQlFUaEZPMEZCUXpsRkxHOUdRVUZ2Ump0QlFVTndSaXd5UkVGQk1rUTdRVUZETTBRc1NVRkJTU3h4UWtGQmNVSXNSMEZCUnp0SlFVTXhRaXh4UWtGQmNVSTdRMEZEZEVJc1EwRkJRenRCUVZGR0xEQkZRVUV3UlR0QlFVTXhSU3hKUVVGSkxFOUJRVThzUjBGQlJ5eGpRVUZqTEVOQlFVTTdRVUZGTjBJc09FVkJRVGhGTzBGQlF6bEZMREpGUVVFeVJUdEJRVU16UlN4clEwRkJhME03UVVGRGJFTXNUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhuUWtGQlowSXNSMEZCUnl4blFrRkJaMElzUTBGQlF5eEhRVUZITEVOQlFVTXNWVUZCVXl4UFFVRlBPMGxCUTNKRkxEaEZRVUU0UlR0SlFVTTVSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVzc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU4yUWl4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4bFFVRmxMRVZCUVVVc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTJ4RkxFTkJRVU03U1VGRFJDeE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eGpRVUZqTEVWQlFVVXNUMEZCVHl4RFFVRkRMRU5CUVVNN1FVRkRka1FzUTBGQlF5eERRVUZETEVOQlFVTTdRVUZEU0N4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExHVkJRV1VzUjBGQlJ5eGxRVUZsTEVOQlFVTXNSMEZCUnl4RFFVRkRMRlZCUVZNc1RVRkJUVHRKUVVOc1JTdzRSVUZCT0VVN1NVRkRPVVVzUlVGQlJTeERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEZEVJc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1pVRkJaU3hGUVVGRkxFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOcVJTeERRVUZETzBsQlEwUXNUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRE8wRkJRM1JFTEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTBnc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eHhRa0ZCY1VJc1IwRkJSeXh4UWtGQmNVSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1ZVRkJVeXhQUVVGUE8wbEJReTlGTERoRlFVRTRSVHRKUVVNNVJTeEZRVUZGTEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFdEJRVXNzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTjJRaXhOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVkxFVkJRVVVzVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRemRFTEVOQlFVTTdTVUZEUkN4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRVZCUVVNc1QwRkJUeXhEUVVGRExFTkJRVU03UVVGRGFrUXNRMEZCUXl4RFFVRkRMRU5CUVVNaUxDSm1hV3hsSWpvaWRHRnphM012Y0dsd1pXeHBibVV1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaXBjYmlBcUlHZHlkVzUwTDNCcGNHVnNhVzVsTG1welhHNGdLbHh1SUNvZ1ZHaGxJRzl5WkdWeUlHbHVJSGRvYVdOb0lIbHZkWElnWTNOekxDQnFZWFpoYzJOeWFYQjBMQ0JoYm1RZ2RHVnRjR3hoZEdVZ1ptbHNaWE1nYzJodmRXeGtJR0psWEc0Z0tpQmpiMjF3YVd4bFpDQmhibVFnYkdsdWEyVmtJR1p5YjIwZ2VXOTFjaUIyYVdWM2N5QmhibVFnYzNSaGRHbGpJRWhVVFV3Z1ptbHNaWE11WEc0Z0tseHVJQ29nS0U1dmRHVWdkR2hoZENCNWIzVWdZMkZ1SUhSaGEyVWdZV1IyWVc1MFlXZGxJRzltSUVkeWRXNTBMWE4wZVd4bElIZHBiR1JqWVhKa0wyZHNiMkl2YzNCc1lYUWdaWGh3Y21WemMybHZibk5jYmlBcUlHWnZjaUJ0WVhSamFHbHVaeUJ0ZFd4MGFYQnNaU0JtYVd4bGN5d2dZVzVrSUNFZ2FXNGdabkp2Ym5RZ2IyWWdZVzRnWlhod2NtVnpjMmx2YmlCMGJ5QnBaMjV2Y21VZ1ptbHNaWE11S1Z4dUlDcGNiaUFxSUVadmNpQnRiM0psSUdsdVptOXliV0YwYVc5dUlITmxaVHBjYmlBcUlDQWdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMMkpoYkdSbGNtUmhjMmg1TDNOaGFXeHpMV1J2WTNNdllteHZZaTl0WVhOMFpYSXZZVzVoZEc5dGVTOXRlVUZ3Y0M5MFlYTnJjeTl3YVhCbGJHbHVaUzVxY3k1dFpGeHVJQ292WEc1Y2JseHVMeThnUTFOVElHWnBiR1Z6SUhSdklHbHVhbVZqZENCcGJpQnZjbVJsY2x4dUx5OWNiaTh2SUNocFppQjViM1VuY21VZ2RYTnBibWNnVEVWVFV5QjNhWFJvSUhSb1pTQmlkV2xzZEMxcGJpQmtaV1poZFd4MElHTnZibVpwWnl3Z2VXOTFKMnhzSUhkaGJuUmNiaTh2SUNCMGJ5QmphR0Z1WjJVZ1lHRnpjMlYwY3k5emRIbHNaWE12YVcxd2IzSjBaWEl1YkdWemMyQWdhVzV6ZEdWaFpDNHBYRzUyWVhJZ1kzTnpSbWxzWlhOVWIwbHVhbVZqZENBOUlGdGNiaUFnSjNOMGVXeGxjeThxS2k4cUxtTnpjeWRjYmwwN1hHNWNibHh1THk4Z1EyeHBaVzUwTFhOcFpHVWdhbUYyWVhOamNtbHdkQ0JtYVd4bGN5QjBieUJwYm1wbFkzUWdhVzRnYjNKa1pYSmNiaTh2SUNoMWMyVnpJRWR5ZFc1MExYTjBlV3hsSUhkcGJHUmpZWEprTDJkc2IySXZjM0JzWVhRZ1pYaHdjbVZ6YzJsdmJuTXBYRzUyWVhJZ2FuTkdhV3hsYzFSdlNXNXFaV04wSUQwZ1cxeHVYRzRnSUM4dklFeHZZV1FnYzJGcGJITXVhVzhnWW1WbWIzSmxJR1YyWlhKNWRHaHBibWNnWld4elpWeHVJQ0FuYW5NdlpHVndaVzVrWlc1amFXVnpMM05oYVd4ekxtbHZMbXB6Snl4Y2JseHVJQ0F2THlCRVpYQmxibVJsYm1OcFpYTWdiR2xyWlNCcVVYVmxjbmtzSUc5eUlFRnVaM1ZzWVhJZ1lYSmxJR0p5YjNWbmFIUWdhVzRnYUdWeVpWeHVJQ0FuYW5NdlpHVndaVzVrWlc1amFXVnpMeW9xTHlvdWFuTW5MRnh1WEc0Z0lDOHZJRUZzYkNCdlppQjBhR1VnY21WemRDQnZaaUI1YjNWeUlHTnNhV1Z1ZEMxemFXUmxJR3B6SUdacGJHVnpYRzRnSUM4dklIZHBiR3dnWW1VZ2FXNXFaV04wWldRZ2FHVnlaU0JwYmlCdWJ5QndZWEowYVdOMWJHRnlJRzl5WkdWeUxseHVJQ0FuYW5Ndktpb3ZLaTVxY3lkY2JsMDdYRzVjYmx4dUx5OGdRMnhwWlc1MExYTnBaR1VnU0ZSTlRDQjBaVzF3YkdGMFpYTWdZWEpsSUdsdWFtVmpkR1ZrSUhWemFXNW5JSFJvWlNCemIzVnlZMlZ6SUdKbGJHOTNYRzR2THlCVWFHVWdiM0prWlhKcGJtY2diMllnZEdobGMyVWdkR1Z0Y0d4aGRHVnpJSE5vYjNWc1pHNG5kQ0J0WVhSMFpYSXVYRzR2THlBb2RYTmxjeUJIY25WdWRDMXpkSGxzWlNCM2FXeGtZMkZ5WkM5bmJHOWlMM053YkdGMElHVjRjSEpsYzNOcGIyNXpLVnh1THk5Y2JpOHZJRUo1SUdSbFptRjFiSFFzSUZOaGFXeHpJSFZ6WlhNZ1NsTlVJSFJsYlhCc1lYUmxjeUJoYm1RZ2NISmxZMjl0Y0dsc1pYTWdkR2hsYlNCcGJuUnZYRzR2THlCbWRXNWpkR2x2Ym5NZ1ptOXlJSGx2ZFM0Z0lFbG1JSGx2ZFNCM1lXNTBJSFJ2SUhWelpTQnFZV1JsTENCb1lXNWtiR1ZpWVhKekxDQmtkWE4wTENCbGRHTXVMRnh1THk4Z2QybDBhQ0IwYUdVZ2JHbHVhMlZ5TENCdWJ5QndjbTlpYkdWdExTMGdlVzkxSjJ4c0lHcDFjM1FnZDJGdWRDQjBieUJ0WVd0bElITjFjbVVnZEdobElIQnlaV052YlhCcGJHVmtYRzR2THlCMFpXMXdiR0YwWlhNZ1oyVjBJSE53YVhRZ2IzVjBJSFJ2SUhSb1pTQnpZVzFsSUdacGJHVXVJQ0JDWlNCemRYSmxJR0Z1WkNCamFHVmpheUJ2ZFhRZ1lIUmhjMnR6TDFKRlFVUk5SUzV0WkdCY2JpOHZJR1p2Y2lCcGJtWnZjbTFoZEdsdmJpQnZiaUJqZFhOMGIyMXBlbWx1WnlCaGJtUWdhVzV6ZEdGc2JHbHVaeUJ1WlhjZ2RHRnphM011WEc1MllYSWdkR1Z0Y0d4aGRHVkdhV3hsYzFSdlNXNXFaV04wSUQwZ1cxeHVJQ0FuZEdWdGNHeGhkR1Z6THlvcUx5b3VhSFJ0YkNkY2JsMDdYRzVjYmx4dVhHNWNibHh1WEc1Y2JpOHZJRVJsWm1GMWJIUWdjR0YwYUNCbWIzSWdjSFZpYkdsaklHWnZiR1JsY2lBb2MyVmxJR1J2WTNWdFpXNTBZWFJwYjI0Z1ptOXlJRzF2Y21VZ2FXNW1iM0p0WVhScGIyNHBYRzUyWVhJZ2RHMXdVR0YwYUNBOUlDY3VkRzF3TDNCMVlteHBZeThuTzF4dVhHNHZMeUJRY21WbWFYZ2djbVZzWVhScGRtVWdjR0YwYUhNZ2RHOGdjMjkxY21ObElHWnBiR1Z6SUhOdklIUm9aWGtnY0c5cGJuUWdkRzhnZEdobElIQnliM0JsY2lCc2IyTmhkR2x2Ym5OY2JpOHZJQ2hwTG1VdUlIZG9aWEpsSUhSb1pTQnZkR2hsY2lCSGNuVnVkQ0IwWVhOcmN5QnpjR2wwSUhSb1pXMGdiM1YwTENCdmNpQnBiaUJ6YjIxbElHTmhjMlZ6TENCM2FHVnlaVnh1THk4Z2RHaGxlU0J5WlhOcFpHVWdhVzRnZEdobElHWnBjbk4wSUhCc1lXTmxLVnh1Ylc5a2RXeGxMbVY0Y0c5eWRITXVZM056Um1sc1pYTlViMGx1YW1WamRDQTlJR056YzBacGJHVnpWRzlKYm1wbFkzUXViV0Z3S0daMWJtTjBhVzl1S0dOemMxQmhkR2dwSUh0Y2JpQWdMeThnU1dZZ2QyVW5jbVVnYVdkdWIzSnBibWNnZEdobElHWnBiR1VzSUcxaGEyVWdjM1Z5WlNCMGFHVWdJU0JwY3lCaGRDQjBhR1VnWW1WbmFXNXVhVzVuSUc5bUlIUm9aU0J3WVhSb1hHNGdJR2xtSUNoamMzTlFZWFJvV3pCZElEMDlQU0FuSVNjcElIdGNiaUFnSUNCeVpYUjFjbTRnY21WeGRXbHlaU2duY0dGMGFDY3BMbXB2YVc0b0p5RXVkRzF3TDNCMVlteHBZeThuTENCamMzTlFZWFJvTG5OMVluTjBjaWd4S1NrN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUhKbGNYVnBjbVVvSjNCaGRHZ25LUzVxYjJsdUtDY3VkRzF3TDNCMVlteHBZeThuTENCamMzTlFZWFJvS1R0Y2JuMHBPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITXVhbk5HYVd4bGMxUnZTVzVxWldOMElEMGdhbk5HYVd4bGMxUnZTVzVxWldOMExtMWhjQ2htZFc1amRHbHZiaWhxYzFCaGRHZ3BJSHRjYmlBZ0x5OGdTV1lnZDJVbmNtVWdhV2R1YjNKcGJtY2dkR2hsSUdacGJHVXNJRzFoYTJVZ2MzVnlaU0IwYUdVZ0lTQnBjeUJoZENCMGFHVWdZbVZuYVc1dWFXNW5JRzltSUhSb1pTQndZWFJvWEc0Z0lHbG1JQ2hxYzFCaGRHaGJNRjBnUFQwOUlDY2hKeWtnZTF4dUlDQWdJSEpsZEhWeWJpQnlaWEYxYVhKbEtDZHdZWFJvSnlrdWFtOXBiaWduSVM1MGJYQXZjSFZpYkdsakx5Y3NJR3B6VUdGMGFDNXpkV0p6ZEhJb01Ta3BPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQnlaWEYxYVhKbEtDZHdZWFJvSnlrdWFtOXBiaWduTG5SdGNDOXdkV0pzYVdNdkp5d2dhbk5RWVhSb0tUdGNibjBwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE11ZEdWdGNHeGhkR1ZHYVd4bGMxUnZTVzVxWldOMElEMGdkR1Z0Y0d4aGRHVkdhV3hsYzFSdlNXNXFaV04wTG0xaGNDaG1kVzVqZEdsdmJpaDBjR3hRWVhSb0tTQjdYRzRnSUM4dklFbG1JSGRsSjNKbElHbG5ibTl5YVc1bklIUm9aU0JtYVd4bExDQnRZV3RsSUhOMWNtVWdkR2hsSUNFZ2FYTWdZWFFnZEdobElHSmxaMmx1Ym1sdVp5QnZaaUIwYUdVZ2NHRjBhRnh1SUNCcFppQW9kSEJzVUdGMGFGc3dYU0E5UFQwZ0p5RW5LU0I3WEc0Z0lDQWdjbVYwZFhKdUlISmxjWFZwY21Vb0ozQmhkR2duS1M1cWIybHVLQ2NoWVhOelpYUnpMeWNzSUhSd2JGQmhkR2d1YzNWaWMzUnlLREVwS1R0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnY21WeGRXbHlaU2duY0dGMGFDY3BMbXB2YVc0b0oyRnpjMlYwY3k4bkxIUndiRkJoZEdncE8xeHVmU2s3WEc1Y2JseHVJbDE5XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGY4O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluUmhjMnR6TDNCcGNHVnNhVzVsTG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPenM3T3pzN096czdPenRIUVZkSE8wRkJRMGdzSzBKQlFTdENPMEZCUXk5Q0xFVkJRVVU3UVVGRFJpeHpSVUZCYzBVN1FVRkRkRVVzY1VSQlFYRkVPMEZCUTNKRUxFbEJRVWtzWjBKQlFXZENMRWRCUVVjN1NVRkRia0lzYVVKQlFXbENPME5CUTNCQ0xFTkJRVU03UVVGRFJpeHJSRUZCYTBRN1FVRkRiRVFzY1VSQlFYRkVPMEZCUTNKRUxFbEJRVWtzWlVGQlpTeEhRVUZITzBsQlEyeENMSFZEUVVGMVF6dEpRVU4yUXl3MlFrRkJOa0k3U1VGRE4wSXNNa1JCUVRKRU8wbEJRek5FTEhsQ1FVRjVRanRKUVVONlFpd3JRMEZCSzBNN1NVRkRMME1zWjBSQlFXZEVPMGxCUTJoRUxGbEJRVms3UTBGRFppeERRVUZETzBGQlEwWXNhMFZCUVd0Rk8wRkJRMnhGTEc5RVFVRnZSRHRCUVVOd1JDeHhSRUZCY1VRN1FVRkRja1FzUlVGQlJUdEJRVU5HTEdsRlFVRnBSVHRCUVVOcVJTeDFSVUZCZFVVN1FVRkRka1VzT0VWQlFUaEZPMEZCUXpsRkxHOUdRVUZ2Ump0QlFVTndSaXd5UkVGQk1rUTdRVUZETTBRc1NVRkJTU3h4UWtGQmNVSXNSMEZCUnp0SlFVTjRRaXh4UWtGQmNVSTdRMEZEZUVJc1EwRkJRenRCUVVOR0xEQkZRVUV3UlR0QlFVTXhSU3hKUVVGSkxFOUJRVThzUjBGQlJ5eGpRVUZqTEVOQlFVTTdRVUZETjBJc09FVkJRVGhGTzBGQlF6bEZMREpGUVVFeVJUdEJRVU16UlN4clEwRkJhME03UVVGRGJFTXNUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhuUWtGQlowSXNSMEZCUnl4blFrRkJaMElzUTBGQlF5eEhRVUZITEVOQlFVTXNWVUZCVlN4UFFVRlBPMGxCUTNCRkxEaEZRVUU0UlR0SlFVTTVSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVzc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU55UWl4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4bFFVRmxMRVZCUVVVc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTNCRkxFTkJRVU03U1VGRFJDeE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eGpRVUZqTEVWQlFVVXNUMEZCVHl4RFFVRkRMRU5CUVVNN1FVRkRla1FzUTBGQlF5eERRVUZETEVOQlFVTTdRVUZEU0N4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExHVkJRV1VzUjBGQlJ5eGxRVUZsTEVOQlFVTXNSMEZCUnl4RFFVRkRMRlZCUVZVc1RVRkJUVHRKUVVOcVJTdzRSVUZCT0VVN1NVRkRPVVVzUlVGQlJTeERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEY0VJc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1pVRkJaU3hGUVVGRkxFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOdVJTeERRVUZETzBsQlEwUXNUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRE8wRkJRM2hFTEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTBnc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eHhRa0ZCY1VJc1IwRkJSeXh4UWtGQmNVSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1ZVRkJWU3hQUVVGUE8wbEJRemxGTERoRlFVRTRSVHRKUVVNNVJTeEZRVUZGTEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFdEJRVXNzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTnlRaXhOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVkxFVkJRVVVzVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJReTlFTEVOQlFVTTdTVUZEUkN4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVU03UVVGRGNFUXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkZTQ3gxYzAxQlFYVnpUU0lzSW1acGJHVWlPaUowWVhOcmN5OXdhWEJsYkdsdVpTNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtseHVJQ29nWjNKMWJuUXZjR2x3Wld4cGJtVXVhbk5jYmlBcVhHNGdLaUJVYUdVZ2IzSmtaWElnYVc0Z2QyaHBZMmdnZVc5MWNpQmpjM01zSUdwaGRtRnpZM0pwY0hRc0lHRnVaQ0IwWlcxd2JHRjBaU0JtYVd4bGN5QnphRzkxYkdRZ1ltVmNiaUFxSUdOdmJYQnBiR1ZrSUdGdVpDQnNhVzVyWldRZ1puSnZiU0I1YjNWeUlIWnBaWGR6SUdGdVpDQnpkR0YwYVdNZ1NGUk5UQ0JtYVd4bGN5NWNiaUFxWEc0Z0tpQW9UbTkwWlNCMGFHRjBJSGx2ZFNCallXNGdkR0ZyWlNCaFpIWmhiblJoWjJVZ2IyWWdSM0oxYm5RdGMzUjViR1VnZDJsc1pHTmhjbVF2WjJ4dllpOXpjR3hoZENCbGVIQnlaWE56YVc5dWMxeHVJQ29nWm05eUlHMWhkR05vYVc1bklHMTFiSFJwY0d4bElHWnBiR1Z6TENCaGJtUWdJU0JwYmlCbWNtOXVkQ0J2WmlCaGJpQmxlSEJ5WlhOemFXOXVJSFJ2SUdsbmJtOXlaU0JtYVd4bGN5NHBYRzRnS2x4dUlDb2dSbTl5SUcxdmNtVWdhVzVtYjNKdFlYUnBiMjRnYzJWbE9seHVJQ29nSUNCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdlltRnNaR1Z5WkdGemFIa3ZjMkZwYkhNdFpHOWpjeTlpYkc5aUwyMWhjM1JsY2k5aGJtRjBiMjE1TDIxNVFYQndMM1JoYzJ0ekwzQnBjR1ZzYVc1bExtcHpMbTFrWEc0Z0tpOWNiaTh2SUVOVFV5Qm1hV3hsY3lCMGJ5QnBibXBsWTNRZ2FXNGdiM0prWlhKY2JpOHZYRzR2THlBb2FXWWdlVzkxSjNKbElIVnphVzVuSUV4RlUxTWdkMmwwYUNCMGFHVWdZblZwYkhRdGFXNGdaR1ZtWVhWc2RDQmpiMjVtYVdjc0lIbHZkU2RzYkNCM1lXNTBYRzR2THlBZ2RHOGdZMmhoYm1kbElHQmhjM05sZEhNdmMzUjViR1Z6TDJsdGNHOXlkR1Z5TG14bGMzTmdJR2x1YzNSbFlXUXVLVnh1ZG1GeUlHTnpjMFpwYkdWelZHOUpibXBsWTNRZ1BTQmJYRzRnSUNBZ0ozTjBlV3hsY3k4cUtpOHFMbU56Y3lkY2JsMDdYRzR2THlCRGJHbGxiblF0YzJsa1pTQnFZWFpoYzJOeWFYQjBJR1pwYkdWeklIUnZJR2x1YW1WamRDQnBiaUJ2Y21SbGNseHVMeThnS0hWelpYTWdSM0oxYm5RdGMzUjViR1VnZDJsc1pHTmhjbVF2WjJ4dllpOXpjR3hoZENCbGVIQnlaWE56YVc5dWN5bGNiblpoY2lCcWMwWnBiR1Z6Vkc5SmJtcGxZM1FnUFNCYlhHNGdJQ0FnTHk4Z1RHOWhaQ0J6WVdsc2N5NXBieUJpWldadmNtVWdaWFpsY25sMGFHbHVaeUJsYkhObFhHNGdJQ0FnSjJwekwyUmxjR1Z1WkdWdVkybGxjeTl6WVdsc2N5NXBieTVxY3ljc1hHNGdJQ0FnTHk4Z1JHVndaVzVrWlc1amFXVnpJR3hwYTJVZ2FsRjFaWEo1TENCdmNpQkJibWQxYkdGeUlHRnlaU0JpY205MVoyaDBJR2x1SUdobGNtVmNiaUFnSUNBbmFuTXZaR1Z3Wlc1a1pXNWphV1Z6THlvcUx5b3Vhbk1uTEZ4dUlDQWdJQzh2SUVGc2JDQnZaaUIwYUdVZ2NtVnpkQ0J2WmlCNWIzVnlJR05zYVdWdWRDMXphV1JsSUdweklHWnBiR1Z6WEc0Z0lDQWdMeThnZDJsc2JDQmlaU0JwYm1wbFkzUmxaQ0JvWlhKbElHbHVJRzV2SUhCaGNuUnBZM1ZzWVhJZ2IzSmtaWEl1WEc0Z0lDQWdKMnB6THlvcUx5b3Vhbk1uWEc1ZE8xeHVMeThnUTJ4cFpXNTBMWE5wWkdVZ1NGUk5UQ0IwWlcxd2JHRjBaWE1nWVhKbElHbHVhbVZqZEdWa0lIVnphVzVuSUhSb1pTQnpiM1Z5WTJWeklHSmxiRzkzWEc0dkx5QlVhR1VnYjNKa1pYSnBibWNnYjJZZ2RHaGxjMlVnZEdWdGNHeGhkR1Z6SUhOb2IzVnNaRzRuZENCdFlYUjBaWEl1WEc0dkx5QW9kWE5sY3lCSGNuVnVkQzF6ZEhsc1pTQjNhV3hrWTJGeVpDOW5iRzlpTDNOd2JHRjBJR1Y0Y0hKbGMzTnBiMjV6S1Z4dUx5OWNiaTh2SUVKNUlHUmxabUYxYkhRc0lGTmhhV3h6SUhWelpYTWdTbE5VSUhSbGJYQnNZWFJsY3lCaGJtUWdjSEpsWTI5dGNHbHNaWE1nZEdobGJTQnBiblJ2WEc0dkx5Qm1kVzVqZEdsdmJuTWdabTl5SUhsdmRTNGdJRWxtSUhsdmRTQjNZVzUwSUhSdklIVnpaU0JxWVdSbExDQm9ZVzVrYkdWaVlYSnpMQ0JrZFhOMExDQmxkR011TEZ4dUx5OGdkMmwwYUNCMGFHVWdiR2x1YTJWeUxDQnVieUJ3Y205aWJHVnRMUzBnZVc5MUoyeHNJR3AxYzNRZ2QyRnVkQ0IwYnlCdFlXdGxJSE4xY21VZ2RHaGxJSEJ5WldOdmJYQnBiR1ZrWEc0dkx5QjBaVzF3YkdGMFpYTWdaMlYwSUhOd2FYUWdiM1YwSUhSdklIUm9aU0J6WVcxbElHWnBiR1V1SUNCQ1pTQnpkWEpsSUdGdVpDQmphR1ZqYXlCdmRYUWdZSFJoYzJ0ekwxSkZRVVJOUlM1dFpHQmNiaTh2SUdadmNpQnBibVp2Y20xaGRHbHZiaUJ2YmlCamRYTjBiMjFwZW1sdVp5QmhibVFnYVc1emRHRnNiR2x1WnlCdVpYY2dkR0Z6YTNNdVhHNTJZWElnZEdWdGNHeGhkR1ZHYVd4bGMxUnZTVzVxWldOMElEMGdXMXh1SUNBZ0lDZDBaVzF3YkdGMFpYTXZLaW92S2k1b2RHMXNKMXh1WFR0Y2JpOHZJRVJsWm1GMWJIUWdjR0YwYUNCbWIzSWdjSFZpYkdsaklHWnZiR1JsY2lBb2MyVmxJR1J2WTNWdFpXNTBZWFJwYjI0Z1ptOXlJRzF2Y21VZ2FXNW1iM0p0WVhScGIyNHBYRzUyWVhJZ2RHMXdVR0YwYUNBOUlDY3VkRzF3TDNCMVlteHBZeThuTzF4dUx5OGdVSEpsWm1sNElISmxiR0YwYVhabElIQmhkR2h6SUhSdklITnZkWEpqWlNCbWFXeGxjeUJ6YnlCMGFHVjVJSEJ2YVc1MElIUnZJSFJvWlNCd2NtOXdaWElnYkc5allYUnBiMjV6WEc0dkx5QW9hUzVsTGlCM2FHVnlaU0IwYUdVZ2IzUm9aWElnUjNKMWJuUWdkR0Z6YTNNZ2MzQnBkQ0IwYUdWdElHOTFkQ3dnYjNJZ2FXNGdjMjl0WlNCallYTmxjeXdnZDJobGNtVmNiaTh2SUhSb1pYa2djbVZ6YVdSbElHbHVJSFJvWlNCbWFYSnpkQ0J3YkdGalpTbGNibTF2WkhWc1pTNWxlSEJ2Y25SekxtTnpjMFpwYkdWelZHOUpibXBsWTNRZ1BTQmpjM05HYVd4bGMxUnZTVzVxWldOMExtMWhjQ2htZFc1amRHbHZiaUFvWTNOelVHRjBhQ2tnZTF4dUlDQWdJQzh2SUVsbUlIZGxKM0psSUdsbmJtOXlhVzVuSUhSb1pTQm1hV3hsTENCdFlXdGxJSE4xY21VZ2RHaGxJQ0VnYVhNZ1lYUWdkR2hsSUdKbFoybHVibWx1WnlCdlppQjBhR1VnY0dGMGFGeHVJQ0FnSUdsbUlDaGpjM05RWVhSb1d6QmRJRDA5UFNBbklTY3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsY1hWcGNtVW9KM0JoZEdnbktTNXFiMmx1S0NjaExuUnRjQzl3ZFdKc2FXTXZKeXdnWTNOelVHRjBhQzV6ZFdKemRISW9NU2twTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2NtVnhkV2x5WlNnbmNHRjBhQ2NwTG1wdmFXNG9KeTUwYlhBdmNIVmliR2xqTHljc0lHTnpjMUJoZEdncE8xeHVmU2s3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeTVxYzBacGJHVnpWRzlKYm1wbFkzUWdQU0JxYzBacGJHVnpWRzlKYm1wbFkzUXViV0Z3S0daMWJtTjBhVzl1SUNocWMxQmhkR2dwSUh0Y2JpQWdJQ0F2THlCSlppQjNaU2R5WlNCcFoyNXZjbWx1WnlCMGFHVWdabWxzWlN3Z2JXRnJaU0J6ZFhKbElIUm9aU0FoSUdseklHRjBJSFJvWlNCaVpXZHBibTVwYm1jZ2IyWWdkR2hsSUhCaGRHaGNiaUFnSUNCcFppQW9hbk5RWVhSb1d6QmRJRDA5UFNBbklTY3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsY1hWcGNtVW9KM0JoZEdnbktTNXFiMmx1S0NjaExuUnRjQzl3ZFdKc2FXTXZKeXdnYW5OUVlYUm9Mbk4xWW5OMGNpZ3hLU2s3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCeVpYRjFhWEpsS0Nkd1lYUm9KeWt1YW05cGJpZ25MblJ0Y0M5d2RXSnNhV012Snl3Z2FuTlFZWFJvS1R0Y2JuMHBPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITXVkR1Z0Y0d4aGRHVkdhV3hsYzFSdlNXNXFaV04wSUQwZ2RHVnRjR3hoZEdWR2FXeGxjMVJ2U1c1cVpXTjBMbTFoY0NobWRXNWpkR2x2YmlBb2RIQnNVR0YwYUNrZ2UxeHVJQ0FnSUM4dklFbG1JSGRsSjNKbElHbG5ibTl5YVc1bklIUm9aU0JtYVd4bExDQnRZV3RsSUhOMWNtVWdkR2hsSUNFZ2FYTWdZWFFnZEdobElHSmxaMmx1Ym1sdVp5QnZaaUIwYUdVZ2NHRjBhRnh1SUNBZ0lHbG1JQ2gwY0d4UVlYUm9XekJkSUQwOVBTQW5JU2NwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKbGNYVnBjbVVvSjNCaGRHZ25LUzVxYjJsdUtDY2hZWE56WlhSekx5Y3NJSFJ3YkZCaGRHZ3VjM1ZpYzNSeUtERXBLVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUhKbGNYVnBjbVVvSjNCaGRHZ25LUzVxYjJsdUtDZGhjM05sZEhNdkp5d2dkSEJzVUdGMGFDazdYRzU5S1R0Y2JseHVMeThqSUhOdmRYSmpaVTFoY0hCcGJtZFZVa3c5WkdGMFlUcGhjSEJzYVdOaGRHbHZiaTlxYzI5dU8yTm9ZWEp6WlhROWRYUm1PRHRpWVhObE5qUXNaWGxLTWxwWVNucGhWemwxU1dwdmVreERTbnBpTTFaNVdUSldla2xxY0dKSmJsSm9ZekowZWt3elFuQmpSMVp6WVZjMWJFeHRjSHBKYkRCelNXMDFhR0pYVm5wSmFuQmlXRk4zYVdKWFJuZGpSMngxV2pOTmFVOXBTa0pSVlVaQ1QzcHpOMDk2Y3pkUGVuTTNUM3AwU0ZGV1pFaFBNRVpDVWpCbmMwc3dTa0pSVTNSRFR6QkdRbEY1T1VOTVJWWkNVVlZWTjFGVlJrUlNhWGg2VWxWR1FtTXdWVGRSVlVaRVpFVlZjMk5WVWtKUldFWkZUekJHUWxFelNrVk1SV3hDVVZWcmMxb3dTa0pSVjJSRFRFVmtRbEZWWXpkVFZVWkVZMnRKYzJGVlNrSlJWMnhEVHpCT1FsRXllRU5NUlU1Q1VWVk5OMUZWUmtoU2FYaHlVa1ZHUW1Fd1VUZFJWVVpFWWtWUmMyTlZVa0pSV0VaRlR6QkdRbEV6U2tWTVJXeENVVlZyYzFwVlJrSmFVM2hJVVZWR1NFOHdiRUpTV0VKRFRFaFdSRkZWUmpGUmVuUktVVlZPTWxGNWR6SlJhMFpDVG10Sk4xTlZSa1pPTUVselRXdFNRbEZVU2tWUE1HeENVWHBPUlV4SWJFTlJWVVkxVVdwMFNsRlZWalpSYVhkeVVUQkdRa3N3VFRkVFZVWkVUREJOYzFvd1VrSlJWMlJGVHpCc1FsRXlhRVZNUm14Q1VWWnJOMUV3UmtSWmFYaEVVVlZHUkU4d1JrSlNNRmx6WVRCV1FsRlhkRVpQTUVaQ1VUSjRSa3hIT1VWUlZVWjJVa1IwUWxGVlRuZFNRM2g0VWtWR1FtTlZVVGRSVlVaRVkydFJjMUpWUmtKU1ZIUkNVVlZPUjB4SGJFWlJWVVp3VWxSMFFsRlZUbkZTVTNneFVsVkdRbVJWVlRkUlZVWkVaR3RWYzA5RlZrSlJWR2hHVHpCR1FsRjZiRVpNUnpsSFVWVkdkbEpxZEVKUlZVNTNVbWwzZVZKRlJrSk5hMUUzVVZWR1JFMHdVWE5UVlVaQ1UxTjRlRkZyUmtKalZVbHpVakJHUWxKNmRFcFJWVTE0VVdsNGVGRnJSa0pqVlVrM1VUQkdSR1JGU1hOUk1FWkNVWHAwUWxGV1JrZE1SRUpHVVZWRmQxSlVkRUpSVlUxNFVsTjRTbEZWUmtwTVJUbENVVlU0YzFJd1JrSlNlWGhxVVZWR2FreEZUa0pSVlUwM1VWVkdSazR3U1hOUFJWWkNVVlJvUms4d1JrSlJlbXhHVEVSS1JsRlZSWGxTVkhSQ1VWVk5lbEpUZUhKUk1FWkNZVEJOTjFGVlJrUmlSVTF6VkZWR1FsUlRlRVJSVlVaRVRFVTVRbEZWT0hOUk1FWkNVWGw0YmxGclJrSmFNRWx6VWpCR1FsSjVlRzVSYTBaQ1dqQkpjMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VmxWR1FsVjVlRkJSVlVaUVR6QnNRbEV6U2taTVJHaEdVVlZGTkZKVWRFcFJWVTAxVWxONFJsRlZSa1pNUlU1Q1VWVk5jMUV3UmtKUmVYaFFVVlZHVUV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVjBRbEZWYzNOU01FWkNVbmw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZW5SU1VWVk9NbEZwZUU1UlZVWk9URVZPUWxGVlRYTlVNRVpDVkhsNFJGRlZSa1JNUlRGQ1VWVXdjMUV3UmtKUmVYaEVVVlZHUkV4RmJFSlJWV3R6VVRCR1FsRjVlR3hSVlVac1RFVldRbEZWVlhOVU1FWkNWSGw0UkZGVlJrUk1SVEZDVVZVd2MxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVHpCc1FsRXllRVpNUlU1Q1VWVk5OMU5WUmtSU1EzaE9VVlZHVGt4RlRrSlJWVTF6VkRCR1FsUjVlRVJSVlVaRVRFVXhRbEZWTUhOUk1FWkNVWGw0UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZVhocVVWVkdha3hGVmtKUlZWVnpWREJHUWxSNWVFUlJWVVpFVEVWT1FsRlZUVGRSVlVaRVpHdFJjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTAzVVZWR1JGTkRlRTVSVlVaT1RFVk9RbEZWVFhOVU1FWkNWSGw0UkZGVlJrUk1SMVpDVVZkVmMxSXdSa0pTZVhoc1VWVkdiRXhGVGtKUlZVMXpVakJHUWxKNWVFUlJWVVpFVEVaV1FsRldUWE5VVlVaQ1ZGUjBTbEZWVG5OU1UzYzBVbFZHUWs5RlZUZFRWVVpFVDFWVmMxSlZSa0pTVTNoRVVWVkdSRXhGVGtKUlZVMXpWRlZHUWxSVGVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRURkZWUmt4TVJXUkNVVlZqYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUwM1ZWVkdSR1JGU1hOVVZVWkNWRk40UkZGVlJrUk1SVGxDVVZVNGMxRXdSa0pSZVhoT1VWVkdUa3hGVGtKUlZVMXpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUWE5hVlVaQ1dsTjRSbEZWUmtaTVJURkNVVlV3YzFFd1JrSlJlWGhPVVZWR1RreEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhwMFNsRlZUbkZTVTNoRVVWVkdSRTh3YkVKUk1GRnpWRlZHUWxSVGVFUlJWVVpFVEVVNVFsRlZPSE5STUVaQ1VYbDRUbEZWUms1TVJVNUNVVlZOYzFFd1JrSlJlWGhLVVZWR1NreEZUa0pSVlUxeldUQkdRbGw1ZUVaUlZVWkdURVV4UWxGVk1ITlJNRVpDVVhsNFJGRlZSa1JQTUVaQ1VUTlNSVXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVHpCR1FsRXdaM05VVlVaQ1ZGTjRSRkZWUmtSTVJUbENVVlU0YzFFd1JrSlJlWGg0VVd0R1FtTlZTWE5TTUVaQ1VubDRlRkZyUmtKalZVbHpVVEJHUWxGNWVFaFJWVVpJVEVWT1FsRlZUWE5XVlVaQ1ZYbDRVRkZWUmxCUE1HeENVWGs1Umt4RWFFWlJWVVUwVWxSMFNsRlZUVFZTVTNoR1VWVkdSa3hGVGtKUlZVMXpVVEJHUWxGNWVGQlJWVVpRVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJYUkNVVlZ6YzFJd1JrSlNlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEZKUlZVNHlVV2w0VGxGVlJrNU1SVTVDVVZWTmMxUXdSa0pVZVhoRVVWVkdSRXhGTVVKUlZUQnpVVEJHUWxGNWVFUlJWVVpFVEVWc1FsRlZhM05STUVaQ1VYbDRWbEZWUmxaTVJWWkNVVlZWYzFRd1JrSlVlWGhFVVZWR1JFeEZNVUpSVlRCelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JQTUd4Q1VYcGtSVXhGVGtKUlZVMDNVMVZHUkZKRGVFNVJWVVpPVEVWT1FsRlZUWE5VTUVaQ1ZIbDRSRkZWUmtSTVJURkNVVlV3YzFFd1JrSlJlWGhFVVZWR1JFeEZiRUpSVld0elVUQkdRbEY1ZUZSUlZVWlVURVZXUWxGVlRYTlVNRVpDVkhsNFJGRlZSa1JNUlU1Q1VWVk5OMUZWUmtSaGExRnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUV2xNUTBwdFlWZDRiRWxxYjJsa1IwWjZZVE5OZG1OSGJIZGFWM2h3WW0xVmRXRnVUV2xNUTBwNllqTldlVmt5Vm5wUk1qbDFaRWRXZFdSRFNUWlhlVWwyUzJsd1kySnBRWEZKUjJSNVpGYzFNRXd6UW5CalIxWnpZVmMxYkV4dGNIcFlSelJuUzJ4NGRVbERiMmRXUjJoc1NVYzVlVnBIVm5sSlIyeDFTVWhrYjJGWFRtOUpTR3gyWkZoSloxa3pUbnBNUTBKeFdWaGFhR015VG5saFdFSXdURU5DYUdKdFVXZGtSMVowWTBkNGFHUkhWV2RhYld4eldsaE5aMk15YUhaa1YzaHJTVWRLYkZoSE5HZExhVUpxWWpJeGQyRlhlR3hhUTBKb1ltMVJaMkpIYkhWaE1sWnJTVWRhZVdJeU1HZGxWemt4WTJsQ01tRlhWak5qZVVKb1ltMVJaMk16VW1oa1IyeHFTVVZvVlZSVmQyZGFiV3h6V2xoTmRWaEhOR2RMYkhoMVNVTnZaMHRGTlhaa1IxVm5aRWRvYUdSRFFqVmlNMVZuV1RKR2RVbElVbWhoTWxWbldWZFNNbGxYTlRCWlYyUnNTVWM1YlVsRlpIbGtWelV3VEZoT01HVlhlR3hKU0dSd1lrZFNhbGxZU210TU1tUnpZakpKZG1NelFuTlpXRkZuV2xob2QyTnRWbnBqTW14MlltNU9ZMkpwUVhGSlIxcDJZMmxDZEZsWVVtcGhSMngxV25sQ2RHUlhlREJoV0VKeldsTkNiV0ZYZUd4amVYZG5XVmMxYTBsRFJXZGhWelJuV201S2RtSnVVV2RpTWxsbldWYzBaMXBZYUhkamJWWjZZekpzZG1KcFFqQmllVUp3V2pJMWRtTnRWV2RhYld4eldsaE5kVXRXZUhWSlEzQmpZbWxCY1VsRlduWmphVUowWWpOS2JFbEhiSFZhYlRsNVlsZEdNR0ZYT1hWSlNFNXNXbFJ3WTJKcFFYRkpRMEZuWVVoU01HTklUVFpNZVRsdVlWaFNiMlJYU1hWWk1qbDBUREpLYUdKSFVteGpiVkpvWXpKb05Vd3pUbWhoVjNoNlRGZFNkbGt6VFhaWmJYaDJXV2s1ZEZsWVRqQmFXRWwyV1ZjMWFHUkhPWFJsVXpsMFpWVkdkMk5ET1RCWldFNXlZM2s1ZDJGWVFteGlSMngxV2xNMWNXTjVOWFJhUm5oMVNVTnZkbGhITldOaWJIaDFUSGs0WjFFeFRsUkpSMXB3WWtkV2VrbElVblpKUjJ4MVlXMVdhbVJEUW5CaWFVSjJZMjFTYkdOc2VIVk1lVGxqWW1rNGRrbERhSEJhYVVJMVlqTlZibU50Vldka1dFNXdZbTFqWjFSRlZsUlZlVUl6WVZoU2IwbElVbTlhVTBKcFpGZHNjMlJETVhCaWFVSnJXbGRhYUdSWGVEQkpSMDUyWW0xYWNGcDVkMmRsVnpreFNqSjRjMGxJWkdoaWJsSmpZbWs0ZGtsRFFqQmllVUpxWVVkR2RWb3lWV2RaUjBaNll6SldNR041T1hwa1NHeHpXbGhOZG1GWE1YZGlNMG93V2xoSmRXSkhWbnBqTWtGbllWYzFlbVJIVm1oYVF6UndXRWMxTWxsWVNXZFpNMDU2VW0xc2MxcFlUbFZpTUd4MVlXMVdhbVJEUVRsSlJuUmpZbWxCWjBvelRqQmxWM2hzWTNrNGNVdHBPSEZNYlU1NlkzbGtZMkpzTURkWVJ6VmpZbXg0ZFV4NU9HZFJNbmh3V2xjMU1FeFlUbkJhUjFWbllXMUdNbGxZVG1wamJXeDNaRU5DYldGWGVHeGplVUl3WW5sQ2NHSnRjR3haTTFGbllWYzBaMkl6U210YVdFcGpZbWs0ZGtsRGFERmpNbFo2U1VWa2VXUlhOVEJNV0U0d1pWZDRiRWxJWkhCaVIxSnFXVmhLYTB3eVpITmlNa2wyWXpOQ2MxbFlVV2RhV0doM1kyMVdlbU15YkhaaWJrMXdXRWMxTWxsWVNXZGhiazVIWVZkNGJHTXhVblpUVnpWeFdsZE9NRWxFTUdkWE1YaDFXRWMwWjBsRE9IWkpSWGgyV1ZkUloyTXlSbkJpU0UxMVlWYzRaMWx0Vm0xaU0wcHNTVWRXTWxwWVNqVmtSMmh3WW0xaloxcFhlSHBhVm5oMVNVTkJibUZ1VFhaYVIxWjNXbGMxYTFwWE5XcGhWMVo2VEROT2FHRlhlSHBNYld4MlRHMXdla3A1ZUdOaWJIaDFTVU5CZGt4NVFrVmFXRUpzWW0xU2JHSnRUbkJhV0UxbllrZHNjbHBUUW5GVldGWnNZMjVyYzBsSE9YbEpSVVoxV2pOV2MxbFlTV2RaV0Vwc1NVZEtlV0l6Vm01aFNGRm5ZVmMwWjJGSFZubGFWbmgxU1VOQmJtRnVUWFphUjFaM1dsYzFhMXBYTldwaFYxWjZUSGx2Y1V4NWIzVmhiazF1VEVaNGRWaEhOR2RKUXpoMlNVVkdjMkpEUW5aYWFVSXdZVWRWWjJOdFZucGtRMEoyV21sQ05XSXpWbmxKUjA1ellWZFdkV1JETVhwaFYxSnNTVWR3ZWtsSFduQmlSMVo2V0VjMFowbERPSFpKU0dSd1lrZDNaMWx0VldkaFZ6VnhXbGRPTUZwWFVXZGhSMVo1V2xOQ2NHSnBRblZpZVVKM1dWaEtNR0ZYVGpGaVIwWjVTVWM1ZVZwSFZubE1iSGgxU1VOQmJtRnVUWFpMYVc5MlMyazFjV041WkdOaWJEQTNXRWMxWTJKc2VIVk1lVGhuVVRKNGNGcFhOVEJNV0U1d1drZFZaMU5HVWs1VVEwSXdXbGN4ZDJKSFJqQmFXRTFuV1ZoS2JFbEhiSFZoYlZacVpFZFdhMGxJVm5waFZ6VnVTVWhTYjFwVFFucGlNMVo1V1RKV2VrbEhTbXhpUnpreldFYzBka3g1UWxWaFIxVm5Zak5LYTFwWVNuQmliV05uWWpKWloyUkhhR3hqTWxWblpFZFdkR05IZUdoa1IxWjZTVWhPYjJJelZuTmFSelJ1WkVOQ2RGbFlVakJhV0VsMVdFYzBka3g1UVc5a1dFNXNZM2xDU0dOdVZuVmtRekY2WkVoc2MxcFRRak5oVjNocldUSkdlVnBET1c1aVJ6bHBURE5PZDJKSFJqQkpSMVkwWTBoS2JHTXpUbkJpTWpWNlMxWjRkVXg1T1dOaWFUaDJTVVZLTlVsSFVteGFiVVl4WWtoUmMwbEdUbWhoVjNoNlNVaFdlbHBZVFdkVGJFNVZTVWhTYkdKWVFuTlpXRkpzWTNsQ2FHSnRVV2RqU0Vwc1dUSTVkR05IYkhOYVdFMW5aRWRvYkdKVFFuQmlibEoyV0VjMGRreDVRbTFrVnpWcVpFZHNkbUp1VFdkYWJUbDVTVWhzZG1SVE5HZEpSV3h0U1Voc2RtUlRRak5aVnpVd1NVaFNka2xJVm5wYVUwSnhXVmRTYkV4RFFtOVpWelZyWWtkV2FWbFlTbnBNUTBKclpGaE9NRXhEUW14a1IwMTFURVo0ZFV4NU9HZGtNbXd3WVVOQ01HRkhWV2RpUjJ4MVlUSldlVXhEUW5WaWVVSjNZMjA1YVdKSFZuUk1VekJuWlZjNU1Vb3llSE5KUjNBeFl6TlJaMlF5Um5Wa1EwSXdZbmxDZEZsWGRHeEpTRTR4WTIxVloyUkhhR3hKU0VKNVdsZE9kbUpZUW5CaVIxWnJXRWMwZGt4NVFqQmFWekYzWWtkR01GcFlUV2RhTWxZd1NVaE9kMkZZVVdkaU0xWXdTVWhTZGtsSVVtOWFVMEo2V1ZjeGJFbEhXbkJpUjFWMVNVTkNRMXBUUW5wa1dFcHNTVWRHZFZwRFFtcGhSMVpxWVhsQ2RtUllVV2RaU0ZKb1l6SjBla3d4U2taUlZWSk9VbE0xZEZwSFFtTmlhVGgyU1VkYWRtTnBRbkJpYlZwMlkyMHhhR1JIYkhaaWFVSjJZbWxDYW1SWVRqQmlNakZ3Wlcxc2RWcDVRbWhpYlZGbllWYzFlbVJIUm5OaVIyeDFXbmxDZFZwWVkyZGtSMFo2WVROTmRWaEhOVEpaV0VsblpFZFdkR05IZUdoa1IxWkhZVmQ0YkdNeFVuWlRWelZ4V2xkT01FbEVNR2RYTVhoMVNVTkJibVJIVm5SalIzaG9aRWRXZWt4NWIzRk1lVzkxWVVoU2RHSkRaR05pYkRBM1dFYzFZMkpzZUhWWVJ6VmpZbXg0ZFZoSE5XTmlhVGgyU1VWU2JGcHRSakZpU0ZGblkwZEdNR0ZEUW0xaU0wbG5ZMGhXYVdKSGJHcEpSMXAyWWtkU2JHTnBRVzlqTWxac1NVZFNkbGt6Vm5SYVZ6VXdXVmhTY0dJeU5HZGFiVGw1U1VjeGRtTnRWV2RoVnpWdFlqTktkRmxZVW5CaU1qUndXRWMxTWxsWVNXZGtSekYzVlVkR01HRkRRVGxKUTJOMVpFY3hkMHd6UWpGWmJYaHdXWGs0Yms4eGVIVllSelIyVEhsQ1VXTnRWbTFoV0dkblkyMVdjMWxZVW5Ca2JWVm5ZMGRHTUdGSVRXZGtSemhuWXpJNU1XTnRUbXhKUjFwd1lrZFdla2xJVG5aSlNGSnZXbGhyWjJOSE9YQmlibEZuWkVjNFoyUkhhR3hKU0VKNVlqTkNiR05wUW5OaU1rNW9aRWRzZG1KdVRtTmlhVGgyU1VOb2NFeHRWWFZKU0dSdldsaEtiRWxJVW05YVUwSjJaRWRvYkdOcFFraGpibFoxWkVOQ01GbFlUbkpqZVVKNlkwZHNNRWxJVW05YVZ6Qm5Zak5XTUV4RFFuWmphVUp3WW1sQ2VtSXlNV3hKUjA1b1l6Sldla3hEUWpOaFIxWjVXbFo0ZFV4NU9HZGtSMmhzWlZOQ2VWcFlUbkJhUjFWbllWYzBaMlJIYUd4SlIxcHdZMjVPTUVsSVFuTlpWMDVzUzFaNGRXSlhPV3RrVjNoc1RHMVdOR05IT1hsa1NFMTFXVE5PZWxKdGJITmFXRTVWWWpCc2RXRnRWbXBrUTBFNVNVZE9lbU13V25CaVIxWjZWa2M1U21KdGNHeFpNMUYxWWxkR2QwdEhXakZpYlU0d1lWYzVkVXRIVG5wak1VSm9aRWRuY0VsSWRHTmlhVUZuVEhrNFoxTlhXV2RrTWxWdVkyMVZaMkZYWkhWaU0wcHdZbTFqWjJSSGFHeEpSMXB3WWtkVmMwbEhNV2hoTWxWbll6TldlVnBUUWpCaFIxVm5TVk5DY0dONVFtaGtRMEl3WVVkVloxbHRWbTVoVnpWMVlWYzFia2xIT1cxSlNGSnZXbE5DZDFsWVVtOVlSelJuU1Vkc2JVbERhR3BqTTA1UldWaFNiMWQ2UW1SSlJEQTVVRk5CYmtsVFkzQkpTSFJqWW1sQlowbERRbmxhV0ZJeFkyMDBaMk50Vm5oa1YyeDVXbE5uYm1OSFJqQmhRMk53VEcxd2RtRlhORzlLZVVWMVpFY3hkMHd6UWpGWmJYaHdXWGs0Ymt4RFFtcGpNMDVSV1ZoU2IweHVUakZaYms0d1kybG5lRXRUYXpkWVJ6Um5TVWd4WTJKcFFXZGpiVll3WkZoS2RVbElTbXhqV0Zad1kyMVZiMG96UW1oa1IyZHVTMU0xY1dJeWJIVkxRMk4xWkVjeGQwd3pRakZaYlhod1dYazRia3hEUW1wak0wNVJXVmhTYjB0VWRHTmliakJ3VHpGNGRXSlhPV3RrVjNoc1RHMVdOR05IT1hsa1NFMTFZVzVPUjJGWGVHeGpNVkoyVTFjMWNWcFhUakJKUkRCbllXNU9SMkZYZUd4ak1WSjJVMWMxY1ZwWFRqQk1iVEZvWTBOb2JXUlhOV3BrUjJ4MlltbG9jV014UW1oa1IyZHdTVWgwWTJKcFFXZE1lVGhuVTFkWloyUXlWVzVqYlZWbllWZGtkV0l6U25CaWJXTm5aRWRvYkVsSFduQmlSMVZ6U1VjeGFHRXlWV2RqTTFaNVdsTkNNR0ZIVldkSlUwSndZM2xDYUdSRFFqQmhSMVZuV1cxV2JtRlhOWFZoVnpWdVNVYzViVWxJVW05YVUwSjNXVmhTYjFoSE5HZEpSMnh0U1VOb2NXTXhRbWhrUjJoaVRVWXdaMUJVTURsSlEyTm9TbmxyWjJVeGVIVkpRMEZuU1VoS2JHUklWbmxpYVVKNVdsaEdNV0ZZU214TFEyUjNXVmhTYjBwNWEzVmhiVGx3WW1sbmJrbFROVEJpV0VGMlkwaFdhV0pIYkdwTWVXTnpTVWR3ZWxWSFJqQmhRelY2WkZkS2VtUklTVzlOVTJ0d1R6RjRkVWxEUWpsWVJ6Um5TVWhLYkdSSVZubGlhVUo1V2xoR01XRllTbXhMUTJSM1dWaFNiMHA1YTNWaGJUbHdZbWxuYmt4dVVuUmpRemwzWkZkS2MyRlhUWFpLZVhkbllXNU9VVmxZVW05TFZIUmpZbTR3Y0U4eGVIVmlWemxyWkZkNGJFeHRWalJqUnpsNVpFaE5kV1JIVm5SalIzaG9aRWRXUjJGWGVHeGpNVkoyVTFjMWNWcFhUakJKUkRCblpFZFdkR05IZUdoa1IxWkhZVmQ0YkdNeFVuWlRWelZ4V2xkT01FeHRNV2hqUTJodFpGYzFhbVJIYkhaaWFXZ3dZMGQ0VVZsWVVtOUxVMEkzV0VjMFowbERPSFpKUld4dFNVaGtiRW96U214SlIyeHVZbTA1ZVdGWE5XNUpTRkp2V2xOQ2JXRlhlR3hNUTBKMFdWZDBiRWxJVGpGamJWVm5aRWRvYkVsRFJXZGhXRTFuV1ZoUloyUkhhR3hKUjBwc1dqSnNkV0p0YkhWYWVVSjJXbWxDTUdGSFZXZGpSMFl3WVVaNGRVbERRbkJhYVVGdlpFaENjMVZIUmpCaFJuTjNXRk5CT1ZCVU1HZEtlVVZ1UzFOQ04xaEhOR2RKUTBGblkyMVdNR1JZU25WSlNFcHNZMWhXY0dOdFZXOUtNMEpvWkVkbmJrdFROWEZpTW14MVMwTmphRmxZVG5wYVdGSjZUSGxqYzBsSVVuZGlSa0pvWkVkbmRXTXpWbWxqTTFKNVMwUkZjRXRVZEdOaWFVRm5abFo0ZFVsRFFubGFXRkl4WTIwMFoyTnRWbmhrVjJ4NVdsTm5ibU5IUmpCaFEyTndURzF3ZG1GWE5HOUtNa1o2WXpKV01HTjVPRzVNU0ZKM1lrWkNhR1JIWjNCUE1YaDFabE5yTjFoSE5XTmliSGgxU1d3eE9WeHVJbDE5XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zjg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5SaGMydHpMM0JwY0dWc2FXNWxMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk96czdPenM3T3pzN096dEhRVmRITzBGQlEwZ3NLMEpCUVN0Q08wRkJReTlDTEVWQlFVVTdRVUZEUml4elJVRkJjMFU3UVVGRGRFVXNjVVJCUVhGRU8wRkJRM0pFTEVsQlFVa3NaMEpCUVdkQ0xFZEJRVWM3U1VGRGJrSXNhVUpCUVdsQ08wTkJRM0JDTEVOQlFVTTdRVUZEUml4clJFRkJhMFE3UVVGRGJFUXNjVVJCUVhGRU8wRkJRM0pFTEVsQlFVa3NaVUZCWlN4SFFVRkhPMGxCUTJ4Q0xIVkRRVUYxUXp0SlFVTjJReXcyUWtGQk5rSTdTVUZETjBJc01rUkJRVEpFTzBsQlF6TkVMSGxDUVVGNVFqdEpRVU42UWl3clEwRkJLME03U1VGREwwTXNaMFJCUVdkRU8wbEJRMmhFTEZsQlFWazdRMEZEWml4RFFVRkRPMEZCUTBZc2EwVkJRV3RGTzBGQlEyeEZMRzlFUVVGdlJEdEJRVU53UkN4eFJFRkJjVVE3UVVGRGNrUXNSVUZCUlR0QlFVTkdMR2xGUVVGcFJUdEJRVU5xUlN4MVJVRkJkVVU3UVVGRGRrVXNPRVZCUVRoRk8wRkJRemxGTEc5R1FVRnZSanRCUVVOd1Jpd3lSRUZCTWtRN1FVRkRNMFFzU1VGQlNTeHhRa0ZCY1VJc1IwRkJSenRKUVVONFFpeHhRa0ZCY1VJN1EwRkRlRUlzUTBGQlF6dEJRVU5HTERCRlFVRXdSVHRCUVVNeFJTeEpRVUZKTEU5QlFVOHNSMEZCUnl4alFVRmpMRU5CUVVNN1FVRkROMElzT0VWQlFUaEZPMEZCUXpsRkxESkZRVUV5UlR0QlFVTXpSU3hyUTBGQmEwTTdRVUZEYkVNc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eG5Ra0ZCWjBJc1IwRkJSeXhuUWtGQlowSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1ZVRkJWU3hQUVVGUE8wbEJRM0JGTERoRlFVRTRSVHRKUVVNNVJTeEZRVUZGTEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFdEJRVXNzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTnlRaXhOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhsUVVGbExFVkJRVVVzVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRM0JGTEVOQlFVTTdTVUZEUkN4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4alFVRmpMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVU03UVVGRGVrUXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRTQ3hOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEdWQlFXVXNSMEZCUnl4bFFVRmxMRU5CUVVNc1IwRkJSeXhEUVVGRExGVkJRVlVzVFVGQlRUdEpRVU5xUlN3NFJVRkJPRVU3U1VGRE9VVXNSVUZCUlN4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF5eExRVUZMTEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRjRUlzVFVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zWlVGQlpTeEZRVUZGTEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU51UlN4RFFVRkRPMGxCUTBRc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1kwRkJZeXhGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZETzBGQlEzaEVMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRMGdzVFVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4eFFrRkJjVUlzUjBGQlJ5eHhRa0ZCY1VJc1EwRkJReXhIUVVGSExFTkJRVU1zVlVGQlZTeFBRVUZQTzBsQlF6bEZMRGhGUVVFNFJUdEpRVU01UlN4RlFVRkZMRU5CUVVNc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETEV0QlFVc3NSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOeVFpeE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVWQlFVVXNUMEZCVHl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzBsQlF5OUVMRU5CUVVNN1NVRkRSQ3hOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFVkJRVVVzVDBGQlR5eERRVUZETEVOQlFVTTdRVUZEY0VRc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRFNDeDFjMDFCUVhWelRUdEJRVVYyYzAwc2JXZGtRVUZ0WjJRaUxDSm1hV3hsSWpvaWRHRnphM012Y0dsd1pXeHBibVV1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaXBjYmlBcUlHZHlkVzUwTDNCcGNHVnNhVzVsTG1welhHNGdLbHh1SUNvZ1ZHaGxJRzl5WkdWeUlHbHVJSGRvYVdOb0lIbHZkWElnWTNOekxDQnFZWFpoYzJOeWFYQjBMQ0JoYm1RZ2RHVnRjR3hoZEdVZ1ptbHNaWE1nYzJodmRXeGtJR0psWEc0Z0tpQmpiMjF3YVd4bFpDQmhibVFnYkdsdWEyVmtJR1p5YjIwZ2VXOTFjaUIyYVdWM2N5QmhibVFnYzNSaGRHbGpJRWhVVFV3Z1ptbHNaWE11WEc0Z0tseHVJQ29nS0U1dmRHVWdkR2hoZENCNWIzVWdZMkZ1SUhSaGEyVWdZV1IyWVc1MFlXZGxJRzltSUVkeWRXNTBMWE4wZVd4bElIZHBiR1JqWVhKa0wyZHNiMkl2YzNCc1lYUWdaWGh3Y21WemMybHZibk5jYmlBcUlHWnZjaUJ0WVhSamFHbHVaeUJ0ZFd4MGFYQnNaU0JtYVd4bGN5d2dZVzVrSUNFZ2FXNGdabkp2Ym5RZ2IyWWdZVzRnWlhod2NtVnpjMmx2YmlCMGJ5QnBaMjV2Y21VZ1ptbHNaWE11S1Z4dUlDcGNiaUFxSUVadmNpQnRiM0psSUdsdVptOXliV0YwYVc5dUlITmxaVHBjYmlBcUlDQWdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMMkpoYkdSbGNtUmhjMmg1TDNOaGFXeHpMV1J2WTNNdllteHZZaTl0WVhOMFpYSXZZVzVoZEc5dGVTOXRlVUZ3Y0M5MFlYTnJjeTl3YVhCbGJHbHVaUzVxY3k1dFpGeHVJQ292WEc0dkx5QkRVMU1nWm1sc1pYTWdkRzhnYVc1cVpXTjBJR2x1SUc5eVpHVnlYRzR2TDF4dUx5OGdLR2xtSUhsdmRTZHlaU0IxYzJsdVp5Qk1SVk5USUhkcGRHZ2dkR2hsSUdKMWFXeDBMV2x1SUdSbFptRjFiSFFnWTI5dVptbG5MQ0I1YjNVbmJHd2dkMkZ1ZEZ4dUx5OGdJSFJ2SUdOb1lXNW5aU0JnWVhOelpYUnpMM04wZVd4bGN5OXBiWEJ2Y25SbGNpNXNaWE56WUNCcGJuTjBaV0ZrTGlsY2JuWmhjaUJqYzNOR2FXeGxjMVJ2U1c1cVpXTjBJRDBnVzF4dUlDQWdJQ2R6ZEhsc1pYTXZLaW92S2k1amMzTW5YRzVkTzF4dUx5OGdRMnhwWlc1MExYTnBaR1VnYW1GMllYTmpjbWx3ZENCbWFXeGxjeUIwYnlCcGJtcGxZM1FnYVc0Z2IzSmtaWEpjYmk4dklDaDFjMlZ6SUVkeWRXNTBMWE4wZVd4bElIZHBiR1JqWVhKa0wyZHNiMkl2YzNCc1lYUWdaWGh3Y21WemMybHZibk1wWEc1MllYSWdhbk5HYVd4bGMxUnZTVzVxWldOMElEMGdXMXh1SUNBZ0lDOHZJRXh2WVdRZ2MyRnBiSE11YVc4Z1ltVm1iM0psSUdWMlpYSjVkR2hwYm1jZ1pXeHpaVnh1SUNBZ0lDZHFjeTlrWlhCbGJtUmxibU5wWlhNdmMyRnBiSE11YVc4dWFuTW5MRnh1SUNBZ0lDOHZJRVJsY0dWdVpHVnVZMmxsY3lCc2FXdGxJR3BSZFdWeWVTd2diM0lnUVc1bmRXeGhjaUJoY21VZ1luSnZkV2RvZENCcGJpQm9aWEpsWEc0Z0lDQWdKMnB6TDJSbGNHVnVaR1Z1WTJsbGN5OHFLaThxTG1wekp5eGNiaUFnSUNBdkx5QkJiR3dnYjJZZ2RHaGxJSEpsYzNRZ2IyWWdlVzkxY2lCamJHbGxiblF0YzJsa1pTQnFjeUJtYVd4bGMxeHVJQ0FnSUM4dklIZHBiR3dnWW1VZ2FXNXFaV04wWldRZ2FHVnlaU0JwYmlCdWJ5QndZWEowYVdOMWJHRnlJRzl5WkdWeUxseHVJQ0FnSUNkcWN5OHFLaThxTG1wekoxeHVYVHRjYmk4dklFTnNhV1Z1ZEMxemFXUmxJRWhVVFV3Z2RHVnRjR3hoZEdWeklHRnlaU0JwYm1wbFkzUmxaQ0IxYzJsdVp5QjBhR1VnYzI5MWNtTmxjeUJpWld4dmQxeHVMeThnVkdobElHOXlaR1Z5YVc1bklHOW1JSFJvWlhObElIUmxiWEJzWVhSbGN5QnphRzkxYkdSdUozUWdiV0YwZEdWeUxseHVMeThnS0hWelpYTWdSM0oxYm5RdGMzUjViR1VnZDJsc1pHTmhjbVF2WjJ4dllpOXpjR3hoZENCbGVIQnlaWE56YVc5dWN5bGNiaTh2WEc0dkx5QkNlU0JrWldaaGRXeDBMQ0JUWVdsc2N5QjFjMlZ6SUVwVFZDQjBaVzF3YkdGMFpYTWdZVzVrSUhCeVpXTnZiWEJwYkdWeklIUm9aVzBnYVc1MGIxeHVMeThnWm5WdVkzUnBiMjV6SUdadmNpQjViM1V1SUNCSlppQjViM1VnZDJGdWRDQjBieUIxYzJVZ2FtRmtaU3dnYUdGdVpHeGxZbUZ5Y3l3Z1pIVnpkQ3dnWlhSakxpeGNiaTh2SUhkcGRHZ2dkR2hsSUd4cGJtdGxjaXdnYm04Z2NISnZZbXhsYlMwdElIbHZkU2RzYkNCcWRYTjBJSGRoYm5RZ2RHOGdiV0ZyWlNCemRYSmxJSFJvWlNCd2NtVmpiMjF3YVd4bFpGeHVMeThnZEdWdGNHeGhkR1Z6SUdkbGRDQnpjR2wwSUc5MWRDQjBieUIwYUdVZ2MyRnRaU0JtYVd4bExpQWdRbVVnYzNWeVpTQmhibVFnWTJobFkyc2diM1YwSUdCMFlYTnJjeTlTUlVGRVRVVXViV1JnWEc0dkx5Qm1iM0lnYVc1bWIzSnRZWFJwYjI0Z2IyNGdZM1Z6ZEc5dGFYcHBibWNnWVc1a0lHbHVjM1JoYkd4cGJtY2dibVYzSUhSaGMydHpMbHh1ZG1GeUlIUmxiWEJzWVhSbFJtbHNaWE5VYjBsdWFtVmpkQ0E5SUZ0Y2JpQWdJQ0FuZEdWdGNHeGhkR1Z6THlvcUx5b3VhSFJ0YkNkY2JsMDdYRzR2THlCRVpXWmhkV3gwSUhCaGRHZ2dabTl5SUhCMVlteHBZeUJtYjJ4a1pYSWdLSE5sWlNCa2IyTjFiV1Z1ZEdGMGFXOXVJR1p2Y2lCdGIzSmxJR2x1Wm05eWJXRjBhVzl1S1Z4dWRtRnlJSFJ0Y0ZCaGRHZ2dQU0FuTG5SdGNDOXdkV0pzYVdNdkp6dGNiaTh2SUZCeVpXWnBlQ0J5Wld4aGRHbDJaU0J3WVhSb2N5QjBieUJ6YjNWeVkyVWdabWxzWlhNZ2MyOGdkR2hsZVNCd2IybHVkQ0IwYnlCMGFHVWdjSEp2Y0dWeUlHeHZZMkYwYVc5dWMxeHVMeThnS0drdVpTNGdkMmhsY21VZ2RHaGxJRzkwYUdWeUlFZHlkVzUwSUhSaGMydHpJSE53YVhRZ2RHaGxiU0J2ZFhRc0lHOXlJR2x1SUhOdmJXVWdZMkZ6WlhNc0lIZG9aWEpsWEc0dkx5QjBhR1Y1SUhKbGMybGtaU0JwYmlCMGFHVWdabWx5YzNRZ2NHeGhZMlVwWEc1dGIyUjFiR1V1Wlhod2IzSjBjeTVqYzNOR2FXeGxjMVJ2U1c1cVpXTjBJRDBnWTNOelJtbHNaWE5VYjBsdWFtVmpkQzV0WVhBb1puVnVZM1JwYjI0Z0tHTnpjMUJoZEdncElIdGNiaUFnSUNBdkx5QkpaaUIzWlNkeVpTQnBaMjV2Y21sdVp5QjBhR1VnWm1sc1pTd2diV0ZyWlNCemRYSmxJSFJvWlNBaElHbHpJR0YwSUhSb1pTQmlaV2RwYm01cGJtY2diMllnZEdobElIQmhkR2hjYmlBZ0lDQnBaaUFvWTNOelVHRjBhRnN3WFNBOVBUMGdKeUVuS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCeVpYRjFhWEpsS0Nkd1lYUm9KeWt1YW05cGJpZ25JUzUwYlhBdmNIVmliR2xqTHljc0lHTnpjMUJoZEdndWMzVmljM1J5S0RFcEtUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJSEpsY1hWcGNtVW9KM0JoZEdnbktTNXFiMmx1S0NjdWRHMXdMM0IxWW14cFl5OG5MQ0JqYzNOUVlYUm9LVHRjYm4wcE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNdWFuTkdhV3hsYzFSdlNXNXFaV04wSUQwZ2FuTkdhV3hsYzFSdlNXNXFaV04wTG0xaGNDaG1kVzVqZEdsdmJpQW9hbk5RWVhSb0tTQjdYRzRnSUNBZ0x5OGdTV1lnZDJVbmNtVWdhV2R1YjNKcGJtY2dkR2hsSUdacGJHVXNJRzFoYTJVZ2MzVnlaU0IwYUdVZ0lTQnBjeUJoZENCMGFHVWdZbVZuYVc1dWFXNW5JRzltSUhSb1pTQndZWFJvWEc0Z0lDQWdhV1lnS0dwelVHRjBhRnN3WFNBOVBUMGdKeUVuS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCeVpYRjFhWEpsS0Nkd1lYUm9KeWt1YW05cGJpZ25JUzUwYlhBdmNIVmliR2xqTHljc0lHcHpVR0YwYUM1emRXSnpkSElvTVNrcE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdjbVZ4ZFdseVpTZ25jR0YwYUNjcExtcHZhVzRvSnk1MGJYQXZjSFZpYkdsakx5Y3NJR3B6VUdGMGFDazdYRzU5S1R0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6TG5SbGJYQnNZWFJsUm1sc1pYTlViMGx1YW1WamRDQTlJSFJsYlhCc1lYUmxSbWxzWlhOVWIwbHVhbVZqZEM1dFlYQW9ablZ1WTNScGIyNGdLSFJ3YkZCaGRHZ3BJSHRjYmlBZ0lDQXZMeUJKWmlCM1pTZHlaU0JwWjI1dmNtbHVaeUIwYUdVZ1ptbHNaU3dnYldGclpTQnpkWEpsSUhSb1pTQWhJR2x6SUdGMElIUm9aU0JpWldkcGJtNXBibWNnYjJZZ2RHaGxJSEJoZEdoY2JpQWdJQ0JwWmlBb2RIQnNVR0YwYUZzd1hTQTlQVDBnSnlFbktTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaWEYxYVhKbEtDZHdZWFJvSnlrdWFtOXBiaWduSVdGemMyVjBjeThuTENCMGNHeFFZWFJvTG5OMVluTjBjaWd4S1NrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnlaWEYxYVhKbEtDZHdZWFJvSnlrdWFtOXBiaWduWVhOelpYUnpMeWNzSUhSd2JGQmhkR2dwTzF4dWZTazdYRzR2THlNZ2MyOTFjbU5sVFdGd2NHbHVaMVZTVEQxa1lYUmhPbUZ3Y0d4cFkyRjBhVzl1TDJwemIyNDdZMmhoY25ObGREMTFkR1k0TzJKaGMyVTJOQ3hsZVVveVdsaEtlbUZYT1hWSmFtOTZURU5LZW1JelZubFpNbFo2U1dwd1lrbHVVbWhqTW5SNlRETkNjR05IVm5OaFZ6VnNURzF3ZWtsc01ITkpiVFZvWWxkV2VrbHFjR0pZVTNkcFlsZEdkMk5IYkhWYU0wMXBUMmxLUWxGVlJrSlBlbk0zVDNwek4wOTZjemRQZW5SSVVWWmtTRTh3UmtKU01HZHpTekJLUWxGVGRFTlBNRVpDVVhrNVEweEZWa0pSVlZVM1VWVkdSRkpwZUhwU1ZVWkNZekJWTjFGVlJrUmtSVlZ6WTFWU1FsRllSa1ZQTUVaQ1VUTktSVXhGYkVKUlZXdHpXakJLUWxGWFpFTk1SV1JDVVZWak4xTlZSa1JqYTBsellWVktRbEZYYkVOUE1FNUNVVEo0UTB4RlRrSlJWVTAzVVZWR1NGSnBlSEpTUlVaQ1lUQlJOMUZWUmtSaVJWRnpZMVZTUWxGWVJrVlBNRVpDVVROS1JVeEZiRUpSVld0eldsVkdRbHBUZUVoUlZVWklUekJzUWxKWVFrTk1TRlpFVVZWR01WRjZkRXBSVlU0eVVYbDNNbEZyUmtKT2EwazNVMVZHUms0d1NYTk5hMUpDVVZSS1JVOHdiRUpSZWs1RlRFaHNRMUZWUmpWUmFuUktVVlZXTmxGcGQzSlJNRVpDU3pCTk4xTlZSa1JNTUUxeldqQlNRbEZYWkVWUE1HeENVVEpvUlV4R2JFSlJWbXMzVVRCR1JGbHBlRVJSVlVaRVR6QkdRbEl3V1hOaE1GWkNVVmQwUms4d1JrSlJNbmhHVEVjNVJWRlZSblpTUkhSQ1VWVk9kMUpEZUhoU1JVWkNZMVZSTjFGVlJrUmphMUZ6VWxWR1FsSlVkRUpSVlU1SFRFZHNSbEZWUm5CU1ZIUkNVVlZPY1ZKVGVERlNWVVpDWkZWVk4xRlZSa1JrYTFWelQwVldRbEZVYUVaUE1FWkNVWHBzUmt4SE9VZFJWVVoyVW1wMFFsRlZUbmRTYVhkNVVrVkdRazFyVVRkUlZVWkVUVEJSYzFOVlJrSlRVM2g0VVd0R1FtTlZTWE5TTUVaQ1VucDBTbEZWVFhoUmFYaDRVV3RHUW1OVlNUZFJNRVpFWkVWSmMxRXdSa0pSZW5SQ1VWWkdSMHhFUWtaUlZVVjNVbFIwUWxGVlRYaFNVM2hLVVZWR1NreEZPVUpSVlRoelVqQkdRbEo1ZUdwUlZVWnFURVZPUWxGVlRUZFJWVVpHVGpCSmMwOUZWa0pSVkdoR1R6QkdRbEY2YkVaTVJFcEdVVlZGZVZKVWRFSlJWVTE2VWxONGNsRXdSa0poTUUwM1VWVkdSR0pGVFhOVVZVWkNWRk40UkZGVlJrUk1SVGxDVVZVNGMxRXdSa0pSZVhodVVXdEdRbG93U1hOU01FWkNVbmw0YmxGclJrSmFNRWx6VVRCR1FsRjVlRWhSVlVaSVRFVk9RbEZWVFhOV1ZVWkNWWGw0VUZGVlJsQlBNR3hDVVROS1JreEVhRVpSVlVVMFVsUjBTbEZWVFRWU1UzaEdVVlZHUmt4RlRrSlJWVTF6VVRCR1FsRjVlRkJSVlVaUVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SWFJDVVZWemMxSXdSa0pTZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRGSlJWVTR5VVdsNFRsRlZSazVNUlU1Q1VWVk5jMVF3UmtKVWVYaEVVVlZHUkV4Rk1VSlJWVEJ6VVRCR1FsRjVlRVJSVlVaRVRFVnNRbEZWYTNOUk1FWkNVWGw0YkZGVlJteE1SVlpDVVZWVmMxUXdSa0pVZVhoRVVWVkdSRXhGTVVKUlZUQnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSUE1HeENVVEo0Umt4RlRrSlJWVTAzVTFWR1JGSkRlRTVSVlVaT1RFVk9RbEZWVFhOVU1FWkNWSGw0UkZGVlJrUk1SVEZDVVZVd2MxRXdSa0pSZVhoRVVWVkdSRXhGYkVKUlZXdHpVVEJHUWxGNWVHcFJWVVpxVEVWV1FsRlZWWE5VTUVaQ1ZIbDRSRkZWUmtSTVJVNUNVVlZOTjFGVlJrUmthMUZ6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFRkUlZVWkVVME40VGxGVlJrNU1SVTVDVVZWTmMxUXdSa0pVZVhoRVVWVkdSRXhIVmtKUlYxVnpVakJHUWxKNWVHeFJWVVpzVEVWT1FsRlZUWE5TTUVaQ1VubDRSRkZWUmtSTVJsWkNVVlpOYzFSVlJrSlVWSFJLVVZWT2MxSlRkelJTVlVaQ1QwVlZOMU5WUmtSUFZWVnpVbFZHUWxKVGVFUlJWVVpFVEVWT1FsRlZUWE5VVlVaQ1ZGTjRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhNVVZWR1RFeEZaRUpSVldOelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRUZFZWVVpFWkVWSmMxUlZSa0pVVTNoRVVWVkdSRXhGT1VKUlZUaHpVVEJHUWxGNWVFNVJWVVpPVEVWT1FsRlZUWE5STUVaQ1VYbDRTbEZWUmtwTVJVNUNVVlZOYzFwVlJrSmFVM2hHVVZWR1JreEZNVUpSVlRCelVUQkdRbEY1ZUU1UlZVWk9URVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUktVVlZPY1ZKVGVFUlJWVVpFVHpCc1FsRXdVWE5VVlVaQ1ZGTjRSRkZWUmtSTVJUbENVVlU0YzFFd1JrSlJlWGhPVVZWR1RreEZUa0pSVlUxelVUQkdRbEY1ZUVwUlZVWktURVZPUWxGVlRYTlpNRVpDV1hsNFJsRlZSa1pNUlRGQ1VWVXdjMUV3UmtKUmVYaEVVVlZHUkU4d1JrSlJNMUpGVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSUE1FWkNVVEJuYzFSVlJrSlVVM2hFVVZWR1JFeEZPVUpSVlRoelVUQkdRbEY1ZUhoUmEwWkNZMVZKYzFJd1JrSlNlWGg0VVd0R1FtTlZTWE5STUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZOYzFaVlJrSlZlWGhRVVZWR1VFOHdiRUpSZVRsR1RFUm9SbEZWUlRSU1ZIUktVVlZOTlZKVGVFWlJWVVpHVEVWT1FsRlZUWE5STUVaQ1VYbDRVRkZWUmxCTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZkRUpSVlhOelVqQkdRbEo1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhwMFVsRlZUakpSYVhoT1VWVkdUa3hGVGtKUlZVMXpWREJHUWxSNWVFUlJWVVpFVEVVeFFsRlZNSE5STUVaQ1VYbDRSRkZWUmtSTVJXeENVVlZyYzFFd1JrSlJlWGhXVVZWR1ZreEZWa0pSVlZWelZEQkdRbFI1ZUVSUlZVWkVURVV4UWxGVk1ITlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkU4d2JFSlJlbVJGVEVWT1FsRlZUVGRUVlVaRVVrTjRUbEZWUms1TVJVNUNVVlZOYzFRd1JrSlVlWGhFVVZWR1JFeEZNVUpSVlRCelVUQkdRbEY1ZUVSUlZVWkVURVZzUWxGVmEzTlJNRVpDVVhsNFZGRlZSbFJNUlZaQ1VWVk5jMVF3UmtKVWVYaEVVVlZHUkV4RlRrSlJWVTAzVVZWR1JHRnJVWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYVV4RFNtMWhWM2hzU1dwdmFXUkhSbnBoTTAxMlkwZHNkMXBYZUhCaWJWVjFZVzVOYVV4RFNucGlNMVo1V1RKV2VsRXlPWFZrUjFaMVpFTkpObGQ1U1haTGFYQmpZbWxCY1VsSFpIbGtWelV3VEROQ2NHTkhWbk5oVnpWc1RHMXdlbGhITkdkTGJIaDFTVU52WjFaSGFHeEpSemw1V2tkV2VVbEhiSFZKU0dSdllWZE9iMGxJYkhaa1dFbG5XVE5PZWt4RFFuRlpXRnBvWXpKT2VXRllRakJNUTBKb1ltMVJaMlJIVm5SalIzaG9aRWRWWjFwdGJITmFXRTFuWXpKb2RtUlhlR3RKUjBwc1dFYzBaMHRwUW1waU1qRjNZVmQ0YkZwRFFtaGliVkZuWWtkc2RXRXlWbXRKUjFwNVlqSXdaMlZYT1RGamFVSXlZVmRXTTJONVFtaGliVkZuWXpOU2FHUkhiR3BKUldoVlZGVjNaMXB0YkhOYVdFMTFXRWMwWjB0c2VIVkpRMjluUzBVMWRtUkhWV2RrUjJob1pFTkNOV0l6VldkWk1rWjFTVWhTYUdFeVZXZFpWMUl5V1ZjMU1GbFhaR3hKUnpsdFNVVmtlV1JYTlRCTVdFNHdaVmQ0YkVsSVpIQmlSMUpxV1ZoS2Ewd3laSE5pTWtsMll6TkNjMWxZVVdkYVdHaDNZMjFXZW1NeWJIWmliazVqWW1sQmNVbEhXblpqYVVKMFdWaFNhbUZIYkhWYWVVSjBaRmQ0TUdGWVFuTmFVMEp0WVZkNGJHTjVkMmRaVnpWclNVTkZaMkZYTkdkYWJrcDJZbTVSWjJJeVdXZFpWelJuV2xob2QyTnRWbnBqTW14MlltbENNR0o1UW5CYU1qVjJZMjFWWjFwdGJITmFXRTExUzFaNGRVbERjR05pYVVGeFNVVmFkbU5wUW5SaU0wcHNTVWRzZFZwdE9YbGlWMFl3WVZjNWRVbElUbXhhVkhCalltbEJjVWxEUVdkaFNGSXdZMGhOTmt4NU9XNWhXRkp2WkZkSmRWa3lPWFJNTWtwb1lrZFNiR050VW1oak1tZzFURE5PYUdGWGVIcE1WMUoyV1ROTmRsbHRlSFpaYVRsMFdWaE9NRnBZU1haWlZ6Vm9aRWM1ZEdWVE9YUmxWVVozWTBNNU1GbFlUbkpqZVRsM1lWaENiR0pIYkhWYVV6VnhZM2sxZEZwR2VIVkpRMjkyV0VjMVkySnNlSFZNZVRoblVURk9WRWxIV25CaVIxWjZTVWhTZGtsSGJIVmhiVlpxWkVOQ2NHSnBRblpqYlZKc1kyeDRkVXg1T1dOaWFUaDJTVU5vY0ZwcFFqVmlNMVZ1WTIxVloyUllUbkJpYldOblZFVldWRlY1UWpOaFdGSnZTVWhTYjFwVFFtbGtWMnh6WkVNeGNHSnBRbXRhVjFwb1pGZDRNRWxIVG5aaWJWcHdXbmwzWjJWWE9URktNbmh6U1Voa2FHSnVVbU5pYVRoMlNVTkNNR0o1UW1waFIwWjFXakpWWjFsSFJucGpNbFl3WTNrNWVtUkliSE5hV0UxMllWY3hkMkl6U2pCYVdFbDFZa2RXZW1NeVFXZGhWelY2WkVkV2FGcEROSEJZUnpVeVdWaEpaMWt6VG5wU2JXeHpXbGhPVldJd2JIVmhiVlpxWkVOQk9VbEdkR05pYVVGblNqTk9NR1ZYZUd4amVUaHhTMms0Y1V4dFRucGplV1JqWW13d04xaEhOV05pYkhoMVRIazRaMUV5ZUhCYVZ6VXdURmhPY0ZwSFZXZGhiVVl5V1ZoT2FtTnRiSGRrUTBKdFlWZDRiR041UWpCaWVVSndZbTF3YkZrelVXZGhWelJuWWpOS2ExcFlTbU5pYVRoMlNVTm9NV015Vm5wSlJXUjVaRmMxTUV4WVRqQmxWM2hzU1Voa2NHSkhVbXBaV0VwclRESmtjMkl5U1haak0wSnpXVmhSWjFwWWFIZGpiVlo2WXpKc2RtSnVUWEJZUnpVeVdWaEpaMkZ1VGtkaFYzaHNZekZTZGxOWE5YRmFWMDR3U1VRd1oxY3hlSFZZUnpSblNVTTRka2xGZUhaWlYxRm5ZekpHY0dKSVRYVmhWemhuV1cxV2JXSXpTbXhKUjFZeVdsaEtOV1JIYUhCaWJXTm5XbGQ0ZWxwV2VIVkpRMEZ1WVc1TmRscEhWbmRhVnpWcldsYzFhbUZYVm5wTU0wNW9ZVmQ0ZWt4dGJIWk1iWEI2U25sNFkySnNlSFZKUTBGMlRIbENSVnBZUW14aWJWSnNZbTFPY0ZwWVRXZGlSMnh5V2xOQ2NWVllWbXhqYm10elNVYzVlVWxGUm5WYU0xWnpXVmhKWjFsWVNteEpSMHA1WWpOV2JtRklVV2RoVnpSbllVZFdlVnBXZUhWSlEwRnVZVzVOZGxwSFZuZGFWelZyV2xjMWFtRlhWbnBNZVc5eFRIbHZkV0Z1VFc1TVJuaDFXRWMwWjBsRE9IWkpSVVp6WWtOQ2RscHBRakJoUjFWblkyMVdlbVJEUW5aYWFVSTFZak5XZVVsSFRuTmhWMVoxWkVNeGVtRlhVbXhKUjNCNlNVZGFjR0pIVm5wWVJ6Um5TVU00ZGtsSVpIQmlSM2RuV1cxVloyRlhOWEZhVjA0d1dsZFJaMkZIVm5sYVUwSndZbWxDZFdKNVFuZFpXRW93WVZkT01XSkhSbmxKUnpsNVdrZFdlVXhzZUhWSlEwRnVZVzVOZGt0cGIzWkxhVFZ4WTNsa1kySnNNRGRZUnpWallteDRkVXg1T0dkUk1uaHdXbGMxTUV4WVRuQmFSMVZuVTBaU1RsUkRRakJhVnpGM1lrZEdNRnBZVFdkWldFcHNTVWRzZFdGdFZtcGtSMVpyU1VoV2VtRlhOVzVKU0ZKdldsTkNlbUl6Vm5sWk1sWjZTVWRLYkdKSE9UTllSelIyVEhsQ1ZXRkhWV2RpTTBwcldsaEtjR0p0WTJkaU1sbG5aRWRvYkdNeVZXZGtSMVowWTBkNGFHUkhWbnBKU0U1dllqTldjMXBITkc1a1EwSjBXVmhTTUZwWVNYVllSelIyVEhsQmIyUllUbXhqZVVKSVkyNVdkV1JETVhwa1NHeHpXbE5DTTJGWGVHdFpNa1o1V2tNNWJtSkhPV2xNTTA1M1lrZEdNRWxIVmpSalNFcHNZek5PY0dJeU5YcExWbmgxVEhrNVkySnBPSFpKUlVvMVNVZFNiRnB0UmpGaVNGRnpTVVpPYUdGWGVIcEpTRlo2V2xoTloxTnNUbFZKU0ZKc1lsaENjMWxZVW14amVVSm9ZbTFSWjJOSVNteFpNamwwWTBkc2MxcFlUV2RrUjJoc1lsTkNjR0p1VW5aWVJ6UjJUSGxDYldSWE5XcGtSMngyWW01TloxcHRPWGxKU0d4MlpGTTBaMGxGYkcxSlNHeDJaRk5DTTFsWE5UQkpTRkoyU1VoV2VscFRRbkZaVjFKc1RFTkNiMWxYTld0aVIxWnBXVmhLZWt4RFFtdGtXRTR3VEVOQ2JHUkhUWFZNUm5oMVRIazRaMlF5YkRCaFEwSXdZVWRWWjJKSGJIVmhNbFo1VEVOQ2RXSjVRbmRqYlRscFlrZFdkRXhUTUdkbFZ6a3hTako0YzBsSGNERmpNMUZuWkRKR2RXUkRRakJpZVVKMFdWZDBiRWxJVGpGamJWVm5aRWRvYkVsSVFubGFWMDUyWWxoQ2NHSkhWbXRZUnpSMlRIbENNRnBYTVhkaVIwWXdXbGhOWjFveVZqQkpTRTUzWVZoUloySXpWakJKU0ZKMlNVaFNiMXBUUW5wWlZ6RnNTVWRhY0dKSFZYVkpRMEpEV2xOQ2VtUllTbXhKUjBaMVdrTkNhbUZIVm1waGVVSjJaRmhSWjFsSVVtaGpNblI2VERGS1JsRlZVazVTVXpWMFdrZENZMkpwT0haSlIxcDJZMmxDY0dKdFduWmpiVEZvWkVkc2RtSnBRblppYVVKcVpGaE9NR0l5TVhCbGJXeDFXbmxDYUdKdFVXZGhWelY2WkVkR2MySkhiSFZhZVVKMVdsaGpaMlJIUm5waE0wMTFXRWMxTWxsWVNXZGtSMVowWTBkNGFHUkhWa2RoVjNoc1l6RlNkbE5YTlhGYVYwNHdTVVF3WjFjeGVIVkpRMEZ1WkVkV2RHTkhlR2hrUjFaNlRIbHZjVXg1YjNWaFNGSjBZa05rWTJKc01EZFlSelZqWW14NGRWaEhOV05pYkhoMVdFYzFZMkpwT0haSlJWSnNXbTFHTVdKSVVXZGpSMFl3WVVOQ2JXSXpTV2RqU0ZacFlrZHNha2xIV25aaVIxSnNZMmxCYjJNeVZteEpSMUoyV1ROV2RGcFhOVEJaV0ZKd1lqSTBaMXB0T1hsSlJ6RjJZMjFWWjJGWE5XMWlNMHAwV1ZoU2NHSXlOSEJZUnpVeVdWaEpaMlJITVhkVlIwWXdZVU5CT1VsRFkzVmtSekYzVEROQ01WbHRlSEJaZVRodVR6RjRkVmhITkhaTWVVSlJZMjFXYldGWVoyZGpiVlp6V1ZoU2NHUnRWV2RqUjBZd1lVaE5aMlJIT0dkak1qa3hZMjFPYkVsSFduQmlSMVo2U1VoT2RrbElVbTlhV0d0blkwYzVjR0p1VVdka1J6aG5aRWRvYkVsSVFubGlNMEpzWTJsQ2MySXlUbWhrUjJ4MlltNU9ZMkpwT0haSlEyaHdURzFWZFVsSVpHOWFXRXBzU1VoU2IxcFRRblprUjJoc1kybENTR051Vm5Wa1EwSXdXVmhPY21ONVFucGpSMnd3U1VoU2IxcFhNR2RpTTFZd1RFTkNkbU5wUW5CaWFVSjZZakl4YkVsSFRtaGpNbFo2VEVOQ00yRkhWbmxhVm5oMVRIazRaMlJIYUd4bFUwSjVXbGhPY0ZwSFZXZGhWelJuWkVkb2JFbEhXbkJqYms0d1NVaENjMWxYVG14TFZuaDFZbGM1YTJSWGVHeE1iVlkwWTBjNWVXUklUWFZaTTA1NlVtMXNjMXBZVGxWaU1HeDFZVzFXYW1SRFFUbEpSMDU2WXpCYWNHSkhWbnBXUnpsS1ltMXdiRmt6VVhWaVYwWjNTMGRhTVdKdFRqQmhWemwxUzBkT2VtTXhRbWhrUjJkd1NVaDBZMkpwUVdkTWVUaG5VMWRaWjJReVZXNWpiVlZuWVZka2RXSXpTbkJpYldOblpFZG9iRWxIV25CaVIxVnpTVWN4YUdFeVZXZGpNMVo1V2xOQ01HRkhWV2RKVTBKd1kzbENhR1JEUWpCaFIxVm5XVzFXYm1GWE5YVmhWelZ1U1VjNWJVbElVbTlhVTBKM1dWaFNiMWhITkdkSlIyeHRTVU5vYW1NelRsRlpXRkp2VjNwQ1pFbEVNRGxRVTBGdVNWTmpjRWxJZEdOaWFVRm5TVU5DZVZwWVVqRmpiVFJuWTIxV2VHUlhiSGxhVTJkdVkwZEdNR0ZEWTNCTWJYQjJZVmMwYjBwNVJYVmtSekYzVEROQ01WbHRlSEJaZVRodVRFTkNhbU16VGxGWldGSnZURzVPTVZsdVRqQmphV2Q0UzFOck4xaEhOR2RKU0RGalltbEJaMk50VmpCa1dFcDFTVWhLYkdOWVZuQmpiVlZ2U2pOQ2FHUkhaMjVMVXpWeFlqSnNkVXREWTNWa1J6RjNURE5DTVZsdGVIQlplVGh1VEVOQ2FtTXpUbEZaV0ZKdlMxUjBZMkp1TUhCUE1YaDFZbGM1YTJSWGVHeE1iVlkwWTBjNWVXUklUWFZoYms1SFlWZDRiR014VW5aVFZ6VnhXbGRPTUVsRU1HZGhiazVIWVZkNGJHTXhVblpUVnpWeFdsZE9NRXh0TVdoalEyaHRaRmMxYW1SSGJIWmlhV2h4WXpGQ2FHUkhaM0JKU0hSalltbEJaMHg1T0dkVFYxbG5aREpWYm1OdFZXZGhWMlIxWWpOS2NHSnRZMmRrUjJoc1NVZGFjR0pIVlhOSlJ6Rm9ZVEpWWjJNelZubGFVMEl3WVVkVlowbFRRbkJqZVVKb1pFTkNNR0ZIVldkWmJWWnVZVmMxZFdGWE5XNUpSemx0U1VoU2IxcFRRbmRaV0ZKdldFYzBaMGxIYkcxSlEyaHhZekZDYUdSSGFHSk5SakJuVUZRd09VbERZMmhLZVd0blpURjRkVWxEUVdkSlNFcHNaRWhXZVdKcFFubGFXRVl4WVZoS2JFdERaSGRaV0ZKdlNubHJkV0Z0T1hCaWFXZHVTVk0xTUdKWVFYWmpTRlpwWWtkc2FreDVZM05KUjNCNlZVZEdNR0ZETlhwa1YwcDZaRWhKYjAxVGEzQlBNWGgxU1VOQ09WaEhOR2RKU0Vwc1pFaFdlV0pwUW5sYVdFWXhZVmhLYkV0RFpIZFpXRkp2U25scmRXRnRPWEJpYVdkdVRHNVNkR05ET1hka1YwcHpZVmROZGtwNWQyZGhiazVSV1ZoU2IwdFVkR05pYmpCd1R6RjRkV0pYT1d0a1YzaHNURzFXTkdOSE9YbGtTRTExWkVkV2RHTkhlR2hrUjFaSFlWZDRiR014VW5aVFZ6VnhXbGRPTUVsRU1HZGtSMVowWTBkNGFHUkhWa2RoVjNoc1l6RlNkbE5YTlhGYVYwNHdURzB4YUdORGFHMWtWelZxWkVkc2RtSnBhREJqUjNoUldWaFNiMHRUUWpkWVJ6Um5TVU00ZGtsRmJHMUpTR1JzU2pOS2JFbEhiRzVpYlRsNVlWYzFia2xJVW05YVUwSnRZVmQ0YkV4RFFuUlpWM1JzU1VoT01XTnRWV2RrUjJoc1NVTkZaMkZZVFdkWldGRm5aRWRvYkVsSFNteGFNbXgxWW0xc2RWcDVRblphYVVJd1lVZFZaMk5IUmpCaFJuaDFTVU5DY0ZwcFFXOWtTRUp6VlVkR01HRkdjM2RZVTBFNVVGUXdaMHA1Ulc1TFUwSTNXRWMwWjBsRFFXZGpiVll3WkZoS2RVbElTbXhqV0Zad1kyMVZiMG96UW1oa1IyZHVTMU0xY1dJeWJIVkxRMk5vV1ZoT2VscFlVbnBNZVdOelNVaFNkMkpHUW1oa1IyZDFZek5XYVdNelVubExSRVZ3UzFSMFkySnBRV2RtVm5oMVNVTkNlVnBZVWpGamJUUm5ZMjFXZUdSWGJIbGFVMmR1WTBkR01HRkRZM0JNYlhCMllWYzBiMG95Um5wak1sWXdZM2s0Ymt4SVVuZGlSa0pvWkVkbmNFOHhlSFZtVTJzM1dFYzFZMkpzZUhWSmJERTVYRzVjYmk4dkl5QnpiM1Z5WTJWTllYQndhVzVuVlZKTVBXUmhkR0U2WVhCd2JHbGpZWFJwYjI0dmFuTnZianRqYUdGeWMyVjBQWFYwWmpnN1ltRnpaVFkwTEdWNVNqSmFXRXA2WVZjNWRVbHFiM3BNUTBwNllqTldlVmt5Vm5wSmFuQmlTVzVTYUdNeWRIcE1NMEp3WTBkV2MyRlhOV3hNYlhCNlNXd3djMGx0TldoaVYxWjZTV3B3WWxoVGQybGlWMFozWTBkc2RWb3pUV2xQYVVwQ1VWVkdRazk2Y3pkUGVuTTNUM3B6TjA5NmRFaFJWbVJJVHpCR1FsRXdaM05MTUVwQ1VWTjBRMDh3UmtKUmVUbERURVZXUWxGVlZUZFJWVVpFVW1sNGVsSlZSa0pqTUZVM1VWVkdSR1JGVlhOalZWSkNVVmhHUlU4d1JrSlJNMHBGVEVWc1FsRlZhM05hTUVwQ1VWZGtRMHhGWkVKUlZXTTNVMVZHUkdKclNYTmhWVXBDVVZkc1EwOHdUa0pSTTBKRFRFVk9RbEZWVFRkUlZVWkVVbWw0Y2xKRlJrSmhNRkUzVVZWR1JHSkZVWE5qVlZKQ1VWaEdSVTh3UmtKUk0wcEZURVZzUWxGVmEzTmFWVVpDV2xONFNGRlZSa2hQTUd4Q1VUSjRRMHhJVmtSUlZVWXhVWHAwU2xGVlRqSlJlWGN5VVd0R1FrNXJTVGRUVlVaRVRqQkpjMDFyVWtKUlZFcEZUekJzUWxGNlRrVk1TR3hEVVZWR05WRnFkRXBSVlU0MlVXbDNjbEV3UmtKTE1FMDNVMVZHUkV3d1RYTmFNRkpDVVZka1JVOHdiRUpSTW1oRlRFWnNRbEZXYXpkUk1FWkVXbWw0UkZGVlJrUlBNRVpDVVRCWmMyRXdWa0pSVjNSR1R6QkdRbEV5ZUVaTVJ6bEZVVlZHZGxKRWRFSlJWVTUzVWtONGVGSkZSa0pqVlZFM1VWVkdSR05yVVhOU1ZVWkNVbFIwUWxGVlRrZE1SMnhHVVZWR2NGSlVkRUpSVlU1eFVsTjRNVkpWUmtKa1ZWVTNVVlZHUkdSclZYTlBSVlpDVVZSb1JrOHdSa0pSZW14R1RFYzVSMUZWUm5aU2FuUkNVVlZPZDFKcGQzbFNSVVpDVFd0Uk4xRlZSa1JOTUZGelUxVkdRbE5UZUhoUmEwWkNZMVZKYzFJd1JrSlNlblJLVVZWT05GRnBlSGhSYTBaQ1kxVkpOMUV3UmtSbFJVbHpVVEJHUWxGNmRFSlJWVTVIVEVSQ1JsRlZSWGRTVkhSQ1VWVk5lRkpUZUVwUlZVWktURVU1UWxGVk9ITlNNRVpDVW5sNGFsRlZSbXBNUlU1Q1VWVk5OMUZWUmtST01FbHpUMFZXUWxGVWFFWlBNRVpDVVhwc1JreEVTa1pSVlVWNVVsUjBRbEZWVFhwU1UzaHlVVEJHUW1Fd1RUZFJWVVpFWWtWTmMxUlZSa0pVVTNoRVVWVkdSRXhGT1VKUlZUaHpVVEJHUWxGNWVHNVJhMFpDV2pCSmMxSXdSa0pTZVhodVVXdEdRbG93U1hOUk1FWkNVWGw0U0ZGVlJraE1SVTVDVVZWTmMxWlZSa0pXVTNoUVVWVkdVRTh3YkVKUk0wSkdURVJvUmxGVlJUUlNWSFJLVVZWTk5WSlRlRVpSVlVaR1RFVk9RbEZWVFhOUk1FWkNVWGw0VUZGVlJsQk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGZEVKUlZYTnpVakJHUWxKNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBVbEZWVG5sUmFYaE9VVlZHVGt4RlRrSlJWVTF6VkRCR1FsUjVlRVJSVlVaRVRFVXhRbEZWTUhOUk1FWkNVWGw0UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZVhoc1VWVkdiRXhGVmtKUlZWVnpWREJHUWxSNWVFUlJWVVpFVEVVeFFsRlZNSE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFOHdiRUpSTTBKR1RFVk9RbEZWVFRkVFZVWkVVa040VGxGVlJrNU1SVTVDVVZWTmMxUXdSa0pVZVhoRVVWVkdSRXhGTVVKUlZUQnpVVEJHUWxGNWVFUlJWVVpFVEVWc1FsRlZhM05STUVaQ1VYbDRhbEZWUm1wTVJWWkNVVlZWYzFRd1JrSlVlWGhFVVZWR1JFeEZUa0pSVlUwM1VWVkdSR1ZyVVhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTk4xRlZSa1JUUTNoT1VWVkdUa3hGVGtKUlZVMXpWREJHUWxSNWVFUlJWVVpFVEVkV1FsRlhWWE5TTUVaQ1VubDRiRkZWUm14TVJVNUNVVlZOYzFJd1JrSlNlWGhFVVZWR1JFeEdWa0pSVmxWelZGVkdRbFJVZEVwUlZVNXhVbE4zTkZKVlJrSlBSVlUzVTFWR1JFOVZWWE5TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZOYzFSVlJrSlVVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUV4UlZVWk1URVZrUWxGVlkzTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5OMVZWUmtSalJVbHpWRlZHUWxSVGVFUlJWVVpFVEVVNVFsRlZPSE5STUVaQ1VYbDRUbEZWUms1TVJVNUNVVlZOYzFFd1JrSlJlWGhLVVZWR1NreEZUa0pSVlUxeldsVkdRbHBUZUVaUlZVWkdURVV4UWxGVk1ITlJNRVpDVVhsNFRsRlZSazVNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjZkRXBSVlU1MVVsTjRSRkZWUmtSUE1HeENVVEJSYzFSVlJrSlVVM2hFVVZWR1JFeEZPVUpSVlRoelVUQkdRbEY1ZUU1UlZVWk9URVZPUWxGVlRYTlJNRVpDVVhsNFNsRlZSa3BNUlU1Q1VWVk5jMWt3UmtKWmVYaEdVVlZHUmt4Rk1VSlJWVEJ6VVRCR1FsRjVlRVJSVlVaRVR6QkdRbEV6YUVWTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFOHdSa0pSTUdkelZGVkdRbFJUZUVSUlZVWkVURVU1UWxGVk9ITlJNRVpDVVhsNGVGRnJSa0pqVlVselVqQkdRbEo1ZUhoUmEwWkNZMVZKYzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelZsVkdRbFpUZUZCUlZVWlFUekJzUWxGNmJFWk1SR2hHVVZWRk5GSlVkRXBSVlUwMVVsTjRSbEZWUmtaTVJVNUNVVlZOYzFFd1JrSlJlWGhRVVZWR1VFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVYwUWxGVmMzTlNNRVpDVW5sNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUlNVVlZPZVZGcGVFNVJWVVpPVEVWT1FsRlZUWE5VTUVaQ1ZIbDRSRkZWUmtSTVJURkNVVlV3YzFFd1JrSlJlWGhFVVZWR1JFeEZiRUpSVld0elVUQkdRbEY1ZUZaUlZVWldURVZXUWxGVlZYTlVNRVpDVkhsNFJGRlZSa1JNUlRGQ1VWVXdjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVR6QnNRbEY1T1VWTVJVNUNVVlZOTjFOVlJrUlNRM2hPVVZWR1RreEZUa0pSVlUxelZEQkdRbFI1ZUVSUlZVWkVURVV4UWxGVk1ITlJNRVpDVVhsNFJGRlZSa1JNUld4Q1VWVnJjMUV3UmtKUmVYaFVVVlZHVkV4RlZrSlJWVlZ6VkRCR1FsUjVlRVJSVlVaRVRFVk9RbEZWVFRkUlZVWkVZMFZSYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUwM1VWVkdSbE5EZURGak1ERkNVVmhXZWxSVFNYTkpiVnB3WWtkVmFVOXBTakJaV0U1eVkzazVkMkZZUW14aVIyeDFXbE0xY1dONVNYTkpiazUyWkZoS2FscFlUa1JpTWpVd1dsYzFNRWxxY0dKSmFUaHhTMng0ZFVsRGIyZGFNMG94WW01UmRtTkhiSGRhVjNod1ltMVZkV0Z1VG1OaWFVRnhXRWMwWjB0cFFsVmhSMVZuWWpOS2ExcFlTV2RoVnpSblpESm9jRmt5WjJkbFZ6a3hZMmxDYW1NelRYTkpSM0JvWkcxR2Vsa3pTbkJqU0ZGelNVZEdkVnBEUWpCYVZ6RjNZa2RHTUZwVFFtMWhWM2hzWTNsQ2VtRkhPVEZpUjFGbldXMVdZMkpwUVhGSlIwNTJZbGhDY0dKSFZtdEpSMFoxV2tOQ2MyRlhOWEphVjFGbldtNUtkbUpUUWpWaU0xWjVTVWhhY0ZwWVpIcEpSMFoxV2tOQ2VtUkhSakJoVjAxblUwWlNUbFJEUW0xaFYzaHNZM2sxWTJKcFFYRllSelJuUzJsQmIxUnRPVEJhVTBJd1lVZEdNRWxJYkhaa1UwSnFXVmMwWjJSSFJuSmFVMEpvV2toYWFHSnVVbWhhTWxWbllqSlpaMUl6U2pGaWJsRjBZek5TTldKSFZXZGtNbXh6V2tkT2FHTnRVWFphTW5oMldXazVlbU5IZUdoa1EwSnNaVWhDZVZwWVRucGhWemwxWXpGNGRVbERiMmRhYlRsNVNVY3hhR1JIVG05aFZ6VnVTVWN4TVdKSVVuQmpSM2hzU1VkYWNHSkhWbnBNUTBKb1ltMVJaMGxUUW5CaWFVSnRZMjA1ZFdSRFFuWmFhVUpvWW1sQ2JHVklRbmxhV0U1NllWYzVkVWxJVW5aSlIyeHVZbTA1ZVZwVFFtMWhWM2hzWTNrMGNGaEhOR2RMYkhoMVNVTnZaMUp0T1hsSlJ6RjJZMjFWWjJGWE5XMWlNMHAwV1ZoU2NHSXlOR2RqTWxac1QyeDRkVWxEYjJkSlEwSnZaRWhTZDJONmIzWk1NbVJ3WkVkb01WbHBOV3BpTWpCMldXMUdjMXBIVm5sYVIwWjZZVWhyZG1NeVJuQmlTRTEwV2tjNWFtTjVPV2xpUnpscFRESXhhR016VW14amFUbG9ZbTFHTUdJeU1UVk1NakUxVVZoQ2Qwd3pVbWhqTW5SNlRETkNjR05IVm5OaFZ6VnNURzF3ZWt4dE1XdFlSelJuUzJrNVkySnBPSFpKUlU1VVZYbENiV0ZYZUd4amVVSXdZbmxDY0dKdGNHeFpNMUZuWVZjMFoySXpTbXRhV0VwalltazRkbGhITkhaTWVVRnZZVmRaWjJWWE9URktNMHBzU1VoV2VtRlhOVzVKUlhoR1ZURk5aMlF5YkRCaFEwSXdZVWRWWjFsdVZuQmlTRkYwWVZjMFoxcEhWbTFaV0ZaelpFTkNhbUl5TlcxaFYyTnpTVWhzZG1SVFpITmlRMEl6V1ZjMU1GaEhOSFpNZVVGblpFYzRaMWt5YUdoaWJXUnNTVWRDYUdNelRteGtTRTEyWXpOU05XSkhWbnBNTW14MFkwYzVlV1JIVm5sTWJYaHNZek5PWjBsSGJIVmpNMUpzV1ZkUmRVdFdlSFZrYlVaNVNVZE9lbU13V25CaVIxWjZWa2M1U21KdGNHeFpNMUZuVUZOQ1lsaEhOR2RKUTBGblNqTk9NR1ZYZUd4amVUaHhTMms0Y1V4dFRucGplV1JqWW13d04xaEhOSFpNZVVKRVlrZHNiR0p1VVhSak1teHJXbE5DY1ZsWVdtaGpNazU1WVZoQ01FbEhXbkJpUjFaNlNVaFNka2xIYkhWaGJWWnFaRU5DY0dKcFFuWmpiVkpzWTJ4NGRVeDVPR2RMU0ZaNldsaE5aMUl6U2pGaWJsRjBZek5TTldKSFZXZGtNbXh6V2tkT2FHTnRVWFphTW5oMldXazVlbU5IZUdoa1EwSnNaVWhDZVZwWVRucGhWemwxWTNsc1kySnVXbWhqYVVKeFl6QmFjR0pIVm5wV1J6bEtZbTF3YkZrelVXZFFVMEppV0VjMFowbERRV2RNZVRoblZFYzVhRnBEUW5wWlYyeHpZM2sxY0dKNVFtbGFWMXAyWTIxVloxcFlXbXhqYm13d1lVZHNkVnA1UW14aVNFNXNXRWMwWjBsRFFXZEtNbkI2VERKU2JHTkhWblZhUjFaMVdUSnNiR041T1hwWlYyeHpZM2sxY0dKNU5YRmplV056V0VjMFowbERRV2RNZVRoblVrZFdkMXBYTld0YVZ6VnFZVmRXZWtsSGVIQmhNbFZuWVd4R01WcFlTalZNUTBKMlkybENRbUp0WkRGaVIwWjVTVWRHZVZwVFFtbGpiVGt4V2pKb01FbEhiSFZKUjJoc1kyMVdZMkpwUVdkSlEwRnVZVzVOZGxwSFZuZGFWelZyV2xjMWFtRlhWbnBNZVc5eFRIbHZkV0Z1VFc1TVJuaDFTVU5CWjBsRE9IWkpSVVp6WWtOQ2RscHBRakJoUjFWblkyMVdlbVJEUW5aYWFVSTFZak5XZVVsSFRuTmhWMVoxWkVNeGVtRlhVbXhKUjNCNlNVZGFjR0pIVm5wWVJ6Um5TVU5CWjB4NU9HZGtNbXh6WWtOQ2FWcFRRbkJpYlhCc1dUTlNiRnBEUW05YVdFcHNTVWRzZFVsSE5YWkpTRUpvWTI1U2NGa3pWbk5aV0VsbllqTkthMXBZU1hWWVJ6Um5TVU5CWjBveWNIcE1lVzl4VEhsdmRXRnVUVzVZUnpWa1R6RjRkVXg1T0dkUk1uaHdXbGMxTUV4WVRuQmFSMVZuVTBaU1RsUkRRakJhVnpGM1lrZEdNRnBZVFdkWldFcHNTVWRzZFdGdFZtcGtSMVpyU1VoV2VtRlhOVzVKU0ZKdldsTkNlbUl6Vm5sWk1sWjZTVWRLYkdKSE9UTllSelIyVEhsQ1ZXRkhWV2RpTTBwcldsaEtjR0p0WTJkaU1sbG5aRWRvYkdNeVZXZGtSMVowWTBkNGFHUkhWbnBKU0U1dllqTldjMXBITkc1a1EwSjBXVmhTTUZwWVNYVllSelIyVEhsQmIyUllUbXhqZVVKSVkyNVdkV1JETVhwa1NHeHpXbE5DTTJGWGVHdFpNa1o1V2tNNWJtSkhPV2xNTTA1M1lrZEdNRWxIVmpSalNFcHNZek5PY0dJeU5YcExWbmgxVEhrNVkySnBPSFpKUlVvMVNVZFNiRnB0UmpGaVNGRnpTVVpPYUdGWGVIcEpTRlo2V2xoTloxTnNUbFZKU0ZKc1lsaENjMWxZVW14amVVSm9ZbTFSWjJOSVNteFpNamwwWTBkc2MxcFlUV2RrUjJoc1lsTkNjR0p1VW5aWVJ6UjJUSGxDYldSWE5XcGtSMngyWW01TloxcHRPWGxKU0d4MlpGTTBaMGxGYkcxSlNHeDJaRk5DTTFsWE5UQkpTRkoyU1VoV2VscFRRbkZaVjFKc1RFTkNiMWxYTld0aVIxWnBXVmhLZWt4RFFtdGtXRTR3VEVOQ2JHUkhUWFZNUm5oMVRIazRaMlF5YkRCaFEwSXdZVWRWWjJKSGJIVmhNbFo1VEVOQ2RXSjVRbmRqYlRscFlrZFdkRXhUTUdkbFZ6a3hTako0YzBsSGNERmpNMUZuWkRKR2RXUkRRakJpZVVKMFdWZDBiRWxJVGpGamJWVm5aRWRvYkVsSVFubGFWMDUyWWxoQ2NHSkhWbXRZUnpSMlRIbENNRnBYTVhkaVIwWXdXbGhOWjFveVZqQkpTRTUzWVZoUloySXpWakJKU0ZKMlNVaFNiMXBUUW5wWlZ6RnNTVWRhY0dKSFZYVkpRMEpEV2xOQ2VtUllTbXhKUjBaMVdrTkNhbUZIVm1waGVVSjJaRmhSWjFsSVVtaGpNblI2VERGS1JsRlZVazVTVXpWMFdrZENZMkpwT0haSlIxcDJZMmxDY0dKdFduWmpiVEZvWkVkc2RtSnBRblppYVVKcVpGaE9NR0l5TVhCbGJXeDFXbmxDYUdKdFVXZGhWelY2WkVkR2MySkhiSFZhZVVKMVdsaGpaMlJIUm5waE0wMTFXRWMxTWxsWVNXZGtSMVowWTBkNGFHUkhWa2RoVjNoc1l6RlNkbE5YTlhGYVYwNHdTVVF3WjFjeGVIVkpRMEZuU1VOa01GcFhNWGRpUjBZd1dsaE5ka3RwYjNaTGFUVnZaRWN4YzBveGVIVllWSFJqWW1rNGRrbEZVbXhhYlVZeFlraFJaMk5IUmpCaFEwSnRZak5KWjJOSVZtbGlSMnhxU1VkYWRtSkhVbXhqYVVGdll6SldiRWxIVW5aWk0xWjBXbGMxTUZsWVVuQmlNalJuV20wNWVVbEhNWFpqYlZWbllWYzFiV0l6U25SWldGSndZakkwY0ZoSE5USlpXRWxuWkVjeGQxVkhSakJoUTBFNVNVTmpkV1JITVhkTU0wSXhXVzE0Y0ZsNU9HNVBNWGgxVEhrNFoxVklTbXhhYld3MFNVaEtiR0pIUmpCaFdGcHNTVWhDYUdSSGFIcEpTRkoyU1VoT2RtUllTbXBhVTBKdFlWZDRiR041UW5waWVVSXdZVWRXTlVsSVFuWmhWelV3U1VoU2RrbElVbTlhVTBKM1kyMDVkMXBZU1dkaVJ6bHFXVmhTY0dJeU5YcFlSelIyVEhsQmIyRlROV3hNYVVJellVZFdlVnBUUWpCaFIxVm5Zak5TYjFwWVNXZFNNMG94WW01UloyUkhSbnBoTTAxbll6TkNjR1JEUWpCaFIxWjBTVWM1TVdSRGQyZGlNMGxuWVZjMFoyTXlPWFJhVTBKcVdWaE9iR041ZDJka01taHNZMjFXWTJKcE9IWkpTRkp2V2xocloyTnRWbnBoVjFKc1NVZHNkVWxJVW05YVUwSnRZVmhLZW1SRFFuZGlSMFpxV2xOc1kySnRNWFphU0ZaeldsTTFiR1ZJUW5aamJsSjZURzFPZW1Nd1duQmlSMVo2VmtjNVNtSnRjR3haTTFGblVGTkNhbU16VGtkaFYzaHNZekZTZGxOWE5YRmFWMDR3VEcweGFHTkRhRzFrVnpWcVpFZHNkbUpwUVc5Wk0wNTZWVWRHTUdGRGEyZGxNWGgxU1VOQlowbERPSFpKUld4dFNVaGtiRW96U214SlIyeHVZbTA1ZVdGWE5XNUpTRkp2V2xOQ2JXRlhlR3hNUTBKMFdWZDBiRWxJVGpGamJWVm5aRWRvYkVsRFJXZGhXRTFuV1ZoUloyUkhhR3hKUjBwc1dqSnNkV0p0YkhWYWVVSjJXbWxDTUdGSFZXZGpSMFl3WVVaNGRVbERRV2RKUjJ4dFNVTm9hbU16VGxGWldGSnZWM3BDWkVsRU1EbFFVMEZ1U1ZOamNFbElkR05pYVVGblNVTkJaMGxEUVdkamJWWXdaRmhLZFVsSVNteGpXRlp3WTIxVmIwb3pRbWhrUjJkdVMxTTFjV0l5YkhWTFEyTm9URzVTZEdORE9YZGtWMHB6WVZkTmRrcDVkMmRaTTA1NlZVZEdNR0ZETlhwa1YwcDZaRWhKYjAxVGEzQlBNWGgxU1VOQlowbElNV05pYVVGblNVTkNlVnBZVWpGamJUUm5ZMjFXZUdSWGJIbGFVMmR1WTBkR01HRkRZM0JNYlhCMllWYzBiMHA1TlRCaVdFRjJZMGhXYVdKSGJHcE1lV056U1VkT2VtTXhRbWhrUjJkd1R6RjRkV1pUYXpkWVJ6VjBZakpTTVdKSFZYVmFXR2gzWWpOS01HTjVOWEZqTUZwd1lrZFdlbFpIT1VwaWJYQnNXVE5SWjFCVFFuRmpNRnB3WWtkV2VsWkhPVXBpYlhCc1dUTlJkV0pYUm5kTFIxb3hZbTFPTUdGWE9YVkpRMmh4WXpGQ2FHUkhaM0JKU0hSalltbEJaMGxEUVhaTWVVSktXbWxDTTFwVFpIbGFVMEp3V2pJMWRtTnRiSFZhZVVJd1lVZFZaMXB0YkhOYVUzZG5ZbGRHY2xwVFFucGtXRXBzU1VoU2IxcFRRV2hKUjJ4NlNVZEdNRWxJVW05YVUwSnBXbGRrY0dKdE5YQmliV05uWWpKWloyUkhhR3hKU0VKb1pFZG9ZMkpwUVdkSlEwSndXbWxCYjJGdVRsRlpXRkp2VjNwQ1pFbEVNRGxRVTBGdVNWTmpjRWxJZEdOaWFVRm5TVU5CWjBsRFFXZGpiVll3WkZoS2RVbElTbXhqV0Zad1kyMVZiMG96UW1oa1IyZHVTMU0xY1dJeWJIVkxRMk5vVEc1U2RHTkRPWGRrVjBwellWZE5ka3A1ZDJkaGJrNVJXVmhTYjB4dVRqRlpiazR3WTJsbmVFdFRhemRZUnpSblNVTkJaMlpXZUhWSlEwRm5TVWhLYkdSSVZubGlhVUo1V2xoR01XRllTbXhMUTJSM1dWaFNiMHA1YTNWaGJUbHdZbWxuYmt4dVVuUmpRemwzWkZkS2MyRlhUWFpLZVhkbllXNU9VVmxZVW05TFZIUmpZbTR3Y0U4eGVIVmlWemxyWkZkNGJFeHRWalJqUnpsNVpFaE5kV1JIVm5SalIzaG9aRWRXUjJGWGVHeGpNVkoyVTFjMWNWcFhUakJKUkRCblpFZFdkR05IZUdoa1IxWkhZVmQ0YkdNeFVuWlRWelZ4V2xkT01FeHRNV2hqUTJodFpGYzFhbVJIYkhaaWFVRnZaRWhDYzFWSFJqQmhRMnRuWlRGNGRVbERRV2RKUXpoMlNVVnNiVWxJWkd4S00wcHNTVWRzYm1KdE9YbGhWelZ1U1VoU2IxcFRRbTFoVjNoc1RFTkNkRmxYZEd4SlNFNHhZMjFWWjJSSGFHeEpRMFZuWVZoTloxbFlVV2RrUjJoc1NVZEtiRm95YkhWaWJXeDFXbmxDZGxwcFFqQmhSMVZuWTBkR01HRkdlSFZKUTBGblNVZHNiVWxEYURCalIzaFJXVmhTYjFkNlFtUkpSREE1VUZOQmJrbFRZM0JKU0hSalltbEJaMGxEUVdkSlEwRm5ZMjFXTUdSWVNuVkpTRXBzWTFoV2NHTnRWVzlLTTBKb1pFZG5ia3RUTlhGaU1teDFTME5qYUZsWVRucGFXRko2VEhsamMwbElVbmRpUmtKb1pFZG5kV016Vm1sak0xSjVTMFJGY0V0VWRHTmlhVUZuU1VOQ09WaEhOR2RKUTBGblkyMVdNR1JZU25WSlNFcHNZMWhXY0dOdFZXOUtNMEpvWkVkbmJrdFROWEZpTW14MVMwTmthR016VG14a1NFMTJTbmwzWjJSSVFuTlZSMFl3WVVOck4xaEhOVGxMVkhSallteDRkVXg1T0dwSlNFNTJaRmhLYWxwVk1XaGpTRUp3WW0xa1ZsVnJkemxhUjBZd1dWUndhR05JUW5OaFYwNW9aRWRzZG1KcE9YRmpNamwxVHpKT2IxbFlTbnBhV0ZFNVpGaFNiVTlFZEdsWldFNXNUbXBSYzFwWWJFdE5iSEJaVTI1d2FGWjZiREZUVjNCMlpXdDRSRk51Y0dsTk1WbzFWMVJLVjJWcmJIRmpSMHBLWW14S2IxbDZTakJsYTNkNlVXNUNhbEl4V25wWlZtTXhZa1Y0ZEdOSWNFcGlSRUo2VTFjd01XRkhTbGhXYm5CS1lXNUNhVmRHVGpOaFYwcFlVbTVrYWxJeWVERlhhazVPWVZVNWNGTnJTbEpXVlZwRFZETndlazR3T1RaamVtUlFaVzVOTTFRemNEQlRSa1pYV2tWb1VFMUZXa05WYWtKdVl6QnpkMU5yU2xKVk0xSkVWSHBDUjFGc1JqVlBWVTVOVWxaYVExVldWbFpPTVVaV1VtdFNVMkZZYURaVmJGWkhVVzFOZDFaVVpGSldWVnBGV2tWV1ZtTXlUbFpWYTBwU1YwVmFSbFI2UWtkUmJFVjZVMnRXVFZKWGVFTlZWbFp5WXpGdmQxTnJTbEpXTWxKRVZFVldhMUZzUmxaWmVtUlVWbFZhUlZreWRFcGpNa1pXVTJ0S1VsWXllRVJVZWtKUFVXeEZlV1ZGVGsxU1ZUVkRWVlpXVGs0eFJsWlNhMmhUWVZob2VWVnJWa2RSYlVWM1ZWUmtVbFpWV2tWWmExWlNZekpPVmxWclNsSlhSVnBHVkhwQ1IxRnNSWHBUYTFaTlVsZDRRMVZXVm5Kak1YQldVbXRLWVZVemFFbFZWbFpIVTBVNGQySkZTbE5YUlVwRVZFVm9WMUpHUmxaU2FrWlNaVzVTUzFWV1ZrOU5iRVkxWkhwS1VtRXdXa05VYlhSS1RqRk9WbEpyV2s5TlJXeDZWRmQwVTFGc1JsVlRhMVpRVFVkNFExVlljRTlTVlhoSllrVk9VbFpWV1RGVlYzQXdVMnhHVmxacVdsSmhXR1I1VlZSQ1IxRnJjM2RVVkdSVVZsVmFSVlJFUWs1ak1XOTNWV3RLVWxZeVVrWlVla0p6VVd4RmVXRkZWazFTYlhoRFZWWmFjazR4UlhkU2ExSmFZVmhvUlZWV1ZrZFNSVGgzVW10S1UwMUdiSHBaVkVKWFVXeEdXR1JGV2xCTlJWcERWVlJLTkZKcmVFaFBWVlpTVmxWYU1sVnJVakJSYkVaV1ZHNWtVMUV6YURSVmExWkhVVzFPVmxWVVpGSldWVnBGV1RKMFVtTXhTbFpTYTBwVFZraFNRMVZXVms5U01IaElZa1ZhVWxaVlduZFZiRkl3VVd4R1ZsUnVSbE5WTTJkNFZXeFdSMUZ0VWxaV1ZHUlNWbFZhUlZwSGRGWmpNRGxHVm10S1VsWkhhRWRVZWtKSFVXeEdObUpGV2sxU2VteElWVlpXUjJSc1NuRmtSVXBTVmxVMU0xVnRiRE5sVmtwR1VtdEtUbUV4UlROVlZsWkhVa1V3ZDFWWVRsUldWVnBEVlRGT05HVkdSbkpTYTBwcVZsVnNlbFZxUWtkUmJFbzJaRVZ3VWxaVk1UUlZWMncwWlVaR2NsSnJTbXBXVldzelZWUkNSMUpIVWtaVFdFNVNUVVZhUTFWWWNEQlJiRVpYVW10a1RWSkZTa2RWVmxaR1pERktWV1JGU2xKV1ZURTBWV3hPTkZOc1JsWlNhM0JOVWxSc1ExVldWVFJqTVVsM1VtdEtVMlZZYUhGVlZsWkhZV3Q0UmxSclNsSldWVEF6VlZaV1IxSnJOSGRUV0U1UVVsWmFRMVZXVW05U2F6aDNVbXRLVW1WdGVFZFVSVkpMVW14R1ZsSlliRk5XU0ZKRFZWWldUbVZzU2xSbFNFcFNUVVZhUTFsVVFrNU9NVVpXVW10U2FWSlZNWHBXUmxaSFVXeFNWR1ZGVWxKV1ZWcEZWRVZWTlZGc1JsWlBTRTVTVFVWYVExVlliRFJpYkVaeVVtdEtZVTFGYkhwVmFrSkhVV3hLTldWSE5WSmhNRnBEVjJwQ1NtTXhSWGRTYTBwU1pWaG9TVlZXVmtkVFJYaEdWR3RLVWxaVk1YcFdiRlpIVVd4V05XVkdRbEpXVlZwUlZIcENjMUZzUlhwVGExcE5Va2RvUjFWV1ZrWk9Sa3BWWkVWd1VsWlZNREZWYkU0MFVteEdWbEpyV2sxU1ZUVkRWVlpXVG1NeFJYZFNhMHBTWlZob1VWVldWa2RWUlhoR1ZHdEtVbFpWTVhwVlZFSkhVV3hHTldWRlVsSldWVnBGVkVWV01GRnNSbFpqTTA1VFRVVmFRMVZ1YkRSU1JrWldVbXRTVFZKVk5VTlZWbFpPWXpGRmQxSnJTbEpsYmxKVFZWWldUMDFzUm5CbFJUVlNWbFZhVDFSRlZrOVJiRVpXVkZoT1ZVMUZXa05XU0d3MFVrWkdWbEpyVWsxU1ZFWkRWVlpWZDJNeFJYZFNhMHBTWlZob1JWVldWa2RTUlhoR1lrVktVbFpYZEhwVlZFSkhVV3hHTldWSGVGSldWVnB6VkVWV1YxRnNSbFpXV0U1VlRVVmFRMVpJYkRSU1JrWldVbXRTVFZKVVJrTlZWbFYzWXpGRmQxSnJTbEpsV0doRlZWWldSMUpGZUVaVWEwcFNWbFV4ZWxWVVFrZFJiRVkxWlVWU1VsWlZXa1ZVZWtKelVXeEZlV1ZGV2sxU1ZUVkRWVlpXVGs0eFRsWlNhMUpUVVROb1QxVldWa2RVYTNoR1ZHdEtVbFpWTVhwV1JFSkhVV3hTTldWRlVsSldWVnBGVkVWVmVGRnNSbFpOU0U1U1RVVmFRMVZZYkRSU1JrWldVbXRTVFZKWGVFTlZWbFp5WXpGRmQxSnJTbEpsV0doeFZWWldSMkZyZUVaV2EwcFNWbFpXZWxaRVFrZFJiRkkxWlVWU1VsWlZXa1ZVUlZaUFVXeEdWbFJVWkZKV1ZWcEZXa2QwVW1NeFJYZFNhMHBTWlZob1JWVldWa2RTUlhoR1ZHdEtVbFpWTUROVlZsWkhVa1pPUkdWRk5WSldWVnBQVkVWV1QxRnNSbFpVV0U1VlRVVmFRMVpJYkRSU1JrWldVbXRTVFZJeFdrTlZWbVJXWXpGSmQxSnJTbE5sV0doelZWWldSMkpGZUVaVWEwcFNWbFV4ZWxWcVFrZFJiRW8xWlVWU1VsWlZXa1ZVUlZwWFVXeEdWMVJZVGxWV1ZWcERWa1pTTUZOc1JsWlViazVUVlROak1GVnNWa2RSYXpsR1ZsUmtWRlpWV2tWVU1WWldZekZLVmxKclNsTlZNMmhGVlZaV1IxSkZlRVpVYTBwU1ZsVXhlbFpHVmtkUmJGSlVaVVZTVWxaVldrVlVSVlpQVVd4R1ZsUllUbEpOUlZwRFZWaHNORlJHUmxaU2EzaE5VbGRTUTFWV1ZtcGpNVVYzVW10S1VtVllhRVZWVmxaSFVrVjRSbFJyU2xKV1ZUQXpWbFpXUjFKSFVrWlRXRTVWVmxWYVExWkdUalJTUmtaV1VtdFNUVkpVYkVOVlZsVTBZekZGZDFKclNsSmxXR2hQVlZaV1IxUnJlRVpVYTBwU1ZsVXhlbFZVUWtkUmJFWTFaVVZ3VWxaVldrdFVSVlpQVVd4R1ZsUllUbUZXVlZwRFYyeE9ORkpzUmxaU2ExcE5VbFJHUTFWV1ZYZGpNVVYzVW10S1VtVllhRTlWVmxaSFZHdDRSbFJyU2xKV1ZURjZWVlJDUjFGc1JqVmxSVkpTVmxWYVJWUkZWazlSYkVaV1ZGaE9VazFGV2tOVldIQXdVMnhHVmxSdVJsTlZNMmhGVlZaV1IxSkZPSGRpUlVwU1RVWkdlbFpHVmtkUmJGSlVaVVZTVWxaVldrVlVSVlUxVVd4R1ZrOUlUbEpOUlZwRFZWaHNORlJzUmxaU2F6Vk5VbFUxUTFWV1ZrNWpNVVYzVW10S1VtVllhRXRWVmxaSFUydDRSbFJyU2xKV1ZURjZWMVJDUjFGc2JEVmxSVnBTVmxWYVIxUkZWWGhSYkVaV1RVaE9VazFGV2tOVldHdzBVa1pHVmxKclVsQk5SVnBEVlZST1UxSlZlRVpVYTBwU1ZsVXhlbFZVUWtkUmJFWTFaVVZTVWxaVldrVlVla0pIVVd4RmQxb3pUbFZXVlZwRFZrWk9ORkpHUmxaU2ExSk5VbFJzUTFWV1ZUUmpNVVYzVW10S1VtVllhRFJWVjNSSFVXMU9WbE5ZVGxOTlJWcERWVzVzTkdWR1JuSlNhMHBxVmxWc2VsVlVRa2RSYkVZMVpVVm9VbFpWV2tsVVJWWlBVV3hHVmxSWVRsZFdWVnBEVmxoc05GVkdSbFpTYkVKUVRVZDRRMVZZYXpWU2EzaEZZVVZhVWxaVlZUQlZiRkl3VTJ4R1ZsUlVWbE5WTTJoSFZWWldSMUpyZUVaVWEwcFNWbFV4ZWxWVVFrZFJiRVkxWlVaQ1VsWlZXbEZVUlZaUFVXeEdWbFJZVGxKTlJWcERWVmhzTkZKR1JsWlNhMUpOVWxoU1ExVldWbnBqTVVsM1VtdEtVMlZZYUVWVlZsWkhVa1Y0UmxSclNsSldWVEY2VlZSQ1IxRnNSalprUmtwU1ZsVTBlVlZYYkRSVWJFWldVbXMxVFZKVk5VTlZWbFpPWXpGUmQxSnJTbFZsV0doRlZWWldSMUpGZUVaTlZVcFNWbFJDZWxWVVFrZFJiRVkxWlVWU1VsWlZXa1ZVUlZaelVXeEdWbUV6VGxKTlJWcERWVmhzTkZac1JsWlNiRnBOVWxaYVExVldWbFpqTVZGM1VtdEtWV1ZZYUVWVlZsWkhVa1Y0UmsxVlNsSldWRUo2VlZSQ1IxRnNSalZsUlZKU1ZsVmFSVlJGVms5UmJFWldWRmhPVWsxRldrTlZXR3cwVWtaR1ZsSnJVbEJOUjNoRFZWaHdhMUpWZUVaVWEwcFNWbFV3TTFVeFZrZFNSa3BFWlVVMVVsWlZXazlVUlZaUFVXeEdWbFJZVGxWTlJWcERWa2hzTkZKR1JsWlNhMUpOVWxSR1ExVldWWGRqTVVWM1VtdEtVbVZZYUVWVlZsWkhVa1Y0Um1KRlNsSldWM1I2VlZSQ1IxRnNSalZsUmxKU1ZsVmFWVlJGVmxkUmJFWldWRmhPVlUxRldrTldTR3cwVWtaR1ZsSnJVazFTVlRWRFZWWldUazR4UmxaU2ExSm9ZVEZHZWxWVVFrZFJiRVkxWlVWU1VsWlZXa1ZVUlZaUFVXeEdWbFJYYkUxUk1IQjBXVlprTkdKRmJIRmlNbXhyVWpCYU5sbFVUazVrYlU1SVlraGtZVll6YUhkWmJURldaRmRHZFZSWGJFMVJNSEEyV1dwT1YyVldhM2xXYm5CU1RXcHNNVnBGWkZka1YxSkVVMVJhV0dWVmJESlRNbXgzV1RKS2NGRllSa3BTTWxJMVdrWmpNVTFGZDNwUmJrSnFVakZhZWxsV1l6RmlSWGgwWTBod1dWSjZVbTVUTW5nMFpGVnNSR0l5WkZkU01taHpVMVZqTldWV2NFaFdibXhLVWpKNE1WTlZhR3RpTWtaWVZHMDVTbE5IZURKYVJtaEtXakZyZWxSdWNFMVJNRXA0VjFab1lXRkhUWGxVYm14b1YwVkpkMVJGVGtOaFIwcDBWVmRrYTFJeFdqQlpNR1EwWVVkU1NGWlhaR0ZpVjNoNlYyeG9UbG95VFhsaFNGcHJWak5vY2xOVlpFdGlSbWhJVGtka1RHRlZTbkZaYWtsNFpESkdXR1ZIZUdGUk1FcHZXVzB4VWxveVNraGlTRlpvVFd4YWNsTlZaR0ZsVjBsNVRVZGtiRlo2YTNoWk1teERUVzFHV0ZacVRtcGxWVXB2V1cweFVsb3lUWHBWYldoclVqSjRjVk5WVm05V1ZsSldaREprWVdKWGVIcFhiR2hPWkZab1NFNUhaRXhpU0dneFUxVk9kbG93ZEVaT1dGcHJVakZXYmxwRlpHOWhSMUpFVVdwV2FVMHhWbTVYVkVwSFpGVnNTVlZ0YUdoTmJGWnVWMVprVTAxc2JGaE9WRUphVmpKU2MxTlZZelZpVld4R1draHNhMVo2VlhkVVJtaFBUVWRXV0dWSGVFcFRSMUozV1d0a1UyRnNiRmxUYlhSTlRXMVNlbGxxU2twa2JVMTZVVzVPV2xkR1JtNVhiR2h2WkRKT2RGWnVjR3BOYlhneVdXMDFUMWt5U25CUldFWktVakZ3TWxreWJFTmtSbXhaVlcxd2FGSXllREZYYm14RFpFZFNXR1ZFUW1oWFJVcDZWMnhPUTJKWFJsaGxSM2hxWlZoa2JsZFdZekZoTUd4RVVsZGthRlo2VW01WGJUVkxaRzFLZFZWWFpHbE5iR3h1VjFaak1Gb3hjRmxoU0dScVlsWmFObGw2U25Oa2JVcHdVV3BDYVdWVlNuZFhha2t4WkcxT2RGWlhaR0ZpVjNoNlYyeG9UbVJWZEZkbFNGWktVVE5DYWxsdGJFSmpWV3hHVjI1YWFtRlZTakJaYWs1TFlrVnNTR0pJVm1GaVZHdzFXV3hrUjAxSFJsaFBXRlpLVTBVMWMxZHNVbmRaTWtwd1VWaEdTbEV3Um01WlZXaFRUVWRPU1ZSVVdrMWxWR3gxV1Zab1UySXlVbGhUV0ZaYVRXcHNNRlJFU2t0aFIwcElWVzE0YW1KV1NtOVpla3B2VGxWM2VsUnRhR2hXTTJnMlZFWmtVMlJzYTNwVVdGcGFZbGhvTWxkWGF6VmtSbXhaVkdwQ1lWZEZiREpYVm1NeFlVZFNTRTlZVW14VmVtd3dXbFpXUjJReVRrUlBWRUphVjBVMWVWa3phelZrTWtaWlVXMTRhVkl5ZURGWGJFMHhZMWRPTlU1WVVtRlNibWd4VTFWT2RtUnNhRWhPVjA1cFlraG9NVlJJYXpSYU1VVjRWR3hTU2xJeGNIZFphMlJYWld0c1NWVnVXa3BTTW5neFdWY3hWMkZ0VWtSUmJrSnBZVlZLTWxreU1WTmlSMDV6WlVoV1RXVlViR3BaYldzMFpHdHNSR0ZJUW1GaFZVa3hXV3BPVm1KdFRuUldWMlJyVjBVMWQxbHRNV3BhTVZKR1ZteFNWbVZWU1hwWlZtaFRZakJzU1ZWdE9XRlZNRXB3V2taa2MyTXlVa1JOV0VKcFlWVktjbGRzWkdGaFIxSllaVVJDU2xJd05USlpiVEZoWTBad05XUXlaR3hXZW10NFUycEtOR013YkVsYVIyaHBZbXhLYWxsdGF6UmthMnhFVVdwQ2FXVlZTbkZaVldSSFpGWnZlVlpYWkZwU01GbzJXWHBLVjAxSFRqVlBXSEJyVTBkNGVsZHNhRTVrYlVaWVRWaGthVTB3YjNkWGJHaEtaRmRLU0ZadWNHcE5hMFp1V1Zaak1XVnRVa2hXYldoaFVYcFNkMWRGWXpGTmJHeFpVMWRrV2swd05UWlZiVEZ6WXpGd1dWUnNWbWxOUjNneFdWY3hWMkZ0VWtSUlZHeEtVbTVTYWxsdGJFSmFNRzk2VkdwQ2JGWXphSE5aTTJzMFkxVjBjRTlJUmsxaVZUVTJXVE5zYTFreVNuTk5SR1JaVW5wV2FsbHRlRFJrVlhnMVQwZGtVazF1YUhkWGJHTXhUVVY0V1ZSdVFtRlNNVlp1V1ZjeFIwMXNiRmxVYlhCcVlsZDRNMXBGVGtOaVYwWllaVWQ0YW1WVlNYZFpibXhEWTBkS2RHTkhlRnBOTVVadVdWWmpNRm95U1hwVGJYUmhWMFZ3YWxsdGF6UmthMnhFWVVSR2FrMXNXalpUVlZaclpWZFNXRTVVUWsxWFJUUjNXbFprTkdKRmJFbGFTRUpwVWpGS2NWZFdhRXRoTUhkNVdraE9hVTFyYkRKWmVrNURZekZzV1ZWWFpHRlhSMmd6V1RJeFYyVnRUWGxpU0ZwcFltc3hkMWRGWXpGTmJHeFpVMWRrYUdKck5VaFpWbVEwWWtkTmVGVnVXbFJXZWxaNFYyeGtUMDFGYkVWTlIyUllUVmhvTVZkRll6QmFNR3hFVDBoYVNsSllhREpYVm1SU1dqSk5lVkp1UW1sVFJURXhXVlpqTkZveGJIUldiVEZwVFRCd2MxTlZaRmROYkhCWlUycFdhMUl5YUhkWmJURnFXakZ3V0dWSWNHRldibWd4VTFWT1FtSnRSblZVV0ZwaFVqRmFNMWRzWXpGaE1YQllUbGR3YUZZeFdqWlVSRTVQWVVkR1dHVkljRTFpVjNneVZFY3hkMlZyY0RWbFIwNXBZa2hvTVZOVlRrSmthM2cxVVd0V1lWZEZTbk5aYlRGVFlrZEtkRlJ1UW1GWFJURnVXV3RrYzJOc2NGUlJia1pXVjBaYWMxa3lOWEpqTUd4SVQxaHNTbEpWV2pGWGFrNVhZekZzV1ZOWFpGcFhSWEJ6VTFWa1MyVlhTWHBXYlRWb1UwWkdibGxXWXpCYU1rWklWbTVzWVZadWFERlRWVTVDWW0xR2RWUllXbUZTTVZvelYyeGpNV0V4Y0ZoT1YzQm9WakZhTmxSSWJIWmpWWGcxWWpOV2FHSnJNWFZVUlZvMFpGWm9TRTVIWkVwUmVtZ3lVMVZXUjJNeVNrUlJibHBoWVZWSmQxbFZaRlphTWs1MFZtNXdhMUV3U2pKWGJXeERUbGRKZWxadWJFcFNNRFY2V1Zaa1YyUlhVa1JOV0hCb1ZqRktjMU5WWkhkbGEyeElWMjVDYVZJeFdqWlhSV013V2pCc1JFOUlXa3BUUjFKM1dXdGtNMW94YkhSV1YyUm9WbnBXZUZkc1pFOU5SbkJZVlZka2FGSXhXalZYYkU1RFkwZEtjRkZ1Vm1sbFZVb3pWMVpvUzAxSFJsaFVha1pwVWpCYU5WTlZZelZsVm5CSVZtNXNUV0pJYURGVFZVNUNZbTFHZFZSWVdreGhWemt5VXpKck1XTlhUalZhUjA1cFlrUkJNMWRGWXpGWk1rcHpaVWhXVFdWVWFHNVZWRW8wWTBad1dFNVVRazFYUlRWM1YydGtWbG94VGtkVmF6VlZVVEJKZDFkc1kzaGtNa3BJVW1wQ1lWZEZNVzVYVm1oTFlrVnNTR0pJVm1oaVZscHhXa1ZrVjJFd2JFbFdibkJvVm5wV2RWTlZhRk5pTVhCVVVXNXdhVTB4V2pWWFZFcFhaV3RzU0ZOdGVHbFNlbXQ2VjBWak1HUnJlRFZSYkZab1VqRldibGxxVGt0aE1YQlpVMjVDYVdKWFRtNVpha3BhV2pKU1NHRkhlR3BOYkZadVdrVmtWMlJIVGtobFIyaHJVakZhTmxOVmFFOWlNa2w2Vm01T1lWSjZVblZhUlU1RFpFWnNXVlZxUW1GWFJXd3hWMFZqTUdScmVEVlJWemxyVjBVMWMxa3piRU5UUjA1MVZtNVdhMUY2UmpaYVJXaHpZekZ3VkZGcVRtaFdNMmh5VjFSS1IyVldjRVJQVnpWcFVucHNjRlJFVGs5a01rcElVbXBDU2xJeFdUQlpNR2hMWWtkTmVsUnVRbWxOYWxZMlV6RmFOR1JWZURWUFYwNXBZVlJvTWxOVlZrdE9WV3hJVlcxNFlXSlZXWGhaYTJoU1l6QnNSMVJ0YUdoV00yZzJVMVZvVjJWc2NGbFVWMlJVWWtVMVZsTlZhRk5pUjBwWlVXNU9XbGRHU25OWk0yeERZVWRLZEZWWFpHcFRSWEJ6VjFSSk5XUkhUa2hpU0U1aFYwVXhibHBGWkc5aVIwcFVVVzVDYVdKc1NqSlhSV013Wkd0NE5WRnRNV3RXZWxaeFdrVmtjMlJ0U25WVVYyUmhZbFJzTlZOVmFITmtiVkpVVGtka1NsSlhlSFJUVldoelpHMVNWRkZxVGxwV2VsVjNVMVZvVTJScmJFbFdibkJoVlRCS2VGZFdaRk5pUlhoRVVXMDVXbFo2Vm5KWmEyUlhZVlpzV1ZOdWNFMVJNRXB5V2tab1QwMUZlRVJSYlhoclVqQXhNVlJGV2pSa1ZYZzFUMGRrYTAxdGQzZFpWVTVEVFVkR1NGWlhaR2xTTW5neFdWUktWMlZWZUVSUmJsWnBaVlZLTTFreU1EVmhWMHBJVm01U1RWVjZRbTVhVm1NMVRWVnZlV1ZJVGtwU00wRjRXWHBPVWxveVVYbFNibFpyVVRCSmQxbHViRU5rUm14WVpFZDRTbE5GTkhoWk1qRldXakpTU0dGSGVFcFRSVW8xVjJ4a1QyUnRTbGxSYmtKcFVqRmFjbGRGWXpCa2EzZzFVV3BDWVZaNlJqTlphMlJIVFVad1dWUlhaR0ZOYkZsM1UxVm9UMlF5UmxsVlYyUnBUVEZaZDFOVmFGTmthMnhKVlcwNVlWVXdTalpYVm1ONFlrVnNTRmR1UW1sU01WWXhVMVZPUTFFeGNGUlJibkJyVjBWd2MxTlZaRWRrVm5CRVVXMXdhRkl4V25GWldHeERaRzFTV1ZWWFpGcFRSa3B2V1hwS01HVnJkM2hUYTFwU1ZsWktUMVZzVFRGa1JuQklVVzFPYVdGVWFESlRWV1JoWkcxT2NGRnVRbWxpVm5BeVdUSXdlR0ZIVWtoaVNGcHBZVlZLTWxsdGJFTmhiVkpaVkdwQ2FVMXFSbmRhVnpGelpGWndOVkZ0YUdsaVZrWnVXVlpqTVdWdFVraFNiazVwVWpKNE1WZHViRU5rVm5CWldUSmthMUl3V2paWlZFNU9aRlpvU0U1VVNscFhSV3h1V2tWa1YyUkhUa2hsUjJoclVqRmFTRmxXWkRSaVIwMTRWVzVhVkZaNlZuaFhiR1JQVFVWc1JVMUhaRmhOV0dneFUxVk9RbUp0VWtoV2JsSnFVak5vYjFwRlpGZGxhM2cxWWpOR1RXVlhPVEZaVldoVFpFZEtSRnBIVG1saVJFRXpWMFZqTVZreVNuTmxTRlpaVW5wV2FsbHRlRFJrVm1oSVRsZE9hV0ZVYURKVFZWWlRZa1p3ZEZKcVJtbFRSa1p1V1RCa1IwMUhSa1JSYlRGcFRUQnNibGt3YUZkaFYwcElZa2R3U2xJeGNESlphMlJUWWtkT2NGRlhPV3BOYkZwelUxVmtVMlJzYTNwV2JsSmhWbnBWZDFkV2FGTmpSMGw1VGtka1lXSlViRFZUVldONFpHMU9kRlpYWkdoV2VsWjBXV3BPUzJSR2JGbFZia0pwVFdwU2QxZEZZekZOYkd4WlUxZGthMUo2UmpOV1ZXUkhUVWRHUkZGVWJFcFJNazR4V2tWamVHUXdkM3BSYWtaYVlsaG9kMWRZYXpSaWF6aDRaVWhXV1ZKNlVqSlVTR3hEVlZkT2RGWnRNV2hYUjJSdVdUSXhWMk14YkZsVmJrSnJZbFpXYmxrd1pFZE5SMFpKVkZka2ExSjZhRzVaZWtrMVRWZE9kRlJ0ZUVwU01YQjNXV3RrVjJWcmJFbFVibHBLVTBaS2RsZHNhSEphTWs1SVQxaENhV0pzUm01YVJXTTBXakpTU0dGSGVFcFRSVW8xV1dwT1EySkhUbkJSYms1cFRXczFiMXBGWkhOa2JVcDFWRzFPYVdGVWFESlRWVTV2WTBWNGRGWllWa3BUUjFKMlYyeG9TMkpGYkVsVmJUbGhWVEJLTWxwRlpHOWlSMDV3VVd0b2FtSnNXakZhUlU1RFRVWnNXVlJ1U21wbFZVbzJXVEJrYzAxRmJFbFZiVGxoVm5wQ2JsbHFUbGROUlhoRVVXNWFhbUZWU25kWmJXeERaVzFKZVUxWGVFcFNNRFZ2V1hwS1YyVnJlRVJSYWs1b1VqRmFOVmRzV2pSa1ZYZzFUMGRrYTFJeWFITmFWazVEWlZad1dWUnVRbUZTTVZadVdWWmpNRm95VWtoaFIzaEtVakZ3ZDFreU5VOU5SV3hKVVc1T1dsWXdOWE5UTVZvMFpGZEtXRTlYZEd0V00yaHpWRWN4VjA1SFRraFBXR3hyVTBVeE1WZFVUazlsYkVwMFlraE9ZVmRGTlZaWmFrSnpaRmRHZEZadGNHdFJNRVUxVTFWa1QyVnRUWGRYYmtKcFVqRmFObFpyWXpWVGJVcDBZMGQ0V2sweFJqRlpiR1JIWkRCMFNGZHFSbWxpVlRSM1dWWmpOV1JWZEVoVWJuQnFUVlZLYjFwRlpHNWpSV3hKWkVkT2FXRlZSbTVVU0dzMFdqRk9XRmRYWkd0TmJGWjFXVEl4VmxveVJsaGFTRlpwVFRCd2QxbHRNV3BhTWxKSVlVZDRTbEl4Y0hkWmEyUldZekJzU0UxWGFHaE5iRlp1V1hwT1YyVldjRlJSYWtKb1VqRldibE5XVGtOalIwNDFVVzFvYTFFd1NYZFpWV1JXV2pGc2RGWnROV2hXZWxZeFdWWmpNV0pyYkVoUFZ6RktVMFpLZGxkc1RrTmtNV3haVlcwNVdWSjZVbTVUVldSellsVnNSR0ZIY0dwTk1EVlNWMVpvVTJJeFpEWlJiVkpLVWtSQk5WVkdUa0ppYTJ4VVdUTkNTbE5JVW1wWmJXeENXakJzUkZGdWJHRlhSa2w0V1RJd01Gb3lUblJXYm1oclZqSjROVmRzVG01aWJVNUlVbXBDYUZFeVRuZFVSekYzWkcxR1dFNUhPVXRsVlZZeFdrVmplR1F3ZDNwUmFrWmFZbGhvZDFkWWF6UmlhM2hFVVcxd2FrMHdOVkpYVm1oVFlqQjRkVlJxUmxwaWF6UjNXVEpzYm1WRmRGUmhlbVJaVW5wU2JsTlZaM2haTWtwd1VWZGthbUpXV1hkYVJtaExaRlZzU1ZOdGVHcFhSbHAzV1RJeFZtSXdiM3BSYldoclVqSmtkVk14VFRGalYwbDVZa2hXVEZFeVRqRmFSV040WkRCM2VsRnFSbHBpV0doM1YxaHJOR0pyZUVSUmJYQnFUVEExVWxkV2FGTmlNSFJWWkVkT2FXSnFRbmRVZWtZMFpGZEtXRTlYZEd0V00yaHpWRWN4VjA1SFRraFBXR3hyVTBVeE1WbFhOVTlTTWtaWVpVZDRhazFXU2pKVk1XTXhZMVp3V0ZScVFrcFNSRUp1V1ZjMVQxSXlSbGhsUjNocVRWWktNbFV4WXpGalZuQllWR3BDVFdKVVJtOVpNRTV2WWxkU1dFNVhjR3RTTW5neVdXMXNiMk5YVFhoUmJXaHJVakprZDFOVmFEQlpNa3B3VVZka1RXVlVhRzVWTVdSYVdqSlJlVlpYTldwaVZsWnVXVlprYTJSWFNYcFRia0pwWWxkT2JscEZaRzlpUld4SVYyNUNhVkl4Vm5wVFZXTjRZVWRGZVZaWFpHcE5NVm8xVjJ4T1EwMUhSa2hXVjJSS1ZUQktkMWt6YkVOaFIxSkVVV3BDYUZJeFZtNVhWekZYWW0xR1dFNVlWbWhXZWxaMVUxVmpOV0pWYkVsVmJUbGhWVEJLTTFkV2FGTmlNV2hJVGtka1NsSXllSFJUVlU1dlkxZE5lRkZ0YUd0U01taHBWRlZaZDFveFFsVk5SR3hLVVRKT2IxTnViSEphTWxWNFpVaFdTbEV3Um01VFZXaExZa2RTU1ZadWJHbGhWVW8xVjJ4b1IwMVhSbGxUYlhoTVVUSlNNMWRXYUZOaU1IQTFZVE5XYUdKVWJIZFpiV3h1WW10c1ZFNVVRbWxYUlVZeVdUQm9WMkZYU2toaVIzQk5aVmRPZWxOVlpIZGxiRlpJVW1wQ2FGRjZWalphUm1STFpXMVNTVk5YT1U1Vk1uUjNWSHBHTkdSVmJFUlJhbXhaVW5wU2JsTlZhRXRpUjFKSlZtNXNhV0ZWU2pWWGJHaEhUVmRHV1ZOdGVFeFJNbEl6VjFab1UySXdjRFZoTTFab1lsUnNkMWx0Ykc1aWEzaDFWVzVTYWxGNmJETmFSbVJMWXpKR1dGUllXa3RsV0dSdVdWYzFUMVZXYkZsVmJUbE1Wa2hTYWxsdE5IZGpSVGg0WlVoV2FWWjZiSEphUm1RMFlrVjRkRlpxVW1wU2VtdzFXa1ZvVG1SWFVraFdibEpxVWpOb2IxcEZaRmRTTWtaWVpVZDRhazFXU2pKVk1XTXhZMVp3V0ZScVFrcFNSRUp1V2tWa1YyUkhUa2hsUjJoclVqRmFTRmxXWkRSaVIwMTRWVzVhVkZaNlZuaFhiR1JQVFVWNGRFMVhhR3BSTW1oMFdrWmpNV0Z0VWtoaVNGcHBZVmRuZDFrd1pEUlZWbXhaVlcwNVRGVXdTVE5YUldNd1dqQnNSRTlJV2twU1YzaDBVMVZvYTJKRmIzcFRiWGhLVWpKNGRWbHRNRFZsVjBaWVRsYzFTbE5HU25aWGJFNURZbGRHV0dWSGVFMVJNRW93VjFaa01HSkZiRWxVYWtacVlsWldibHBGWkc5aVJXeEVVbGRrYUZkRk1XNVhWbWhTV2pKU1NHRkhlRXBTTUhCelYycEtjMlJYU25SaVNGWmhaVlZLTWxkdGJFTk5SMFpJVmxka2FsSXdXWGRaVlZvMFpGVnNSRkZ1UW1GaFZVWjJXa1ZvUTJNeFZraFNha0pvVW01T00xZEdUa0pQVmtKVlRVZGtTMlZWVm5WVE1VNURUakZvU0U1SFpFcFJNRVp1V1RJeFYwMUhVbGxUYmxaS1UwVndjMWt4YUZkalIwNTBWbGM1UzAwd1NtOWFSV1J1WW10MFZFNVlSbWxOYlhneFV6Qk9hbUZHYkZsVWJuQmhWMFpLTmxSSWJHcGpNR3hKVlc1a2FWSnJTbTlhUldSdVpGZE5lbFp0YkdwTk1VbzFVekJTUm1ORmRGVmtSMDVwWVZWR2JscHNXalJrVld4RVVXNXNZVmRHU1hoWk1qQXdXakpPZEZadWFHdFdNbmcxVjJ4T2JtSnRUa2hTYWtKb1VUSk9kMVJITVhka2JVWllUa2M1UzAxcldqWlpla3BYVFVkT05VOUhOVTFUUmtveldXdGFRMkZIVWtoYU0wSlFUVmhvTVZwc1RuSk9NV2hJVGxkT2FXSklhREZUVjNkNFQxWjRkVWxzTVRsY2JpSmRmUT09XG4iXX0=
