/**
 * `less`
 *
 * ---------------------------------------------------------------
 *
 * Compile your LESS files into a CSS stylesheet.
 *
 * By default, only the `assets/styles/importer.less` is compiled.
 * This allows you to control the ordering yourself, i.e. import your
 * dependencies, mixins, variables, resets, etc. before other stylesheets)
 *
 * For usage docs see:
 *   https://github.com/gruntjs/grunt-contrib-less
 *
 */
module.exports = function (grunt) {
    grunt.config.set('less', {
        dev: {
            files: [{
                    expand: true,
                    cwd: 'assets/styles/',
                    src: ['importer.less'],
                    dest: '.tmp/public/styles/',
                    ext: '.css'
                }]
        }
    });
    grunt.loadNpmTasks('grunt-contrib-less');
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRhc2tzL2NvbmZpZy9sZXNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7OztHQWNHO0FBQ0gsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFTLEtBQUs7SUFFN0IsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFO1FBQ3ZCLEdBQUcsRUFBRTtZQUNILEtBQUssRUFBRSxDQUFDO29CQUNOLE1BQU0sRUFBRSxJQUFJO29CQUNaLEdBQUcsRUFBRSxnQkFBZ0I7b0JBQ3JCLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQztvQkFDdEIsSUFBSSxFQUFFLHFCQUFxQjtvQkFDM0IsR0FBRyxFQUFFLE1BQU07aUJBQ1osQ0FBQztTQUNIO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsS0FBSyxDQUFDLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQzNDLENBQUMsQ0FBQyIsImZpbGUiOiJ0YXNrcy9jb25maWcvbGVzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogYGxlc3NgXG4gKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKlxuICogQ29tcGlsZSB5b3VyIExFU1MgZmlsZXMgaW50byBhIENTUyBzdHlsZXNoZWV0LlxuICpcbiAqIEJ5IGRlZmF1bHQsIG9ubHkgdGhlIGBhc3NldHMvc3R5bGVzL2ltcG9ydGVyLmxlc3NgIGlzIGNvbXBpbGVkLlxuICogVGhpcyBhbGxvd3MgeW91IHRvIGNvbnRyb2wgdGhlIG9yZGVyaW5nIHlvdXJzZWxmLCBpLmUuIGltcG9ydCB5b3VyXG4gKiBkZXBlbmRlbmNpZXMsIG1peGlucywgdmFyaWFibGVzLCByZXNldHMsIGV0Yy4gYmVmb3JlIG90aGVyIHN0eWxlc2hlZXRzKVxuICpcbiAqIEZvciB1c2FnZSBkb2NzIHNlZTpcbiAqICAgaHR0cHM6Ly9naXRodWIuY29tL2dydW50anMvZ3J1bnQtY29udHJpYi1sZXNzXG4gKlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGdydW50KSB7XG5cbiAgZ3J1bnQuY29uZmlnLnNldCgnbGVzcycsIHtcbiAgICBkZXY6IHtcbiAgICAgIGZpbGVzOiBbe1xuICAgICAgICBleHBhbmQ6IHRydWUsXG4gICAgICAgIGN3ZDogJ2Fzc2V0cy9zdHlsZXMvJyxcbiAgICAgICAgc3JjOiBbJ2ltcG9ydGVyLmxlc3MnXSxcbiAgICAgICAgZGVzdDogJy50bXAvcHVibGljL3N0eWxlcy8nLFxuICAgICAgICBleHQ6ICcuY3NzJ1xuICAgICAgfV1cbiAgICB9XG4gIH0pO1xuXG4gIGdydW50LmxvYWROcG1UYXNrcygnZ3J1bnQtY29udHJpYi1sZXNzJyk7XG59O1xuIl19
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRhc2tzL2NvbmZpZy9sZXNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7OztHQWNHO0FBQ0gsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFVLEtBQUs7SUFDNUIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFO1FBQ3JCLEdBQUcsRUFBRTtZQUNELEtBQUssRUFBRSxDQUFDO29CQUNBLE1BQU0sRUFBRSxJQUFJO29CQUNaLEdBQUcsRUFBRSxnQkFBZ0I7b0JBQ3JCLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQztvQkFDdEIsSUFBSSxFQUFFLHFCQUFxQjtvQkFDM0IsR0FBRyxFQUFFLE1BQU07aUJBQ2QsQ0FBQztTQUNUO0tBQ0osQ0FBQyxDQUFDO0lBQ0gsS0FBSyxDQUFDLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQzdDLENBQUMsQ0FBQztBQUVGLDJyREFBMnJEIiwiZmlsZSI6InRhc2tzL2NvbmZpZy9sZXNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBgbGVzc2BcbiAqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqXG4gKiBDb21waWxlIHlvdXIgTEVTUyBmaWxlcyBpbnRvIGEgQ1NTIHN0eWxlc2hlZXQuXG4gKlxuICogQnkgZGVmYXVsdCwgb25seSB0aGUgYGFzc2V0cy9zdHlsZXMvaW1wb3J0ZXIubGVzc2AgaXMgY29tcGlsZWQuXG4gKiBUaGlzIGFsbG93cyB5b3UgdG8gY29udHJvbCB0aGUgb3JkZXJpbmcgeW91cnNlbGYsIGkuZS4gaW1wb3J0IHlvdXJcbiAqIGRlcGVuZGVuY2llcywgbWl4aW5zLCB2YXJpYWJsZXMsIHJlc2V0cywgZXRjLiBiZWZvcmUgb3RoZXIgc3R5bGVzaGVldHMpXG4gKlxuICogRm9yIHVzYWdlIGRvY3Mgc2VlOlxuICogICBodHRwczovL2dpdGh1Yi5jb20vZ3J1bnRqcy9ncnVudC1jb250cmliLWxlc3NcbiAqXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGdydW50KSB7XG4gICAgZ3J1bnQuY29uZmlnLnNldCgnbGVzcycsIHtcbiAgICAgICAgZGV2OiB7XG4gICAgICAgICAgICBmaWxlczogW3tcbiAgICAgICAgICAgICAgICAgICAgZXhwYW5kOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjd2Q6ICdhc3NldHMvc3R5bGVzLycsXG4gICAgICAgICAgICAgICAgICAgIHNyYzogWydpbXBvcnRlci5sZXNzJ10sXG4gICAgICAgICAgICAgICAgICAgIGRlc3Q6ICcudG1wL3B1YmxpYy9zdHlsZXMvJyxcbiAgICAgICAgICAgICAgICAgICAgZXh0OiAnLmNzcydcbiAgICAgICAgICAgICAgICB9XVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgZ3J1bnQubG9hZE5wbVRhc2tzKCdncnVudC1jb250cmliLWxlc3MnKTtcbn07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zjg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5SaGMydHpMMk52Ym1acFp5OXNaWE56TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPenM3T3pzN096czdPenM3T3p0SFFXTkhPMEZCUTBnc1RVRkJUU3hEUVVGRExFOUJRVThzUjBGQlJ5eFZRVUZUTEV0QlFVczdTVUZGTjBJc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNUVUZCVFN4RlFVRkZPMUZCUTNaQ0xFZEJRVWNzUlVGQlJUdFpRVU5JTEV0QlFVc3NSVUZCUlN4RFFVRkRPMjlDUVVOT0xFMUJRVTBzUlVGQlJTeEpRVUZKTzI5Q1FVTmFMRWRCUVVjc1JVRkJSU3huUWtGQlowSTdiMEpCUTNKQ0xFZEJRVWNzUlVGQlJTeERRVUZETEdWQlFXVXNRMEZCUXp0dlFrRkRkRUlzU1VGQlNTeEZRVUZGTEhGQ1FVRnhRanR2UWtGRE0wSXNSMEZCUnl4RlFVRkZMRTFCUVUwN2FVSkJRMW9zUTBGQlF6dFRRVU5JTzB0QlEwWXNRMEZCUXl4RFFVRkRPMGxCUlVnc1MwRkJTeXhEUVVGRExGbEJRVmtzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhEUVVGRE8wRkJRek5ETEVOQlFVTXNRMEZCUXlJc0ltWnBiR1VpT2lKMFlYTnJjeTlqYjI1bWFXY3ZiR1Z6Y3k1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2x4dUlDb2dZR3hsYzNOZ1hHNGdLbHh1SUNvZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdFhHNGdLbHh1SUNvZ1EyOXRjR2xzWlNCNWIzVnlJRXhGVTFNZ1ptbHNaWE1nYVc1MGJ5QmhJRU5UVXlCemRIbHNaWE5vWldWMExseHVJQ3BjYmlBcUlFSjVJR1JsWm1GMWJIUXNJRzl1YkhrZ2RHaGxJR0JoYzNObGRITXZjM1I1YkdWekwybHRjRzl5ZEdWeUxteGxjM05nSUdseklHTnZiWEJwYkdWa0xseHVJQ29nVkdocGN5QmhiR3h2ZDNNZ2VXOTFJSFJ2SUdOdmJuUnliMndnZEdobElHOXlaR1Z5YVc1bklIbHZkWEp6Wld4bUxDQnBMbVV1SUdsdGNHOXlkQ0I1YjNWeVhHNGdLaUJrWlhCbGJtUmxibU5wWlhNc0lHMXBlR2x1Y3l3Z2RtRnlhV0ZpYkdWekxDQnlaWE5sZEhNc0lHVjBZeTRnWW1WbWIzSmxJRzkwYUdWeUlITjBlV3hsYzJobFpYUnpLVnh1SUNwY2JpQXFJRVp2Y2lCMWMyRm5aU0JrYjJOeklITmxaVHBjYmlBcUlDQWdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMMmR5ZFc1MGFuTXZaM0oxYm5RdFkyOXVkSEpwWWkxc1pYTnpYRzRnS2x4dUlDb3ZYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR2R5ZFc1MEtTQjdYRzVjYmlBZ1ozSjFiblF1WTI5dVptbG5Mbk5sZENnbmJHVnpjeWNzSUh0Y2JpQWdJQ0JrWlhZNklIdGNiaUFnSUNBZ0lHWnBiR1Z6T2lCYmUxeHVJQ0FnSUNBZ0lDQmxlSEJoYm1RNklIUnlkV1VzWEc0Z0lDQWdJQ0FnSUdOM1pEb2dKMkZ6YzJWMGN5OXpkSGxzWlhNdkp5eGNiaUFnSUNBZ0lDQWdjM0pqT2lCYkoybHRjRzl5ZEdWeUxteGxjM01uWFN4Y2JpQWdJQ0FnSUNBZ1pHVnpkRG9nSnk1MGJYQXZjSFZpYkdsakwzTjBlV3hsY3k4bkxGeHVJQ0FnSUNBZ0lDQmxlSFE2SUNjdVkzTnpKMXh1SUNBZ0lDQWdmVjFjYmlBZ0lDQjlYRzRnSUgwcE8xeHVYRzRnSUdkeWRXNTBMbXh2WVdST2NHMVVZWE5yY3lnblozSjFiblF0WTI5dWRISnBZaTFzWlhOekp5azdYRzU5TzF4dUlsMTlcbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,
