/**
 * Compress CSS files.
 *
 * ---------------------------------------------------------------
 *
 * Minify the intermediate concatenated CSS stylesheet which was
 * prepared by the `concat` task at `.tmp/public/concat/production.css`.
 *
 * Together with the `concat` task, this is the final step that minifies
 * all CSS files from `assets/styles/` (and potentially your LESS importer
 * file from `assets/styles/importer.less`)
 *
 * For usage docs see:
 *   https://github.com/gruntjs/grunt-contrib-cssmin
 *
 */
module.exports = function (grunt) {
    grunt.config.set('cssmin', {
        dist: {
            src: ['.tmp/public/concat/production.css'],
            dest: '.tmp/public/min/production.min.css'
        }
    });
    grunt.loadNpmTasks('grunt-contrib-cssmin');
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRhc2tzL2NvbmZpZy9jc3NtaW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBQ0gsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFTLEtBQUs7SUFFN0IsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFO1FBQ3pCLElBQUksRUFBRTtZQUNKLEdBQUcsRUFBRSxDQUFDLG1DQUFtQyxDQUFDO1lBQzFDLElBQUksRUFBRSxvQ0FBb0M7U0FDM0M7S0FDRixDQUFDLENBQUM7SUFFSCxLQUFLLENBQUMsWUFBWSxDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFDN0MsQ0FBQyxDQUFDIiwiZmlsZSI6InRhc2tzL2NvbmZpZy9jc3NtaW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbXByZXNzIENTUyBmaWxlcy5cbiAqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqXG4gKiBNaW5pZnkgdGhlIGludGVybWVkaWF0ZSBjb25jYXRlbmF0ZWQgQ1NTIHN0eWxlc2hlZXQgd2hpY2ggd2FzXG4gKiBwcmVwYXJlZCBieSB0aGUgYGNvbmNhdGAgdGFzayBhdCBgLnRtcC9wdWJsaWMvY29uY2F0L3Byb2R1Y3Rpb24uY3NzYC5cbiAqXG4gKiBUb2dldGhlciB3aXRoIHRoZSBgY29uY2F0YCB0YXNrLCB0aGlzIGlzIHRoZSBmaW5hbCBzdGVwIHRoYXQgbWluaWZpZXNcbiAqIGFsbCBDU1MgZmlsZXMgZnJvbSBgYXNzZXRzL3N0eWxlcy9gIChhbmQgcG90ZW50aWFsbHkgeW91ciBMRVNTIGltcG9ydGVyXG4gKiBmaWxlIGZyb20gYGFzc2V0cy9zdHlsZXMvaW1wb3J0ZXIubGVzc2ApXG4gKlxuICogRm9yIHVzYWdlIGRvY3Mgc2VlOlxuICogICBodHRwczovL2dpdGh1Yi5jb20vZ3J1bnRqcy9ncnVudC1jb250cmliLWNzc21pblxuICpcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihncnVudCkge1xuXG4gIGdydW50LmNvbmZpZy5zZXQoJ2Nzc21pbicsIHtcbiAgICBkaXN0OiB7XG4gICAgICBzcmM6IFsnLnRtcC9wdWJsaWMvY29uY2F0L3Byb2R1Y3Rpb24uY3NzJ10sXG4gICAgICBkZXN0OiAnLnRtcC9wdWJsaWMvbWluL3Byb2R1Y3Rpb24ubWluLmNzcydcbiAgICB9XG4gIH0pO1xuXG4gIGdydW50LmxvYWROcG1UYXNrcygnZ3J1bnQtY29udHJpYi1jc3NtaW4nKTtcbn07XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRhc2tzL2NvbmZpZy9jc3NtaW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBQ0gsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFVLEtBQUs7SUFDNUIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFO1FBQ3ZCLElBQUksRUFBRTtZQUNGLEdBQUcsRUFBRSxDQUFDLG1DQUFtQyxDQUFDO1lBQzFDLElBQUksRUFBRSxvQ0FBb0M7U0FDN0M7S0FDSixDQUFDLENBQUM7SUFDSCxLQUFLLENBQUMsWUFBWSxDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFDL0MsQ0FBQyxDQUFDO0FBRUYsdWxEQUF1bEQiLCJmaWxlIjoidGFza3MvY29uZmlnL2Nzc21pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29tcHJlc3MgQ1NTIGZpbGVzLlxuICpcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICpcbiAqIE1pbmlmeSB0aGUgaW50ZXJtZWRpYXRlIGNvbmNhdGVuYXRlZCBDU1Mgc3R5bGVzaGVldCB3aGljaCB3YXNcbiAqIHByZXBhcmVkIGJ5IHRoZSBgY29uY2F0YCB0YXNrIGF0IGAudG1wL3B1YmxpYy9jb25jYXQvcHJvZHVjdGlvbi5jc3NgLlxuICpcbiAqIFRvZ2V0aGVyIHdpdGggdGhlIGBjb25jYXRgIHRhc2ssIHRoaXMgaXMgdGhlIGZpbmFsIHN0ZXAgdGhhdCBtaW5pZmllc1xuICogYWxsIENTUyBmaWxlcyBmcm9tIGBhc3NldHMvc3R5bGVzL2AgKGFuZCBwb3RlbnRpYWxseSB5b3VyIExFU1MgaW1wb3J0ZXJcbiAqIGZpbGUgZnJvbSBgYXNzZXRzL3N0eWxlcy9pbXBvcnRlci5sZXNzYClcbiAqXG4gKiBGb3IgdXNhZ2UgZG9jcyBzZWU6XG4gKiAgIGh0dHBzOi8vZ2l0aHViLmNvbS9ncnVudGpzL2dydW50LWNvbnRyaWItY3NzbWluXG4gKlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChncnVudCkge1xuICAgIGdydW50LmNvbmZpZy5zZXQoJ2Nzc21pbicsIHtcbiAgICAgICAgZGlzdDoge1xuICAgICAgICAgICAgc3JjOiBbJy50bXAvcHVibGljL2NvbmNhdC9wcm9kdWN0aW9uLmNzcyddLFxuICAgICAgICAgICAgZGVzdDogJy50bXAvcHVibGljL21pbi9wcm9kdWN0aW9uLm1pbi5jc3MnXG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBncnVudC5sb2FkTnBtVGFza3MoJ2dydW50LWNvbnRyaWItY3NzbWluJyk7XG59O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGY4O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluUmhjMnR6TDJOdmJtWnBaeTlqYzNOdGFXNHVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN096czdPenM3T3pzN096czdPenRIUVdWSE8wRkJRMGdzVFVGQlRTeERRVUZETEU5QlFVOHNSMEZCUnl4VlFVRlRMRXRCUVVzN1NVRkZOMElzUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1VVRkJVU3hGUVVGRk8xRkJRM3BDTEVsQlFVa3NSVUZCUlR0WlFVTktMRWRCUVVjc1JVRkJSU3hEUVVGRExHMURRVUZ0UXl4RFFVRkRPMWxCUXpGRExFbEJRVWtzUlVGQlJTeHZRMEZCYjBNN1UwRkRNME03UzBGRFJpeERRVUZETEVOQlFVTTdTVUZGU0N4TFFVRkxMRU5CUVVNc1dVRkJXU3hEUVVGRExITkNRVUZ6UWl4RFFVRkRMRU5CUVVNN1FVRkROME1zUTBGQlF5eERRVUZESWl3aVptbHNaU0k2SW5SaGMydHpMMk52Ym1acFp5OWpjM050YVc0dWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lwY2JpQXFJRU52YlhCeVpYTnpJRU5UVXlCbWFXeGxjeTVjYmlBcVhHNGdLaUF0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzFjYmlBcVhHNGdLaUJOYVc1cFpua2dkR2hsSUdsdWRHVnliV1ZrYVdGMFpTQmpiMjVqWVhSbGJtRjBaV1FnUTFOVElITjBlV3hsYzJobFpYUWdkMmhwWTJnZ2QyRnpYRzRnS2lCd2NtVndZWEpsWkNCaWVTQjBhR1VnWUdOdmJtTmhkR0FnZEdGemF5QmhkQ0JnTG5SdGNDOXdkV0pzYVdNdlkyOXVZMkYwTDNCeWIyUjFZM1JwYjI0dVkzTnpZQzVjYmlBcVhHNGdLaUJVYjJkbGRHaGxjaUIzYVhSb0lIUm9aU0JnWTI5dVkyRjBZQ0IwWVhOckxDQjBhR2x6SUdseklIUm9aU0JtYVc1aGJDQnpkR1Z3SUhSb1lYUWdiV2x1YVdacFpYTmNiaUFxSUdGc2JDQkRVMU1nWm1sc1pYTWdabkp2YlNCZ1lYTnpaWFJ6TDNOMGVXeGxjeTlnSUNoaGJtUWdjRzkwWlc1MGFXRnNiSGtnZVc5MWNpQk1SVk5USUdsdGNHOXlkR1Z5WEc0Z0tpQm1hV3hsSUdaeWIyMGdZR0Z6YzJWMGN5OXpkSGxzWlhNdmFXMXdiM0owWlhJdWJHVnpjMkFwWEc0Z0tseHVJQ29nUm05eUlIVnpZV2RsSUdSdlkzTWdjMlZsT2x4dUlDb2dJQ0JvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2WjNKMWJuUnFjeTluY25WdWRDMWpiMjUwY21saUxXTnpjMjFwYmx4dUlDcGNiaUFxTDF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlobmNuVnVkQ2tnZTF4dVhHNGdJR2R5ZFc1MExtTnZibVpwWnk1elpYUW9KMk56YzIxcGJpY3NJSHRjYmlBZ0lDQmthWE4wT2lCN1hHNGdJQ0FnSUNCemNtTTZJRnNuTG5SdGNDOXdkV0pzYVdNdlkyOXVZMkYwTDNCeWIyUjFZM1JwYjI0dVkzTnpKMTBzWEc0Z0lDQWdJQ0JrWlhOME9pQW5MblJ0Y0M5d2RXSnNhV012YldsdUwzQnliMlIxWTNScGIyNHViV2x1TG1OemN5ZGNiaUFnSUNCOVhHNGdJSDBwTzF4dVhHNGdJR2R5ZFc1MExteHZZV1JPY0cxVVlYTnJjeWduWjNKMWJuUXRZMjl1ZEhKcFlpMWpjM050YVc0bktUdGNibjA3WEc0aVhYMD1cbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,
