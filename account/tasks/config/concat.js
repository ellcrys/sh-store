/**
 * `concat`
 *
 * ---------------------------------------------------------------
 *
 * Concatenates the contents of multiple JavaScript and/or CSS files
 * into two new files, each located at `concat/production.js` and
 * `concat/production.css` respectively in `.tmp/public/concat`.
 *
 * This is used as an intermediate step to generate monolithic files
 * that can then be passed in to `uglify` and/or `cssmin` for minification.
 *
 * For usage docs see:
 *   https://github.com/gruntjs/grunt-contrib-concat
 *
 */
module.exports = function (grunt) {
    grunt.config.set('concat', {
        js: {
            src: require('../pipeline').jsFilesToInject,
            dest: '.tmp/public/concat/production.js'
        },
        css: {
            src: require('../pipeline').cssFilesToInject,
            dest: '.tmp/public/concat/production.css'
        }
    });
    grunt.loadNpmTasks('grunt-contrib-concat');
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRhc2tzL2NvbmZpZy9jb25jYXQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBQ0gsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFTLEtBQUs7SUFFN0IsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFO1FBQ3pCLEVBQUUsRUFBRTtZQUNGLEdBQUcsRUFBRSxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsZUFBZTtZQUMzQyxJQUFJLEVBQUUsa0NBQWtDO1NBQ3pDO1FBQ0QsR0FBRyxFQUFFO1lBQ0gsR0FBRyxFQUFFLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxnQkFBZ0I7WUFDNUMsSUFBSSxFQUFFLG1DQUFtQztTQUMxQztLQUNGLENBQUMsQ0FBQztJQUVILEtBQUssQ0FBQyxZQUFZLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUM3QyxDQUFDLENBQUMiLCJmaWxlIjoidGFza3MvY29uZmlnL2NvbmNhdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogYGNvbmNhdGBcbiAqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqXG4gKiBDb25jYXRlbmF0ZXMgdGhlIGNvbnRlbnRzIG9mIG11bHRpcGxlIEphdmFTY3JpcHQgYW5kL29yIENTUyBmaWxlc1xuICogaW50byB0d28gbmV3IGZpbGVzLCBlYWNoIGxvY2F0ZWQgYXQgYGNvbmNhdC9wcm9kdWN0aW9uLmpzYCBhbmRcbiAqIGBjb25jYXQvcHJvZHVjdGlvbi5jc3NgIHJlc3BlY3RpdmVseSBpbiBgLnRtcC9wdWJsaWMvY29uY2F0YC5cbiAqXG4gKiBUaGlzIGlzIHVzZWQgYXMgYW4gaW50ZXJtZWRpYXRlIHN0ZXAgdG8gZ2VuZXJhdGUgbW9ub2xpdGhpYyBmaWxlc1xuICogdGhhdCBjYW4gdGhlbiBiZSBwYXNzZWQgaW4gdG8gYHVnbGlmeWAgYW5kL29yIGBjc3NtaW5gIGZvciBtaW5pZmljYXRpb24uXG4gKlxuICogRm9yIHVzYWdlIGRvY3Mgc2VlOlxuICogICBodHRwczovL2dpdGh1Yi5jb20vZ3J1bnRqcy9ncnVudC1jb250cmliLWNvbmNhdFxuICpcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihncnVudCkge1xuXG4gIGdydW50LmNvbmZpZy5zZXQoJ2NvbmNhdCcsIHtcbiAgICBqczoge1xuICAgICAgc3JjOiByZXF1aXJlKCcuLi9waXBlbGluZScpLmpzRmlsZXNUb0luamVjdCxcbiAgICAgIGRlc3Q6ICcudG1wL3B1YmxpYy9jb25jYXQvcHJvZHVjdGlvbi5qcydcbiAgICB9LFxuICAgIGNzczoge1xuICAgICAgc3JjOiByZXF1aXJlKCcuLi9waXBlbGluZScpLmNzc0ZpbGVzVG9JbmplY3QsXG4gICAgICBkZXN0OiAnLnRtcC9wdWJsaWMvY29uY2F0L3Byb2R1Y3Rpb24uY3NzJ1xuICAgIH1cbiAgfSk7XG5cbiAgZ3J1bnQubG9hZE5wbVRhc2tzKCdncnVudC1jb250cmliLWNvbmNhdCcpO1xufTtcbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRhc2tzL2NvbmZpZy9jb25jYXQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBQ0gsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFVLEtBQUs7SUFDNUIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFO1FBQ3ZCLEVBQUUsRUFBRTtZQUNBLEdBQUcsRUFBRSxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsZUFBZTtZQUMzQyxJQUFJLEVBQUUsa0NBQWtDO1NBQzNDO1FBQ0QsR0FBRyxFQUFFO1lBQ0QsR0FBRyxFQUFFLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxnQkFBZ0I7WUFDNUMsSUFBSSxFQUFFLG1DQUFtQztTQUM1QztLQUNKLENBQUMsQ0FBQztJQUNILEtBQUssQ0FBQyxZQUFZLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUMvQyxDQUFDLENBQUM7QUFFRix1NERBQXU0RCIsImZpbGUiOiJ0YXNrcy9jb25maWcvY29uY2F0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBgY29uY2F0YFxuICpcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICpcbiAqIENvbmNhdGVuYXRlcyB0aGUgY29udGVudHMgb2YgbXVsdGlwbGUgSmF2YVNjcmlwdCBhbmQvb3IgQ1NTIGZpbGVzXG4gKiBpbnRvIHR3byBuZXcgZmlsZXMsIGVhY2ggbG9jYXRlZCBhdCBgY29uY2F0L3Byb2R1Y3Rpb24uanNgIGFuZFxuICogYGNvbmNhdC9wcm9kdWN0aW9uLmNzc2AgcmVzcGVjdGl2ZWx5IGluIGAudG1wL3B1YmxpYy9jb25jYXRgLlxuICpcbiAqIFRoaXMgaXMgdXNlZCBhcyBhbiBpbnRlcm1lZGlhdGUgc3RlcCB0byBnZW5lcmF0ZSBtb25vbGl0aGljIGZpbGVzXG4gKiB0aGF0IGNhbiB0aGVuIGJlIHBhc3NlZCBpbiB0byBgdWdsaWZ5YCBhbmQvb3IgYGNzc21pbmAgZm9yIG1pbmlmaWNhdGlvbi5cbiAqXG4gKiBGb3IgdXNhZ2UgZG9jcyBzZWU6XG4gKiAgIGh0dHBzOi8vZ2l0aHViLmNvbS9ncnVudGpzL2dydW50LWNvbnRyaWItY29uY2F0XG4gKlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChncnVudCkge1xuICAgIGdydW50LmNvbmZpZy5zZXQoJ2NvbmNhdCcsIHtcbiAgICAgICAganM6IHtcbiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgnLi4vcGlwZWxpbmUnKS5qc0ZpbGVzVG9JbmplY3QsXG4gICAgICAgICAgICBkZXN0OiAnLnRtcC9wdWJsaWMvY29uY2F0L3Byb2R1Y3Rpb24uanMnXG4gICAgICAgIH0sXG4gICAgICAgIGNzczoge1xuICAgICAgICAgICAgc3JjOiByZXF1aXJlKCcuLi9waXBlbGluZScpLmNzc0ZpbGVzVG9JbmplY3QsXG4gICAgICAgICAgICBkZXN0OiAnLnRtcC9wdWJsaWMvY29uY2F0L3Byb2R1Y3Rpb24uY3NzJ1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgZ3J1bnQubG9hZE5wbVRhc2tzKCdncnVudC1jb250cmliLWNvbmNhdCcpO1xufTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJblJoYzJ0ekwyTnZibVpwWnk5amIyNWpZWFF1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdPenM3T3pzN096czdPenM3T3p0SFFXVkhPMEZCUTBnc1RVRkJUU3hEUVVGRExFOUJRVThzUjBGQlJ5eFZRVUZUTEV0QlFVczdTVUZGTjBJc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNVVUZCVVN4RlFVRkZPMUZCUTNwQ0xFVkJRVVVzUlVGQlJUdFpRVU5HTEVkQlFVY3NSVUZCUlN4UFFVRlBMRU5CUVVNc1lVRkJZU3hEUVVGRExFTkJRVU1zWlVGQlpUdFpRVU16UXl4SlFVRkpMRVZCUVVVc2EwTkJRV3RETzFOQlEzcERPMUZCUTBRc1IwRkJSeXhGUVVGRk8xbEJRMGdzUjBGQlJ5eEZRVUZGTEU5QlFVOHNRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJReXhuUWtGQlowSTdXVUZETlVNc1NVRkJTU3hGUVVGRkxHMURRVUZ0UXp0VFFVTXhRenRMUVVOR0xFTkJRVU1zUTBGQlF6dEpRVVZJTEV0QlFVc3NRMEZCUXl4WlFVRlpMRU5CUVVNc2MwSkJRWE5DTEVOQlFVTXNRMEZCUXp0QlFVTTNReXhEUVVGRExFTkJRVU1pTENKbWFXeGxJam9pZEdGemEzTXZZMjl1Wm1sbkwyTnZibU5oZEM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2x4dUlDb2dZR052Ym1OaGRHQmNiaUFxWEc0Z0tpQXRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMWNiaUFxWEc0Z0tpQkRiMjVqWVhSbGJtRjBaWE1nZEdobElHTnZiblJsYm5SeklHOW1JRzExYkhScGNHeGxJRXBoZG1GVFkzSnBjSFFnWVc1a0wyOXlJRU5UVXlCbWFXeGxjMXh1SUNvZ2FXNTBieUIwZDI4Z2JtVjNJR1pwYkdWekxDQmxZV05vSUd4dlkyRjBaV1FnWVhRZ1lHTnZibU5oZEM5d2NtOWtkV04wYVc5dUxtcHpZQ0JoYm1SY2JpQXFJR0JqYjI1allYUXZjSEp2WkhWamRHbHZiaTVqYzNOZ0lISmxjM0JsWTNScGRtVnNlU0JwYmlCZ0xuUnRjQzl3ZFdKc2FXTXZZMjl1WTJGMFlDNWNiaUFxWEc0Z0tpQlVhR2x6SUdseklIVnpaV1FnWVhNZ1lXNGdhVzUwWlhKdFpXUnBZWFJsSUhOMFpYQWdkRzhnWjJWdVpYSmhkR1VnYlc5dWIyeHBkR2hwWXlCbWFXeGxjMXh1SUNvZ2RHaGhkQ0JqWVc0Z2RHaGxiaUJpWlNCd1lYTnpaV1FnYVc0Z2RHOGdZSFZuYkdsbWVXQWdZVzVrTDI5eUlHQmpjM050YVc1Z0lHWnZjaUJ0YVc1cFptbGpZWFJwYjI0dVhHNGdLbHh1SUNvZ1JtOXlJSFZ6WVdkbElHUnZZM01nYzJWbE9seHVJQ29nSUNCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdlozSjFiblJxY3k5bmNuVnVkQzFqYjI1MGNtbGlMV052Ym1OaGRGeHVJQ3BjYmlBcUwxeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaG5jblZ1ZENrZ2UxeHVYRzRnSUdkeWRXNTBMbU52Ym1acFp5NXpaWFFvSjJOdmJtTmhkQ2NzSUh0Y2JpQWdJQ0JxY3pvZ2UxeHVJQ0FnSUNBZ2MzSmpPaUJ5WlhGMWFYSmxLQ2N1TGk5d2FYQmxiR2x1WlNjcExtcHpSbWxzWlhOVWIwbHVhbVZqZEN4Y2JpQWdJQ0FnSUdSbGMzUTZJQ2N1ZEcxd0wzQjFZbXhwWXk5amIyNWpZWFF2Y0hKdlpIVmpkR2x2Ymk1cWN5ZGNiaUFnSUNCOUxGeHVJQ0FnSUdOemN6b2dlMXh1SUNBZ0lDQWdjM0pqT2lCeVpYRjFhWEpsS0NjdUxpOXdhWEJsYkdsdVpTY3BMbU56YzBacGJHVnpWRzlKYm1wbFkzUXNYRzRnSUNBZ0lDQmtaWE4wT2lBbkxuUnRjQzl3ZFdKc2FXTXZZMjl1WTJGMEwzQnliMlIxWTNScGIyNHVZM056SjF4dUlDQWdJSDFjYmlBZ2ZTazdYRzVjYmlBZ1ozSjFiblF1Ykc5aFpFNXdiVlJoYzJ0ektDZG5jblZ1ZEMxamIyNTBjbWxpTFdOdmJtTmhkQ2NwTzF4dWZUdGNiaUpkZlE9PVxuIl19
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,
