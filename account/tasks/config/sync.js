/**
 * `sync`
 *
 * ---------------------------------------------------------------
 *
 * Synchronize files from the `assets` folder to `.tmp/public`,
 * smashing anything that's already there.
 *
 * This task synchronizes one directory with another (like rsync).
 * In the default Sails asset pipeline, it plays very similar role
 * to `grunt-contrib-copy`, but copies only those files that have
 * actually changed since the last time the task was run.
 *
 * For usage docs see:
 *   https://github.com/tomusdrw/grunt-sync
 *
 */
module.exports = function (grunt) {
    grunt.config.set('sync', {
        dev: {
            files: [{
                    cwd: './assets',
                    src: ['**/*.!(coffee|less)'],
                    dest: '.tmp/public'
                }]
        }
    });
    grunt.loadNpmTasks('grunt-sync');
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRhc2tzL2NvbmZpZy9zeW5jLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0dBZ0JHO0FBQ0gsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFTLEtBQUs7SUFFN0IsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFO1FBQ3ZCLEdBQUcsRUFBRTtZQUNILEtBQUssRUFBRSxDQUFDO29CQUNOLEdBQUcsRUFBRSxVQUFVO29CQUNmLEdBQUcsRUFBRSxDQUFDLHFCQUFxQixDQUFDO29CQUM1QixJQUFJLEVBQUUsYUFBYTtpQkFDcEIsQ0FBQztTQUNIO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsS0FBSyxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNuQyxDQUFDLENBQUMiLCJmaWxlIjoidGFza3MvY29uZmlnL3N5bmMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIGBzeW5jYFxuICpcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICpcbiAqIFN5bmNocm9uaXplIGZpbGVzIGZyb20gdGhlIGBhc3NldHNgIGZvbGRlciB0byBgLnRtcC9wdWJsaWNgLFxuICogc21hc2hpbmcgYW55dGhpbmcgdGhhdCdzIGFscmVhZHkgdGhlcmUuXG4gKlxuICogVGhpcyB0YXNrIHN5bmNocm9uaXplcyBvbmUgZGlyZWN0b3J5IHdpdGggYW5vdGhlciAobGlrZSByc3luYykuXG4gKiBJbiB0aGUgZGVmYXVsdCBTYWlscyBhc3NldCBwaXBlbGluZSwgaXQgcGxheXMgdmVyeSBzaW1pbGFyIHJvbGVcbiAqIHRvIGBncnVudC1jb250cmliLWNvcHlgLCBidXQgY29waWVzIG9ubHkgdGhvc2UgZmlsZXMgdGhhdCBoYXZlXG4gKiBhY3R1YWxseSBjaGFuZ2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgdGhlIHRhc2sgd2FzIHJ1bi5cbiAqXG4gKiBGb3IgdXNhZ2UgZG9jcyBzZWU6XG4gKiAgIGh0dHBzOi8vZ2l0aHViLmNvbS90b211c2Rydy9ncnVudC1zeW5jXG4gKlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGdydW50KSB7XG5cbiAgZ3J1bnQuY29uZmlnLnNldCgnc3luYycsIHtcbiAgICBkZXY6IHtcbiAgICAgIGZpbGVzOiBbe1xuICAgICAgICBjd2Q6ICcuL2Fzc2V0cycsXG4gICAgICAgIHNyYzogWycqKi8qLiEoY29mZmVlfGxlc3MpJ10sXG4gICAgICAgIGRlc3Q6ICcudG1wL3B1YmxpYydcbiAgICAgIH1dXG4gICAgfVxuICB9KTtcblxuICBncnVudC5sb2FkTnBtVGFza3MoJ2dydW50LXN5bmMnKTtcbn07XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRhc2tzL2NvbmZpZy9zeW5jLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0dBZ0JHO0FBQ0gsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFVLEtBQUs7SUFDNUIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFO1FBQ3JCLEdBQUcsRUFBRTtZQUNELEtBQUssRUFBRSxDQUFDO29CQUNBLEdBQUcsRUFBRSxVQUFVO29CQUNmLEdBQUcsRUFBRSxDQUFDLHFCQUFxQixDQUFDO29CQUM1QixJQUFJLEVBQUUsYUFBYTtpQkFDdEIsQ0FBQztTQUNUO0tBQ0osQ0FBQyxDQUFDO0lBQ0gsS0FBSyxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNyQyxDQUFDLENBQUM7QUFFRixtckRBQW1yRCIsImZpbGUiOiJ0YXNrcy9jb25maWcvc3luYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogYHN5bmNgXG4gKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKlxuICogU3luY2hyb25pemUgZmlsZXMgZnJvbSB0aGUgYGFzc2V0c2AgZm9sZGVyIHRvIGAudG1wL3B1YmxpY2AsXG4gKiBzbWFzaGluZyBhbnl0aGluZyB0aGF0J3MgYWxyZWFkeSB0aGVyZS5cbiAqXG4gKiBUaGlzIHRhc2sgc3luY2hyb25pemVzIG9uZSBkaXJlY3Rvcnkgd2l0aCBhbm90aGVyIChsaWtlIHJzeW5jKS5cbiAqIEluIHRoZSBkZWZhdWx0IFNhaWxzIGFzc2V0IHBpcGVsaW5lLCBpdCBwbGF5cyB2ZXJ5IHNpbWlsYXIgcm9sZVxuICogdG8gYGdydW50LWNvbnRyaWItY29weWAsIGJ1dCBjb3BpZXMgb25seSB0aG9zZSBmaWxlcyB0aGF0IGhhdmVcbiAqIGFjdHVhbGx5IGNoYW5nZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgdGFzayB3YXMgcnVuLlxuICpcbiAqIEZvciB1c2FnZSBkb2NzIHNlZTpcbiAqICAgaHR0cHM6Ly9naXRodWIuY29tL3RvbXVzZHJ3L2dydW50LXN5bmNcbiAqXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGdydW50KSB7XG4gICAgZ3J1bnQuY29uZmlnLnNldCgnc3luYycsIHtcbiAgICAgICAgZGV2OiB7XG4gICAgICAgICAgICBmaWxlczogW3tcbiAgICAgICAgICAgICAgICAgICAgY3dkOiAnLi9hc3NldHMnLFxuICAgICAgICAgICAgICAgICAgICBzcmM6IFsnKiovKi4hKGNvZmZlZXxsZXNzKSddLFxuICAgICAgICAgICAgICAgICAgICBkZXN0OiAnLnRtcC9wdWJsaWMnXG4gICAgICAgICAgICAgICAgfV1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGdydW50LmxvYWROcG1UYXNrcygnZ3J1bnQtc3luYycpO1xufTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJblJoYzJ0ekwyTnZibVpwWnk5emVXNWpMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk96czdPenM3T3pzN096czdPenM3TzBkQlowSkhPMEZCUTBnc1RVRkJUU3hEUVVGRExFOUJRVThzUjBGQlJ5eFZRVUZUTEV0QlFVczdTVUZGTjBJc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNUVUZCVFN4RlFVRkZPMUZCUTNaQ0xFZEJRVWNzUlVGQlJUdFpRVU5JTEV0QlFVc3NSVUZCUlN4RFFVRkRPMjlDUVVOT0xFZEJRVWNzUlVGQlJTeFZRVUZWTzI5Q1FVTm1MRWRCUVVjc1JVRkJSU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRPMjlDUVVNMVFpeEpRVUZKTEVWQlFVVXNZVUZCWVR0cFFrRkRjRUlzUTBGQlF6dFRRVU5JTzB0QlEwWXNRMEZCUXl4RFFVRkRPMGxCUlVnc1MwRkJTeXhEUVVGRExGbEJRVmtzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUXp0QlFVTnVReXhEUVVGRExFTkJRVU1pTENKbWFXeGxJam9pZEdGemEzTXZZMjl1Wm1sbkwzTjVibU11YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaXBjYmlBcUlHQnplVzVqWUZ4dUlDcGNiaUFxSUMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFZ4dUlDcGNiaUFxSUZONWJtTm9jbTl1YVhwbElHWnBiR1Z6SUdaeWIyMGdkR2hsSUdCaGMzTmxkSE5nSUdadmJHUmxjaUIwYnlCZ0xuUnRjQzl3ZFdKc2FXTmdMRnh1SUNvZ2MyMWhjMmhwYm1jZ1lXNTVkR2hwYm1jZ2RHaGhkQ2R6SUdGc2NtVmhaSGtnZEdobGNtVXVYRzRnS2x4dUlDb2dWR2hwY3lCMFlYTnJJSE41Ym1Ob2NtOXVhWHBsY3lCdmJtVWdaR2x5WldOMGIzSjVJSGRwZEdnZ1lXNXZkR2hsY2lBb2JHbHJaU0J5YzNsdVl5a3VYRzRnS2lCSmJpQjBhR1VnWkdWbVlYVnNkQ0JUWVdsc2N5QmhjM05sZENCd2FYQmxiR2x1WlN3Z2FYUWdjR3hoZVhNZ2RtVnllU0J6YVcxcGJHRnlJSEp2YkdWY2JpQXFJSFJ2SUdCbmNuVnVkQzFqYjI1MGNtbGlMV052Y0hsZ0xDQmlkWFFnWTI5d2FXVnpJRzl1YkhrZ2RHaHZjMlVnWm1sc1pYTWdkR2hoZENCb1lYWmxYRzRnS2lCaFkzUjFZV3hzZVNCamFHRnVaMlZrSUhOcGJtTmxJSFJvWlNCc1lYTjBJSFJwYldVZ2RHaGxJSFJoYzJzZ2QyRnpJSEoxYmk1Y2JpQXFYRzRnS2lCR2IzSWdkWE5oWjJVZ1pHOWpjeUJ6WldVNlhHNGdLaUFnSUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5MGIyMTFjMlJ5ZHk5bmNuVnVkQzF6ZVc1alhHNGdLbHh1SUNvdlhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHZHlkVzUwS1NCN1hHNWNiaUFnWjNKMWJuUXVZMjl1Wm1sbkxuTmxkQ2duYzNsdVl5Y3NJSHRjYmlBZ0lDQmtaWFk2SUh0Y2JpQWdJQ0FnSUdacGJHVnpPaUJiZTF4dUlDQWdJQ0FnSUNCamQyUTZJQ2N1TDJGemMyVjBjeWNzWEc0Z0lDQWdJQ0FnSUhOeVl6b2dXeWNxS2k4cUxpRW9ZMjltWm1WbGZHeGxjM01wSjEwc1hHNGdJQ0FnSUNBZ0lHUmxjM1E2SUNjdWRHMXdMM0IxWW14cFl5ZGNiaUFnSUNBZ0lIMWRYRzRnSUNBZ2ZWeHVJQ0I5S1R0Y2JseHVJQ0JuY25WdWRDNXNiMkZrVG5CdFZHRnphM01vSjJkeWRXNTBMWE41Ym1NbktUdGNibjA3WEc0aVhYMD1cbiJdfQ==

//# sourceMappingURL=data:application/json;charset=utf8;base64,
