/**
 * `copy`
 *
 * ---------------------------------------------------------------
 *
 * Copy files and/or folders from your `assets/` directory into
 * the web root (`.tmp/public`) so they can be served via HTTP,
 * and also for further pre-processing by other Grunt tasks.
 *
 * #### Normal usage (`sails lift`)
 * Copies all directories and files (except CoffeeScript and LESS)
 * from the `assets/` folder into the web root -- conventionally a
 * hidden directory located `.tmp/public`.
 *
 * #### Via the `build` tasklist (`sails www`)
 * Copies all directories and files from the .tmp/public directory into a www directory.
 *
 * For usage docs see:
 *   https://github.com/gruntjs/grunt-contrib-copy
 *
 */
module.exports = function (grunt) {
    grunt.config.set('copy', {
        dev: {
            files: [{
                    expand: true,
                    cwd: './assets',
                    src: ['**/*.!(coffee|less)'],
                    dest: '.tmp/public'
                }]
        },
        build: {
            files: [{
                    expand: true,
                    cwd: '.tmp/public',
                    src: ['**/*'],
                    dest: 'www'
                }]
        }
    });
    grunt.loadNpmTasks('grunt-contrib-copy');
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRhc2tzL2NvbmZpZy9jb3B5LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW9CRztBQUNILE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFBUyxLQUFLO0lBRTdCLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRTtRQUN2QixHQUFHLEVBQUU7WUFDSCxLQUFLLEVBQUUsQ0FBQztvQkFDTixNQUFNLEVBQUUsSUFBSTtvQkFDWixHQUFHLEVBQUUsVUFBVTtvQkFDZixHQUFHLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQztvQkFDNUIsSUFBSSxFQUFFLGFBQWE7aUJBQ3BCLENBQUM7U0FDSDtRQUNELEtBQUssRUFBRTtZQUNMLEtBQUssRUFBRSxDQUFDO29CQUNOLE1BQU0sRUFBRSxJQUFJO29CQUNaLEdBQUcsRUFBRSxhQUFhO29CQUNsQixHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUM7b0JBQ2IsSUFBSSxFQUFFLEtBQUs7aUJBQ1osQ0FBQztTQUNIO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsS0FBSyxDQUFDLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQzNDLENBQUMsQ0FBQyIsImZpbGUiOiJ0YXNrcy9jb25maWcvY29weS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogYGNvcHlgXG4gKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKlxuICogQ29weSBmaWxlcyBhbmQvb3IgZm9sZGVycyBmcm9tIHlvdXIgYGFzc2V0cy9gIGRpcmVjdG9yeSBpbnRvXG4gKiB0aGUgd2ViIHJvb3QgKGAudG1wL3B1YmxpY2ApIHNvIHRoZXkgY2FuIGJlIHNlcnZlZCB2aWEgSFRUUCxcbiAqIGFuZCBhbHNvIGZvciBmdXJ0aGVyIHByZS1wcm9jZXNzaW5nIGJ5IG90aGVyIEdydW50IHRhc2tzLlxuICpcbiAqICMjIyMgTm9ybWFsIHVzYWdlIChgc2FpbHMgbGlmdGApXG4gKiBDb3BpZXMgYWxsIGRpcmVjdG9yaWVzIGFuZCBmaWxlcyAoZXhjZXB0IENvZmZlZVNjcmlwdCBhbmQgTEVTUylcbiAqIGZyb20gdGhlIGBhc3NldHMvYCBmb2xkZXIgaW50byB0aGUgd2ViIHJvb3QgLS0gY29udmVudGlvbmFsbHkgYVxuICogaGlkZGVuIGRpcmVjdG9yeSBsb2NhdGVkIGAudG1wL3B1YmxpY2AuXG4gKlxuICogIyMjIyBWaWEgdGhlIGBidWlsZGAgdGFza2xpc3QgKGBzYWlscyB3d3dgKVxuICogQ29waWVzIGFsbCBkaXJlY3RvcmllcyBhbmQgZmlsZXMgZnJvbSB0aGUgLnRtcC9wdWJsaWMgZGlyZWN0b3J5IGludG8gYSB3d3cgZGlyZWN0b3J5LlxuICpcbiAqIEZvciB1c2FnZSBkb2NzIHNlZTpcbiAqICAgaHR0cHM6Ly9naXRodWIuY29tL2dydW50anMvZ3J1bnQtY29udHJpYi1jb3B5XG4gKlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGdydW50KSB7XG5cbiAgZ3J1bnQuY29uZmlnLnNldCgnY29weScsIHtcbiAgICBkZXY6IHtcbiAgICAgIGZpbGVzOiBbe1xuICAgICAgICBleHBhbmQ6IHRydWUsXG4gICAgICAgIGN3ZDogJy4vYXNzZXRzJyxcbiAgICAgICAgc3JjOiBbJyoqLyouIShjb2ZmZWV8bGVzcyknXSxcbiAgICAgICAgZGVzdDogJy50bXAvcHVibGljJ1xuICAgICAgfV1cbiAgICB9LFxuICAgIGJ1aWxkOiB7XG4gICAgICBmaWxlczogW3tcbiAgICAgICAgZXhwYW5kOiB0cnVlLFxuICAgICAgICBjd2Q6ICcudG1wL3B1YmxpYycsXG4gICAgICAgIHNyYzogWycqKi8qJ10sXG4gICAgICAgIGRlc3Q6ICd3d3cnXG4gICAgICB9XVxuICAgIH1cbiAgfSk7XG5cbiAgZ3J1bnQubG9hZE5wbVRhc2tzKCdncnVudC1jb250cmliLWNvcHknKTtcbn07XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRhc2tzL2NvbmZpZy9jb3B5LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW9CRztBQUNILE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFBVSxLQUFLO0lBQzVCLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRTtRQUNyQixHQUFHLEVBQUU7WUFDRCxLQUFLLEVBQUUsQ0FBQztvQkFDQSxNQUFNLEVBQUUsSUFBSTtvQkFDWixHQUFHLEVBQUUsVUFBVTtvQkFDZixHQUFHLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQztvQkFDNUIsSUFBSSxFQUFFLGFBQWE7aUJBQ3RCLENBQUM7U0FDVDtRQUNELEtBQUssRUFBRTtZQUNILEtBQUssRUFBRSxDQUFDO29CQUNBLE1BQU0sRUFBRSxJQUFJO29CQUNaLEdBQUcsRUFBRSxhQUFhO29CQUNsQixHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUM7b0JBQ2IsSUFBSSxFQUFFLEtBQUs7aUJBQ2QsQ0FBQztTQUNUO0tBQ0osQ0FBQyxDQUFDO0lBQ0gsS0FBSyxDQUFDLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQzdDLENBQUMsQ0FBQztBQUVGLCszRUFBKzNFIiwiZmlsZSI6InRhc2tzL2NvbmZpZy9jb3B5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBgY29weWBcbiAqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqXG4gKiBDb3B5IGZpbGVzIGFuZC9vciBmb2xkZXJzIGZyb20geW91ciBgYXNzZXRzL2AgZGlyZWN0b3J5IGludG9cbiAqIHRoZSB3ZWIgcm9vdCAoYC50bXAvcHVibGljYCkgc28gdGhleSBjYW4gYmUgc2VydmVkIHZpYSBIVFRQLFxuICogYW5kIGFsc28gZm9yIGZ1cnRoZXIgcHJlLXByb2Nlc3NpbmcgYnkgb3RoZXIgR3J1bnQgdGFza3MuXG4gKlxuICogIyMjIyBOb3JtYWwgdXNhZ2UgKGBzYWlscyBsaWZ0YClcbiAqIENvcGllcyBhbGwgZGlyZWN0b3JpZXMgYW5kIGZpbGVzIChleGNlcHQgQ29mZmVlU2NyaXB0IGFuZCBMRVNTKVxuICogZnJvbSB0aGUgYGFzc2V0cy9gIGZvbGRlciBpbnRvIHRoZSB3ZWIgcm9vdCAtLSBjb252ZW50aW9uYWxseSBhXG4gKiBoaWRkZW4gZGlyZWN0b3J5IGxvY2F0ZWQgYC50bXAvcHVibGljYC5cbiAqXG4gKiAjIyMjIFZpYSB0aGUgYGJ1aWxkYCB0YXNrbGlzdCAoYHNhaWxzIHd3d2ApXG4gKiBDb3BpZXMgYWxsIGRpcmVjdG9yaWVzIGFuZCBmaWxlcyBmcm9tIHRoZSAudG1wL3B1YmxpYyBkaXJlY3RvcnkgaW50byBhIHd3dyBkaXJlY3RvcnkuXG4gKlxuICogRm9yIHVzYWdlIGRvY3Mgc2VlOlxuICogICBodHRwczovL2dpdGh1Yi5jb20vZ3J1bnRqcy9ncnVudC1jb250cmliLWNvcHlcbiAqXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGdydW50KSB7XG4gICAgZ3J1bnQuY29uZmlnLnNldCgnY29weScsIHtcbiAgICAgICAgZGV2OiB7XG4gICAgICAgICAgICBmaWxlczogW3tcbiAgICAgICAgICAgICAgICAgICAgZXhwYW5kOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjd2Q6ICcuL2Fzc2V0cycsXG4gICAgICAgICAgICAgICAgICAgIHNyYzogWycqKi8qLiEoY29mZmVlfGxlc3MpJ10sXG4gICAgICAgICAgICAgICAgICAgIGRlc3Q6ICcudG1wL3B1YmxpYydcbiAgICAgICAgICAgICAgICB9XVxuICAgICAgICB9LFxuICAgICAgICBidWlsZDoge1xuICAgICAgICAgICAgZmlsZXM6IFt7XG4gICAgICAgICAgICAgICAgICAgIGV4cGFuZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgY3dkOiAnLnRtcC9wdWJsaWMnLFxuICAgICAgICAgICAgICAgICAgICBzcmM6IFsnKiovKiddLFxuICAgICAgICAgICAgICAgICAgICBkZXN0OiAnd3d3J1xuICAgICAgICAgICAgICAgIH1dXG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBncnVudC5sb2FkTnBtVGFza3MoJ2dydW50LWNvbnRyaWItY29weScpO1xufTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJblJoYzJ0ekwyTnZibVpwWnk5amIzQjVMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk96czdPenM3T3pzN096czdPenM3T3pzN096dEhRVzlDUnp0QlFVTklMRTFCUVUwc1EwRkJReXhQUVVGUExFZEJRVWNzVlVGQlV5eExRVUZMTzBsQlJUZENMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEUxQlFVMHNSVUZCUlR0UlFVTjJRaXhIUVVGSExFVkJRVVU3V1VGRFNDeExRVUZMTEVWQlFVVXNRMEZCUXp0dlFrRkRUaXhOUVVGTkxFVkJRVVVzU1VGQlNUdHZRa0ZEV2l4SFFVRkhMRVZCUVVVc1ZVRkJWVHR2UWtGRFppeEhRVUZITEVWQlFVVXNRMEZCUXl4eFFrRkJjVUlzUTBGQlF6dHZRa0ZETlVJc1NVRkJTU3hGUVVGRkxHRkJRV0U3YVVKQlEzQkNMRU5CUVVNN1UwRkRTRHRSUVVORUxFdEJRVXNzUlVGQlJUdFpRVU5NTEV0QlFVc3NSVUZCUlN4RFFVRkRPMjlDUVVOT0xFMUJRVTBzUlVGQlJTeEpRVUZKTzI5Q1FVTmFMRWRCUVVjc1JVRkJSU3hoUVVGaE8yOUNRVU5zUWl4SFFVRkhMRVZCUVVVc1EwRkJReXhOUVVGTkxFTkJRVU03YjBKQlEySXNTVUZCU1N4RlFVRkZMRXRCUVVzN2FVSkJRMW9zUTBGQlF6dFRRVU5JTzB0QlEwWXNRMEZCUXl4RFFVRkRPMGxCUlVnc1MwRkJTeXhEUVVGRExGbEJRVmtzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhEUVVGRE8wRkJRek5ETEVOQlFVTXNRMEZCUXlJc0ltWnBiR1VpT2lKMFlYTnJjeTlqYjI1bWFXY3ZZMjl3ZVM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2x4dUlDb2dZR052Y0hsZ1hHNGdLbHh1SUNvZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdFhHNGdLbHh1SUNvZ1EyOXdlU0JtYVd4bGN5QmhibVF2YjNJZ1ptOXNaR1Z5Y3lCbWNtOXRJSGx2ZFhJZ1lHRnpjMlYwY3k5Z0lHUnBjbVZqZEc5eWVTQnBiblJ2WEc0Z0tpQjBhR1VnZDJWaUlISnZiM1FnS0dBdWRHMXdMM0IxWW14cFkyQXBJSE52SUhSb1pYa2dZMkZ1SUdKbElITmxjblpsWkNCMmFXRWdTRlJVVUN4Y2JpQXFJR0Z1WkNCaGJITnZJR1p2Y2lCbWRYSjBhR1Z5SUhCeVpTMXdjbTlqWlhOemFXNW5JR0o1SUc5MGFHVnlJRWR5ZFc1MElIUmhjMnR6TGx4dUlDcGNiaUFxSUNNakl5TWdUbTl5YldGc0lIVnpZV2RsSUNoZ2MyRnBiSE1nYkdsbWRHQXBYRzRnS2lCRGIzQnBaWE1nWVd4c0lHUnBjbVZqZEc5eWFXVnpJR0Z1WkNCbWFXeGxjeUFvWlhoalpYQjBJRU52Wm1abFpWTmpjbWx3ZENCaGJtUWdURVZUVXlsY2JpQXFJR1p5YjIwZ2RHaGxJR0JoYzNObGRITXZZQ0JtYjJ4a1pYSWdhVzUwYnlCMGFHVWdkMlZpSUhKdmIzUWdMUzBnWTI5dWRtVnVkR2x2Ym1Gc2JIa2dZVnh1SUNvZ2FHbGtaR1Z1SUdScGNtVmpkRzl5ZVNCc2IyTmhkR1ZrSUdBdWRHMXdMM0IxWW14cFkyQXVYRzRnS2x4dUlDb2dJeU1qSXlCV2FXRWdkR2hsSUdCaWRXbHNaR0FnZEdGemEyeHBjM1FnS0dCellXbHNjeUIzZDNkZ0tWeHVJQ29nUTI5d2FXVnpJR0ZzYkNCa2FYSmxZM1J2Y21sbGN5QmhibVFnWm1sc1pYTWdabkp2YlNCMGFHVWdMblJ0Y0M5d2RXSnNhV01nWkdseVpXTjBiM0o1SUdsdWRHOGdZU0IzZDNjZ1pHbHlaV04wYjNKNUxseHVJQ3BjYmlBcUlFWnZjaUIxYzJGblpTQmtiMk56SUhObFpUcGNiaUFxSUNBZ2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwyZHlkVzUwYW5NdlozSjFiblF0WTI5dWRISnBZaTFqYjNCNVhHNGdLbHh1SUNvdlhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHZHlkVzUwS1NCN1hHNWNiaUFnWjNKMWJuUXVZMjl1Wm1sbkxuTmxkQ2duWTI5d2VTY3NJSHRjYmlBZ0lDQmtaWFk2SUh0Y2JpQWdJQ0FnSUdacGJHVnpPaUJiZTF4dUlDQWdJQ0FnSUNCbGVIQmhibVE2SUhSeWRXVXNYRzRnSUNBZ0lDQWdJR04zWkRvZ0p5NHZZWE56WlhSekp5eGNiaUFnSUNBZ0lDQWdjM0pqT2lCYkp5b3FMeW91SVNoamIyWm1aV1Y4YkdWemN5a25YU3hjYmlBZ0lDQWdJQ0FnWkdWemREb2dKeTUwYlhBdmNIVmliR2xqSjF4dUlDQWdJQ0FnZlYxY2JpQWdJQ0I5TEZ4dUlDQWdJR0oxYVd4a09pQjdYRzRnSUNBZ0lDQm1hV3hsY3pvZ1czdGNiaUFnSUNBZ0lDQWdaWGh3WVc1a09pQjBjblZsTEZ4dUlDQWdJQ0FnSUNCamQyUTZJQ2N1ZEcxd0wzQjFZbXhwWXljc1hHNGdJQ0FnSUNBZ0lITnlZem9nV3ljcUtpOHFKMTBzWEc0Z0lDQWdJQ0FnSUdSbGMzUTZJQ2QzZDNjblhHNGdJQ0FnSUNCOVhWeHVJQ0FnSUgxY2JpQWdmU2s3WEc1Y2JpQWdaM0oxYm5RdWJHOWhaRTV3YlZSaGMydHpLQ2RuY25WdWRDMWpiMjUwY21saUxXTnZjSGtuS1R0Y2JuMDdYRzRpWFgwPVxuIl19
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,
