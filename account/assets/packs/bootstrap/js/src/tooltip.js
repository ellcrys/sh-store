"use strict";
/* global Tether */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("./util");
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-alpha.6): tooltip.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */
var Tooltip = (function ($) {
    /**
     * Check for Tether dependency
     * Tether - http://tether.io/
     */
    if (typeof Tether === 'undefined') {
        throw new Error('Bootstrap tooltips require Tether (http://tether.io/)');
    }
    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */
    var NAME = 'tooltip';
    var VERSION = '4.0.0-alpha.6';
    var DATA_KEY = 'bs.tooltip';
    var EVENT_KEY = "." + DATA_KEY;
    var JQUERY_NO_CONFLICT = $.fn[NAME];
    var TRANSITION_DURATION = 150;
    var CLASS_PREFIX = 'bs-tether';
    var Default = {
        animation: true,
        template: '<div class="tooltip" role="tooltip">'
            + '<div class="tooltip-inner"></div></div>',
        trigger: 'hover focus',
        title: '',
        delay: 0,
        html: false,
        selector: false,
        placement: 'top',
        offset: '0 0',
        constraints: [],
        container: false
    };
    var DefaultType = {
        animation: 'boolean',
        template: 'string',
        title: '(string|element|function)',
        trigger: 'string',
        delay: '(number|object)',
        html: 'boolean',
        selector: '(string|boolean)',
        placement: '(string|function)',
        offset: 'string',
        constraints: 'array',
        container: '(string|element|boolean)'
    };
    var AttachmentMap = {
        TOP: 'bottom center',
        RIGHT: 'middle left',
        BOTTOM: 'top center',
        LEFT: 'middle right'
    };
    var HoverState = {
        SHOW: 'show',
        OUT: 'out'
    };
    var Event = {
        HIDE: "hide" + EVENT_KEY,
        HIDDEN: "hidden" + EVENT_KEY,
        SHOW: "show" + EVENT_KEY,
        SHOWN: "shown" + EVENT_KEY,
        INSERTED: "inserted" + EVENT_KEY,
        CLICK: "click" + EVENT_KEY,
        FOCUSIN: "focusin" + EVENT_KEY,
        FOCUSOUT: "focusout" + EVENT_KEY,
        MOUSEENTER: "mouseenter" + EVENT_KEY,
        MOUSELEAVE: "mouseleave" + EVENT_KEY
    };
    var ClassName = {
        FADE: 'fade',
        SHOW: 'show'
    };
    var Selector = {
        TOOLTIP: '.tooltip',
        TOOLTIP_INNER: '.tooltip-inner'
    };
    var TetherClass = {
        element: false,
        enabled: false
    };
    var Trigger = {
        HOVER: 'hover',
        FOCUS: 'focus',
        CLICK: 'click',
        MANUAL: 'manual'
    };
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */
    var Tooltip = (function () {
        function Tooltip(element, config) {
            // private
            this._isEnabled = true;
            this._timeout = 0;
            this._hoverState = '';
            this._activeTrigger = {};
            this._isTransitioning = false;
            this._tether = null;
            // protected
            this.element = element;
            this.config = this._getConfig(config);
            this.tip = null;
            this._setListeners();
        }
        Object.defineProperty(Tooltip, "VERSION", {
            // getters
            get: function () {
                return VERSION;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tooltip, "Default", {
            get: function () {
                return Default;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tooltip, "NAME", {
            get: function () {
                return NAME;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tooltip, "DATA_KEY", {
            get: function () {
                return DATA_KEY;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tooltip, "Event", {
            get: function () {
                return Event;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tooltip, "EVENT_KEY", {
            get: function () {
                return EVENT_KEY;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tooltip, "DefaultType", {
            get: function () {
                return DefaultType;
            },
            enumerable: true,
            configurable: true
        });
        // public
        Tooltip.prototype.enable = function () {
            this._isEnabled = true;
        };
        Tooltip.prototype.disable = function () {
            this._isEnabled = false;
        };
        Tooltip.prototype.toggleEnabled = function () {
            this._isEnabled = !this._isEnabled;
        };
        Tooltip.prototype.toggle = function (event) {
            if (event) {
                var dataKey = this.constructor.DATA_KEY;
                var context = $(event.currentTarget).data(dataKey);
                if (!context) {
                    context = new this.constructor(event.currentTarget, this._getDelegateConfig());
                    $(event.currentTarget).data(dataKey, context);
                }
                context._activeTrigger.click = !context._activeTrigger.click;
                if (context._isWithActiveTrigger()) {
                    context._enter(null, context);
                }
                else {
                    context._leave(null, context);
                }
            }
            else {
                if ($(this.getTipElement()).hasClass(ClassName.SHOW)) {
                    this._leave(null, this);
                    return;
                }
                this._enter(null, this);
            }
        };
        Tooltip.prototype.dispose = function () {
            clearTimeout(this._timeout);
            this.cleanupTether();
            $.removeData(this.element, this.constructor.DATA_KEY);
            $(this.element).off(this.constructor.EVENT_KEY);
            $(this.element).closest('.modal').off('hide.bs.modal');
            if (this.tip) {
                $(this.tip).remove();
            }
            this._isEnabled = null;
            this._timeout = null;
            this._hoverState = null;
            this._activeTrigger = null;
            this._tether = null;
            this.element = null;
            this.config = null;
            this.tip = null;
        };
        Tooltip.prototype.show = function () {
            var _this = this;
            if ($(this.element).css('display') === 'none') {
                throw new Error('Please use show on visible elements');
            }
            var showEvent = $.Event(this.constructor.Event.SHOW);
            if (this.isWithContent() && this._isEnabled) {
                if (this._isTransitioning) {
                    throw new Error('Tooltip is transitioning');
                }
                $(this.element).trigger(showEvent);
                var isInTheDom = $.contains(this.element.ownerDocument.documentElement, this.element);
                if (showEvent.isDefaultPrevented() || !isInTheDom) {
                    return;
                }
                var tip = this.getTipElement();
                var tipId = util_1.default.getUID(this.constructor.NAME);
                tip.setAttribute('id', tipId);
                this.element.setAttribute('aria-describedby', tipId);
                this.setContent();
                if (this.config.animation) {
                    $(tip).addClass(ClassName.FADE);
                }
                var placement = typeof this.config.placement === 'function' ?
                    this.config.placement.call(this, tip, this.element) :
                    this.config.placement;
                var attachment = this._getAttachment(placement);
                var container = this.config.container === false ? document.body : $(this.config.container);
                $(tip)
                    .data(this.constructor.DATA_KEY, this)
                    .appendTo(container);
                $(this.element).trigger(this.constructor.Event.INSERTED);
                this._tether = new Tether({
                    attachment: attachment,
                    element: tip,
                    target: this.element,
                    classes: TetherClass,
                    classPrefix: CLASS_PREFIX,
                    offset: this.config.offset,
                    constraints: this.config.constraints,
                    addTargetClasses: false
                });
                util_1.default.reflow(tip);
                this._tether.position();
                $(tip).addClass(ClassName.SHOW);
                var complete = function () {
                    var prevHoverState = _this._hoverState;
                    _this._hoverState = null;
                    _this._isTransitioning = false;
                    $(_this.element).trigger(_this.constructor.Event.SHOWN);
                    if (prevHoverState === HoverState.OUT) {
                        _this._leave(null, _this);
                    }
                };
                if (util_1.default.supportsTransitionEnd() && $(this.tip).hasClass(ClassName.FADE)) {
                    this._isTransitioning = true;
                    $(this.tip)
                        .one(util_1.default.TRANSITION_END, complete)
                        .emulateTransitionEnd(Tooltip._TRANSITION_DURATION);
                    return;
                }
                complete();
            }
        };
        Tooltip.prototype.hide = function (callback) {
            var _this = this;
            var tip = this.getTipElement();
            var hideEvent = $.Event(this.constructor.Event.HIDE);
            if (this._isTransitioning) {
                throw new Error('Tooltip is transitioning');
            }
            var complete = function () {
                if (_this._hoverState !== HoverState.SHOW && tip.parentNode) {
                    tip.parentNode.removeChild(tip);
                }
                _this.element.removeAttribute('aria-describedby');
                $(_this.element).trigger(_this.constructor.Event.HIDDEN);
                _this._isTransitioning = false;
                _this.cleanupTether();
                if (callback) {
                    callback();
                }
            };
            $(this.element).trigger(hideEvent);
            if (hideEvent.isDefaultPrevented()) {
                return;
            }
            $(tip).removeClass(ClassName.SHOW);
            this._activeTrigger[Trigger.CLICK] = false;
            this._activeTrigger[Trigger.FOCUS] = false;
            this._activeTrigger[Trigger.HOVER] = false;
            if (util_1.default.supportsTransitionEnd() &&
                $(this.tip).hasClass(ClassName.FADE)) {
                this._isTransitioning = true;
                $(tip)
                    .one(util_1.default.TRANSITION_END, complete)
                    .emulateTransitionEnd(TRANSITION_DURATION);
            }
            else {
                complete();
            }
            this._hoverState = '';
        };
        // protected
        Tooltip.prototype.isWithContent = function () {
            return Boolean(this.getTitle());
        };
        Tooltip.prototype.getTipElement = function () {
            return this.tip = this.tip || $(this.config.template)[0];
        };
        Tooltip.prototype.setContent = function () {
            var $tip = $(this.getTipElement());
            this.setElementContent($tip.find(Selector.TOOLTIP_INNER), this.getTitle());
            $tip.removeClass(ClassName.FADE + " " + ClassName.SHOW);
            this.cleanupTether();
        };
        Tooltip.prototype.setElementContent = function ($element, content) {
            var html = this.config.html;
            if (typeof content === 'object' && (content.nodeType || content.jquery)) {
                // content is a DOM node or a jQuery
                if (html) {
                    if (!$(content).parent().is($element)) {
                        $element.empty().append(content);
                    }
                }
                else {
                    $element.text($(content).text());
                }
            }
            else {
                $element[html ? 'html' : 'text'](content);
            }
        };
        Tooltip.prototype.getTitle = function () {
            var title = this.element.getAttribute('data-original-title');
            if (!title) {
                title = typeof this.config.title === 'function' ?
                    this.config.title.call(this.element) :
                    this.config.title;
            }
            return title;
        };
        Tooltip.prototype.cleanupTether = function () {
            if (this._tether) {
                this._tether.destroy();
            }
        };
        // private
        Tooltip.prototype._getAttachment = function (placement) {
            return AttachmentMap[placement.toUpperCase()];
        };
        Tooltip.prototype._setListeners = function () {
            var _this = this;
            var triggers = this.config.trigger.split(' ');
            triggers.forEach(function (trigger) {
                if (trigger === 'click') {
                    $(_this.element).on(_this.constructor.Event.CLICK, _this.config.selector, function (event) { return _this.toggle(event); });
                }
                else if (trigger !== Trigger.MANUAL) {
                    var eventIn = trigger === Trigger.HOVER ?
                        _this.constructor.Event.MOUSEENTER :
                        _this.constructor.Event.FOCUSIN;
                    var eventOut = trigger === Trigger.HOVER ?
                        _this.constructor.Event.MOUSELEAVE :
                        _this.constructor.Event.FOCUSOUT;
                    $(_this.element)
                        .on(eventIn, _this.config.selector, function (event) { return _this._enter(event); })
                        .on(eventOut, _this.config.selector, function (event) { return _this._leave(event); });
                }
                $(_this.element).closest('.modal').on('hide.bs.modal', function () { return _this.hide(); });
            });
            if (this.config.selector) {
                this.config = $.extend({}, this.config, {
                    trigger: 'manual',
                    selector: ''
                });
            }
            else {
                this._fixTitle();
            }
        };
        Tooltip.prototype._fixTitle = function () {
            var titleType = typeof this.element.getAttribute('data-original-title');
            if (this.element.getAttribute('title') ||
                titleType !== 'string') {
                this.element.setAttribute('data-original-title', this.element.getAttribute('title') || '');
                this.element.setAttribute('title', '');
            }
        };
        Tooltip.prototype._enter = function (event, context) {
            var dataKey = this.constructor.DATA_KEY;
            context = context || $(event.currentTarget).data(dataKey);
            if (!context) {
                context = new this.constructor(event.currentTarget, this._getDelegateConfig());
                $(event.currentTarget).data(dataKey, context);
            }
            if (event) {
                context._activeTrigger[event.type === 'focusin' ? Trigger.FOCUS : Trigger.HOVER] = true;
            }
            if ($(context.getTipElement()).hasClass(ClassName.SHOW) ||
                context._hoverState === HoverState.SHOW) {
                context._hoverState = HoverState.SHOW;
                return;
            }
            clearTimeout(context._timeout);
            context._hoverState = HoverState.SHOW;
            if (!context.config.delay || !context.config.delay.show) {
                context.show();
                return;
            }
            context._timeout = setTimeout(function () {
                if (context._hoverState === HoverState.SHOW) {
                    context.show();
                }
            }, context.config.delay.show);
        };
        Tooltip.prototype._leave = function (event, context) {
            var dataKey = this.constructor.DATA_KEY;
            context = context || $(event.currentTarget).data(dataKey);
            if (!context) {
                context = new this.constructor(event.currentTarget, this._getDelegateConfig());
                $(event.currentTarget).data(dataKey, context);
            }
            if (event) {
                context._activeTrigger[event.type === 'focusout' ? Trigger.FOCUS : Trigger.HOVER] = false;
            }
            if (context._isWithActiveTrigger()) {
                return;
            }
            clearTimeout(context._timeout);
            context._hoverState = HoverState.OUT;
            if (!context.config.delay || !context.config.delay.hide) {
                context.hide();
                return;
            }
            context._timeout = setTimeout(function () {
                if (context._hoverState === HoverState.OUT) {
                    context.hide();
                }
            }, context.config.delay.hide);
        };
        Tooltip.prototype._isWithActiveTrigger = function () {
            for (var trigger in this._activeTrigger) {
                if (this._activeTrigger[trigger]) {
                    return true;
                }
            }
            return false;
        };
        Tooltip.prototype._getConfig = function (config) {
            config = $.extend({}, this.constructor.Default, $(this.element).data(), config);
            if (config.delay && typeof config.delay === 'number') {
                config.delay = {
                    show: config.delay,
                    hide: config.delay
                };
            }
            util_1.default.typeCheckConfig(NAME, config, this.constructor.DefaultType);
            return config;
        };
        Tooltip.prototype._getDelegateConfig = function () {
            var config = {};
            if (this.config) {
                for (var key in this.config) {
                    if (this.constructor.Default[key] !== this.config[key]) {
                        config[key] = this.config[key];
                    }
                }
            }
            return config;
        };
        // static
        Tooltip._jQueryInterface = function (config) {
            return this.each(function () {
                var data = $(this).data(DATA_KEY);
                var _config = typeof config === 'object' && config;
                if (!data && /dispose|hide/.test(config)) {
                    return;
                }
                if (!data) {
                    data = new Tooltip(this, _config);
                    $(this).data(DATA_KEY, data);
                }
                if (typeof config === 'string') {
                    if (data[config] === undefined) {
                        throw new Error("No method named \"" + config + "\"");
                    }
                    data[config]();
                }
            });
        };
        return Tooltip;
    }());
    /**
     * ------------------------------------------------------------------------
     * jQuery
     * ------------------------------------------------------------------------
     */
    $.fn[NAME] = Tooltip._jQueryInterface;
    $.fn[NAME].Constructor = Tooltip;
    $.fn[NAME].noConflict = function () {
        $.fn[NAME] = JQUERY_NO_CONFLICT;
        return Tooltip._jQueryInterface;
    };
    return Tooltip;
})(jQuery);
exports.default = Tooltip;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
