"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("./util");
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-alpha.6): scrollspy.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */
var ScrollSpy = (function ($) {
    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */
    var NAME = 'scrollspy';
    var VERSION = '4.0.0-alpha.6';
    var DATA_KEY = 'bs.scrollspy';
    var EVENT_KEY = "." + DATA_KEY;
    var DATA_API_KEY = '.data-api';
    var JQUERY_NO_CONFLICT = $.fn[NAME];
    var Default = {
        offset: 10,
        method: 'auto',
        target: ''
    };
    var DefaultType = {
        offset: 'number',
        method: 'string',
        target: '(string|element)'
    };
    var Event = {
        ACTIVATE: "activate" + EVENT_KEY,
        SCROLL: "scroll" + EVENT_KEY,
        LOAD_DATA_API: "load" + EVENT_KEY + DATA_API_KEY
    };
    var ClassName = {
        DROPDOWN_ITEM: 'dropdown-item',
        DROPDOWN_MENU: 'dropdown-menu',
        NAV_LINK: 'nav-link',
        NAV: 'nav',
        ACTIVE: 'active'
    };
    var Selector = {
        DATA_SPY: '[data-spy="scroll"]',
        ACTIVE: '.active',
        LIST_ITEM: '.list-item',
        LI: 'li',
        LI_DROPDOWN: 'li.dropdown',
        NAV_LINKS: '.nav-link',
        DROPDOWN: '.dropdown',
        DROPDOWN_ITEMS: '.dropdown-item',
        DROPDOWN_TOGGLE: '.dropdown-toggle'
    };
    var OffsetMethod = {
        OFFSET: 'offset',
        POSITION: 'position'
    };
    /**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */
    var ScrollSpy = (function () {
        function ScrollSpy(element, config) {
            var _this = this;
            this._element = element;
            this._scrollElement = element.tagName === 'BODY' ? window : element;
            this._config = this._getConfig(config);
            this._selector = this._config.target + " " + Selector.NAV_LINKS + ","
                + (this._config.target + " " + Selector.DROPDOWN_ITEMS);
            this._offsets = [];
            this._targets = [];
            this._activeTarget = null;
            this._scrollHeight = 0;
            $(this._scrollElement).on(Event.SCROLL, function (event) { return _this._process(event); });
            this.refresh();
            this._process();
        }
        Object.defineProperty(ScrollSpy, "VERSION", {
            // getters
            get: function () {
                return VERSION;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollSpy, "Default", {
            get: function () {
                return Default;
            },
            enumerable: true,
            configurable: true
        });
        // public
        ScrollSpy.prototype.refresh = function () {
            var _this = this;
            var autoMethod = this._scrollElement !== this._scrollElement.window ?
                OffsetMethod.POSITION : OffsetMethod.OFFSET;
            var offsetMethod = this._config.method === 'auto' ?
                autoMethod : this._config.method;
            var offsetBase = offsetMethod === OffsetMethod.POSITION ?
                this._getScrollTop() : 0;
            this._offsets = [];
            this._targets = [];
            this._scrollHeight = this._getScrollHeight();
            var targets = $.makeArray($(this._selector));
            targets
                .map(function (element) {
                var target;
                var targetSelector = util_1.default.getSelectorFromElement(element);
                if (targetSelector) {
                    target = $(targetSelector)[0];
                }
                if (target && (target.offsetWidth || target.offsetHeight)) {
                    // todo (fat): remove sketch reliance on jQuery position/offset
                    return [
                        $(target)[offsetMethod]().top + offsetBase,
                        targetSelector
                    ];
                }
                return null;
            })
                .filter(function (item) { return item; })
                .sort(function (a, b) { return a[0] - b[0]; })
                .forEach(function (item) {
                _this._offsets.push(item[0]);
                _this._targets.push(item[1]);
            });
        };
        ScrollSpy.prototype.dispose = function () {
            $.removeData(this._element, DATA_KEY);
            $(this._scrollElement).off(EVENT_KEY);
            this._element = null;
            this._scrollElement = null;
            this._config = null;
            this._selector = null;
            this._offsets = null;
            this._targets = null;
            this._activeTarget = null;
            this._scrollHeight = null;
        };
        // private
        ScrollSpy.prototype._getConfig = function (config) {
            config = $.extend({}, Default, config);
            if (typeof config.target !== 'string') {
                var id = $(config.target).attr('id');
                if (!id) {
                    id = util_1.default.getUID(NAME);
                    $(config.target).attr('id', id);
                }
                config.target = "#" + id;
            }
            util_1.default.typeCheckConfig(NAME, config, DefaultType);
            return config;
        };
        ScrollSpy.prototype._getScrollTop = function () {
            return this._scrollElement === window ?
                this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
        };
        ScrollSpy.prototype._getScrollHeight = function () {
            return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
        };
        ScrollSpy.prototype._getOffsetHeight = function () {
            return this._scrollElement === window ?
                window.innerHeight : this._scrollElement.offsetHeight;
        };
        ScrollSpy.prototype._process = function () {
            var scrollTop = this._getScrollTop() + this._config.offset;
            var scrollHeight = this._getScrollHeight();
            var maxScroll = this._config.offset
                + scrollHeight
                - this._getOffsetHeight();
            if (this._scrollHeight !== scrollHeight) {
                this.refresh();
            }
            if (scrollTop >= maxScroll) {
                var target = this._targets[this._targets.length - 1];
                if (this._activeTarget !== target) {
                    this._activate(target);
                }
                return;
            }
            if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {
                this._activeTarget = null;
                this._clear();
                return;
            }
            for (var i = this._offsets.length; i--;) {
                var isActiveTarget = this._activeTarget !== this._targets[i]
                    && scrollTop >= this._offsets[i]
                    && (this._offsets[i + 1] === undefined ||
                        scrollTop < this._offsets[i + 1]);
                if (isActiveTarget) {
                    this._activate(this._targets[i]);
                }
            }
        };
        ScrollSpy.prototype._activate = function (target) {
            this._activeTarget = target;
            this._clear();
            var queries = this._selector.split(',');
            queries = queries.map(function (selector) {
                return selector + "[data-target=\"" + target + "\"]," +
                    (selector + "[href=\"" + target + "\"]");
            });
            var $link = $(queries.join(','));
            if ($link.hasClass(ClassName.DROPDOWN_ITEM)) {
                $link.closest(Selector.DROPDOWN).find(Selector.DROPDOWN_TOGGLE).addClass(ClassName.ACTIVE);
                $link.addClass(ClassName.ACTIVE);
            }
            else {
                // todo (fat) this is kinda sus...
                // recursively add actives to tested nav-links
                $link.parents(Selector.LI).find("> " + Selector.NAV_LINKS).addClass(ClassName.ACTIVE);
            }
            $(this._scrollElement).trigger(Event.ACTIVATE, {
                relatedTarget: target
            });
        };
        ScrollSpy.prototype._clear = function () {
            $(this._selector).filter(Selector.ACTIVE).removeClass(ClassName.ACTIVE);
        };
        // static
        ScrollSpy._jQueryInterface = function (config) {
            return this.each(function () {
                var data = $(this).data(DATA_KEY);
                var _config = typeof config === 'object' && config;
                if (!data) {
                    data = new ScrollSpy(this, _config);
                    $(this).data(DATA_KEY, data);
                }
                if (typeof config === 'string') {
                    if (data[config] === undefined) {
                        throw new Error("No method named \"" + config + "\"");
                    }
                    data[config]();
                }
            });
        };
        return ScrollSpy;
    }());
    /**
     * ------------------------------------------------------------------------
     * Data Api implementation
     * ------------------------------------------------------------------------
     */
    $(window).on(Event.LOAD_DATA_API, function () {
        var scrollSpys = $.makeArray($(Selector.DATA_SPY));
        for (var i = scrollSpys.length; i--;) {
            var $spy = $(scrollSpys[i]);
            ScrollSpy._jQueryInterface.call($spy, $spy.data());
        }
    });
    /**
     * ------------------------------------------------------------------------
     * jQuery
     * ------------------------------------------------------------------------
     */
    $.fn[NAME] = ScrollSpy._jQueryInterface;
    $.fn[NAME].Constructor = ScrollSpy;
    $.fn[NAME].noConflict = function () {
        $.fn[NAME] = JQUERY_NO_CONFLICT;
        return ScrollSpy._jQueryInterface;
    };
    return ScrollSpy;
})(jQuery);
exports.default = ScrollSpy;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9ib290c3RyYXAvanMvc3JjL3Njcm9sbHNweS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFDYixNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUM5RCxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDL0I7Ozs7O0dBS0c7QUFDSCxJQUFJLFNBQVMsR0FBRyxDQUFDLFVBQVUsQ0FBQztJQUN4Qjs7OztPQUlHO0lBQ0gsSUFBSSxJQUFJLEdBQUcsV0FBVyxDQUFDO0lBQ3ZCLElBQUksT0FBTyxHQUFHLGVBQWUsQ0FBQztJQUM5QixJQUFJLFFBQVEsR0FBRyxjQUFjLENBQUM7SUFDOUIsSUFBSSxTQUFTLEdBQUcsR0FBRyxHQUFHLFFBQVEsQ0FBQztJQUMvQixJQUFJLFlBQVksR0FBRyxXQUFXLENBQUM7SUFDL0IsSUFBSSxrQkFBa0IsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3BDLElBQUksT0FBTyxHQUFHO1FBQ1YsTUFBTSxFQUFFLEVBQUU7UUFDVixNQUFNLEVBQUUsTUFBTTtRQUNkLE1BQU0sRUFBRSxFQUFFO0tBQ2IsQ0FBQztJQUNGLElBQUksV0FBVyxHQUFHO1FBQ2QsTUFBTSxFQUFFLFFBQVE7UUFDaEIsTUFBTSxFQUFFLFFBQVE7UUFDaEIsTUFBTSxFQUFFLGtCQUFrQjtLQUM3QixDQUFDO0lBQ0YsSUFBSSxLQUFLLEdBQUc7UUFDUixRQUFRLEVBQUUsVUFBVSxHQUFHLFNBQVM7UUFDaEMsTUFBTSxFQUFFLFFBQVEsR0FBRyxTQUFTO1FBQzVCLGFBQWEsRUFBRSxNQUFNLEdBQUcsU0FBUyxHQUFHLFlBQVk7S0FDbkQsQ0FBQztJQUNGLElBQUksU0FBUyxHQUFHO1FBQ1osYUFBYSxFQUFFLGVBQWU7UUFDOUIsYUFBYSxFQUFFLGVBQWU7UUFDOUIsUUFBUSxFQUFFLFVBQVU7UUFDcEIsR0FBRyxFQUFFLEtBQUs7UUFDVixNQUFNLEVBQUUsUUFBUTtLQUNuQixDQUFDO0lBQ0YsSUFBSSxRQUFRLEdBQUc7UUFDWCxRQUFRLEVBQUUscUJBQXFCO1FBQy9CLE1BQU0sRUFBRSxTQUFTO1FBQ2pCLFNBQVMsRUFBRSxZQUFZO1FBQ3ZCLEVBQUUsRUFBRSxJQUFJO1FBQ1IsV0FBVyxFQUFFLGFBQWE7UUFDMUIsU0FBUyxFQUFFLFdBQVc7UUFDdEIsUUFBUSxFQUFFLFdBQVc7UUFDckIsY0FBYyxFQUFFLGdCQUFnQjtRQUNoQyxlQUFlLEVBQUUsa0JBQWtCO0tBQ3RDLENBQUM7SUFDRixJQUFJLFlBQVksR0FBRztRQUNmLE1BQU0sRUFBRSxRQUFRO1FBQ2hCLFFBQVEsRUFBRSxVQUFVO0tBQ3ZCLENBQUM7SUFDRjs7OztPQUlHO0lBQ0gsSUFBSSxTQUFTLEdBQUcsQ0FBQztRQUNiLG1CQUFtQixPQUFPLEVBQUUsTUFBTTtZQUM5QixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUM7WUFDakIsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7WUFDeEIsSUFBSSxDQUFDLGNBQWMsR0FBRyxPQUFPLENBQUMsT0FBTyxLQUFLLE1BQU0sR0FBRyxNQUFNLEdBQUcsT0FBTyxDQUFDO1lBQ3BFLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN2QyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLEdBQUcsR0FBRyxRQUFRLENBQUMsU0FBUyxHQUFHLEdBQUc7a0JBQy9ELENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUM1RCxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztZQUNuQixJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztZQUNuQixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztZQUMxQixJQUFJLENBQUMsYUFBYSxHQUFHLENBQUMsQ0FBQztZQUN2QixDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLFVBQVUsS0FBSyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDNUYsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2YsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3BCLENBQUM7UUFDRCxNQUFNLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUU7WUFDeEMsVUFBVTtZQUNWLEdBQUcsRUFBRTtnQkFDRCxNQUFNLENBQUMsT0FBTyxDQUFDO1lBQ25CLENBQUM7WUFDRCxVQUFVLEVBQUUsSUFBSTtZQUNoQixZQUFZLEVBQUUsSUFBSTtTQUNyQixDQUFDLENBQUM7UUFDSCxNQUFNLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUU7WUFDeEMsR0FBRyxFQUFFO2dCQUNELE1BQU0sQ0FBQyxPQUFPLENBQUM7WUFDbkIsQ0FBQztZQUNELFVBQVUsRUFBRSxJQUFJO1lBQ2hCLFlBQVksRUFBRSxJQUFJO1NBQ3JCLENBQUMsQ0FBQztRQUNILFNBQVM7UUFDVCxTQUFTLENBQUMsU0FBUyxDQUFDLE9BQU8sR0FBRztZQUMxQixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUM7WUFDakIsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLGNBQWMsS0FBSyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU07Z0JBQy9ELFlBQVksQ0FBQyxRQUFRLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQztZQUNoRCxJQUFJLFlBQVksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sS0FBSyxNQUFNO2dCQUM3QyxVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFDckMsSUFBSSxVQUFVLEdBQUcsWUFBWSxLQUFLLFlBQVksQ0FBQyxRQUFRO2dCQUNuRCxJQUFJLENBQUMsYUFBYSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQzdCLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO1lBQ25CLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO1lBQ25CLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDN0MsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDN0MsT0FBTztpQkFDRixHQUFHLENBQUMsVUFBVSxPQUFPO2dCQUN0QixJQUFJLE1BQU0sQ0FBQztnQkFDWCxJQUFJLGNBQWMsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLHNCQUFzQixDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUNwRSxFQUFFLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO29CQUNqQixNQUFNLEdBQUcsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNsQyxDQUFDO2dCQUNELEVBQUUsQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDeEQsK0RBQStEO29CQUMvRCxNQUFNLENBQUM7d0JBQ0gsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLFVBQVU7d0JBQzFDLGNBQWM7cUJBQ2pCLENBQUM7Z0JBQ04sQ0FBQztnQkFDRCxNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2hCLENBQUMsQ0FBQztpQkFDRyxNQUFNLENBQUMsVUFBVSxJQUFJLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDeEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDN0MsT0FBTyxDQUFDLFVBQVUsSUFBSTtnQkFDdkIsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzdCLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDO1FBQ0YsU0FBUyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEdBQUc7WUFDMUIsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ3RDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3RDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1lBQzNCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1lBQ3BCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1lBQ3RCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO1lBQzFCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO1FBQzlCLENBQUMsQ0FBQztRQUNGLFVBQVU7UUFDVixTQUFTLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRyxVQUFVLE1BQU07WUFDN0MsTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztZQUN2QyxFQUFFLENBQUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxNQUFNLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDcEMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3JDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztvQkFDTixFQUFFLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ2pDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDcEMsQ0FBQztnQkFDRCxNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUM7WUFDN0IsQ0FBQztZQUNELE1BQU0sQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFDMUQsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUNsQixDQUFDLENBQUM7UUFDRixTQUFTLENBQUMsU0FBUyxDQUFDLGFBQWEsR0FBRztZQUNoQyxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsS0FBSyxNQUFNO2dCQUNqQyxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQztRQUN4RSxDQUFDLENBQUM7UUFDRixTQUFTLENBQUMsU0FBUyxDQUFDLGdCQUFnQixHQUFHO1lBQ25DLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDM0gsQ0FBQyxDQUFDO1FBQ0YsU0FBUyxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsR0FBRztZQUNuQyxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsS0FBSyxNQUFNO2dCQUNqQyxNQUFNLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDO1FBQzlELENBQUMsQ0FBQztRQUNGLFNBQVMsQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHO1lBQzNCLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxhQUFhLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztZQUMzRCxJQUFJLFlBQVksR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztZQUMzQyxJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU07a0JBQzdCLFlBQVk7a0JBQ1osSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDOUIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsS0FBSyxZQUFZLENBQUMsQ0FBQyxDQUFDO2dCQUN0QyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDbkIsQ0FBQztZQUNELEVBQUUsQ0FBQyxDQUFDLFNBQVMsSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUN6QixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUNyRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUM7b0JBQ2hDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQzNCLENBQUM7Z0JBQ0QsTUFBTSxDQUFDO1lBQ1gsQ0FBQztZQUNELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM3RSxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztnQkFDMUIsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO2dCQUNkLE1BQU0sQ0FBQztZQUNYLENBQUM7WUFDRCxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDO2dCQUN0QyxJQUFJLGNBQWMsR0FBRyxJQUFJLENBQUMsYUFBYSxLQUFLLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO3VCQUNyRCxTQUFTLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7dUJBQzdCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssU0FBUzt3QkFDbEMsU0FBUyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzFDLEVBQUUsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7b0JBQ2pCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNyQyxDQUFDO1lBQ0wsQ0FBQztRQUNMLENBQUMsQ0FBQztRQUNGLFNBQVMsQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLFVBQVUsTUFBTTtZQUM1QyxJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQztZQUM1QixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDZCxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN4QyxPQUFPLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLFFBQVE7Z0JBQ3BDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsaUJBQWlCLEdBQUcsTUFBTSxHQUFHLE1BQU07b0JBQ2pELENBQUMsUUFBUSxHQUFHLFVBQVUsR0FBRyxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUM7WUFDakQsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDMUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUMzRixLQUFLLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNyQyxDQUFDO1lBQ0QsSUFBSSxDQUFDLENBQUM7Z0JBQ0Ysa0NBQWtDO2dCQUNsQyw4Q0FBOEM7Z0JBQzlDLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDMUYsQ0FBQztZQUNELENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUU7Z0JBQzNDLGFBQWEsRUFBRSxNQUFNO2FBQ3hCLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQztRQUNGLFNBQVMsQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHO1lBQ3pCLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzVFLENBQUMsQ0FBQztRQUNGLFNBQVM7UUFDVCxTQUFTLENBQUMsZ0JBQWdCLEdBQUcsVUFBVSxNQUFNO1lBQ3pDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO2dCQUNiLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ2xDLElBQUksT0FBTyxHQUFHLE9BQU8sTUFBTSxLQUFLLFFBQVEsSUFBSSxNQUFNLENBQUM7Z0JBQ25ELEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztvQkFDUixJQUFJLEdBQUcsSUFBSSxTQUFTLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO29CQUNwQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFDakMsQ0FBQztnQkFDRCxFQUFFLENBQUMsQ0FBQyxPQUFPLE1BQU0sS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDO29CQUM3QixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQzt3QkFDN0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQkFBb0IsR0FBRyxNQUFNLEdBQUcsSUFBSSxDQUFDLENBQUM7b0JBQzFELENBQUM7b0JBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7Z0JBQ25CLENBQUM7WUFDTCxDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQztRQUNGLE1BQU0sQ0FBQyxTQUFTLENBQUM7SUFDckIsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNMOzs7O09BSUc7SUFDSCxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUU7UUFDOUIsSUFBSSxVQUFVLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDbkQsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDO1lBQ25DLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM1QixTQUFTLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUN2RCxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDSDs7OztPQUlHO0lBQ0gsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUMsZ0JBQWdCLENBQUM7SUFDeEMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLEdBQUcsU0FBUyxDQUFDO0lBQ25DLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxHQUFHO1FBQ3BCLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsa0JBQWtCLENBQUM7UUFDaEMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQztJQUN0QyxDQUFDLENBQUM7SUFDRixNQUFNLENBQUMsU0FBUyxDQUFDO0FBQ3JCLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ1gsT0FBTyxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUMiLCJmaWxlIjoiYXNzZXRzL3BhY2tzL2Jvb3RzdHJhcC9qcy9zcmMvc2Nyb2xsc3B5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdXRpbF8xID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjQuMC4wLWFscGhhLjYpOiBzY3JvbGxzcHkuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG52YXIgU2Nyb2xsU3B5ID0gKGZ1bmN0aW9uICgkKSB7XG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogQ29uc3RhbnRzXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG4gICAgdmFyIE5BTUUgPSAnc2Nyb2xsc3B5JztcbiAgICB2YXIgVkVSU0lPTiA9ICc0LjAuMC1hbHBoYS42JztcbiAgICB2YXIgREFUQV9LRVkgPSAnYnMuc2Nyb2xsc3B5JztcbiAgICB2YXIgRVZFTlRfS0VZID0gXCIuXCIgKyBEQVRBX0tFWTtcbiAgICB2YXIgREFUQV9BUElfS0VZID0gJy5kYXRhLWFwaSc7XG4gICAgdmFyIEpRVUVSWV9OT19DT05GTElDVCA9ICQuZm5bTkFNRV07XG4gICAgdmFyIERlZmF1bHQgPSB7XG4gICAgICAgIG9mZnNldDogMTAsXG4gICAgICAgIG1ldGhvZDogJ2F1dG8nLFxuICAgICAgICB0YXJnZXQ6ICcnXG4gICAgfTtcbiAgICB2YXIgRGVmYXVsdFR5cGUgPSB7XG4gICAgICAgIG9mZnNldDogJ251bWJlcicsXG4gICAgICAgIG1ldGhvZDogJ3N0cmluZycsXG4gICAgICAgIHRhcmdldDogJyhzdHJpbmd8ZWxlbWVudCknXG4gICAgfTtcbiAgICB2YXIgRXZlbnQgPSB7XG4gICAgICAgIEFDVElWQVRFOiBcImFjdGl2YXRlXCIgKyBFVkVOVF9LRVksXG4gICAgICAgIFNDUk9MTDogXCJzY3JvbGxcIiArIEVWRU5UX0tFWSxcbiAgICAgICAgTE9BRF9EQVRBX0FQSTogXCJsb2FkXCIgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVlcbiAgICB9O1xuICAgIHZhciBDbGFzc05hbWUgPSB7XG4gICAgICAgIERST1BET1dOX0lURU06ICdkcm9wZG93bi1pdGVtJyxcbiAgICAgICAgRFJPUERPV05fTUVOVTogJ2Ryb3Bkb3duLW1lbnUnLFxuICAgICAgICBOQVZfTElOSzogJ25hdi1saW5rJyxcbiAgICAgICAgTkFWOiAnbmF2JyxcbiAgICAgICAgQUNUSVZFOiAnYWN0aXZlJ1xuICAgIH07XG4gICAgdmFyIFNlbGVjdG9yID0ge1xuICAgICAgICBEQVRBX1NQWTogJ1tkYXRhLXNweT1cInNjcm9sbFwiXScsXG4gICAgICAgIEFDVElWRTogJy5hY3RpdmUnLFxuICAgICAgICBMSVNUX0lURU06ICcubGlzdC1pdGVtJyxcbiAgICAgICAgTEk6ICdsaScsXG4gICAgICAgIExJX0RST1BET1dOOiAnbGkuZHJvcGRvd24nLFxuICAgICAgICBOQVZfTElOS1M6ICcubmF2LWxpbmsnLFxuICAgICAgICBEUk9QRE9XTjogJy5kcm9wZG93bicsXG4gICAgICAgIERST1BET1dOX0lURU1TOiAnLmRyb3Bkb3duLWl0ZW0nLFxuICAgICAgICBEUk9QRE9XTl9UT0dHTEU6ICcuZHJvcGRvd24tdG9nZ2xlJ1xuICAgIH07XG4gICAgdmFyIE9mZnNldE1ldGhvZCA9IHtcbiAgICAgICAgT0ZGU0VUOiAnb2Zmc2V0JyxcbiAgICAgICAgUE9TSVRJT046ICdwb3NpdGlvbidcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIENsYXNzIERlZmluaXRpb25cbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cbiAgICB2YXIgU2Nyb2xsU3B5ID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gU2Nyb2xsU3B5KGVsZW1lbnQsIGNvbmZpZykge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICAgICAgdGhpcy5fc2Nyb2xsRWxlbWVudCA9IGVsZW1lbnQudGFnTmFtZSA9PT0gJ0JPRFknID8gd2luZG93IDogZWxlbWVudDtcbiAgICAgICAgICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgICAgICAgICAgdGhpcy5fc2VsZWN0b3IgPSB0aGlzLl9jb25maWcudGFyZ2V0ICsgXCIgXCIgKyBTZWxlY3Rvci5OQVZfTElOS1MgKyBcIixcIlxuICAgICAgICAgICAgICAgICsgKHRoaXMuX2NvbmZpZy50YXJnZXQgKyBcIiBcIiArIFNlbGVjdG9yLkRST1BET1dOX0lURU1TKTtcbiAgICAgICAgICAgIHRoaXMuX29mZnNldHMgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3RhcmdldHMgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZVRhcmdldCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLl9zY3JvbGxIZWlnaHQgPSAwO1xuICAgICAgICAgICAgJCh0aGlzLl9zY3JvbGxFbGVtZW50KS5vbihFdmVudC5TQ1JPTEwsIGZ1bmN0aW9uIChldmVudCkgeyByZXR1cm4gX3RoaXMuX3Byb2Nlc3MoZXZlbnQpOyB9KTtcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgICAgICAgICAgdGhpcy5fcHJvY2VzcygpO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTY3JvbGxTcHksIFwiVkVSU0lPTlwiLCB7XG4gICAgICAgICAgICAvLyBnZXR0ZXJzXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gVkVSU0lPTjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU2Nyb2xsU3B5LCBcIkRlZmF1bHRcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIERlZmF1bHQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gcHVibGljXG4gICAgICAgIFNjcm9sbFNweS5wcm90b3R5cGUucmVmcmVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgYXV0b01ldGhvZCA9IHRoaXMuX3Njcm9sbEVsZW1lbnQgIT09IHRoaXMuX3Njcm9sbEVsZW1lbnQud2luZG93ID9cbiAgICAgICAgICAgICAgICBPZmZzZXRNZXRob2QuUE9TSVRJT04gOiBPZmZzZXRNZXRob2QuT0ZGU0VUO1xuICAgICAgICAgICAgdmFyIG9mZnNldE1ldGhvZCA9IHRoaXMuX2NvbmZpZy5tZXRob2QgPT09ICdhdXRvJyA/XG4gICAgICAgICAgICAgICAgYXV0b01ldGhvZCA6IHRoaXMuX2NvbmZpZy5tZXRob2Q7XG4gICAgICAgICAgICB2YXIgb2Zmc2V0QmFzZSA9IG9mZnNldE1ldGhvZCA9PT0gT2Zmc2V0TWV0aG9kLlBPU0lUSU9OID9cbiAgICAgICAgICAgICAgICB0aGlzLl9nZXRTY3JvbGxUb3AoKSA6IDA7XG4gICAgICAgICAgICB0aGlzLl9vZmZzZXRzID0gW107XG4gICAgICAgICAgICB0aGlzLl90YXJnZXRzID0gW107XG4gICAgICAgICAgICB0aGlzLl9zY3JvbGxIZWlnaHQgPSB0aGlzLl9nZXRTY3JvbGxIZWlnaHQoKTtcbiAgICAgICAgICAgIHZhciB0YXJnZXRzID0gJC5tYWtlQXJyYXkoJCh0aGlzLl9zZWxlY3RvcikpO1xuICAgICAgICAgICAgdGFyZ2V0c1xuICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0O1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXRTZWxlY3RvciA9IHV0aWxfMS5kZWZhdWx0LmdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldFNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldCA9ICQodGFyZ2V0U2VsZWN0b3IpWzBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ICYmICh0YXJnZXQub2Zmc2V0V2lkdGggfHwgdGFyZ2V0Lm9mZnNldEhlaWdodCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdG9kbyAoZmF0KTogcmVtb3ZlIHNrZXRjaCByZWxpYW5jZSBvbiBqUXVlcnkgcG9zaXRpb24vb2Zmc2V0XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRhcmdldClbb2Zmc2V0TWV0aG9kXSgpLnRvcCArIG9mZnNldEJhc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRTZWxlY3RvclxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gaXRlbTsgfSlcbiAgICAgICAgICAgICAgICAuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYVswXSAtIGJbMF07IH0pXG4gICAgICAgICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fb2Zmc2V0cy5wdXNoKGl0ZW1bMF0pO1xuICAgICAgICAgICAgICAgIF90aGlzLl90YXJnZXRzLnB1c2goaXRlbVsxXSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgU2Nyb2xsU3B5LnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKTtcbiAgICAgICAgICAgICQodGhpcy5fc2Nyb2xsRWxlbWVudCkub2ZmKEVWRU5UX0tFWSk7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX3Njcm9sbEVsZW1lbnQgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5fY29uZmlnID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX3NlbGVjdG9yID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX29mZnNldHMgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5fdGFyZ2V0cyA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLl9hY3RpdmVUYXJnZXQgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5fc2Nyb2xsSGVpZ2h0ID0gbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gcHJpdmF0ZVxuICAgICAgICBTY3JvbGxTcHkucHJvdG90eXBlLl9nZXRDb25maWcgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgICAgICBjb25maWcgPSAkLmV4dGVuZCh7fSwgRGVmYXVsdCwgY29uZmlnKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29uZmlnLnRhcmdldCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICB2YXIgaWQgPSAkKGNvbmZpZy50YXJnZXQpLmF0dHIoJ2lkJyk7XG4gICAgICAgICAgICAgICAgaWYgKCFpZCkge1xuICAgICAgICAgICAgICAgICAgICBpZCA9IHV0aWxfMS5kZWZhdWx0LmdldFVJRChOQU1FKTtcbiAgICAgICAgICAgICAgICAgICAgJChjb25maWcudGFyZ2V0KS5hdHRyKCdpZCcsIGlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uZmlnLnRhcmdldCA9IFwiI1wiICsgaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1dGlsXzEuZGVmYXVsdC50eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCBEZWZhdWx0VHlwZSk7XG4gICAgICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgICAgICB9O1xuICAgICAgICBTY3JvbGxTcHkucHJvdG90eXBlLl9nZXRTY3JvbGxUb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2Nyb2xsRWxlbWVudCA9PT0gd2luZG93ID9cbiAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGxFbGVtZW50LnBhZ2VZT2Zmc2V0IDogdGhpcy5fc2Nyb2xsRWxlbWVudC5zY3JvbGxUb3A7XG4gICAgICAgIH07XG4gICAgICAgIFNjcm9sbFNweS5wcm90b3R5cGUuX2dldFNjcm9sbEhlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zY3JvbGxFbGVtZW50LnNjcm9sbEhlaWdodCB8fCBNYXRoLm1heChkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbEhlaWdodCk7XG4gICAgICAgIH07XG4gICAgICAgIFNjcm9sbFNweS5wcm90b3R5cGUuX2dldE9mZnNldEhlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zY3JvbGxFbGVtZW50ID09PSB3aW5kb3cgP1xuICAgICAgICAgICAgICAgIHdpbmRvdy5pbm5lckhlaWdodCA6IHRoaXMuX3Njcm9sbEVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuICAgICAgICB9O1xuICAgICAgICBTY3JvbGxTcHkucHJvdG90eXBlLl9wcm9jZXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHNjcm9sbFRvcCA9IHRoaXMuX2dldFNjcm9sbFRvcCgpICsgdGhpcy5fY29uZmlnLm9mZnNldDtcbiAgICAgICAgICAgIHZhciBzY3JvbGxIZWlnaHQgPSB0aGlzLl9nZXRTY3JvbGxIZWlnaHQoKTtcbiAgICAgICAgICAgIHZhciBtYXhTY3JvbGwgPSB0aGlzLl9jb25maWcub2Zmc2V0XG4gICAgICAgICAgICAgICAgKyBzY3JvbGxIZWlnaHRcbiAgICAgICAgICAgICAgICAtIHRoaXMuX2dldE9mZnNldEhlaWdodCgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX3Njcm9sbEhlaWdodCAhPT0gc2Nyb2xsSGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2Nyb2xsVG9wID49IG1heFNjcm9sbCkge1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSB0aGlzLl90YXJnZXRzW3RoaXMuX3RhcmdldHMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZVRhcmdldCAhPT0gdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FjdGl2YXRlKHRhcmdldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLl9hY3RpdmVUYXJnZXQgJiYgc2Nyb2xsVG9wIDwgdGhpcy5fb2Zmc2V0c1swXSAmJiB0aGlzLl9vZmZzZXRzWzBdID4gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2FjdGl2ZVRhcmdldCA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2xlYXIoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5fb2Zmc2V0cy5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgICAgICAgICB2YXIgaXNBY3RpdmVUYXJnZXQgPSB0aGlzLl9hY3RpdmVUYXJnZXQgIT09IHRoaXMuX3RhcmdldHNbaV1cbiAgICAgICAgICAgICAgICAgICAgJiYgc2Nyb2xsVG9wID49IHRoaXMuX29mZnNldHNbaV1cbiAgICAgICAgICAgICAgICAgICAgJiYgKHRoaXMuX29mZnNldHNbaSArIDFdID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbFRvcCA8IHRoaXMuX29mZnNldHNbaSArIDFdKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNBY3RpdmVUYXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWN0aXZhdGUodGhpcy5fdGFyZ2V0c1tpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBTY3JvbGxTcHkucHJvdG90eXBlLl9hY3RpdmF0ZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZVRhcmdldCA9IHRhcmdldDtcbiAgICAgICAgICAgIHRoaXMuX2NsZWFyKCk7XG4gICAgICAgICAgICB2YXIgcXVlcmllcyA9IHRoaXMuX3NlbGVjdG9yLnNwbGl0KCcsJyk7XG4gICAgICAgICAgICBxdWVyaWVzID0gcXVlcmllcy5tYXAoZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdG9yICsgXCJbZGF0YS10YXJnZXQ9XFxcIlwiICsgdGFyZ2V0ICsgXCJcXFwiXSxcIiArXG4gICAgICAgICAgICAgICAgICAgIChzZWxlY3RvciArIFwiW2hyZWY9XFxcIlwiICsgdGFyZ2V0ICsgXCJcXFwiXVwiKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyICRsaW5rID0gJChxdWVyaWVzLmpvaW4oJywnKSk7XG4gICAgICAgICAgICBpZiAoJGxpbmsuaGFzQ2xhc3MoQ2xhc3NOYW1lLkRST1BET1dOX0lURU0pKSB7XG4gICAgICAgICAgICAgICAgJGxpbmsuY2xvc2VzdChTZWxlY3Rvci5EUk9QRE9XTikuZmluZChTZWxlY3Rvci5EUk9QRE9XTl9UT0dHTEUpLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgICAgICAgICAgICRsaW5rLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gdG9kbyAoZmF0KSB0aGlzIGlzIGtpbmRhIHN1cy4uLlxuICAgICAgICAgICAgICAgIC8vIHJlY3Vyc2l2ZWx5IGFkZCBhY3RpdmVzIHRvIHRlc3RlZCBuYXYtbGlua3NcbiAgICAgICAgICAgICAgICAkbGluay5wYXJlbnRzKFNlbGVjdG9yLkxJKS5maW5kKFwiPiBcIiArIFNlbGVjdG9yLk5BVl9MSU5LUykuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkKHRoaXMuX3Njcm9sbEVsZW1lbnQpLnRyaWdnZXIoRXZlbnQuQUNUSVZBVEUsIHtcbiAgICAgICAgICAgICAgICByZWxhdGVkVGFyZ2V0OiB0YXJnZXRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBTY3JvbGxTcHkucHJvdG90eXBlLl9jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICQodGhpcy5fc2VsZWN0b3IpLmZpbHRlcihTZWxlY3Rvci5BQ1RJVkUpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBzdGF0aWNcbiAgICAgICAgU2Nyb2xsU3B5Ll9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9ICQodGhpcykuZGF0YShEQVRBX0tFWSk7XG4gICAgICAgICAgICAgICAgdmFyIF9jb25maWcgPSB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyAmJiBjb25maWc7XG4gICAgICAgICAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEgPSBuZXcgU2Nyb2xsU3B5KHRoaXMsIF9jb25maWcpO1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmRhdGEoREFUQV9LRVksIGRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFbY29uZmlnXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiICsgY29uZmlnICsgXCJcXFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGRhdGFbY29uZmlnXSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gU2Nyb2xsU3B5O1xuICAgIH0oKSk7XG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cbiAgICAkKHdpbmRvdykub24oRXZlbnQuTE9BRF9EQVRBX0FQSSwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2Nyb2xsU3B5cyA9ICQubWFrZUFycmF5KCQoU2VsZWN0b3IuREFUQV9TUFkpKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IHNjcm9sbFNweXMubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgICAgICB2YXIgJHNweSA9ICQoc2Nyb2xsU3B5c1tpXSk7XG4gICAgICAgICAgICBTY3JvbGxTcHkuX2pRdWVyeUludGVyZmFjZS5jYWxsKCRzcHksICRzcHkuZGF0YSgpKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIGpRdWVyeVxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuICAgICQuZm5bTkFNRV0gPSBTY3JvbGxTcHkuX2pRdWVyeUludGVyZmFjZTtcbiAgICAkLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gU2Nyb2xsU3B5O1xuICAgICQuZm5bTkFNRV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJC5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVDtcbiAgICAgICAgcmV0dXJuIFNjcm9sbFNweS5falF1ZXJ5SW50ZXJmYWNlO1xuICAgIH07XG4gICAgcmV0dXJuIFNjcm9sbFNweTtcbn0pKGpRdWVyeSk7XG5leHBvcnRzLmRlZmF1bHQgPSBTY3JvbGxTcHk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zjg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1GemMyVjBjeTl3WVdOcmN5OWliMjkwYzNSeVlYQXZhbk12YzNKakwzTmpjbTlzYkhOd2VTNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4WlFVRlpMRU5CUVVNN1FVRkRZaXhOUVVGTkxFTkJRVU1zWTBGQll5eERRVUZETEU5QlFVOHNSVUZCUlN4WlFVRlpMRVZCUVVVc1JVRkJSU3hMUVVGTExFVkJRVVVzU1VGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUXp0QlFVTTVSQ3hKUVVGSkxFMUJRVTBzUjBGQlJ5eFBRVUZQTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1FVRkRMMEk3T3pzN08wZEJTMGM3UVVGRFNDeEpRVUZKTEZOQlFWTXNSMEZCUnl4RFFVRkRMRlZCUVZVc1EwRkJRenRKUVVONFFqczdPenRQUVVsSE8wbEJRMGdzU1VGQlNTeEpRVUZKTEVkQlFVY3NWMEZCVnl4RFFVRkRPMGxCUTNaQ0xFbEJRVWtzVDBGQlR5eEhRVUZITEdWQlFXVXNRMEZCUXp0SlFVTTVRaXhKUVVGSkxGRkJRVkVzUjBGQlJ5eGpRVUZqTEVOQlFVTTdTVUZET1VJc1NVRkJTU3hUUVVGVExFZEJRVWNzUjBGQlJ5eEhRVUZITEZGQlFWRXNRMEZCUXp0SlFVTXZRaXhKUVVGSkxGbEJRVmtzUjBGQlJ5eFhRVUZYTEVOQlFVTTdTVUZETDBJc1NVRkJTU3hyUWtGQmEwSXNSMEZCUnl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBsQlEzQkRMRWxCUVVrc1QwRkJUeXhIUVVGSE8xRkJRMVlzVFVGQlRTeEZRVUZGTEVWQlFVVTdVVUZEVml4TlFVRk5MRVZCUVVVc1RVRkJUVHRSUVVOa0xFMUJRVTBzUlVGQlJTeEZRVUZGTzB0QlEySXNRMEZCUXp0SlFVTkdMRWxCUVVrc1YwRkJWeXhIUVVGSE8xRkJRMlFzVFVGQlRTeEZRVUZGTEZGQlFWRTdVVUZEYUVJc1RVRkJUU3hGUVVGRkxGRkJRVkU3VVVGRGFFSXNUVUZCVFN4RlFVRkZMR3RDUVVGclFqdExRVU0zUWl4RFFVRkRPMGxCUTBZc1NVRkJTU3hMUVVGTExFZEJRVWM3VVVGRFVpeFJRVUZSTEVWQlFVVXNWVUZCVlN4SFFVRkhMRk5CUVZNN1VVRkRhRU1zVFVGQlRTeEZRVUZGTEZGQlFWRXNSMEZCUnl4VFFVRlRPMUZCUXpWQ0xHRkJRV0VzUlVGQlJTeE5RVUZOTEVkQlFVY3NVMEZCVXl4SFFVRkhMRmxCUVZrN1MwRkRia1FzUTBGQlF6dEpRVU5HTEVsQlFVa3NVMEZCVXl4SFFVRkhPMUZCUTFvc1lVRkJZU3hGUVVGRkxHVkJRV1U3VVVGRE9VSXNZVUZCWVN4RlFVRkZMR1ZCUVdVN1VVRkRPVUlzVVVGQlVTeEZRVUZGTEZWQlFWVTdVVUZEY0VJc1IwRkJSeXhGUVVGRkxFdEJRVXM3VVVGRFZpeE5RVUZOTEVWQlFVVXNVVUZCVVR0TFFVTnVRaXhEUVVGRE8wbEJRMFlzU1VGQlNTeFJRVUZSTEVkQlFVYzdVVUZEV0N4UlFVRlJMRVZCUVVVc2NVSkJRWEZDTzFGQlF5OUNMRTFCUVUwc1JVRkJSU3hUUVVGVE8xRkJRMnBDTEZOQlFWTXNSVUZCUlN4WlFVRlpPMUZCUTNaQ0xFVkJRVVVzUlVGQlJTeEpRVUZKTzFGQlExSXNWMEZCVnl4RlFVRkZMR0ZCUVdFN1VVRkRNVUlzVTBGQlV5eEZRVUZGTEZkQlFWYzdVVUZEZEVJc1VVRkJVU3hGUVVGRkxGZEJRVmM3VVVGRGNrSXNZMEZCWXl4RlFVRkZMR2RDUVVGblFqdFJRVU5vUXl4bFFVRmxMRVZCUVVVc2EwSkJRV3RDTzB0QlEzUkRMRU5CUVVNN1NVRkRSaXhKUVVGSkxGbEJRVmtzUjBGQlJ6dFJRVU5tTEUxQlFVMHNSVUZCUlN4UlFVRlJPMUZCUTJoQ0xGRkJRVkVzUlVGQlJTeFZRVUZWTzB0QlEzWkNMRU5CUVVNN1NVRkRSanM3T3p0UFFVbEhPMGxCUTBnc1NVRkJTU3hUUVVGVExFZEJRVWNzUTBGQlF6dFJRVU5pTEcxQ1FVRnRRaXhQUVVGUExFVkJRVVVzVFVGQlRUdFpRVU01UWl4SlFVRkpMRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU03V1VGRGFrSXNTVUZCU1N4RFFVRkRMRkZCUVZFc1IwRkJSeXhQUVVGUExFTkJRVU03V1VGRGVFSXNTVUZCU1N4RFFVRkRMR05CUVdNc1IwRkJSeXhQUVVGUExFTkJRVU1zVDBGQlR5eExRVUZMTEUxQlFVMHNSMEZCUnl4TlFVRk5MRWRCUVVjc1QwRkJUeXhEUVVGRE8xbEJRM0JGTEVsQlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0WlFVTjJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1RVRkJUU3hIUVVGSExFZEJRVWNzUjBGQlJ5eFJRVUZSTEVOQlFVTXNVMEZCVXl4SFFVRkhMRWRCUVVjN2EwSkJReTlFTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhOUVVGTkxFZEJRVWNzUjBGQlJ5eEhRVUZITEZGQlFWRXNRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJRenRaUVVNMVJDeEpRVUZKTEVOQlFVTXNVVUZCVVN4SFFVRkhMRVZCUVVVc1EwRkJRenRaUVVOdVFpeEpRVUZKTEVOQlFVTXNVVUZCVVN4SFFVRkhMRVZCUVVVc1EwRkJRenRaUVVOdVFpeEpRVUZKTEVOQlFVTXNZVUZCWVN4SFFVRkhMRWxCUVVrc1EwRkJRenRaUVVNeFFpeEpRVUZKTEVOQlFVTXNZVUZCWVN4SFFVRkhMRU5CUVVNc1EwRkJRenRaUVVOMlFpeERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4RlFVRkZMRlZCUVZVc1MwRkJTeXhKUVVGSkxFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdXVUZETlVZc1NVRkJTU3hEUVVGRExFOUJRVThzUlVGQlJTeERRVUZETzFsQlEyWXNTVUZCU1N4RFFVRkRMRkZCUVZFc1JVRkJSU3hEUVVGRE8xRkJRM0JDTEVOQlFVTTdVVUZEUkN4TlFVRk5MRU5CUVVNc1kwRkJZeXhEUVVGRExGTkJRVk1zUlVGQlJTeFRRVUZUTEVWQlFVVTdXVUZEZUVNc1ZVRkJWVHRaUVVOV0xFZEJRVWNzUlVGQlJUdG5Ra0ZEUkN4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRE8xbEJRMjVDTEVOQlFVTTdXVUZEUkN4VlFVRlZMRVZCUVVVc1NVRkJTVHRaUVVOb1FpeFpRVUZaTEVWQlFVVXNTVUZCU1R0VFFVTnlRaXhEUVVGRExFTkJRVU03VVVGRFNDeE5RVUZOTEVOQlFVTXNZMEZCWXl4RFFVRkRMRk5CUVZNc1JVRkJSU3hUUVVGVExFVkJRVVU3V1VGRGVFTXNSMEZCUnl4RlFVRkZPMmRDUVVORUxFMUJRVTBzUTBGQlF5eFBRVUZQTEVOQlFVTTdXVUZEYmtJc1EwRkJRenRaUVVORUxGVkJRVlVzUlVGQlJTeEpRVUZKTzFsQlEyaENMRmxCUVZrc1JVRkJSU3hKUVVGSk8xTkJRM0pDTEVOQlFVTXNRMEZCUXp0UlFVTklMRk5CUVZNN1VVRkRWQ3hUUVVGVExFTkJRVU1zVTBGQlV5eERRVUZETEU5QlFVOHNSMEZCUnp0WlFVTXhRaXhKUVVGSkxFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTTdXVUZEYWtJc1NVRkJTU3hWUVVGVkxFZEJRVWNzU1VGQlNTeERRVUZETEdOQlFXTXNTMEZCU3l4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExFMUJRVTA3WjBKQlF5OUVMRmxCUVZrc1EwRkJReXhSUVVGUkxFZEJRVWNzV1VGQldTeERRVUZETEUxQlFVMHNRMEZCUXp0WlFVTm9SQ3hKUVVGSkxGbEJRVmtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTFCUVUwc1MwRkJTeXhOUVVGTk8yZENRVU0zUXl4VlFVRlZMRWRCUVVjc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eE5RVUZOTEVOQlFVTTdXVUZEY2tNc1NVRkJTU3hWUVVGVkxFZEJRVWNzV1VGQldTeExRVUZMTEZsQlFWa3NRMEZCUXl4UlFVRlJPMmRDUVVOdVJDeEpRVUZKTEVOQlFVTXNZVUZCWVN4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRE8xbEJRemRDTEVsQlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc1JVRkJSU3hEUVVGRE8xbEJRMjVDTEVsQlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc1JVRkJSU3hEUVVGRE8xbEJRMjVDTEVsQlFVa3NRMEZCUXl4aFFVRmhMRWRCUVVjc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RlFVRkZMRU5CUVVNN1dVRkROME1zU1VGQlNTeFBRVUZQTEVkQlFVY3NRMEZCUXl4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkROME1zVDBGQlR6dHBRa0ZEUml4SFFVRkhMRU5CUVVNc1ZVRkJWU3hQUVVGUE8yZENRVU4wUWl4SlFVRkpMRTFCUVUwc1EwRkJRenRuUWtGRFdDeEpRVUZKTEdOQlFXTXNSMEZCUnl4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExITkNRVUZ6UWl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE8yZENRVU53UlN4RlFVRkZMRU5CUVVNc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF5eERRVUZETzI5Q1FVTnFRaXhOUVVGTkxFZEJRVWNzUTBGQlF5eERRVUZETEdOQlFXTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8yZENRVU5zUXl4RFFVRkRPMmRDUVVORUxFVkJRVVVzUTBGQlF5eERRVUZETEUxQlFVMHNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhYUVVGWExFbEJRVWtzVFVGQlRTeERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenR2UWtGRGVFUXNLMFJCUVN0RU8yOUNRVU12UkN4TlFVRk5MRU5CUVVNN2QwSkJRMGdzUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRmxCUVZrc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eEhRVUZITEZWQlFWVTdkMEpCUXpGRExHTkJRV003Y1VKQlEycENMRU5CUVVNN1owSkJRMDRzUTBGQlF6dG5Ra0ZEUkN4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRE8xbEJRMmhDTEVOQlFVTXNRMEZCUXp0cFFrRkRSeXhOUVVGTkxFTkJRVU1zVlVGQlZTeEpRVUZKTEVsQlFVa3NUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dHBRa0ZEZUVNc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eEZRVUZGTEVOQlFVTXNTVUZCU1N4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dHBRa0ZETjBNc1QwRkJUeXhEUVVGRExGVkJRVlVzU1VGQlNUdG5Ra0ZEZGtJc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlF6ZENMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRMnBETEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTFBc1EwRkJReXhEUVVGRE8xRkJRMFlzVTBGQlV5eERRVUZETEZOQlFWTXNRMEZCUXl4UFFVRlBMRWRCUVVjN1dVRkRNVUlzUTBGQlF5eERRVUZETEZWQlFWVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hGUVVGRkxGRkJRVkVzUTBGQlF5eERRVUZETzFsQlEzUkRMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRE8xbEJRM1JETEVsQlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc1NVRkJTU3hEUVVGRE8xbEJRM0pDTEVsQlFVa3NRMEZCUXl4alFVRmpMRWRCUVVjc1NVRkJTU3hEUVVGRE8xbEJRek5DTEVsQlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1NVRkJTU3hEUVVGRE8xbEJRM0JDTEVsQlFVa3NRMEZCUXl4VFFVRlRMRWRCUVVjc1NVRkJTU3hEUVVGRE8xbEJRM1JDTEVsQlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc1NVRkJTU3hEUVVGRE8xbEJRM0pDTEVsQlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc1NVRkJTU3hEUVVGRE8xbEJRM0pDTEVsQlFVa3NRMEZCUXl4aFFVRmhMRWRCUVVjc1NVRkJTU3hEUVVGRE8xbEJRekZDTEVsQlFVa3NRMEZCUXl4aFFVRmhMRWRCUVVjc1NVRkJTU3hEUVVGRE8xRkJRemxDTEVOQlFVTXNRMEZCUXp0UlFVTkdMRlZCUVZVN1VVRkRWaXhUUVVGVExFTkJRVU1zVTBGQlV5eERRVUZETEZWQlFWVXNSMEZCUnl4VlFVRlZMRTFCUVUwN1dVRkROME1zVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1JVRkJSU3hGUVVGRkxFOUJRVThzUlVGQlJTeE5RVUZOTEVOQlFVTXNRMEZCUXp0WlFVTjJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eFBRVUZQTEUxQlFVMHNRMEZCUXl4TlFVRk5MRXRCUVVzc1VVRkJVU3hEUVVGRExFTkJRVU1zUTBGQlF6dG5Ra0ZEY0VNc1NVRkJTU3hGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdaMEpCUTNKRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenR2UWtGRFRpeEZRVUZGTEVkQlFVY3NUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdiMEpCUTJwRExFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXp0blFrRkRjRU1zUTBGQlF6dG5Ra0ZEUkN4TlFVRk5MRU5CUVVNc1RVRkJUU3hIUVVGSExFZEJRVWNzUjBGQlJ5eEZRVUZGTEVOQlFVTTdXVUZETjBJc1EwRkJRenRaUVVORUxFMUJRVTBzUTBGQlF5eFBRVUZQTEVOQlFVTXNaVUZCWlN4RFFVRkRMRWxCUVVrc1JVRkJSU3hOUVVGTkxFVkJRVVVzVjBGQlZ5eERRVUZETEVOQlFVTTdXVUZETVVRc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF6dFJRVU5zUWl4RFFVRkRMRU5CUVVNN1VVRkRSaXhUUVVGVExFTkJRVU1zVTBGQlV5eERRVUZETEdGQlFXRXNSMEZCUnp0WlFVTm9ReXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEdOQlFXTXNTMEZCU3l4TlFVRk5PMmRDUVVOcVF5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRmRCUVZjc1IwRkJSeXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEZOQlFWTXNRMEZCUXp0UlFVTjRSU3hEUVVGRExFTkJRVU03VVVGRFJpeFRRVUZUTEVOQlFVTXNVMEZCVXl4RFFVRkRMR2RDUVVGblFpeEhRVUZITzFsQlEyNURMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEZsQlFWa3NTVUZCU1N4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNXVUZCV1N4RlFVRkZMRkZCUVZFc1EwRkJReXhsUVVGbExFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTTdVVUZETTBnc1EwRkJReXhEUVVGRE8xRkJRMFlzVTBGQlV5eERRVUZETEZOQlFWTXNRMEZCUXl4blFrRkJaMElzUjBGQlJ6dFpRVU51UXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExHTkJRV01zUzBGQlN5eE5RVUZOTzJkQ1FVTnFReXhOUVVGTkxFTkJRVU1zVjBGQlZ5eEhRVUZITEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1dVRkJXU3hEUVVGRE8xRkJRemxFTEVOQlFVTXNRMEZCUXp0UlFVTkdMRk5CUVZNc1EwRkJReXhUUVVGVExFTkJRVU1zVVVGQlVTeEhRVUZITzFsQlF6TkNMRWxCUVVrc1UwRkJVeXhIUVVGSExFbEJRVWtzUTBGQlF5eGhRVUZoTEVWQlFVVXNSMEZCUnl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF6dFpRVU16UkN4SlFVRkpMRmxCUVZrc1IwRkJSeXhKUVVGSkxFTkJRVU1zWjBKQlFXZENMRVZCUVVVc1EwRkJRenRaUVVNelF5eEpRVUZKTEZOQlFWTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTA3YTBKQlF6ZENMRmxCUVZrN2EwSkJRMW9zU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhGUVVGRkxFTkJRVU03V1VGRE9VSXNSVUZCUlN4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExHRkJRV0VzUzBGQlN5eFpRVUZaTEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVOMFF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RlFVRkZMRU5CUVVNN1dVRkRia0lzUTBGQlF6dFpRVU5FTEVWQlFVVXNRMEZCUXl4RFFVRkRMRk5CUVZNc1NVRkJTU3hUUVVGVExFTkJRVU1zUTBGQlF5eERRVUZETzJkQ1FVTjZRaXhKUVVGSkxFMUJRVTBzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVOeVJDeEZRVUZGTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1lVRkJZU3hMUVVGTExFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTTdiMEpCUTJoRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1owSkJRek5DTEVOQlFVTTdaMEpCUTBRc1RVRkJUU3hEUVVGRE8xbEJRMWdzUTBGQlF6dFpRVU5FTEVWQlFVVXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhoUVVGaExFbEJRVWtzVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzJkQ1FVTTNSU3hKUVVGSkxFTkJRVU1zWVVGQllTeEhRVUZITEVsQlFVa3NRMEZCUXp0blFrRkRNVUlzU1VGQlNTeERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRPMmRDUVVOa0xFMUJRVTBzUTBGQlF6dFpRVU5ZTEVOQlFVTTdXVUZEUkN4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRExFVkJRVVVzUjBGQlJ5eERRVUZETzJkQ1FVTjBReXhKUVVGSkxHTkJRV01zUjBGQlJ5eEpRVUZKTEVOQlFVTXNZVUZCWVN4TFFVRkxMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eERRVUZETzNWQ1FVTnlSQ3hUUVVGVExFbEJRVWtzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNN2RVSkJRemRDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEV0QlFVc3NVMEZCVXp0M1FrRkRiRU1zVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUXpGRExFVkJRVVVzUTBGQlF5eERRVUZETEdOQlFXTXNRMEZCUXl4RFFVRkRMRU5CUVVNN2IwSkJRMnBDTEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVOeVF5eERRVUZETzFsQlEwd3NRMEZCUXp0UlFVTk1MRU5CUVVNc1EwRkJRenRSUVVOR0xGTkJRVk1zUTBGQlF5eFRRVUZUTEVOQlFVTXNVMEZCVXl4SFFVRkhMRlZCUVZVc1RVRkJUVHRaUVVNMVF5eEpRVUZKTEVOQlFVTXNZVUZCWVN4SFFVRkhMRTFCUVUwc1EwRkJRenRaUVVNMVFpeEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNN1dVRkRaQ3hKUVVGSkxFOUJRVThzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dFpRVU40UXl4UFFVRlBMRWRCUVVjc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eFZRVUZWTEZGQlFWRTdaMEpCUTNCRExFMUJRVTBzUTBGQlF5eFJRVUZSTEVkQlFVY3NhVUpCUVdsQ0xFZEJRVWNzVFVGQlRTeEhRVUZITEUxQlFVMDdiMEpCUTJwRUxFTkJRVU1zVVVGQlVTeEhRVUZITEZWQlFWVXNSMEZCUnl4TlFVRk5MRWRCUVVjc1MwRkJTeXhEUVVGRExFTkJRVU03V1VGRGFrUXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRTQ3hKUVVGSkxFdEJRVXNzUjBGQlJ5eERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEycERMRVZCUVVVc1EwRkJReXhEUVVGRExFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTXNVMEZCVXl4RFFVRkRMR0ZCUVdFc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dG5Ra0ZETVVNc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlF5eFJRVUZSTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eGxRVUZsTEVOQlFVTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1UwRkJVeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzJkQ1FVTXpSaXhMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRaUVVOeVF5eERRVUZETzFsQlEwUXNTVUZCU1N4RFFVRkRMRU5CUVVNN1owSkJRMFlzYTBOQlFXdERPMmRDUVVOc1F5dzRRMEZCT0VNN1owSkJRemxETEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc1VVRkJVU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1VVRkJVU3hEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETEZGQlFWRXNRMEZCUXl4VFFVRlRMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03V1VGRE1VWXNRMEZCUXp0WlFVTkVMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkRMRXRCUVVzc1EwRkJReXhSUVVGUkxFVkJRVVU3WjBKQlF6TkRMR0ZCUVdFc1JVRkJSU3hOUVVGTk8yRkJRM2hDTEVOQlFVTXNRMEZCUXp0UlFVTlFMRU5CUVVNc1EwRkJRenRSUVVOR0xGTkJRVk1zUTBGQlF5eFRRVUZUTEVOQlFVTXNUVUZCVFN4SFFVRkhPMWxCUTNwQ0xFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4WFFVRlhMRU5CUVVNc1UwRkJVeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzFGQlF6VkZMRU5CUVVNc1EwRkJRenRSUVVOR0xGTkJRVk03VVVGRFZDeFRRVUZUTEVOQlFVTXNaMEpCUVdkQ0xFZEJRVWNzVlVGQlZTeE5RVUZOTzFsQlEzcERMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETzJkQ1FVTmlMRWxCUVVrc1NVRkJTU3hIUVVGSExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03WjBKQlEyeERMRWxCUVVrc1QwRkJUeXhIUVVGSExFOUJRVThzVFVGQlRTeExRVUZMTEZGQlFWRXNTVUZCU1N4TlFVRk5MRU5CUVVNN1owSkJRMjVFTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF6dHZRa0ZEVWl4SlFVRkpMRWRCUVVjc1NVRkJTU3hUUVVGVExFTkJRVU1zU1VGQlNTeEZRVUZGTEU5QlFVOHNRMEZCUXl4RFFVRkRPMjlDUVVOd1F5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXp0blFrRkRha01zUTBGQlF6dG5Ra0ZEUkN4RlFVRkZMRU5CUVVNc1EwRkJReXhQUVVGUExFMUJRVTBzUzBGQlN5eFJRVUZSTEVOQlFVTXNRMEZCUXl4RFFVRkRPMjlDUVVNM1FpeEZRVUZGTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFdEJRVXNzVTBGQlV5eERRVUZETEVOQlFVTXNRMEZCUXp0M1FrRkROMElzVFVGQlRTeEpRVUZKTEV0QlFVc3NRMEZCUXl4dlFrRkJiMElzUjBGQlJ5eE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRMRU5CUVVNN2IwSkJRekZFTEVOQlFVTTdiMEpCUTBRc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eEZRVUZGTEVOQlFVTTdaMEpCUTI1Q0xFTkJRVU03V1VGRFRDeERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTlFMRU5CUVVNc1EwRkJRenRSUVVOR0xFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTTdTVUZEY2tJc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dEpRVU5NT3pzN08wOUJTVWM3U1VGRFNDeERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFdEJRVXNzUTBGQlF5eGhRVUZoTEVWQlFVVTdVVUZET1VJc1NVRkJTU3hWUVVGVkxFZEJRVWNzUTBGQlF5eERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1VVRkJVU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEYmtRc1IwRkJSeXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NWVUZCVlN4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRExFVkJRVVVzUjBGQlJ5eERRVUZETzFsQlEyNURMRWxCUVVrc1NVRkJTU3hIUVVGSExFTkJRVU1zUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVNMVFpeFRRVUZUTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVU4yUkN4RFFVRkRPMGxCUTB3c1EwRkJReXhEUVVGRExFTkJRVU03U1VGRFNEczdPenRQUVVsSE8wbEJRMGdzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhUUVVGVExFTkJRVU1zWjBKQlFXZENMRU5CUVVNN1NVRkRlRU1zUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhYUVVGWExFZEJRVWNzVTBGQlV5eERRVUZETzBsQlEyNURMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNWVUZCVlN4SFFVRkhPMUZCUTNCQ0xFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc2EwSkJRV3RDTEVOQlFVTTdVVUZEYUVNc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eG5Ra0ZCWjBJc1EwRkJRenRKUVVOMFF5eERRVUZETEVOQlFVTTdTVUZEUml4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRE8wRkJRM0pDTEVOQlFVTXNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8wRkJRMWdzVDBGQlR5eERRVUZETEU5QlFVOHNSMEZCUnl4VFFVRlRMRU5CUVVNaUxDSm1hV3hsSWpvaVlYTnpaWFJ6TDNCaFkydHpMMkp2YjNSemRISmhjQzlxY3k5emNtTXZjMk55YjJ4c2MzQjVMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0pmWDJWelRXOWtkV3hsWENJc0lIc2dkbUZzZFdVNklIUnlkV1VnZlNrN1hHNTJZWElnZFhScGJGOHhJRDBnY21WeGRXbHlaU2hjSWk0dmRYUnBiRndpS1R0Y2JpOHFLbHh1SUNvZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMWNiaUFxSUVKdmIzUnpkSEpoY0NBb2RqUXVNQzR3TFdGc2NHaGhMallwT2lCelkzSnZiR3h6Y0hrdWFuTmNiaUFxSUV4cFkyVnVjMlZrSUhWdVpHVnlJRTFKVkNBb2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwzUjNZbk12WW05dmRITjBjbUZ3TDJKc2IySXZiV0Z6ZEdWeUwweEpRMFZPVTBVcFhHNGdLaUF0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFZ4dUlDb3ZYRzUyWVhJZ1UyTnliMnhzVTNCNUlEMGdLR1oxYm1OMGFXOXVJQ2drS1NCN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdFhHNGdJQ0FnSUNvZ1EyOXVjM1JoYm5SelhHNGdJQ0FnSUNvZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdFhHNGdJQ0FnSUNvdlhHNGdJQ0FnZG1GeUlFNUJUVVVnUFNBbmMyTnliMnhzYzNCNUp6dGNiaUFnSUNCMllYSWdWa1ZTVTBsUFRpQTlJQ2MwTGpBdU1DMWhiSEJvWVM0Mkp6dGNiaUFnSUNCMllYSWdSRUZVUVY5TFJWa2dQU0FuWW5NdWMyTnliMnhzYzNCNUp6dGNiaUFnSUNCMllYSWdSVlpGVGxSZlMwVlpJRDBnWENJdVhDSWdLeUJFUVZSQlgwdEZXVHRjYmlBZ0lDQjJZWElnUkVGVVFWOUJVRWxmUzBWWklEMGdKeTVrWVhSaExXRndhU2M3WEc0Z0lDQWdkbUZ5SUVwUlZVVlNXVjlPVDE5RFQwNUdURWxEVkNBOUlDUXVabTViVGtGTlJWMDdYRzRnSUNBZ2RtRnlJRVJsWm1GMWJIUWdQU0I3WEc0Z0lDQWdJQ0FnSUc5bVpuTmxkRG9nTVRBc1hHNGdJQ0FnSUNBZ0lHMWxkR2h2WkRvZ0oyRjFkRzhuTEZ4dUlDQWdJQ0FnSUNCMFlYSm5aWFE2SUNjblhHNGdJQ0FnZlR0Y2JpQWdJQ0IyWVhJZ1JHVm1ZWFZzZEZSNWNHVWdQU0I3WEc0Z0lDQWdJQ0FnSUc5bVpuTmxkRG9nSjI1MWJXSmxjaWNzWEc0Z0lDQWdJQ0FnSUcxbGRHaHZaRG9nSjNOMGNtbHVaeWNzWEc0Z0lDQWdJQ0FnSUhSaGNtZGxkRG9nSnloemRISnBibWQ4Wld4bGJXVnVkQ2tuWEc0Z0lDQWdmVHRjYmlBZ0lDQjJZWElnUlhabGJuUWdQU0I3WEc0Z0lDQWdJQ0FnSUVGRFZFbFdRVlJGT2lCY0ltRmpkR2wyWVhSbFhDSWdLeUJGVmtWT1ZGOUxSVmtzWEc0Z0lDQWdJQ0FnSUZORFVrOU1URG9nWENKelkzSnZiR3hjSWlBcklFVldSVTVVWDB0RldTeGNiaUFnSUNBZ0lDQWdURTlCUkY5RVFWUkJYMEZRU1RvZ1hDSnNiMkZrWENJZ0t5QkZWa1ZPVkY5TFJWa2dLeUJFUVZSQlgwRlFTVjlMUlZsY2JpQWdJQ0I5TzF4dUlDQWdJSFpoY2lCRGJHRnpjMDVoYldVZ1BTQjdYRzRnSUNBZ0lDQWdJRVJTVDFCRVQxZE9YMGxVUlUwNklDZGtjbTl3Wkc5M2JpMXBkR1Z0Snl4Y2JpQWdJQ0FnSUNBZ1JGSlBVRVJQVjA1ZlRVVk9WVG9nSjJSeWIzQmtiM2R1TFcxbGJuVW5MRnh1SUNBZ0lDQWdJQ0JPUVZaZlRFbE9Tem9nSjI1aGRpMXNhVzVySnl4Y2JpQWdJQ0FnSUNBZ1RrRldPaUFuYm1GMkp5eGNiaUFnSUNBZ0lDQWdRVU5VU1ZaRk9pQW5ZV04wYVhabEoxeHVJQ0FnSUgwN1hHNGdJQ0FnZG1GeUlGTmxiR1ZqZEc5eUlEMGdlMXh1SUNBZ0lDQWdJQ0JFUVZSQlgxTlFXVG9nSjF0a1lYUmhMWE53ZVQxY0luTmpjbTlzYkZ3aVhTY3NYRzRnSUNBZ0lDQWdJRUZEVkVsV1JUb2dKeTVoWTNScGRtVW5MRnh1SUNBZ0lDQWdJQ0JNU1ZOVVgwbFVSVTA2SUNjdWJHbHpkQzFwZEdWdEp5eGNiaUFnSUNBZ0lDQWdURWs2SUNkc2FTY3NYRzRnSUNBZ0lDQWdJRXhKWDBSU1QxQkVUMWRPT2lBbmJHa3VaSEp2Y0dSdmQyNG5MRnh1SUNBZ0lDQWdJQ0JPUVZaZlRFbE9TMU02SUNjdWJtRjJMV3hwYm1zbkxGeHVJQ0FnSUNBZ0lDQkVVazlRUkU5WFRqb2dKeTVrY205d1pHOTNiaWNzWEc0Z0lDQWdJQ0FnSUVSU1QxQkVUMWRPWDBsVVJVMVRPaUFuTG1SeWIzQmtiM2R1TFdsMFpXMG5MRnh1SUNBZ0lDQWdJQ0JFVWs5UVJFOVhUbDlVVDBkSFRFVTZJQ2N1WkhKdmNHUnZkMjR0ZEc5bloyeGxKMXh1SUNBZ0lIMDdYRzRnSUNBZ2RtRnlJRTltWm5ObGRFMWxkR2h2WkNBOUlIdGNiaUFnSUNBZ0lDQWdUMFpHVTBWVU9pQW5iMlptYzJWMEp5eGNiaUFnSUNBZ0lDQWdVRTlUU1ZSSlQwNDZJQ2R3YjNOcGRHbHZiaWRjYmlBZ0lDQjlPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMVnh1SUNBZ0lDQXFJRU5zWVhOeklFUmxabWx1YVhScGIyNWNiaUFnSUNBZ0tpQXRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMWNiaUFnSUNBZ0tpOWNiaUFnSUNCMllYSWdVMk55YjJ4c1UzQjVJRDBnS0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdVMk55YjJ4c1UzQjVLR1ZzWlcxbGJuUXNJR052Ym1acFp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJRjkwYUdseklEMGdkR2hwY3p0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyVnNaVzFsYm5RZ1BTQmxiR1Z0Wlc1ME8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZjMk55YjJ4c1JXeGxiV1Z1ZENBOUlHVnNaVzFsYm5RdWRHRm5UbUZ0WlNBOVBUMGdKMEpQUkZrbklEOGdkMmx1Wkc5M0lEb2daV3hsYldWdWREdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMk52Ym1acFp5QTlJSFJvYVhNdVgyZGxkRU52Ym1acFp5aGpiMjVtYVdjcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZjMlZzWldOMGIzSWdQU0IwYUdsekxsOWpiMjVtYVdjdWRHRnlaMlYwSUNzZ1hDSWdYQ0lnS3lCVFpXeGxZM1J2Y2k1T1FWWmZURWxPUzFNZ0t5QmNJaXhjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNzZ0tIUm9hWE11WDJOdmJtWnBaeTUwWVhKblpYUWdLeUJjSWlCY0lpQXJJRk5sYkdWamRHOXlMa1JTVDFCRVQxZE9YMGxVUlUxVEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMjltWm5ObGRITWdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzUmhjbWRsZEhNZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJGamRHbDJaVlJoY21kbGRDQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXpZM0p2Ykd4SVpXbG5hSFFnUFNBd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSkNoMGFHbHpMbDl6WTNKdmJHeEZiR1Z0Wlc1MEtTNXZiaWhGZG1WdWRDNVRRMUpQVEV3c0lHWjFibU4wYVc5dUlDaGxkbVZ1ZENrZ2V5QnlaWFIxY200Z1gzUm9hWE11WDNCeWIyTmxjM01vWlhabGJuUXBPeUI5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNtVm1jbVZ6YUNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZjSEp2WTJWemN5Z3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaFRZM0p2Ykd4VGNIa3NJRndpVmtWU1UwbFBUbHdpTENCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCblpYUjBaWEp6WEc0Z0lDQWdJQ0FnSUNBZ0lDQm5aWFE2SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1ZrVlNVMGxQVGp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiblZ0WlhKaFlteGxPaUIwY25WbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dVptbG5kWEpoWW14bE9pQjBjblZsWEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvVTJOeWIyeHNVM0I1TENCY0lrUmxabUYxYkhSY0lpd2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1oyVjBPaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUVSbFptRjFiSFE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym1acFozVnlZV0pzWlRvZ2RISjFaVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0x5OGdjSFZpYkdsalhHNGdJQ0FnSUNBZ0lGTmpjbTlzYkZOd2VTNXdjbTkwYjNSNWNHVXVjbVZtY21WemFDQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCZmRHaHBjeUE5SUhSb2FYTTdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdZWFYwYjAxbGRHaHZaQ0E5SUhSb2FYTXVYM05qY205c2JFVnNaVzFsYm5RZ0lUMDlJSFJvYVhNdVgzTmpjbTlzYkVWc1pXMWxiblF1ZDJsdVpHOTNJRDljYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JQWm1aelpYUk5aWFJvYjJRdVVFOVRTVlJKVDA0Z09pQlBabVp6WlhSTlpYUm9iMlF1VDBaR1UwVlVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJRzltWm5ObGRFMWxkR2h2WkNBOUlIUm9hWE11WDJOdmJtWnBaeTV0WlhSb2IyUWdQVDA5SUNkaGRYUnZKeUEvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVhWMGIwMWxkR2h2WkNBNklIUm9hWE11WDJOdmJtWnBaeTV0WlhSb2IyUTdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdiMlptYzJWMFFtRnpaU0E5SUc5bVpuTmxkRTFsZEdodlpDQTlQVDBnVDJabWMyVjBUV1YwYUc5a0xsQlBVMGxVU1U5T0lEOWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5blpYUlRZM0p2Ykd4VWIzQW9LU0E2SURBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXZabVp6WlhSeklEMGdXMTA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5MFlYSm5aWFJ6SUQwZ1cxMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl6WTNKdmJHeElaV2xuYUhRZ1BTQjBhR2x6TGw5blpYUlRZM0p2Ykd4SVpXbG5hSFFvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCMFlYSm5aWFJ6SUQwZ0pDNXRZV3RsUVhKeVlYa29KQ2gwYUdsekxsOXpaV3hsWTNSdmNpa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHRnlaMlYwYzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1dFlYQW9ablZ1WTNScGIyNGdLR1ZzWlcxbGJuUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2RHRnlaMlYwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQjBZWEpuWlhSVFpXeGxZM1J2Y2lBOUlIVjBhV3hmTVM1a1pXWmhkV3gwTG1kbGRGTmxiR1ZqZEc5eVJuSnZiVVZzWlcxbGJuUW9aV3hsYldWdWRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSaGNtZGxkRk5sYkdWamRHOXlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUmhjbWRsZENBOUlDUW9kR0Z5WjJWMFUyVnNaV04wYjNJcFd6QmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHRnlaMlYwSUNZbUlDaDBZWEpuWlhRdWIyWm1jMlYwVjJsa2RHZ2dmSHdnZEdGeVoyVjBMbTltWm5ObGRFaGxhV2RvZENrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2RHOWtieUFvWm1GMEtUb2djbVZ0YjNabElITnJaWFJqYUNCeVpXeHBZVzVqWlNCdmJpQnFVWFZsY25rZ2NHOXphWFJwYjI0dmIyWm1jMlYwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCYlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa0tIUmhjbWRsZENsYmIyWm1jMlYwVFdWMGFHOWtYU2dwTG5SdmNDQXJJRzltWm5ObGRFSmhjMlVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwWVhKblpYUlRaV3hsWTNSdmNseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xtWnBiSFJsY2lobWRXNWpkR2x2YmlBb2FYUmxiU2tnZXlCeVpYUjFjbTRnYVhSbGJUc2dmU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F1YzI5eWRDaG1kVzVqZEdsdmJpQW9ZU3dnWWlrZ2V5QnlaWFIxY200Z1lWc3dYU0F0SUdKYk1GMDdJSDBwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0dsMFpXMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NWZiMlptYzJWMGN5NXdkWE5vS0dsMFpXMWJNRjBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbDkwWVhKblpYUnpMbkIxYzJnb2FYUmxiVnN4WFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdVMk55YjJ4c1UzQjVMbkJ5YjNSdmRIbHdaUzVrYVhOd2IzTmxJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSkM1eVpXMXZkbVZFWVhSaEtIUm9hWE11WDJWc1pXMWxiblFzSUVSQlZFRmZTMFZaS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ1FvZEdocGN5NWZjMk55YjJ4c1JXeGxiV1Z1ZENrdWIyWm1LRVZXUlU1VVgwdEZXU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5bGJHVnRaVzUwSUQwZ2JuVnNiRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNOamNtOXNiRVZzWlcxbGJuUWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZZMjl1Wm1sbklEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzTmxiR1ZqZEc5eUlEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyOW1abk5sZEhNZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmRHRnlaMlYwY3lBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5aFkzUnBkbVZVWVhKblpYUWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZjMk55YjJ4c1NHVnBaMmgwSUQwZ2JuVnNiRHRjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ0x5OGdjSEpwZG1GMFpWeHVJQ0FnSUNBZ0lDQlRZM0p2Ykd4VGNIa3VjSEp2ZEc5MGVYQmxMbDluWlhSRGIyNW1hV2NnUFNCbWRXNWpkR2x2YmlBb1kyOXVabWxuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1bWFXY2dQU0FrTG1WNGRHVnVaQ2g3ZlN3Z1JHVm1ZWFZzZEN3Z1kyOXVabWxuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnWTI5dVptbG5MblJoY21kbGRDQWhQVDBnSjNOMGNtbHVaeWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdhV1FnUFNBa0tHTnZibVpwWnk1MFlYSm5aWFFwTG1GMGRISW9KMmxrSnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZwWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWkNBOUlIVjBhV3hmTVM1a1pXWmhkV3gwTG1kbGRGVkpSQ2hPUVUxRktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSkNoamIyNW1hV2N1ZEdGeVoyVjBLUzVoZEhSeUtDZHBaQ2NzSUdsa0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1Wm1sbkxuUmhjbWRsZENBOUlGd2lJMXdpSUNzZ2FXUTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0IxZEdsc1h6RXVaR1ZtWVhWc2RDNTBlWEJsUTJobFkydERiMjVtYVdjb1RrRk5SU3dnWTI5dVptbG5MQ0JFWldaaGRXeDBWSGx3WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMjl1Wm1sbk8xeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0JUWTNKdmJHeFRjSGt1Y0hKdmRHOTBlWEJsTGw5blpYUlRZM0p2Ykd4VWIzQWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmMyTnliMnhzUld4bGJXVnVkQ0E5UFQwZ2QybHVaRzkzSUQ5Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl6WTNKdmJHeEZiR1Z0Wlc1MExuQmhaMlZaVDJabWMyVjBJRG9nZEdocGN5NWZjMk55YjJ4c1JXeGxiV1Z1ZEM1elkzSnZiR3hVYjNBN1hHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJRk5qY205c2JGTndlUzV3Y205MGIzUjVjR1V1WDJkbGRGTmpjbTlzYkVobGFXZG9kQ0E5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXpZM0p2Ykd4RmJHVnRaVzUwTG5OamNtOXNiRWhsYVdkb2RDQjhmQ0JOWVhSb0xtMWhlQ2hrYjJOMWJXVnVkQzVpYjJSNUxuTmpjbTlzYkVobGFXZG9kQ3dnWkc5amRXMWxiblF1Wkc5amRXMWxiblJGYkdWdFpXNTBMbk5qY205c2JFaGxhV2RvZENrN1hHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJRk5qY205c2JGTndlUzV3Y205MGIzUjVjR1V1WDJkbGRFOW1abk5sZEVobGFXZG9kQ0E5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXpZM0p2Ykd4RmJHVnRaVzUwSUQwOVBTQjNhVzVrYjNjZ1AxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZHBibVJ2ZHk1cGJtNWxja2hsYVdkb2RDQTZJSFJvYVhNdVgzTmpjbTlzYkVWc1pXMWxiblF1YjJabWMyVjBTR1ZwWjJoME8xeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0JUWTNKdmJHeFRjSGt1Y0hKdmRHOTBlWEJsTGw5d2NtOWpaWE56SUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSE5qY205c2JGUnZjQ0E5SUhSb2FYTXVYMmRsZEZOamNtOXNiRlJ2Y0NncElDc2dkR2hwY3k1ZlkyOXVabWxuTG05bVpuTmxkRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ6WTNKdmJHeElaV2xuYUhRZ1BTQjBhR2x6TGw5blpYUlRZM0p2Ykd4SVpXbG5hSFFvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCdFlYaFRZM0p2Ykd3Z1BTQjBhR2x6TGw5amIyNW1hV2N1YjJabWMyVjBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLeUJ6WTNKdmJHeElaV2xuYUhSY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdElIUm9hWE11WDJkbGRFOW1abk5sZEVobGFXZG9kQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYM05qY205c2JFaGxhV2RvZENBaFBUMGdjMk55YjJ4c1NHVnBaMmgwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV5WldaeVpYTm9LQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jMk55YjJ4c1ZHOXdJRDQ5SUcxaGVGTmpjbTlzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUIwWVhKblpYUWdQU0IwYUdsekxsOTBZWEpuWlhSelczUm9hWE11WDNSaGNtZGxkSE11YkdWdVozUm9JQzBnTVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgyRmpkR2wyWlZSaGNtZGxkQ0FoUFQwZ2RHRnlaMlYwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyRmpkR2wyWVhSbEtIUmhjbWRsZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOWhZM1JwZG1WVVlYSm5aWFFnSmlZZ2MyTnliMnhzVkc5d0lEd2dkR2hwY3k1ZmIyWm1jMlYwYzFzd1hTQW1KaUIwYUdsekxsOXZabVp6WlhSeld6QmRJRDRnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJGamRHbDJaVlJoY21kbGRDQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWTJ4bFlYSW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ2RHaHBjeTVmYjJabWMyVjBjeTVzWlc1bmRHZzdJR2t0TFRzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYVhOQlkzUnBkbVZVWVhKblpYUWdQU0IwYUdsekxsOWhZM1JwZG1WVVlYSm5aWFFnSVQwOUlIUm9hWE11WDNSaGNtZGxkSE5iYVYxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKaVlnYzJOeWIyeHNWRzl3SUQ0OUlIUm9hWE11WDI5bVpuTmxkSE5iYVYxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKaVlnS0hSb2FYTXVYMjltWm5ObGRITmJhU0FySURGZElEMDlQU0IxYm1SbFptbHVaV1FnZkh4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOamNtOXNiRlJ2Y0NBOElIUm9hWE11WDI5bVpuTmxkSE5iYVNBcklERmRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FYTkJZM1JwZG1WVVlYSm5aWFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZllXTjBhWFpoZEdVb2RHaHBjeTVmZEdGeVoyVjBjMXRwWFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQlRZM0p2Ykd4VGNIa3VjSEp2ZEc5MGVYQmxMbDloWTNScGRtRjBaU0E5SUdaMWJtTjBhVzl1SUNoMFlYSm5aWFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyRmpkR2wyWlZSaGNtZGxkQ0E5SUhSaGNtZGxkRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJOc1pXRnlLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnY1hWbGNtbGxjeUE5SUhSb2FYTXVYM05sYkdWamRHOXlMbk53YkdsMEtDY3NKeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnhkV1Z5YVdWeklEMGdjWFZsY21sbGN5NXRZWEFvWm5WdVkzUnBiMjRnS0hObGJHVmpkRzl5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhObGJHVmpkRzl5SUNzZ1hDSmJaR0YwWVMxMFlYSm5aWFE5WEZ4Y0lsd2lJQ3NnZEdGeVoyVjBJQ3NnWENKY1hGd2lYU3hjSWlBclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2h6Wld4bFkzUnZjaUFySUZ3aVcyaHlaV1k5WEZ4Y0lsd2lJQ3NnZEdGeVoyVjBJQ3NnWENKY1hGd2lYVndpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUNSc2FXNXJJRDBnSkNoeGRXVnlhV1Z6TG1wdmFXNG9KeXduS1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0pHeHBibXN1YUdGelEyeGhjM01vUTJ4aGMzTk9ZVzFsTGtSU1QxQkVUMWRPWDBsVVJVMHBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSkd4cGJtc3VZMnh2YzJWemRDaFRaV3hsWTNSdmNpNUVVazlRUkU5WFRpa3VabWx1WkNoVFpXeGxZM1J2Y2k1RVVrOVFSRTlYVGw5VVQwZEhURVVwTG1Ga1pFTnNZWE56S0VOc1lYTnpUbUZ0WlM1QlExUkpWa1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNSc2FXNXJMbUZrWkVOc1lYTnpLRU5zWVhOelRtRnRaUzVCUTFSSlZrVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnZEc5a2J5QW9abUYwS1NCMGFHbHpJR2x6SUd0cGJtUmhJSE4xY3k0dUxseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJSEpsWTNWeWMybDJaV3g1SUdGa1pDQmhZM1JwZG1WeklIUnZJSFJsYzNSbFpDQnVZWFl0YkdsdWEzTmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWtiR2x1YXk1d1lYSmxiblJ6S0ZObGJHVmpkRzl5TGt4SktTNW1hVzVrS0Z3aVBpQmNJaUFySUZObGJHVmpkRzl5TGs1QlZsOU1TVTVMVXlrdVlXUmtRMnhoYzNNb1EyeGhjM05PWVcxbExrRkRWRWxXUlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWtLSFJvYVhNdVgzTmpjbTlzYkVWc1pXMWxiblFwTG5SeWFXZG5aWElvUlhabGJuUXVRVU5VU1ZaQlZFVXNJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5Wld4aGRHVmtWR0Z5WjJWME9pQjBZWEpuWlhSY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQlRZM0p2Ykd4VGNIa3VjSEp2ZEc5MGVYQmxMbDlqYkdWaGNpQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ1FvZEdocGN5NWZjMlZzWldOMGIzSXBMbVpwYkhSbGNpaFRaV3hsWTNSdmNpNUJRMVJKVmtVcExuSmxiVzkyWlVOc1lYTnpLRU5zWVhOelRtRnRaUzVCUTFSSlZrVXBPMXh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNBdkx5QnpkR0YwYVdOY2JpQWdJQ0FnSUNBZ1UyTnliMnhzVTNCNUxsOXFVWFZsY25sSmJuUmxjbVpoWTJVZ1BTQm1kVzVqZEdsdmJpQW9ZMjl1Wm1sbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWxZV05vS0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWkdGMFlTQTlJQ1FvZEdocGN5a3VaR0YwWVNoRVFWUkJYMHRGV1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJRjlqYjI1bWFXY2dQU0IwZVhCbGIyWWdZMjl1Wm1sbklEMDlQU0FuYjJKcVpXTjBKeUFtSmlCamIyNW1hV2M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRmtZWFJoS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JoZEdFZ1BTQnVaWGNnVTJOeWIyeHNVM0I1S0hSb2FYTXNJRjlqYjI1bWFXY3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa0tIUm9hWE1wTG1SaGRHRW9SRUZVUVY5TFJWa3NJR1JoZEdFcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR052Ym1acFp5QTlQVDBnSjNOMGNtbHVaeWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dSaGRHRmJZMjl1Wm1sblhTQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKT2J5QnRaWFJvYjJRZ2JtRnRaV1FnWEZ4Y0lsd2lJQ3NnWTI5dVptbG5JQ3NnWENKY1hGd2lYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGRHRmJZMjl1Wm1sblhTZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVTJOeWIyeHNVM0I1TzF4dUlDQWdJSDBvS1NrN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdFhHNGdJQ0FnSUNvZ1JHRjBZU0JCY0drZ2FXMXdiR1Z0Wlc1MFlYUnBiMjVjYmlBZ0lDQWdLaUF0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzFjYmlBZ0lDQWdLaTljYmlBZ0lDQWtLSGRwYm1SdmR5a3ViMjRvUlhabGJuUXVURTlCUkY5RVFWUkJYMEZRU1N3Z1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2MyTnliMnhzVTNCNWN5QTlJQ1F1YldGclpVRnljbUY1S0NRb1UyVnNaV04wYjNJdVJFRlVRVjlUVUZrcEtUdGNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SUhOamNtOXNiRk53ZVhNdWJHVnVaM1JvT3lCcExTMDdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnSkhOd2VTQTlJQ1FvYzJOeWIyeHNVM0I1YzF0cFhTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCVFkzSnZiR3hUY0hrdVgycFJkV1Z5ZVVsdWRHVnlabUZqWlM1allXeHNLQ1J6Y0hrc0lDUnpjSGt1WkdGMFlTZ3BLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDBwTzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFZ4dUlDQWdJQ0FxSUdwUmRXVnllVnh1SUNBZ0lDQXFJQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMVnh1SUNBZ0lDQXFMMXh1SUNBZ0lDUXVabTViVGtGTlJWMGdQU0JUWTNKdmJHeFRjSGt1WDJwUmRXVnllVWx1ZEdWeVptRmpaVHRjYmlBZ0lDQWtMbVp1VzA1QlRVVmRMa052Ym5OMGNuVmpkRzl5SUQwZ1UyTnliMnhzVTNCNU8xeHVJQ0FnSUNRdVptNWJUa0ZOUlYwdWJtOURiMjVtYkdsamRDQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0pDNW1ibHRPUVUxRlhTQTlJRXBSVlVWU1dWOU9UMTlEVDA1R1RFbERWRHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRk5qY205c2JGTndlUzVmYWxGMVpYSjVTVzUwWlhKbVlXTmxPMXh1SUNBZ0lIMDdYRzRnSUNBZ2NtVjBkWEp1SUZOamNtOXNiRk53ZVR0Y2JuMHBLR3BSZFdWeWVTazdYRzVsZUhCdmNuUnpMbVJsWm1GMWJIUWdQU0JUWTNKdmJHeFRjSGs3WEc1Y2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QV1JoZEdFNllYQndiR2xqWVhScGIyNHZhbk52Ymp0amFHRnljMlYwUFhWMFpqZzdZbUZ6WlRZMExHVjVTakphV0VwNllWYzVkVWxxYjNwTVEwcDZZak5XZVZreVZucEphbkJpU1cxR2VtTXlWakJqZVRsM1dWZE9jbU41T1dsaU1qa3dZek5TZVZsWVFYWmhiazEyWXpOS2Frd3pUbXBqYlRsellraE9kMlZUTlhGamVVcGtURU5LZFZsWE1XeGplVWsyVnpFd2MwbHRNV2hqU0VKd1ltMWtla2xxYjJsUlZVWkNVVk40V2xGVlJscE1SVTVDVVZWTk4xRlZSa1JaYVhoT1VWVkdUa3hGVGtKUlZVMXpXVEJHUWxsNWVFUlJWVVpFVEVVNVFsRlZPSE5TVlVaQ1VsTjRXbEZWUmxwTVJWWkNVVlZWYzFKVlJrSlNVM2hNVVZWR1RFeEZWa0pSVlZWelUxVkdRbE5UZUVaUlZVWkdURVZPUWxGVlRYTlJNRVpDVVhwMFFsRlZUVFZTUTNoS1VWVkdTa3hGTVVKUlZUQnpVakJHUWxKNWVGQlJWVVpRVEVWT1FsRlZUWE5WVlVaQ1ZWTjRSRkZWUmtSTVJVNUNVVlZOTjFGVlJrUk1NRWszVDNwek4wOHdaRUpUTUdNM1VWVkdSRk5EZUVwUlZVWktURVpPUWxGV1RYTlNNRVpDVW5sNFJGRlZSa1JNUmxaQ1VWWlZjMUV3UmtKUmVuUktVVlZPTkZGcWN6ZFBlblJRVVZWc1NFOHdiRUpSTUdkelUxVkdRbE5UZUVwUlZVWktURVZrUWxGVlkzTldNRVpDVm5sNFJGRlZSa1JQTUd4Q1VUTmFRMHhGYkVKUlZXdHpWREJHUWxSNWVFaFJWVVpJVEVkV1FsRlhWWE5STUVaQ1VYcDBTbEZWVFRWUmFYaEtVVlZHU2t4R1JrSlJWa1Z6VWpCR1FsSjVlR3BSVlVacVRFVk9RbEZWVFRkVFZVWkVUMVZKYzFOVlJrSlRVM2hVVVZWR1ZFeEZaRUpSVldOelVqQkdRbEo1ZUVoUlZVWklURVpHUWxGV1JYTlJNRVpDVVhwMFNsRlZUWFpSYVhoS1VWVkdTa3hHYkVKUlZtdHpVakJHUWxKNWVGaFJWVVpZVEVWT1FsRlZUVGRUVlVaRVREQkpjMU5WUmtKVFUzaHlVV3RHUW1Fd1NYTlNNRVpDVW5sNFJGRlZSa1JNUlU1Q1VWVk5jMUpWUmtKU1UzaEVVVlZHUkV4RmJFSlJWV3R6VVRCR1FsRjVlRVJSVlVaRVR6QnNRbEV6UWtSTVJXeENVVlZyYzFRd1JrSlVlWGhJVVZWR1NFOHhSa0pSTVZselZGVkdRbFJUZUVaUlZVWkdURVZXUWxGVlZUZFZWVVpFVm1sNFRsRlZSazVNUlZaQ1VWVlZjMVJWUmtKVVZIUlNVVlZPYTB4Rk1VSlJWVEJ6VWxWR1FsSlRlRVpSVlVaR1R6QjBRbEV5U1hOUk1FWkNVWHAwU2xGVlRrZE1SV3hDVVZWcmMxWXdSa0pXZVhoSVVWVkdTRTh4UmtKUk1sRnpWRlZHUWxSVGVFWlJWVVpHVEVaR1FsRldSVGRWVlVaRVlVVkpjMVJWUmtKVVUzaEdVVlZHUmt4R1JrSlJWa1UzVlZWR1JHRkZTWE5VVlVaQ1ZGTjRSbEZWUmtaTVIzUkRVVlZHY2xGcWRFeFJWVTB6VVdsNFJGRlZSa1JQTUd4Q1VUQlpjMU5WUmtKVFUzaE1VVlZHVEV4RlpFSlJWV00zVlZWR1JGVnBlRkpSVlVaU1RFVldRbEZWVlhOV1ZVWkNWbE40U0ZGVlJraE1SazVDVVZaTk4xVlZSa1JoUlUxelZGVkdRbFJUZUVaUlZVWkdURVpHUWxGV1JYTlNNRVpDVW5sNFZGRlZSbFJQTVVaQ1VYcFdRMHhIUmtKUlYwVnpVbFZHUWxKVGVFNVJWVVpPVEVWa1FsRlZZM05WTUVaQ1ZYbDRTRkZWUmtoTVJteENVVlpyTjFNd1JrUmlhMUZ6VVRCR1FsRjZkRXBSVlU1SFRFVnNRbEZWYTNOVk1FWkNWWGw0U0ZGVlJraFBNVVpDVVRGdmMxbFZSa0paVTNoR1VWVkdSa3hIVmtKUlYxVTNWVlZHUkU5VlNYTlpWVVpDV1ZONFJsRlZSa1pNUjFaQ1VWZFZOMVZWUmtSUFZVbHpWVlZHUWxWVGVFWlJWVVpHVEVaV1FsRldWVGRWVlVaRVkwVkpjMUl3UmtKU2VYaEdVVlZHUmt4RmRFSlJWWE0zVlZWR1JGWnBlRTVSVlVaT1RFVldRbEZWVlhOVlZVWkNWVlIwVEZGVlRuVlJhWGhFVVZWR1JFOHdiRUpSTUZselUxVkdRbE5UZUZKUlZVWlNURVZrUWxGVll6ZFZWVVpFVjBONFVsRlZSbEpNUlZaQ1VWVlZjMk5WU2tKUldFWkRUekZHUWxGNU9VTk1SVEZDVVZVd2MxSlZSa0pTVTNoVVVWVkdWRTh4UmtKUk1uQkRURVpPUWxGV1RYTlNWVVpDVWxONFdsRlZSbHBQTVVaQ1VUTmFRMHhGVmtKUlZWVnpVbFZHUWxKVGVFcFJWVVpLVHpGR1FsRXhTWE5XTUVaQ1ZubDRSbEZWUmtaTVIwWkNVVmRGTjFWVlJrUk5WVWx6VlRCR1FsVjVlRVpSVlVaR1RFWmtRbEZXWXpkVlZVWkVaRVZKYzFWVlJrSlZVM2hHVVZWR1JreEdaRUpSVm1NM1ZWVkdSR05yU1hOWk1FWkNXWGw0UmxGVlJrWk1SMlJEVVZWR2JsRnFkRkpSVlU1dlVYbDRiRkZWUm14TVJWWkNVVlZWYzJFd1NrSlJWM1JEVHpCMFFsRXpVa1JNUlU1Q1VWVk5OMU5WUmtSU2FYaEtVVlZHU2t4R2JFSlJWbXR6VWpCR1FsSjZkRkpSVlU1dFRFVXhRbEZWTUhOU1ZVWkNVbE40VWxGVlJsSlBNVVpDVVRKb1EweEdSa0pSVmtWelVsVkdRbEpUZUZaUlZVWldUekIwUWxFeldrTk1SVTVDVVZWTk4xTlZSa1JTYW5NM1QzcDBVRkZWYkVoUE1HeENVVEJuYzFOVlJrSlRVM2hVVVZWR1ZFeEZaRUpSVldOelVUQkdRbEY2ZEZKUlZVNXBURWN4UTFGVlJuUlJhWGhRVVZWR1VFeEZWa0pSVlZWelZGVkdRbFJVZEZwUlZVMDFVV2w0U2xGVlJrcE1SWFJDVVZWemMxSXdSa0pTZVhoS1VWVkdTa3hGVGtKUlZVMDNWMVZHUkdGclNYTlRWVVpDVTFONFJGRlZSa1JNUmtaQ1VWWkZjMUl3UmtKU2VYaFFVVlZHVUV4RlRrSlJWVTAzVjFWR1JHVkZTWE5UVlVaQ1UxTjRSRkZWUmtSTVIwNUNVVmROYzFJd1JrSlNlWGhRVVZWR1VFeEZUa0pSVlUxelZEQkdRbFI1ZUV4UlZVWk1URVV4UWxGVk1ITlNNRVpDVW5sNFRsRlZSazVNUldSQ1VWVmpjMVF3UmtKVWVYaEVVVlZHUkU4eGJFSlJNMEpHVEVWc1FsRlZhM05STUVaQ1VYbDRVRkZWUmxCTVJXUkNVVlZqYzFOVlJrSlRVM2hFVVZWR1JFeEdWa0pSVmxWelVUQkdRbEY1ZUU1UlZVWk9URVZPUWxGVlRYTlJNRVpDVVhwMFdsRlZUakpSZVhoS1VWVkdTa3hGVGtKUlZVMXpWVEJHUWxWNWVFaFJWVVpJVEVWc1FsRlZhM05STUVaQ1VYbDRVRkZWUmxCTVJVNUNVVlZOYzFSVlJrSlVVM2hJVVZWR1NFeEZaRUpSVldOelVqQkdRbEo1ZUZKUlZVWlNURVZPUWxGVlRYTlZNRVpDVlhsNFNGRlZSa2hNUldSQ1VWVmpOMkV3U2tKUmVUbEZURVZPUWxGVlRYTlRWVVpDVTFONFJGRlZSa1JNUlRsQ1VWVTRjMUV3UmtKUmVYaE9VVlZHVGt4RlpFSlJWV056VWpCR1FsSjVlRWhSVlVaSVRFWkdRbEZXUlhOUk1FWkNVWGw0YWxGVlJtcE1SVTVDVVZWTmMxRXdSa0pSZW5SYVVWVk5NVkpEZUVwUlZVWktURVZPUWxGVlRYTlZWVVpDVlZONFNGRlZSa2hNUlZaQ1VWVlZjMUV3UmtKUmVuUmFVVlZPZFZGcGVFcFJWVVpLVEVWT1FsRlZUWE5WVlVaQ1ZWTjRTRkZWUmtoTVJWWkNVVlZWYzFFd1JrSlJlblJhVVZWT2RWRnBlRXBSVlVaS1RFVk9RbEZWVFhOWlZVWkNXVk40U0ZGVlJraE1SV3hDVVZWcmMxRXdSa0pSZW5SYVVWVk5lRkZwZUVwUlZVWktURVZPUWxGVlRYTlpWVVpDV1ZONFNGRlZSa2hNUlU1Q1VWVk5jMUV3UmtKUmVuUmFVVlZPTWxGcGVFUlJWVVpFVEVWT1FsRlZUWE5UVlVaQ1UxTjRSRkZWUmtSTVIwNUNVVmROYzFFd1JrSlJlWGhFVVZWR1JFeEZWa0pSVlZWelVUQkdRbEY1ZUV4UlZVWk1URVZPUWxGVlRYTlVWVVpDVkZONFJsRlZSa1pNUmxaQ1VWWlZjMU13UmtKVGVYaEtVVlZHU2t4Rk1VSlJWVEJ6VVRCR1FsRjVlRXhSVlVaTVRFVk9RbEZWVFhOVlZVWkNWVk40UkZGVlJrUk1SWFJDVVZWemMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUVGRYVlVaRVRsVlpjMU5WUmtKVFUzaEVVVlZHUkV4Rk9VSlJWVGh6VWxWR1FsSlRlRVJSVlVaRVR6RnNRbEV5V1hOVFZVWkNVMU40UkZGVlJrUk1Sa1pDVVZaRmMxSlZSa0pTVTNoRVVWVkdSRTh4UmtKUk0wSkRURVZPUWxGVlRUZFZWVVpFVWtONFRsRlZSazVNUlU1Q1VWVk5jMWt3UmtKWmVYaEVVVlZHUkV4R1RrSlJWazF6VWxWR1FsSlRlRlJSVlVaVVRFVldRbEZWVlRkWFZVWkVaVVZOYzFaVlJrSldWSFJhVVZWT1YweEZaRUpSVldOelVsVkdRbEpVZEc1UmEwWkVVa040VGxGVlJrNU1SVTVDVVZWTmMxUXdSa0pVZVhoRVVWVkdSRTh4YkVKUk1qVkRURVZPUWxGVlRUZFhWVVpFVWtONFZsRlZSbFpNUlZaQ1VWVlZjMU5WUmtKVFZIUmFVVlZPYjFGcGVGcFJWVVphVEVWV1FsRlZWWE5UVlVaQ1UxUjBWRkZWVG5sUmFYaEVVVlZHUkV4RlRrSlJWVTAzVlZWR1JGTkRlRTVSVlVaT1RFVk9RbEZWVFhOWk1FWkNXWGw0UkZGVlJrUk1SazVDVVZaTmMxSlZSa0pTVTNoVVVWVkdWRXhGVmtKUlZWVTNWMVZHUkdWRlRYTlNNRVpDVW5sNFJsRlZSa1pQTW1SRFVWVk9SVXhGTVVKUlZUQnpVVEJHUWxGNWVGQlJWVVpRVEVWT1FsRlZUVGRYVlVaRVltdEpjMUV3UmtKUmVuUmFVVlZPUlV4R1ZrSlJWbFZ6VWxWR1FsSlRlRXBSVlVaS1R6RnNRbEV5YUVOTVJteENVVlpyYzFKVlJrSlNVM2hLVVZWR1NrOHhUa0pSTTBwRFRFVk9RbEZWVFhOUk1FWkNVWHAwVWxGVlRrbE1SazVDVVZaTk4xVlZSa1JXUTNoVVVWVkdWRXhGVGtKUlZVMXpWVEJHUWxWNWVFUlJWVVpFVEVVNVFsRlZPSE5TTUVaQ1VucDBXbEZWVFhoUmFYaEtVVlZHU2t4RmRFSlJWWE56VWpCR1FsSjVlRXBSVlVaS1RFVk9RbEZWVFRkWFZVWkVZV3RKYzFOVlJrSlRVM2hXVVZWR1ZreEZaRUpSVldOelUxVkdRbE5UZUVSUlZVWkVURWRPUWxGWFRYTlRNRVpDVTNsNFNsRlZSa3BNUlU1Q1VWVk5jMWt3UmtKWmVYaEVVVlZHUkV4Rk1VSlJWVEEzV2pCS1FsRjVPVVZNUm14Q1VWWnJjMUV3UmtKUmVYaFNVVlZHVWt4RlpFSlJWV056VjFWR1FsZFRlRVJSVlVaRVRFVXhRbEZWTUhOUk1FWkNVWHAwV2xGVlRtOVNRM2hLVVZWR1NreEdiRUpSVm10elVqQkdRbEo1ZUVwUlZVWktURVZPUWxGVlRYTlVNRVpDVkhsNFJGRlZSa1JNUlRGQ1VWVXdjMU13UmtKVGVYaE9VVlZHVGs4eVpFTlJWVTB6VVhsNFZsRlZSbFpNUldSQ1VWVmpjMU5WUmtKVFUzaEVVVlZHUkV4Rk9VSlJWVGh6VVRCR1FsRjVlRTVSVlVaT1RFVk9RbEZWVFRkWFZVWkVZMnROYzFOVlJrSlRVM2hXVVZWR1ZreEZaRUpSVldOelYxVkdRbGRUZUV4UlZVWk1URVpzUWxGV2EzTlJNRVpDVVhsNFVsRlZSbEpQTW1SRFVWVk9kVkpEZUVwUlZVWktURVZPUWxGVlRYTlpWVVpDV1ZONFJsRlZSa1pNUldSQ1VWVmpjMUV3UmtKUmVYaEVVVlZHUkU4eGJFSlJlbVJEVEVWc1FsRlZhM05STUVaQ1VYbDRVbEZWUmxKTVJXUkNVVlZqYzFKVlJrSlNVM2hFVVZWR1JFOHhiRUpSTWpWRFRFVnNRbEZWYTNOUk1FWkNVWGw0VWxGVlJsSk1SV1JDVVZWamMxSlZSa0pTVTNoRVVWVkdSRTh4YkVKUk1qVkRURVZzUWxGVmEzTlJNRVpDVVhsNGFGRlZSbWhNUldSQ1VWVmpjMU5WUmtKVFUzaEVVVlZHUkV4SFpFTlJWVVp1VVdsNFJsRlZSa1pNUlU1Q1VWVk5OMWRWUmtST01FMXpVMVZHUWxOVGVGQlJWVVpRVEVWa1FsRlZZM05STUVaQ1VYbDRSRkZWUmtSTVJrNUNVVlpOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkVURVpPUWxGV1RYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5OMWRWUmtST01FMXpWREJHUWxSNmRIQlJhMFpFVW1sNFNGRlZSa2hNUlU1Q1VWVk5jMVpWUmtKV1UzaFFVVlZHVUU4eVpFTlJWVTR3VVdsNFNsRlZSa3BNUlRGQ1VWVXdjMUV3UmtKUmVuUnVVV3RHUkZkRGVFcFJWVVpLVEVkT1FsRlhUWE5TTUVaQ1VubDRUbEZWUms1TVJVNUNVVlZOYzFRd1JrSlVlWGhFVVZWR1JFeElUa05SVlVaNlVXbDRSRkZWUmtSTVJUbENVVlU0YzFFd1JrSlJlWGhFVVZWR1JFOHlaRU5SVlU1M1VsTjRSbEZWUmtaTVJVNUNVVlZOYzFFd1JrSlJlWGhxVVZWR2FreEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVUekk1UTFGVlRuRlJhWGhPVVZWR1RreEZaRUpSVldOelVUQkdRbEY1ZUVSUlZVWkVURWRPUWxGWFRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkU4eVpFTlJWVTV6VVhsNFJGRlZSa1JQTW1SRFVWVk9SVXhGVmtKUlZWVnpVVEJHUWxGNWVFUlJWVVpFVEVVeFFsRlZNSE5UVlVaQ1UxTjRSRkZWUmtSTVJURkNVVlV3YzFFd1JrSlJlWGhZVVZWR1dFeEZiRUpSVld0elZGVkdRbFJUZUVSUlZVWkVURVpzUWxGV2EzTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUjJVV3RHUkdWRlVYTkxNRkpDVVZOMFJVOHlPVU5SVlUxMlVrTjRUbEZWUms1TVJVNUNVVlZOTjJRd1NrSlJNR2R6VVRCR1FsRjVlRVJSVlVaRVRFVXhRbEZWTUhOUk1FWkNVWGw0UkZGVlJrUk1SbXhDVVZacmMxRXdSa0pSZVhoR1VWVkdSa3hGVGtKUlZVMXpVakJHUWxKNWVFaFJWVVpJVEVaV1FsRldWVGRrTUVwQ1VYcEdSRXhIVGtKUlYwMDNZMVZLUWxFeWNFTk1SVTVDVVZWTk4xb3dTa0pSTURSelVUQkdRbEY2ZEc1UmEwWkVVa040VGxGVlJrNU1SVTVDVVZWTmMxTlZSa0pUVTNoRVVWVkdSRTh4YkVKUk1taERURVZPUWxGVlRYTlJNRVpDVVhwMGNGRnJSa1JTZVhoT1VWVkdUa3hGVGtKUlZVMXpWbFZHUWxaVGVFcFJWVVpLVEVWc1FsRlZhM05VVlVaQ1ZGTjRSRkZWUmtSTVJXeENVVlZyYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEhCUmEwWkVaVVZOYzFOVlJrSlRVM2hFVVZWR1JFeEdWa0pSVmxWelVUQkdRbEY1ZUVaUlZVWkdURVZPUWxGVlRYTlRWVVpDVTFONFRsRlZSazVNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRWhSVlVaSVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRIQlJhMFpFVGpCTmMxUXdSa0pVZVhoRVVWVkdSRXhHVmtKUlZsVnpVMVZHUWxOVWRHNVJhMFpFWkd0SmMxTXdSa0pUZVhoRVVWVkdSRXhHUmtKUlZrVnpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUWE5UVlVaQ1UxTjRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUwM1dqQktRbEY2WkVOTVJYUkNVVlZ6YzFFd1JrSlJlWGhTVVZWR1VreEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkVURVZzUWxGVmEzTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkU4eGJFSlJNbkJFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSUE1VWkNVVEZCYzFFd1JrSlJlWGhFVVZWR1JFOHhSa0pSTUZselZUQkdRbFY1ZUVSUlZVWkVURVpPUWxGV1RYTlJNRVpDVVhsNFVGRlZSbEJNUldSQ1VWVmpOMWRWUmtSTlZVbHpVVEJHUWxGNWVFUlJWVVpFVEVaV1FsRldWWE5STUVaQ1VYbDRTbEZWUmtwTVJVNUNVVlZOYzFWVlJrSlZVM2hHVVZWR1JreEdSa0pSVmtWelVUQkdRbEY1ZUVSUlZVWkVUekZzUWxFelVrUk1SVTVDVVZWTmMxRXdSa0pSZVhoS1VWVkdTa3hGVGtKUlZVMXpXVEJHUWxsNWVFUlJWVVpFVEVWT1FsRlZUWE5TTUVaQ1VubDRSRkZWUmtSTVJrNUNVVlpOYzFFd1JrSlJlWGhFVVZWR1JFOHhiRUpSTTFKRVRFVnNRbEZWYTNOUk1FWkNVWGw0VWxGVlJsSk1SV1JDVVZWamMxTlZSa0pUVTNoRVVWVkdSRTh4YkVKUk0wcERURVZzUWxGVmEzTlJNRVpDVVhsNGFsRlZSbXBNUldSQ1VWVmpjMU5WUmtKVFUzaEVVVlZHUkU4eGJFSlJlazVEVEVWc1FsRlZhM05STUVaQ1VYbDRVRkZWUmxCTVJXUkNVVlZqYzFOVlJrSlRVM2hFVVZWR1JFOHhiRUpSTTBKRFRFVnNRbEZWYTNOUk1FWkNVWGw0VkZGVlJsUk1SV1JDVVZWamMxTlZSa0pUVTNoRVVWVkdSRTh4YkVKUk0xSkRURVZzUWxGVmEzTlJNRVpDVVhsNFVsRlZSbEpNUldSQ1VWVmpjMU5WUmtKVFUzaEVVVlZHUkU4eGJFSlJNMHBEVEVWc1FsRlZhM05STUVaQ1VYbDRVbEZWUmxKTVJXUkNVVlZqYzFOVlJrSlRVM2hFVVZWR1JFOHhiRUpSTTBwRFRFVnNRbEZWYTNOUk1FWkNVWGw0YUZGVlJtaE1SV1JDVVZWamMxTlZSa0pUVTNoRVVWVkdSRTh4YkVKUmVrWkRURVZzUWxGVmEzTlJNRVpDVVhsNGFGRlZSbWhNUldSQ1VWVmpjMU5WUmtKVFUzaEVVVlZHUkU4eFJrSlJlbXhEVEVWT1FsRlZUWE5STUVaQ1VYcDBVbEZWVGtkTVJsWkNVVlpWTjFWVlJrUldhWGhVVVZWR1ZFeEZUa0pSVlUxelZUQkdRbFY1ZUVSUlZVWkVURVpXUWxGV1ZYTlNNRVpDVW5sNFZsRlZSbFpNUlRGQ1VWVXdOMWRWUmtST01FMXpWRlZHUWxSVGVFaFJWVVpJVEVWT1FsRlZUWE5STUVaQ1VYbDRUbEZWUms1TVJVNUNVVlZOYzFKVlJrSlNVM2hHVVZWR1JreEZPVUpSVlRoelVsVkdRbEpUZUU1UlZVWk9URVZPUWxGVlRYTlJNRVpDVVhwMFdsRlZUakpSZVhoR1VWVkdSa3hGVGtKUlZVMXpVVEJHUWxGNWVGQlJWVVpRVEVVeFFsRlZNSE5STUVaQ1VYbDRUbEZWUms1TVJYUkNVVlZ6YzFWVlJrSlZVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEc1UmEwWkVZMFZOYzFOVlJrSlRVM2hHVVZWR1JreEZaRUpSVldOelVUQkdRbEY1ZUVSUlZVWkVURVV4UWxGVk1ITlJNRVpDVVhsNFRsRlZSazVNUlU1Q1VWVk5jMUV3UmtKUmVYaEtVVlZHU2t4RlRrSlJWVTF6VTFWR1FsTlRlRVJSVlVaRVRFVk9RbEZWVFRkYU1FcENVVE5LUkV4RlZrSlJWVlZ6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOU1ZVWkNVbE40UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZW5SMlVXdEdSRlJwZUVaUlZVWkdURVZrUWxGVlkzTlVWVVpDVkZONFJGRlZSa1JNUlRsQ1VWVTRjMUV3UmtKUmVYaE9VVlZHVGt4RlRrSlJWVTF6VTFWR1FsTlRlRVJSVlVaRVRFVk9RbEZWVFRkaU1FcENVVEp3UkV4RlRrSlJWVTF6VVRCR1FsRjVlRTVSVlVaT1RFVk9RbEZWVFhOVVZVWkNWRk40UkZGVlJrUk1SVTVDVVZWTmMxTlZSa0pUVTNoRVVWVkdSRXhGYkVKUlZXdHpVbFZHUWxKVGVFWlJWVVpHVEVWT1FsRlZUWE5STUVaQ1VYcDBibEZyUmtSalJVMXpVVEJHUWxGNmRHNVJhMFpFVWtONFRsRlZSazVNUlU1Q1VWVk5jMVJWUmtKVVUzaElVVlZHU0V4RlpFSlJWV056VWpCR1FsSjVlRVpSVlVaR1RFVk9RbEZWVFRkWFZVWkVUakJKYzFFd1JrSlJlblJhVVZWT1JVeEZNVUpSVlRCelVUQkdRbEY1ZUZCUlZVWlFURVZPUWxGVlRYTmFWVVpDV2xONFJGRlZSa1JNUld4Q1VWVnJjMUpWUmtKU1UzaE9VVlZHVGt4RlZrSlJWVlZ6VmpCR1FsWjVlRVJSVlVaRVRFVk9RbEZWVFRkWFZVWkVUVlZSYzFSVlJrSlVVM2hFVVZWR1JFeEZNVUpSVlRCelVUQkdRbEY2ZEZKUlZVNXpVV2w0UkZGVlJrUk1SVTVDVVZWTk4xVlZSa1JTYVhoVVVWVkdWRXhGVGtKUlZVMXpWVEJHUWxWNWVFUlJWVVpFVEVkR1FsRlhSWE5TTUVaQ1VucDBXbEZWVG05UmVYaE9VVlZHVGt4RlRrSlJWVTF6VTFWR1FsTlRlRVJSVlVaRVRFZE9RbEZYVFhOVE1FWkNVM2w0VGxGVlJrNVBNbVJEVVZWT2NWRjVlRXBSVlVaS1RFVk9RbEZWVFhOWk1FWkNXWGw0UkZGVlJrUk1SbVJDVVZaamMxSXdSa0pTZVhoS1VWVkdTa3hGVGtKUlZVMXpXVEJHUWxsNWVFUlJWVVpFVEVaT1FsRldUWE5STUVaQ1VYcDBVbEZWVGpSU1UzaEVVVlZHUkV4RlRrSlJWVTAzVlZWR1JGSnBlRlJSVlVaVVRFVk9RbEZWVFhOVk1FWkNWWGw0UkZGVlJrUk1SMlJEVVZWR2JsRnBlRWhSVlVaSVR6RnNRbEV5TlVSTVJURkNVVlV3YzFFd1JrSlJlWGhLVVZWR1NreEZUa0pSVlUxeldUQkdRbGw1ZUVSUlZVWkVURVpzUWxGV2EzTlRWVVpDVTFONFNsRlZSa3BNUlU1Q1VWVk5jMUl3UmtKU2VYaEVVVlZHUkV4R1JrSlJWa1Z6VVRCR1FsRjVlRXBSVlVaS1RFVk9RbEZWVFhOWFZVWkNWMU40UmxGVlJrWk1Sa1pDVVZaRmMxRXdSa0pSZVhoc1VWVkdiRXhGVGtKUlZVMXpWMVZHUWxkVGVFUlJWVVpFVEVWT1FsRlZUVGRWVlVaRVRUQm5jMUV3UmtKUmVYaEVVVlZHUkU4eFJrSlJNRmx6VlRCR1FsVjVlRVJSVlVaRVRFWk9RbEZXVFhOUk1FWkNVWGw0YmxGclJrSmFNRWx6VWpCR1FsSjZkRnBSVlU1MVVYbDRUbEZWUms1TVJVNUNVVlZOYzFOVlJrSlRVM2hFVVZWR1JFeEhUa0pSVjAxelV6QkdRbE41ZUU1UlZVWk9UekprUTFGVlRuRlJlWGhPVVZWR1RreEZUa0pSVlUxelZqQkdRbFo1ZUVoUlZVWklURVZzUWxGVmEzTlJNRVpDVVhsNGFsRlZSbXBNUlU1Q1VWVk5jMWRWUmtKWFUzaEVVVlZHUkU4eFJrSlJlbXhGVEVWT1FsRlZUWE5STUVaQ1VYcDBVbEZWVGtkTVJrNUNVVlpOYzFFd1JrSlJlWGhVVVZWR1ZFeEZUa0pSVlUxelZWVkdRbFZUZUVoUlZVWklUekZzUWxGNlRrTk1SV3hDVVZWcmMxVXdSa0pWZVhoSVVWVkdTRXhGYkVKUlZXdHpVVEJHUWxGNWVHaFJWVVpvVEVWV1FsRlZWWE5TTUVaQ1VubDRTbEZWUmtwTVJVNUNVVlZOYzFRd1JrSlVlWGhFVVZWR1JFeEZNVUpSVlRCelVUQkdRbEY2ZEZwUlZVMTZVa040U2xGVlJrcE1SbXhDVVZacmMxSXdSa0pTZVhoS1VWVkdTa3hGVGtKUlZVMXpXakJLUWxGWFpFTk1SVlpDVVZWVmMxRXdSa0pSZW5SYVVWVk5lbEY1ZUVwUlZVWktURVpPUWxGV1RYTlNNRVpDVW5sNFNsRlZSa3BNUlU1Q1VWVk5jMVF3UmtKVWVYaEVVVlZHUkV4Rk1VSlJWVEEzWVRCS1FsRjZaRU5NUm14Q1VWWnJOMkV3U2tKUk1XOXpVMVZHUWxOVGVFUlJWVVpFVEVka1ExRlZSbTVSYVhoR1VWVkdSa3hGVGtKUlZVMDNWMVZHUkU5VlNYTlNWVVpDVWxONFJGRlZSa1JNUlU1Q1VWVk5jMU5WUmtKVFUzaEVVVlZHUkV4SFJrSlJWMFZ6VXpCR1FsTjVlRnBSVlVaYVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUlBNbVJEVVZWT01GRjVlRXBSVlVaS1RFVk9RbEZWVFhOVU1FWkNWSGw0UmxGVlJrWk1SVTVDVVZWTk4xZFZSa1JpYTBselVUQkdRbEY2ZEZwUlZVNUZURVZXUWxGVlZYTlJNRVpDVVhsNFJGRlZSa1JNUms1Q1VWWk5jMU5WUmtKVFUzaFVVVlZHVkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVR6SmtRMUZWVGpaUmFYaEtVVlZHU2t4Rk1VSlJWVEJ6VWpCR1FsSjVlRXBSVlVaS1RFVk9RbEZWVFhOVlZVWkNWVk40UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZVhoU1VWVkdVa3hGVGtKUlZVMXpWRlZHUWxSVGVFaFJWVVpJVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSUE1tUkRVVlZPZVZKRGVFWlJWVVpHVEVWT1FsRlZUWE5STUVaQ1VYbDRTbEZWUmtwTVJVNUNVVlZOYzFsVlJrSlpVM2hNVVZWR1RFeEZNVUpSVlRCelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRUZGlNRXBDVVRKb1JFeEZiRUpSVld0elVUQkdRbEY1ZUZSUlZVWlVURVZPUWxGVlRYTlVWVVpDVkZONFJGRlZSa1JNUlU1Q1VWVk5OMW93U2tKUmVrNURURVZPUWxGVlRUZGFNRXBDVVRCUmMxUlZSa0pVVTNoRVVWVkdSRTh4YkVKUk1XZHpVVEJHUWxGNmRGcFJWVTVGVEVWV1FsRlZWWE5STUVaQ1VYbDRSRkZWUmtSTVJXeENVVlZyYzFFd1JrSlJlWGhvVVZWR2FFeEZiRUpSVld0elZUQkdRbFY1ZUVoUlZVWklURVZzUWxGVmEzTlJNRVpDVVhsNFVsRlZSbEpNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RmJFSlJWV3R6VTFWR1FsTlRlRVJSVlVaRVRFWkdRbEZXUlhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxSXdSa0pTZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVHpKa1ExRlZUVE5TVTNoS1VWVkdTa3hGVGtKUlZVMXpXVlZHUWxsVGVFaFJWVVpJVEVWc1FsRlZhM05STUVaQ1VYcDBibEZyUmtSTlZVbHpVMVZHUWxOVGVFUlJWVVpFVEVVeFFsRlZNSE5TVlVaQ1VsTjRSRkZWUmtSUE1tUkRVVlZPYTB4Rk1VSlJWVEJ6VVRCR1FsRjZkRnBSVlU1WlRFVk9RbEZWVFRkWFZVWkVVa040U0ZGVlJraE1SVTVDVVZWTmMxRXdSa0pSZVhoS1VWVkdTa3hGVGtKUlZVMXpVakJHUWxKNWVFcFJWVVpLVEVWT1FsRlZUWE5WVlVaQ1ZWTjRSRkZWUmtSTVJURkNVVlV3YzFKVlJrSlNVM2hFVVZWR1JFeEZWa0pSVlZWelVqQkdRbEo1ZUVSUlZVWkVUekprUTFGVlRqQlJlWGhLVVZWR1NreEhUa0pSVjAxelVqQkdRbEo1ZUVwUlZVWktURVZPUWxGVlRYTlpWVVpDV1ZONFRGRlZSa3hNUld4Q1VWVnJjMUV3UmtKUmVYaFNVVlZHVWt4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVR6TldRMUZWVG5sU1EzaFVVVlZHVkV4RmJFSlJWV3R6VTFWR1FsTlRlRVJSVlVaRVRFWkdRbEZXUlhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTk4yUlZTa0pSZW1SRFRFVk9RbEZWVFhOVFZVWkNVMU40UkZGVlJrUk1Sa1pDVVZaRmMxRXdSa0pSZVhoRVVWVkdSRXhGWkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVEVWMFFsRlZjM05WTUVaQ1ZYcDBNMUZyUmtSaVJVMXpWVEJHUWxWNWVFaFJWVVpJVEVWc1FsRlZhM05STUVaQ1VYbDRVbEZWUmxKTVJVNUNVVlZOYzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRUZGFNRXBDVVhwR1JFeEZWa0pSVlZWelVUQkdRbEY1ZUVSUlZVWkVURWRPUWxGWFRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5OMkl3U2tKUk1uQkRURVZzUWxGVmEzTlJNRVpDVVhsNFZGRlZSbFJNUlU1Q1VWVk5jMU5WUmtKVFUzaEVVVlZHUkV4R1JrSlJWa1Z6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUlBNbVJEVVZWT2VWRjVlRVJSVlVaRVR6RnNRbEV3ZDNOUk1FWkNVWHAwVWxGVlRrMU1SVTVDVVZWTmMxRXdSa0pSZW5SU1VWVk9SMHhHVGtKUlZrMXpVVEJHUWxGNWVGUlJWVVpVVEVWT1FsRlZUWE5WTUVaQ1ZYbDRTRkZWUmtoTVJsWkNVVlpWYzFSVlJrSlVWSFJhVVZWTk1WRjVlRXBSVlVaS1RFVk9RbEZWVFhOWlZVWkNXVk40U0ZGVlJraE1SVEZDVVZVd2MxRXdSa0pSZW5SYVVWVk5NVkZwZUVwUlZVWktURVZPUWxGVlRYTlVWVVpDVkZONFJsRlZSa1pNUlU1Q1VWVk5OMWRWUmtSYVEzaEtVVlZHU2t4Rk9VSlJWVGh6VWpCR1FsSjVlRXBSVlVaS1RFVk9RbEZWVFhOVk1FWkNWWGw0UkZGVlJrUk1SWFJDVVZWemMxRXdSa0pSZVhoSVVWVkdTRXhGVGtKUlZVMXpVVEJHUWxGNmRGcFJWVTQwVVhsNFVGRlZSbEJNUldSQ1VWVmpjMVF3UmtKVWVYaEVVVlZHUkV4RlpFSlJWV056VVRCR1FsRjVlRlpSVlVaV1RFWkdRbEZXUlRkYU1FcENVVE5DUkV4Rk1VSlJWVEJ6VVRCR1FsRjVlRkpSVlVaU1RFVmtRbEZWWTNOaFZVcENVVmRzUTB4RlpFSlJWV056VkZWR1FsUlRlRWhSVlVaSVRFVXhRbEZWTURkaU1FcENVVEp3UlV4RlRrSlJWVTF6VlZWR1FsVlRlRWhSVlVaSVRFWldRbEZXVlhOU01FWkNVbmw0VGxGVlJrNU1SV1JDVVZWamMxTXdSa0pUZVhoRVVWVkdSRXhGVGtKUlZVMDNWMVZHUkdGclVYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5OMWRWUmtSVFEzaEtVVlZHU2t4RmRFSlJWWE56VWpCR1FsSjVlRVJSVlVaRVRFVk9RbEZWVFhOVU1FWkNWSGw0UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZVhoSVVWVkdTRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVHpGc1FsRXljRVJNUlZaQ1VWVlZjMUV3UmtKUmVYaEVVVlZHUkV4RmRFSlJWWE56VVRCR1FsRjVlRkpSVlVaU1RFVk9RbEZWVFhOVk1FWkNWWGw0UkZGVlJrUk1SMFpDVVZkRmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRHNVJhMFpFVFZWTmMxTXdSa0pUZVhoRVVWVkdSRXhGT1VKUlZUaHpVVEJHUWxGNWVGSlJWVVpTVEVWT1FsRlZUWE5WVlVaQ1ZWTjRSRkZWUmtSTVJVNUNVVlZOYzFOVlJrSlRVM2hFVVZWR1JFeEdSa0pSVmtWelVUQkdRbEY1ZUd4UlZVWnNURVZPUWxGVlRYTlJNRVpDVVhsNFVsRlZSbEpNUlU1Q1VWVk5jMVV3UmtKVmVYaEVVVlZHUkV4Rk1VSlJWVEJ6VVRCR1FsRjVlRVJSVlVaRVR6SmtRMUZWVFhwU2FYaE1VVlZHVEV4RlRrSlJWVTF6VlZWR1FsVlRlRVJSVlVaRVRFWk9RbEZXVFhOUk1FWkNVWGw0VGxGVlJrNU1SVTVDVVZWTmMxRXdSa0pSZW5SYVVWVk9lVkY1ZUVSUlZVWkVUekZzUWxFd1VYTlRWVVpDVTFONFJGRlZSa1JNUlU1Q1VWVk5OMW93U2tKUk1GbHpZVEJPUWxGWGRFUlBNbVJEVVZWT2MxRjVkelJSTUVaQ1QwVk5OMW93U2tKUmVteEVURVYwUWxGVmMzTlJNRVpDVVhsNFVGRlZSbEJNUlU1Q1VWVk5jMVZWUmtKVlUzaEVVVlZHUkV4RlZrSlJWVlZ6VVRCR1FsRjVlRVJSVlVaRVRFVnNRbEZWYTNOUk1FWkNVWGw0U2xGVlJrcE1SV1JDVVZWamMxVlZSa0pWVTNoRVVWVkdSRXhHVGtKUlZrMXpVVEJHUWxGNWVFUlJWVVpFVEVaR1FsRldSWE5STUVaQ1VYbDRWRkZWUmxSTVJVNUNVVlZOYzFSVlJrSlVVM2hFVVZWR1JFeEZUa0pSVlUwM1YxVkdSRTFWV1hOUk1FWkNVWHAwV2xGVlRrVk1SVTVDVVZWTmMxRXdSa0pSZVhoS1VWVkdTa3hGVGtKUlZVMXpXVEJHUWxsNWVFUlJWVVpFVEVWT1FsRlZUWE5VTUVaQ1ZIbDRSRkZWUmtSTVJYUkNVVlZ6YzFFd1JrSlJlWGhTVVZWR1VreEZWa0pSVlZVM1dqQktRbEY2VGtSTVIwWkNVVmRGYzFKVlJrSlNVM2hPVVZWR1RrOHlSa0pSTTJoRFRFVk9RbEZWVFhOUk1FWkNVWHAwVWxGVlRsRk1SVTVDVVZWTmMxRXdSa0pSZW5SU1VWVk9SMHhHVGtKUlZrMXpVVEJHUWxGNWVGUlJWVVpVVEVWT1FsRlZUWE5VVlVaQ1ZGTjRTRkZWUmtoUE1XeENVVE53UTB4RlRrSlJWVTF6VVRCR1FsRjVlRXBSVlVaS1RFVk9RbEZWVFhOVk1FWkNWWGw0UkZGVlJrUk1SVTVDVVZWTmMxUlZSa0pVVTNoRVVWVkdSRXhHUmtKUlZrVnpVVEJHUWxGNWVFNVJWVVpPVEVWT1FsRlZUWE5STUVaQ1VYbDRXRkZWUmxoTVJVNUNVVlZOYzFVd1JrSlZlWGhFVVZWR1JFeEZNVUpSVlRCelVUQkdRbEY1ZUVSUlZVWkVUekZHUWxGNlZrWk1SVTVDVVZWTmMxRXdSa0pSZW5SU1VWVk9SMHhHVGtKUlZrMDNWVlZHUkZaRGVGUlJWVVpVVEVWT1FsRlZUWE5hTUVwQ1VWZGtRMHhGWkVKUlZXTnpWbFZHUWxaVGVFNVJWVVpPVHpGc1FsRXpjRVJNUlRGQ1VWVXdjMUV3UmtKUmVYaEtVVlZHU2t4RlRrSlJWVTF6VTFWR1FsTlRlRVJSVlVaRVR6SmtRMUZWVG1sTVJXeENVVlZyYzFOVlJrSlRVM2hJVVZWR1NFeEZUa0pSVlUxelVUQkdRbEY1ZUVwUlZVWktURVZPUWxGVlRYTlJNRVpDVVhsNFNsRlZSa3BNUlU1Q1VWVk5jMVZWUmtKVlUzaEVVVlZHUkV4RlRrSlJWVTAzV2pCS1FsRXllRVJNUld4Q1VWVnJjMVF3UmtKVWVYaElVVlZHU0V4Rk9VSlJWVGh6VkZWR1FsUlRlRXhSVlVaTVRFWkdRbEZXUlhOVFZVWkNVMU40VGxGVlJrNU1SVTVDVVZWTk4xb3dTa0pSTWpWRlRFVldRbEZWVlhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxTlZSa0pUVTNoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRIWlJhMFpFVldsNFNsRlZSa3BNUldSQ1VWVmpjMU5WUmtKVFUzaFVVVlZHVkV4RlRrSlJWVTF6VTFWR1FsTlRlRVpSVlVaR1RFVTVRbEZWT0hOUk1FWkNVWGw0UkZGVlJrUlBNamxEVVZWT2QxRjVlRVJSVlVaRVRFVk9RbEZWVFhOVFZVWkNVMU40UkZGVlJrUk1SVTVDVVZWTmMxTlZSa0pUVTNoRVVWVkdSRXhHUmtKUlZrVnpVbFZHUWxKVGVFcFJWVVpLVEVWT1FsRlZUWE5STUVaQ1VYcDBibEZyUmtSaGEwMXpVVEJHUWxGNmRHNVJhMFpFVWtONFJsRlZSa1pNUlU1Q1VWVk5jMUV3UmtKUmVYaFFVVlZHVUV4Rk1VSlJWVEJ6VXpCR1FsTjVlRkpSVlVaU1RFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUlBNamxEVVZWTk0xRnBlRVpSVlVaR1RFVk9RbEZWVFhOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTmMxUlZSa0pVVTNoRVVWVkdSRXhGZEVKUlZYTnpWVEJHUWxWNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBNMUZyUmtST01FbHpWRlZHUWxSVGVFcFJWVVpLVEVWMFFsRlZjM05STUVaQ1VYbDRkbEZyUmtKaU1FbHpVakJHUWxKNWVFNVJWVVpPVEVWa1FsRlZZM05UVlVaQ1UxTjRSRkZWUmtSTVJVNUNVVlZOTjJJd1NrSlJla1pGVEVWT1FsRlZUVGRpTUVwQ1VUQlJjMU5WUmtKVFUzaEVVVlZHUkV4Rk1VSlJWVEJ6VVRCR1FsRjVlRVpSVlVaR1RFVk9RbEZWVFRkYU1FcENVVEkxUTB4RlRrSlJWVTAzVjFWR1JGUkRlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWHAwVWxGVlRsRk1SVTVDVVZWTmMxRXdSa0pSZW5SU1VWVk9SMHhGTVVKUlZUQnpVVEJHUWxGNWVGUlJWVVpVVEVWT1FsRlZUVGRUVlVaRVkydEpjMUV3UmtKUmVYaEdVVlZHUmt4RlRrSlJWVTF6VVRCR1FsRjZkRXBSVlU1TlQzcHpOMDh3T1VKVFZXTTNVMVZHUkZORGVFUlJWVVpFVEVWT1FsRlZUWE5VVlVaQ1ZGTjRSRkZWUmtSTVJVNUNVVlZOYzFKVlJrSlNVM2hFVVZWR1JFeEZkRUpSVlhOelVUQkdRbEY1ZUdoUlZVWm9URVZXUWxGVlZUZFZWVVpFVDFWSmMxTlZSa0pUVTNoV1VWVkdWa3hGWkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVEVaT1FsRldUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFWVlJrSlZVM2hFVVZWR1JFeEdSa0pSVmtWelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRUZFZWVVpFWW10UmMxSXdSa0pTZVhoRVVWVkdSRXhGVGtKUlZVMXpVMVZHUWxOVGVFUlJWVVpFVEVWa1FsRlZZM05XVlVaQ1ZsTjRSRkZWUmtSTVJURkNVVlV3YzFKVlJrSlNVM2hFVVZWR1JFeEZWa0pSVlZWelVqQkdRbEo1ZUVSUlZVWkVUekZzUWxFeU5VUk1SV3hDVVZWcmMxTlZSa0pUVTNoSVVWVkdTRXhGVGtKUlZVMXpVVEJHUWxGNWVGWlJWVVpXVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlblJhVVZWTk1WRnBlRlJSVlVaVVRFVk9RbEZWVFhOYU1FcENVVmRrUTB4RlRrSlJWVTF6VTFWR1FsTlRlRVJSVlVaRVRFVnNRbEZWYTNOU1ZVWkNVbE40U2xGVlJrcE1SVTVDVVZWTmMxTlZSa0pUVTNoR1VWVkdSa3hGVGtKUlZVMXpVVEJHUWxGNmRGSlJWVTR5VWtONFJGRlZSa1JQTUd4Q1VUQjNjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTAzVTFWR1JGTkVjemRQZW5SUVVWVnNTRTh3YkVKUk1HZHpVVEJHUWxGNWVFUlJWVVpFVEVWV1FsRlZWWE5STUVaQ1VYbDRTbEZWUmtwTVJVNUNVVlZOYzFJd1JrSlNlWGhVVVZWR1ZFeEZUa0pSVlUxeldqQktRbEZYWkVOTVJVNUNVVlZOTjFOVlJrUmxSVTF6VVRCR1FsRjVlRVJSVlVaRVRFVldRbEZWVlhOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTmMxRXdSa0pSZVhoWVVWVkdXRXhGWkVKUlZXTnpWVEJHUWxWNWVFUlJWVVpFVHpCc1FsRXlOVVJNUlU1Q1VWVk5jMUV3UmtKUmVYaEdVVlZHUmt4RlRrSlJWVTF6VTFWR1FsTlRlRVJSVlVaRVRFVk9RbEZWVFhOV1ZVWkNWbE40U0ZGVlJraFBNVVpDVVROQ1EweEZUa0pSVlUxelVUQkdRbEY1ZUVaUlZVWkdURVZPUWxGVlRYTlRWVVpDVTFONFJGRlZSa1JNUldSQ1VWVmpjMkV3U2tKUlYzUkRURVZPUWxGVlRUZFZWVVpFWVVWTmMxUlZSa0pVVTNoRVVWVkdSRXhHVGtKUlZrMXpVVEJHUWxGNWVHNVJhMFpDV2pCSmMxRXdSa0pSZW5SS1VWVk9NRkY1ZUVSUlZVWkVURVZPUWxGVlRUZFRWVVpFVW1sNFRsRlZSazVNUlU1Q1VWVk5jMVV3UmtKVmVYaEVVVlZHUkU4d1JrSlJNMHBEVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJURkNVVlV3YzFFd1JrSlJlWGhFVVZWR1JFOHdSa0pSTVdkelZEQkdRbFI1ZUVSUlZVWkVURVU1UWxGVk9ITlNNRVpDVW5sNFZGRlZSbFJNUlU1Q1VWVk5hVXhEU20xaFYzaHNTV3B2YVZsWVRucGFXRko2VEROQ2FGa3lkSHBNTWtwMllqTlNlbVJJU21oalF6bHhZM2s1ZW1OdFRYWmpNazU1WWpKNGMyTXpRalZNYlhCNlNXbDNhV015T1RGamJVNXNZekJPZG1KdVVteGlibEZwVDJ4emFWaERTakZqTWxWbll6TlNlV0ZYVGpCWVEwazNXRWMxVUZsdGNHeFpNMUYxV2tkV2JXRlhOV3hWU0VwMlkwZFdlV1JJYTI5YVdHaDNZak5LTUdONWQyZFlRMHBtV0RKV2VsUlhPV3RrVjNoc1dFTkpjMGxJYzJka2JVWnpaRmRWTmtsSVVubGtWMVZuWmxOck4xaEhOVEpaV0VsblpGaFNjR0pHT0hoSlJEQm5ZMjFXZUdSWGJIbGFVMmhqU1drMGRtUllVbkJpUm5kcFMxUjBZMkpwT0hGTGJIaDFTVU52WjB4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTVdOaWFVRnhTVVZLZG1JelVucGtTRXBvWTBOQmIyUnFVWFZOUXpSM1RGZEdjMk5IYUdoTWFsbHdUMmxDZWxrelNuWmlSM2g2WTBocmRXRnVUbU5pYVVGeFNVVjRjRmt5Vm5Wak1sWnJTVWhXZFZwSFZubEpSVEZLVmtOQmIyRklVakJqU0UwMlRIazVibUZZVW05a1YwbDFXVEk1ZEV3elVqTlpiazEyV1cwNWRtUklUakJqYlVaM1RESktjMkl5U1haaVYwWjZaRWRXZVV3d2VFcFJNRlpQVlRCVmNGaEhOR2RMYVVGMFRGTXdkRXhUTUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZaNGRVbERiM1pZUnpVeVdWaEpaMVV5VG5saU1uaHpWVE5DTlVsRU1HZExSMW94WW0xT01HRlhPWFZKUTJkclMxTkNOMWhITkdkSlEwRm5USGx2Y1ZoSE5HZEpRMEZuU1VOdloweFRNSFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURk13ZEZoSE5HZEpRMEZuU1VOdloxRXlPWFZqTTFKb1ltNVNlbGhITkdkSlEwRm5TVU52WjB4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRmhITkdkSlEwRm5TVU52ZGxoSE5HZEpRMEZuWkcxR2VVbEZOVUpVVlZWblVGTkJibU15VG5saU1uaHpZek5DTlVwNmRHTmlhVUZuU1VOQ01sbFlTV2RXYTFaVFZUQnNVRlJwUVRsSlEyTXdUR3BCZFUxRE1XaGlTRUp2V1ZNME1rcDZkR05pYVVGblNVTkNNbGxZU1dkU1JVWlZVVlk1VEZKV2EyZFFVMEZ1V1c1TmRXTXlUbmxpTW5oell6TkNOVXA2ZEdOaWFVRm5TVU5DTWxsWVNXZFNWbHBHVkd4U1psTXdWbHBKUkRCbldFTkpkVmhEU1dkTGVVSkZVVlpTUWxnd2RFWlhWSFJqWW1sQlowbERRakpaV0VsblVrVkdWVkZXT1VKVlJXeG1VekJXV2tsRU1HZEtlVFZyV1ZoU2FFeFhSbmRoVTJNM1dFYzBaMGxEUVdka2JVWjVTVVZ3VWxaVlZsTlhWamxQVkRFNVJGUXdOVWRVUld4RVZrTkJPVWxEVVhWYWJUVmlWR3RHVGxKV01EZFlSelJuU1VOQloyUnRSbmxKUlZKc1dtMUdNV0pJVVdkUVUwSTNXRWMwWjBsRFFXZEpRMEZuU1VjNWJWcHVUbXhrUkc5blRWUkJjMWhITkdkSlEwRm5TVU5CWjBsSE1XeGtSMmgyV2tSdlowb3lSakZrUnpodVRFWjRkVWxEUVdkSlEwRm5TVU5DTUZsWVNtNWFXRkUyU1VOamJsaEhOR2RKUTBGblpsUjBZMkpwUVdkSlEwSXlXVmhKWjFKSFZtMVpXRlp6WkVaU05XTkhWV2RRVTBJM1dFYzBaMGxEUVdkSlEwRm5TVWM1YlZwdVRteGtSRzluU2pJMU1XSlhTbXhqYVdOeldFYzBaMGxEUVdkSlEwRm5TVWN4YkdSSGFIWmFSRzluU2pOT01HTnRiSFZhZVdOeldFYzBaMGxEUVdkSlEwRm5TVWhTYUdOdFpHeGtSRzluU25sb2VtUklTbkJpYldRNFdsZDRiR0pYVm5Wa1EydHVXRWMwWjBsRFFXZG1WSFJqWW1sQlowbERRakpaV0VsblVsaGFiR0p1VVdkUVUwSTNXRWMwWjBsRFFXZEpRMEZuU1VWR1JGWkZiRmRSVmxKR1QybENZMGx0Um1wa1Iyd3lXVmhTYkZoRFNXZExlVUpHVm10V1QxWkdPVXhTVm10eldFYzBaMGxEUVdkSlEwRm5TVVpPUkZWck9VMVVSRzluV0VOS2Vsa3pTblppUjNoalNXbEJja2xGVmxkU1ZUVlZXREIwUmxkVGVHTmlhVUZuU1VOQlowbERRV2RVUlRsQ1VrWTVSVkZXVWtKWU1FWlJVMVJ2WjFoRFNuTmlNa1pyV0VOSlowdDVRa1pXYTFaUFZrWTVURkpXYTJkTGVVSkZVVlpTUWxnd1JsRlRWamxNVWxac1kySnBRV2RKUTBJNVR6RjRkVWxEUVdkSlNGcG9ZMmxDUkdKSFJucGpNRFZvWWxkVloxQlRRamRZUnpSblNVTkJaMGxEUVdkSlJWSlRWREZDUlZReFpFOVlNR3hWVWxVd05rbERaR3RqYlRsM1drYzVNMkpwTVhCa1IxWjBTbmw0WTJKcFFXZEpRMEZuU1VOQloxSkdTbEJWUlZKUVZqQTFabFJWVms5V1ZHOW5TakpTZVdJelFtdGlNMlIxVEZjeGJHSnVWVzVNUm5oMVNVTkJaMGxEUVdkSlEwSlBVVlphWmxSRmJFOVRlbTluU2pJMWFHUnBNWE5oVnpWeVNubDRZMkpwUVdkSlEwRm5TVU5CWjFSclJsZFBhVUZ1WW0xR01rcDVlR05pYVVGblNVTkJaMGxEUVdkUlZVNVZVMVphUms5cFFXNVpWMDR3WVZoYWJFb3hlSFZKUTBGblNVZ3dOMWhITkdkSlEwRm5aRzFHZVVsR1RteGlSMVpxWkVjNWVVbEVNR2RsTVhoMVNVTkJaMGxEUVdkSlEwSkZVVlpTUWxneFRsRlhWRzluU2pGMGExbFlVbWhNV0U1M1pWUXhZMGx1VG1wamJUbHpZa1ozYVZoVFkzTllSelJuU1VOQlowbERRV2RKUlVaRVZrVnNWMUpVYjJkS2VUVm9XVE5TY0dSdFZXNU1SbmgxU1VOQlowbERRV2RKUTBKTlUxWk9WVmd3YkZWU1ZUQTJTVU5qZFdKSGJIcGtRekZ3WkVkV2RFcDVlR05pYVVGblNVTkJaMGxEUVdkVVJXczJTVU5rYzJGVFkzTllSelJuU1VOQlowbERRV2RKUlhoS1dEQlNVMVF4UWtWVU1XUlBUMmxCYm1KSGEzVmFTRXAyWTBkU2RtUXlORzVNUm5oMVNVTkJaMGxEUVdkSlEwSlBVVlphWmxSRmJFOVRNVTAyU1VOamRXSnRSakpNVjNod1ltMXpia3hHZUhWSlEwRm5TVU5CWjBsRFFrVlZhemxSVWtVNVdGUnFiMmRLZVRWclkyMDVkMXBIT1ROaWFXTnpXRWMwWjBsRFFXZEpRMEZuU1VWU1UxUXhRa1ZVTVdSUFdEQnNWVkpWTVZSUGFVRnVURzFTZVdJelFtdGlNMlIxVEZkc01GcFhNRzVNUm5oMVNVTkJaMGxEUVdkSlEwSkZWV3M1VVZKRk9WaFViRGxWVkRCa1NGUkZWVFpKUTJOMVdraEtkbU5IVW5aa01qUjBaRWM1YmxveWVHeEtNWGgxU1VOQlowbElNRGRZUnpSblNVTkJaMlJ0Um5sSlJUbHRXbTVPYkdSRk1XeGtSMmgyV2tOQk9VbElkR05pYVVGblNVTkJaMGxEUVdkVU1GcEhWVEJXVlU5cFFXNWlNbHB0WXpKV01FcDVlR05pYVVGblNVTkJaMGxEUVdkVlJUbFVVMVpTU2xRd05EWkpRMlIzWWpOT2NHUkhiSFppYVdSalltbEJaMGxEUWpsUE1YaDFTVU5CWjBsRE9IRkxiSGgxU1VOQlowbERRWEZKUXpCMFRGTXdkRXhUTUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURk13ZEV4VE1IUk1WbmgxU1VOQlowbERRWEZKUlU1eldWaE9la2xGVW14YWJXeDFZVmhTY0dJeU5XTmlhVUZuU1VOQlowdHBRWFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURk13ZEV4VE1XTmlhVUZuU1VOQlowdHBPV05pYVVGblNVTkNNbGxZU1dkVk1rNTVZako0YzFVelFqVkpSREJuUzBkYU1XSnRUakJoVnpsMVNVTm5jRWxJZEdOaWFVRm5TVU5CWjBsRFFXZGFibFoxV1ROU2NHSXlOR2RWTWs1NVlqSjRjMVV6UWpWTFIxWnpXbGN4YkdKdVVYTkpSMDUyWW0xYWNGcDVhMmRsTVhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjJSdFJubEpSamt3WVVkc2VrbEVNR2RrUjJod1kzcDBZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpTRkp2WVZoTmRWZ3lWbk5hVnpGc1ltNVJaMUJUUW14aVIxWjBXbGMxTUU4eGVIVkpRMEZuU1VOQlowbERRV2RKUTBGblpFZG9jR041Tldaak1rNTVZako0YzFKWGVHeGlWMVoxWkVOQk9VbEhWbk5hVnpGc1ltNVJkV1JIUm01VWJVWjBXbE5CT1ZCVU1HZEtNRXBRVWtacmJrbEVPR2RrTW14MVdrYzVNMGxFYjJkYVYzaHNZbGRXZFdSRWRHTmlhVUZuU1VOQlowbERRV2RKUTBGblNVaFNiMkZZVFhWWU1rNTJZbTFhY0ZwNVFUbEpTRkp2WVZoTmRWZ3laR3hrUlU1MlltMWFjRnA1YUdwaU1qVnRZVmRqY0U4eGVIVkpRMEZuU1VOQlowbERRV2RKUTBGblpFZG9jR041Tldaak1sWnpXbGRPTUdJelNXZFFVMEl3WVVkc2VreHNPV3BpTWpWdFlWZGpkV1JIUm5sYU1sWXdTVU56WjFoRFNXZFlRMGxuUzNsQ1ZGcFhlR3haTTFKMlkyazFUMUZXV21aVVJXeFBVekZOWjB0NVFtTkphWGhqU1d4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU56WjB0SVVtOWhXRTExV0RKT2RtSnRXbkJhZVRVd1dWaEtibHBZVVdkTGVVSmpTV2xDWTBscFFYSkpSazVzWWtkV2FtUkhPWGxNYTFKVFZERkNSVlF4WkU5WU1HeFZVbFV4VkV0VWRHTmlhVUZuU1VOQlowbERRV2RKUTBGblNVaFNiMkZZVFhWWU1qbHRXbTVPYkdSSVRXZFFVMEppV0ZSMFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlNGSnZZVmhOZFZnelVtaGpiV1JzWkVoTloxQlRRbUpZVkhSalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsSVVtOWhXRTExV0RKR2FtUkhiREphVmxKb1kyMWtiR1JEUVRsSlJ6VXhZa2QzTjFoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBJd1lVZHNla3hzT1hwWk0wcDJZa2Q0U1ZwWGJHNWhTRkZuVUZOQmQwOHhlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5Ta05vTUdGSGJIcE1iRGw2V1ROS2RtSkhlRVppUjFaMFdsYzFNRXRUTlhaaWFXaEdaRzFXZFdSRE5WUlJNVXBRVkVWM2MwbEhXakZpYlU0d1lWYzVkVWxEYUd4a2JWWjFaRU5yWjJWNVFubGFXRkl4WTIwMFoxZ3pVbTloV0UxMVdETkNlV0l5VG14ak0wMXZXbGhhYkdKdVVYQlBlVUk1UzFSMFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlNGSnZZVmhOZFdOdFZtMWpiVlo2WVVObmNFOHhlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5aRWRvY0dONU5XWmpTRXAyV1RKV2VtTjVaM0JQTVhoMVNVTkJaMGxEUVdkSlEwSTVXRWMwWjBsRFFXZEpRMEZuU1VVNWFXRnRWbXBrUXpWcldsZGFjR0p0VmxGamJUbDNXbGhLTUdWVGFGUlpNMHAyWWtkNFZHTklhM05KUm5kcFZtdFdVMVV3YkZCVWJIZHBURU5DTjFoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGMlRIbENibHBZVWpCYVdFcDZXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRbTVhV0ZFMlNVZGFNV0p0VGpCaFZ6bDFTVU5uY0VsSWRHTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUW5sYVdGSXhZMjAwWjFaclZsTlZNR3hRVkdwMFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlNEQnpXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRbXhpYmxaMFdsaEthRmx0ZUd4UGFVSXdZMjVXYkV4R2VIVkpRMEZuU1VOQlowbERRV2RKUTBGbldUSTVkVnB0Ykc1a1dFcG9XVzE0YkU5cFFqQmpibFpzV0VjMFowbERRV2RKUTBGblNVZ3djRTh4ZUhWSlEwRm5TVU5CWjBsRFFsQlpiWEJzV1ROUmRWcEhWbTFoVnpWc1ZVaEtkbU5IVm5sa1NHdHZWVEpPZVdJeWVITlZNMEkxVEVOQ1kwbHJVbXhhYlVZeFlraFNZMGxwZDJkbE1YaDFTVU5CWjBsRFFXZEpRMEZuU1VOQloxb3lWakJQYVVKdFpGYzFhbVJIYkhaaWFVRnZTMU5DTjFoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMk50VmpCa1dFcDFTVVZTYkZwdFJqRmlTRkUzV0VjMFowbERRV2RKUTBGblNVTkJaMGxEUWpsTVJuaDFTVU5CWjBsRFFXZEpRMEZuU1VOQloxcFhOVEZpVjFaNVdWZEtjMXBVYjJka1NFb3hXbE40WTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUjA1MlltMWFjRm96Vm5sWlYwcHpXbFJ2WjJSSVNqRmFWbmgxU1VOQlowbERRV2RKUTBJNVMxUjBZMkpwUVdkSlEwRm5TVU5CWjB4NU9HZGpTRlpwWWtkc2FsaEhOR2RKUTBGblNVTkJaMGxHVG1wamJUbHpZa1pPZDJWVE5YZGpiVGt3WWpOU05XTkhWWFZqYlZadFkyMVdlbUZEUVRsSlIxb3hZbTFPTUdGWE9YVkpRMmR3U1VoMFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlNGcG9ZMmxDWm1SSGFIQmplVUU1U1VoU2IyRllUVGRZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5DTWxsWVNXZFpXRll3WWpBeGJHUkhhSFphUTBFNVNVaFNiMkZZVFhWWU0wNXFZMjA1YzJKRlZuTmFWekZzWW01UlowbFVNRGxKU0ZKdllWaE5kVmd6VG1wamJUbHpZa1ZXYzFwWE1XeGlibEYxWkRKc2RWcEhPVE5KUkRsalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEpRV20xYWVscFlVazVhV0ZKdllqSlJkVlZGT1ZSVFZsSktWREEwWjA5cFFsQmFiVnA2V2xoU1RscFlVbTlpTWxGMVZEQmFSMVV3VmxWUE1YaDFTVU5CWjBsRFFXZEpRMEZuU1VOQloyUnRSbmxKUnpsdFdtNU9iR1JGTVd4a1IyaDJXa05CT1VsSVVtOWhXRTExV0RKT2RtSnRXbkJhZVRWMFdsaFNiMkl5VVdkUVZEQTVTVU5rYUdSWVVuWktlVUV2V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5XVmhXTUdJd01XeGtSMmgyV2tOQk5rbElVbTloV0UxMVdESk9kbUp0V25CYWVUVjBXbGhTYjJJeVVUZFlSelJuU1VOQlowbERRV2RKUTBGblNVTkNNbGxZU1dkaU1scHRZekpXTUZGdFJucGFVMEU1U1VjNWJWcHVUbXhrUlRGc1pFZG9kbHBEUVRsUVZEQm5WREphYldNeVZqQlVWMVl3WVVjNWEweHNRbEJWTUd4VlUxVTVUMGxFT1dOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRakJoUjJ4NlRHdzVibHBZVWxSWk0wcDJZa2Q0VldJelFXOUxVMEUyU1VSQk4xaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwSXdZVWRzZWt4c09YWmFiVnA2V2xoU2VrbEVNR2RYTVRBM1dFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFqQmhSMng2VEd3NU1GbFlTbTVhV0ZKNlNVUXdaMWN4TURkWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQ01HRkhiSHBNYkRsNldUTktkbUpIZUVsYVYyeHVZVWhSWjFCVFFqQmhSMng2VEd3NWJscFlVbFJaTTBwMllrZDRTVnBYYkc1aFNGRnZTMVIwWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKU0Zwb1kybENNRmxZU201YVdGSjZTVVF3WjBwRE5YUlpWM1JzVVZoS2VWbFlhMjlLUTJnd1lVZHNla3hzT1hwYVYzaHNXVE5TZG1OcGEzQlBNWGgxU1VOQlowbERRV2RKUTBGblNVTkJaMlJIUm5sYU1sWXdZekY0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTTFkRmxZUVc5YWJsWjFXVE5TY0dJeU5HZExSMVp6V2xjeGJHSnVVWEJKU0hSalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEl5V1ZoSloyUkhSbmxhTWxZd1R6RjRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VoYWFHTnBRakJaV0VwdVdsaFNWRnBYZUd4Wk0xSjJZMmxCT1VsSVZqQmhWM2htVFZNMWExcFhXbWhrVjNnd1RHMWtiR1JHVG14aVIxWnFaRWM1ZVZKdVNuWmlWVlp6V2xjeGJHSnVVVzlhVjNoc1lsZFdkV1JEYXpkWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RoVjFsblMwaFNhR050Wkd4a1JrNXNZa2RXYW1SSE9YbExVMEkzV0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSVVtaGpiV1JzWkVOQk9VbERVVzlrUjBaNVdqSldNRlV5Vm5OYVYwNHdZak5KY0ZkNlFtUlBNWGgxU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlNERmpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBKd1dtbEJiMlJIUm5sYU1sWXdTVU5aYlVsRGFEQlpXRXB1V2xoUmRXSXlXbTFqTWxZd1ZqSnNhMlJIWjJkbVNIZG5aRWRHZVZveVZqQk1iVGx0V201T2JHUkZhR3hoVjJSdlpFTnJjRWxJZEdOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblRIazRaMlJIT1d0aWVVRnZXbTFHTUV0VWIyZGpiVlowWWpOYWJFbElUbkphV0ZKcVlVTkNlVnBYZUhCWlZ6VnFXbE5DZG1KcFFuRlZXRlpzWTI1cloyTkhPWHBoV0ZKd1lqSTBkbUl5V20xak1sWXdXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxJU214a1NGWjVZbWxDWWxoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CYTB0SVVtaGpiV1JzWkVOc1ltSXlXbTFqTWxZd1ZGZFdNR0ZIT1d0WVUyZHdURzVTZG1ORFFYSkpSemx0V201T2JHUkZTbWhqTWxWeldFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBJd1dWaEtibHBZVWxSYVYzaHNXVE5TZG1Oc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwSmtUekY0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVZ3hZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQ2VWcFlVakZqYlRSblltNVdjMkpFZEdOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1Vnd2NGaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjB4dFduQmlTRkpzWTJsb2JXUlhOV3BrUjJ4MlltbEJiMkZZVW14aVUydG5aWGxDZVZwWVVqRmpiVFJuWVZoU2JHSlVjMmRtVTJ4alltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEYxWXpJNWVXUkRhRzFrVnpWcVpFZHNkbUpwUVc5WlUzZG5XV2xyWjJWNVFubGFXRkl4WTIwMFoxbFdjM2RZVTBGMFNVZEtZazFHTURkSlNEQndXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblRHMWFkbU5yVm1oWk1tZHZXbTVXZFZrelVuQmlNalJuUzBkc01GcFhNSEJKU0hSalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEptWkVkb2NHTjVOV1ppTWxwdFl6SldNR041Tlhka1dFNXZTMGRzTUZwWE1XSk5SakJ3VHpGNGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVVk1TUdGSGJIcE1iRGt3V1ZoS2JscFlVbnBNYmtJeFl6Sm5iMkZZVW14aVZuTjRXRk5yTjFoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBJNVMxUjBZMkpwUVdkSlEwRm5TVU5CWjJaVWRHTmlhVUZuU1VOQlowbERRV2RWTWs1NVlqSjRjMVV6UWpWTWJrSjVZak5TZG1SSWJIZGFVelZyWVZoT2QySXpUbXhKUkRCbldtNVdkVmt6VW5CaU1qUm5TME5yWjJVeGVIVkpRMEZuU1VOQlowbERRV2RKUTBGblNrTTFlVnBYTVhaa2JWWkZXVmhTYUV0SVVtOWhXRTExV0RKV2MxcFhNV3hpYmxGelNVVlNRbFpGUm1aVE1GWmFTMVIwWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUTFGdlpFZG9jR041Tldaak1rNTVZako0YzFKWGVHeGlWMVoxWkVOcmRXSXlXbTFMUlZaWFVsVTFWVmd3ZEVaWFUyczNXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRakJoUjJ4NlRHdzViR0pIVm5SYVZ6VXdTVVF3WjJKdVZuTmlSSFJqWW1sQlowbERRV2RKUTBGblNVTkJaMGxJVW05aFdFMTFXRE5PYW1OdE9YTmlSVlp6V2xjeGJHSnVVV2RRVTBKMVpGZDRjMDh4ZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuWkVkb2NHTjVOV1paTWpsMVdtMXNia2xFTUdkaWJsWnpZa1IwWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKU0ZKdllWaE5kVmd6VG14aVIxWnFaRWM1ZVVsRU1HZGlibFp6WWtSMFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlNGSnZZVmhOZFZneU9XMWFiazVzWkVoTloxQlRRblZrVjNoelR6RjRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZGtSMmh3WTNrMVptUkhSbmxhTWxZd1kzbEJPVWxITlRGaVIzYzNXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRakJoUjJ4NlRHdzVhRmt6VW5Ca2JWWlZXVmhLYmxwWVVXZFFVMEoxWkZkNGMwOHhlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5aRWRvY0dONU5XWmpNazU1WWpKNGMxTkhWbkJhTW1nd1NVUXdaMkp1Vm5OaVJIUmpZbWxCWjBsRFFXZEpRMEZuWmxSMFkySnBRV2RKUTBGblNVTkJaMHg1T0dkalNFcHdaRzFHTUZwV2VIVkpRMEZuU1VOQlowbERRbFJaTTBwMllrZDRWR05JYTNWalNFcDJaRWM1TUdWWVFteE1iRGx1V2xoU1JHSXlOVzFoVjJOblVGTkNiV1JYTldwa1IyeDJZbWxCYjFreU9YVmFiV3h1UzFOQ04xaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwSnFZakkxYldGWFkyZFFVMEZyVEcxV05HUkhWblZhUTJnM1psTjNaMUpIVm0xWldGWnpaRU4zWjFreU9YVmFiV3h1UzFSMFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlIyeHRTVU5vTUdWWVFteGlNbGxuV1RJNWRWcHRiRzVNYmxKb1kyMWtiR1JEUVdoUVZEQm5Tak5PTUdOdGJIVmFlV053U1VoMFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5DTWxsWVNXZGhWMUZuVUZOQmEwdEhUblppYlZwd1duazFNRmxZU201YVdGRndURzFHTUdSSVNXOUtNbXhyU25sck4xaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjJGWFdXZExRMFp3V2tOcloyVXhlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEp3V2tOQk9VbElWakJoVjNobVRWTTFhMXBYV21oa1YzZ3dURzFrYkdSR1ZrcFNRMmhQVVZVeFJrdFVkR05pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU2tOb2FtSXlOVzFoVjJOMVpFZEdlVm95VmpCTFV6Vm9aRWhTZVV0RFpIQmFRMk56U1Vkc2EwdFVkR05pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFqbFlSelJuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkWk1qbDFXbTFzYmt4dVVtaGpiV1JzWkVOQk9VbEdkMmxKTVhkcFNVTnpaMkZYVVRkWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQ09WaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwSXhaRWRzYzFoNlJYVmFSMVp0V1ZoV2MyUkROVEJsV0VKc1VUSm9iRmt5ZEVSaU1qVnRZVmRqYjFSclJrNVNVM2RuV1RJNWRWcHRiRzVNUTBKRldsZGFhR1JYZURCV1NHeDNXbE5yTjFoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBKNVdsaFNNV050TkdkWk1qbDFXbTFzYms4eGVIVkpRMEZuU1VOQlowbERRamxQTVhoMVNVTkJaMGxEUVdkSlEwSlVXVE5LZG1KSGVGUmpTR3QxWTBoS2RtUkhPVEJsV0VKc1RHdzVibHBZVWxSWk0wcDJZa2Q0VldJelFXZFFVMEp0WkZjMWFtUkhiSFppYVVGdlMxTkNOMWhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEo1V2xoU01XTnROR2RrUjJod1kzazFabU15VG5saU1uaHpVbGQ0YkdKWFZuVmtRMEU1VUZRd1oyUXliSFZhUnprelNVUTVZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQ01HRkhiSHBNYkRsNldUTktkbUpIZUVaaVIxWjBXbGMxTUV4dVFtaGFNbFphVkRKYWJXTXlWakJKUkc5blpFZG9jR041Tldaak1rNTVZako0YzFKWGVHeGlWMVoxWkVNMWVsa3pTblppUjNoVllqTkJOMWhITkdkSlEwRm5TVU5CWjBsSU1EZFlSelJuU1VOQlowbERRV2RKUms1cVkyMDVjMkpHVG5kbFV6VjNZMjA1TUdJelVqVmpSMVYxV0RKa2JHUkdUbXBqYlRsellrVm9iR0ZYWkc5a1EwRTVTVWRhTVdKdFRqQmhWemwxU1VObmNFbElkR05pYVVGblNVTkJaMGxEUVdkSlEwRm5TVWhLYkdSSVZubGlhVUl3WVVkc2VreHNPWHBaTTBwMllrZDRSbUpIVm5SYVZ6VXdURzVPYW1OdE9YTmlSV2hzWVZka2IyUkRRamhtUTBKT1dWaFNiMHh0TVdobFEyaHJZakpPTVdKWFZuVmtRelZwWWpKU05VeHVUbXBqYlRsellrVm9iR0ZYWkc5a1EzZG5Xa2M1YW1SWE1XeGlibEYxV2tjNWFtUlhNV3hpYmxKR1lrZFdkRnBYTlRCTWJrNXFZMjA1YzJKRmFHeGhWMlJ2WkVOck4xaEhOR2RKUTBGblNVTkJaMGxJTURkWVJ6Um5TVU5CWjBsRFFXZEpSazVxWTIwNWMySkdUbmRsVXpWM1kyMDVNR0l6VWpWalIxVjFXREprYkdSRk9XMWFiazVzWkVWb2JHRlhaRzlrUTBFNVNVZGFNV0p0VGpCaFZ6bDFTVU5uY0VsSWRHTmlhVUZuU1VOQlowbERRV2RKUTBGblNVaEtiR1JJVm5saWFVSXdZVWRzZWt4c09YcFpNMHAyWWtkNFJtSkhWblJhVnpVd1NVUXdPVkJUUWpOaFZ6VnJZak5qWjFBeGVIVkpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxJWkhCaWJWSjJaSGsxY0dKdE5XeGphMmhzWVZka2IyUkRRVFpKU0ZKdllWaE5kVmd6VG1wamJUbHpZa1ZXYzFwWE1XeGlibEYxWWpKYWJXTXlWakJUUjFad1dqSm9NRTh4ZUhWSlEwRm5TVU5CWjBsRFFqbFBNWGgxU1VOQlowbERRV2RKUTBKVVdUTktkbUpIZUZSalNHdDFZMGhLZG1SSE9UQmxXRUpzVEd3NWQyTnRPV3BhV0U1NlNVUXdaMXB1Vm5WWk0xSndZakkwWjB0RGEyZGxNWGgxU1VOQlowbERRV2RKUTBGblNVTkJaMlJ0Um5sSlNFNXFZMjA1YzJKR1VuWmpRMEU1U1VoU2IyRllUWFZZTW1Sc1pFWk9hbU50T1hOaVJsSjJZME5uY0VsRGMyZGtSMmh3WTNrMVpsa3lPWFZhYld4dVRHMDViVnB1VG14a1JIUmpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbElXbWhqYVVKNldUTktkbUpIZUVsYVYyeHVZVWhSWjFCVFFqQmhSMng2VEd3NWJscFlVbFJaTTBwMllrZDRTVnBYYkc1aFNGRnZTMVIwWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKU0Zwb1kybENkRmxZYUZSWk0wcDJZa2QzWjFCVFFqQmhSMng2VEd3NWFtSXlOVzFoVjJOMVlqSmFiV015VmpCWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RMZVVKNldUTktkbUpIZUVsYVYyeHVZVWhTWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJkRWxJVW05aFdFMTFXREprYkdSRk9XMWFiazVzWkVWb2JHRlhaRzlrUTJkd1R6RjRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZGhWMWxuUzBoU2IyRllUWFZZTTA1cVkyMDVjMkpGYUd4aFYyUnZaRU5CYUZCVU1HZGpNazU1WWpKNGMxTkhWbkJhTW1nd1MxTkNOMWhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloyUkhhSEJqZVRWNVdsZGFlVnBZVG05TFEyczNXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRamxZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5DY0ZwcFFXOWpNazU1WWpKNGMxWkhPWGRKUkRRNVNVY3hhR1ZHVG1wamJUbHpZa05yWjJVeGVIVkpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxJV21oamFVSXdXVmhLYmxwWVVXZFFVMEl3WVVkc2VreHNPVEJaV0VwdVdsaFNlbGN6VW05aFdFMTFXRE5TYUdOdFpHeGtTRTExWWtkV2RWb3pVbTlKUXpCblRWWXdOMWhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloyRlhXV2RMU0ZKdllWaE5kVmd5Um1wa1Iyd3lXbFpTYUdOdFpHeGtRMEZvVUZRd1oyUkhSbmxhTWxZd1MxTkNOMWhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKU0ZKdllWaE5kVmd5Um1wa1Iyd3lXVmhTYkV0SVVtaGpiV1JzWkVOck4xaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjJaV2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxJU214a1NGWjVZbXAwWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKU0RGalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsSGJHMUpRMmd3WVVkc2VreHNPV2haTTFKd1pHMVdWVmxZU201YVdGRm5TbWxaWjJNeVRubGlNbmh6VmtjNWQwbEVkMmRrUjJod1kzazFabUl5V20xak1sWXdZekZ6ZDFoVFFXMUthVUl3WVVkc2VreHNPWFphYlZwNldsaFNlbGQ2UW1SSlJEUm5UVU5yWjJVeGVIVkpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxJVW05aFdFMTFXREpHYW1SSGJESmFWbEpvWTIxa2JHUkRRVGxKUnpVeFlrZDNOMWhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloyUkhhSEJqZVRWbVdUSjRiRmxZU1c5TFZIUmpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBKNVdsaFNNV050TkRkWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQ09WaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwSnRZak5KWjB0SVdtaGphVUp3U1VRd1oyUkhhSEJqZVRWbVlqSmFiV015VmpCamVUVnpXbGMxYm1SSFp6ZEpSMnQwVEZSemNFbElkR05pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFqSlpXRWxuWVZoT1Fsa3pVbkJrYlZaVldWaEtibHBZVVdkUVUwSXdZVWRzZWt4c09XaFpNMUp3WkcxV1ZWbFlTbTVhV0ZGblNWUXdPVWxJVW05aFdFMTFXRE5TYUdOdFpHeGtTRTVpWVZZeFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEthVmxuWXpKT2VXSXllSE5XUnpsM1NVUTBPVWxJVW05aFdFMTFXREk1YlZwdVRteGtTRTVpWVZZeFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEthVmxuUzBoU2IyRllUWFZZTWpsdFdtNU9iR1JJVG1KaFUwRnlTVVJHWkVsRU1EbFFVMEl4WW0xU2JGcHRiSFZhVjFGblpraDRZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVaE9hbU50T1hOaVJsSjJZME5CT0VsSVVtOWhXRTExV0RJNWJWcHVUbXhrU0U1aVlWTkJja2xFUm1STFZIUmpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBKd1dtbEJiMkZZVGtKWk0xSndaRzFXVlZsWVNtNWFXRkZ3U1VoMFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZGtSMmh3WTNrMVpsbFhUakJoV0Zwb1pFZFZiMlJIYUhCamVUVm1aRWRHZVZveVZqQmpNWFJ3V0ZOck4xaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjJaV2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblpsWjRkVWxEUVdkSlEwRm5TVU5DT1U4eGVIVkpRMEZuU1VOQlowbERRbFJaTTBwMllrZDRWR05JYTNWalNFcDJaRWM1TUdWWVFteE1iRGxvV1ROU2NHUnRSakJhVTBFNVNVZGFNV0p0VGpCaFZ6bDFTVU5vTUZsWVNtNWFXRkZ3U1VoMFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlNGSnZZVmhOZFZneVJtcGtSMnd5V2xaU2FHTnRaR3hrUTBFNVNVaFNhR050Wkd4a1JIUmpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbElVbTloV0UxMVdESk9jMXBYUm5sTFEyczNXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRakpaV0VsblkxaFdiR050Ykd4amVVRTVTVWhTYjJGWVRYVllNMDVzWWtkV2FtUkhPWGxNYms1M1lrZHNNRXREWTNOS2VXczNXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRbmhrVjFaNVlWZFdla2xFTUdkaldGWnNZMjFzYkdONU5YUlpXRUZ2V201V2RWa3pVbkJpTWpSblMwaE9iR0pIVm1wa1J6bDVTMU5DTjFoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMk50VmpCa1dFcDFTVWhPYkdKSFZtcGtSemw1U1VOeloxaERTbUphUjBZd1dWTXhNRmxZU201YVdGRTVXRVo0WTBsc2QybEpRM05uWkVkR2VWb3lWakJKUTNObldFTktZMWhHZDJsWVUzaGpTV2xCY2xoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEyaDZXbGQ0YkZrelVuWmphVUZ5U1VaM2FWY3lhSGxhVjFrNVdFWjRZMGxzZDJsSlEzTm5aRWRHZVZveVZqQkpRM05uV0VOS1kxaEdkMmxZVm5kcFMxUjBZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpTREJ3VHpGNGRVbERRV2RKUTBGblNVTkJaMGxEUVdka2JVWjVTVU5TYzJGWE5YSkpSREJuU2tOb2VHUlhWbmxoVjFaNlRHMXdkbUZYTkc5S2VYZHVTMU5yTjFoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBKd1dtbEJiMHBIZUhCaWJYTjFZVWRHZWxFeWVHaGpNMDF2VVRKNGFHTXpUazlaVnpGc1RHdFNVMVF4UWtWVU1XUlBXREJzVlZKVk1IQkxVMEkzV0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5Ta2Q0Y0dKdGMzVlpNbmgyWXpKV2VtUkRhRlJhVjNoc1dUTlNkbU5wTlVWVmF6bFJVa1U1V0ZScGEzVmFiV3gxV2tOb1ZGcFhlR3haTTFKMlkyazFSVlZyT1ZGU1JUbFlWR3c1VlZRd1pFaFVSVlZ3VEcxR2ExcEZUbk5aV0U1NlMwVk9jMWxZVG5wVWJVWjBXbE0xUWxFeFVrcFdhMVZ3VHpGNGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5TYzJGWE5YSk1iVVpyV2tWT2MxbFlUbnBMUlU1eldWaE9lbFJ0Um5SYVV6VkNVVEZTU2xaclZYQlBNWGgxU1VOQlowbERRV2RKUTBGblNVTkJaMlpXZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuV2xkNGVscFRRamRZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZE1lVGhuWkVjNWEySjVRVzlhYlVZd1MxTkNNR0ZIYkhwSlIyeDZTVWQwY0dKdFVtaEpTRTR4WTNrMGRVeHNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRE9IWkpTRXBzV1ROV2VXTXliREphVjNnMVNVZEdhMXBEUW1oWk0xSndaRzFXZWtsSVVuWkpTRkpzWXpOU2JGcERRblZaV0ZsMFlrZHNkV0V6VG1OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV3RpUjJ4MVlYazFkMWxZU214aWJsSjZTMFpPYkdKSFZtcGtSemw1VEd0NFNrdFROVzFoVnpWclMwWjNhVkJwUW1OSmFVRnlTVVpPYkdKSFZtcGtSemw1VEdzMVFsWnNPVTFUVlRWTVZYbHJkVmxYVW10Uk1uaG9Zek5OYjFFeWVHaGpNMDVQV1ZjeGJFeHJSa1JXUld4WFVsTnJOMWhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEk1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVd0TFNGSnZZVmhOZFZnelRtcGpiVGx6WWtWV2MxcFhNV3hpYmxGd1RHNVNlV0ZYWkc1YVdFbHZVbGhhYkdKdVVYVlJWVTVWVTFaYVFsWkZWWE5KU0hSalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEo1V2xkNGFHUkhWbXRXUjBaNVdqSldNRTlwUWpCWldFcHVXbGhTWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKU0RCd1R6RjRkVWxEUVdkSlEwRm5TVU5DT1U4eGVIVkpRMEZuU1VOQlowbERRbFJaTTBwMllrZDRWR05JYTNWalNFcDJaRWM1TUdWWVFteE1iRGxxWWtkV2FHTnBRVGxKUjFveFltMU9NR0ZYT1hWSlEyZHdTVWgwWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUTFGdlpFZG9jR041Tldaak1sWnpXbGRPTUdJelNYQk1iVnB3WWtoU2JHTnBhRlJhVjNoc1dUTlNkbU5wTlVKUk1WSktWbXRWY0V4dVNteGlWemt5V2xWT2MxbFlUbnBMUlU1eldWaE9lbFJ0Um5SYVV6VkNVVEZTU2xaclZYQlBNWGgxU1VOQlowbERRV2RKUTBJNVR6RjRkVWxEUVdkSlEwRm5TVU5CZGt4NVFucGtSMFl3WVZkT1kySnBRV2RKUTBGblNVTkJaMVV5VG5saU1uaHpWVE5DTlV4c09YRlZXRlpzWTI1c1NtSnVVbXhqYlZwb1dUSlZaMUJUUW0xa1Z6VnFaRWRzZG1KcFFXOVpNamwxV20xc2JrdFRRamRZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5DZVZwWVVqRmpiVFJuWkVkb2NHTjVOV3haVjA1dlMwZGFNV0p0VGpCaFZ6bDFTVU5uY0VsSWRHTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUWpKWldFbG5Xa2RHTUZsVFFUbEpRMUZ2WkVkb2NHTjVhM1ZhUjBZd1dWTm9SVkZXVWtKWU1IUkdWMU5yTjFoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMlJ0Um5sSlJqbHFZakkxYldGWFkyZFFVMEl3WlZoQ2JHSXlXV2RaTWpsMVdtMXNia2xFTURsUVUwRnVZakpLY1ZwWFRqQktlVUZ0U21sQ2FtSXlOVzFoVjJNM1dFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuWVZkWlowdERSbXRaV0ZKb1MxTkNOMWhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUjFKb1pFZEZaMUJUUW5WYVdHTm5WVEpPZVdJeWVITlZNMEkxUzBoU2IyRllUWE5KUmpscVlqSTFiV0ZYWTNCUE1YaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJhMHRJVW05aFdFMXdURzFTYUdSSFJXOVNSVVpWVVZZNVRGSldhM05KUjFKb1pFZEZjRTh4ZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbElNV05pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFuQmFhVUZ2WkVoc2QxcFhPVzFKUjA1MlltMWFjRnA1UVRsUVZEQm5Tak5PTUdOdGJIVmFlV053U1VoMFkySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZGhWMWxuUzBkU2FHUkhSbUpaTWpsMVdtMXNibGhUUVRsUVZEQm5aRmMxYTFwWFduQmliVlpyUzFOQ04xaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQ01HRklTblprZVVKMVdsaGpaMUpZU25saU0wbHZXRU5LVDJKNVFuUmFXRkp2WWpKUloySnRSblJhVjFGbldFWjRZMGxzZDJsSlEzTm5XVEk1ZFZwdGJHNUpRM05uV0VOS1kxaEdkMmxZUTBsd1R6RjRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRamxZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VkU2FHUkhSbUpaTWpsMVdtMXNibGhUWjNCUE1YaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKU0RGalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsSU1IQlBNWGgxU1VOQlowbERRV2RKUTBJNVR6RjRkVWxEUVdkSlEwRm5TVU5DZVZwWVVqRmpiVFJuVlRKT2VXSXllSE5WTTBJMVR6RjRkVWxEUVdkSlNEQnZTMU5yTjFoSE5HZEpRMEZuVEhsdmNWaEhOR2RKUTBGblNVTnZaMHhUTUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RGaEhOR2RKUTBGblNVTnZaMUpIUmpCWlUwSkNZMGRyWjJGWE1YZGlSMVowV2xjMU1GbFlVbkJpTWpWalltbEJaMGxEUVdkTGFVRjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpGalltbEJaMGxEUVdkTGFUbGpZbWxCWjBsRFFXdExTR1J3WW0xU2RtUjVhM1ZpTWpSdlVsaGFiR0p1VVhWVVJUbENVa1k1UlZGV1VrSllNRVpSVTFOM1oxcHVWblZaTTFKd1lqSTBaMHREYTJkbE1YaDFTVU5CWjBsRFFXZEpRMEl5V1ZoSloyTXlUbmxpTW5oelZUTkNOV041UVRsSlExRjFZbGRHY2xwVlJubGpiVVkxUzBOUmIxVXlWbk5hVjA0d1lqTkpkVkpGUmxWUlZqbFVWVVpyY0V0VWRHTmlhVUZuU1VOQlowbERRV2RhYlRsNVNVTm9NbGxZU1dkaFUwRTVTVWhPYW1OdE9YTmlSazUzWlZoTmRXSkhWblZhTTFKdlQzbENjRXhUTURkTFUwSTNXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRakpaV0VsblNraE9kMlZUUVRsSlExRnZZekpPZVdJeWVITlZNMEkxWXpGMGNGaFRhemRZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5DVkZrelNuWmlSM2hVWTBocmRWZ3ljRkprVjFaNVpWVnNkV1JIVm5sYWJVWnFXbE0xYWxsWGVITkxRMUo2WTBocmMwbERVbnBqU0d0MVdrZEdNRmxUWjNCTFZIUmpZbWxCWjBsRFFXZEpRMEZuWmxaNGRVbERRV2RKU0RCd1R6RjRkVWxEUVdkSlF6aHhTMng0ZFVsRFFXZEpRMEZ4U1VNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURlo0ZFVsRFFXZEpRMEZ4U1Vkd1VtUlhWbmxsVm5oMVNVTkJaMGxEUVhGSlF6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVXpCMFRGTXdkRXhUTUhSTVV6QjBURk13ZEV4VE1IUk1VekIwVEZNd2RFeFRNSFJNVm5oMVNVTkJaMGxEUVhGTU1YaDFTVU5CWjBsRFVYVmFiVFZpVkd0R1RsSldNR2RRVTBKVVdUTktkbUpIZUZSalNHdDFXREp3VW1SWFZubGxWV3gxWkVkV2VWcHRSbXBhVkhSalltbEJaMGxEUVd0TWJWcDFWekExUWxSVlZtUk1hMDUyWW01T01HTnVWbXBrUnpsNVNVUXdaMVV5VG5saU1uaHpWVE5DTlU4eGVIVkpRMEZuU1VOUmRWcHROV0pVYTBaT1VsWXdkV0p0T1VSaU1qVnRZa2RzYW1SRFFUbEpSMW94WW0xT01HRlhPWFZKUTJkd1NVaDBZMkpwUVdkSlEwRm5TVU5CWjBwRE5XMWliSFJQVVZVeFJsaFRRVGxKUlhCU1ZsVldVMWRXT1U5VU1UbEVWREExUjFSRmJFUldSSFJqWW1sQlowbERRV2RKUTBGblkyMVdNR1JZU25WSlJrNXFZMjA1YzJKR1RuZGxVelZtWVd4R01WcFlTalZUVnpVd1dsaEtiVmxYVG14UE1YaDFTVU5CWjBsSU1EZFlSelJuU1VOQloyTnRWakJrV0VwMVNVWk9hbU50T1hOaVJrNTNaVlIwWTJKdU1IQkxSM0JTWkZkV2VXVlRhemRZUnpWc1pVaENkbU51VW5wTWJWSnNXbTFHTVdKSVVXZFFVMEpVV1ROS2RtSkhlRlJqU0dzM1dFYzFZMkpwT0haSmVVSjZZak5XZVZreVZrNVpXRUozWVZjMWJsWldTazFRVjFKb1pFZEZObGxZUW5kaVIyeHFXVmhTY0dJeU5IWmhiazUyWW1wMGFtRkhSbmxqTWxZd1VGaFdNRnBxWnpkWmJVWjZXbFJaTUV4SFZqVlRha3BoVjBWd05sbFdZelZrVld4eFlqTndUVkV3Y0RaWmFrNVhaVlpyZVZadWNFcGhia0pwVTFjeFIyVnRUWGxXYWtKcVpWUnNNMWRXWkU5amJVNDFUMWRzYVUxcWEzZFplazVUWlZac1dWRllXbWhpYXpFeVdYcE9TMkZyZDNwVWJYQnFZbFJzZWxscmFFOWtNbFpVVGxoR2FtVlZjR3RVUlU1TFpGWnNXRTFYZUdwbFZXc3lWbnBGZDJNd2JIUk5WMmhxVTBWS2QxbHRNV3RsYTJ4eFlqSnNVR1Z1VWtOVlZsWkhVV3Q0UkdSRlRsSldWVmt4VlZkd01GRnNSbFphUkZwU1lXNU5NMVF6Y0hwT01VbDNVbXQ0VTJWdVVrTlZWbFpYVTFWNFJtSkZTbEpXVkVKNlZsUkNSMUZzVmpWbFJXaFNWbFZhU1ZSRlZrOVJiRVpXVkZoT1YxWlZXa05WV0d3MFVrWkdWbEpyVWxCTlIzaERWV3BKTVZFd09UWmplbVJRVFVSc1ExVXhWbXBPTVU1V1VtdGFWRkV6YUV0VlZsWkhWR3Q0Um1KRlNsSldWM1I2VldwQ1IxRnRSbFpUV0U1WFRVVmFRMVp1YkRSU1JrWldVbXRLVUUxSGVFTlZWRTVUVWtWNFJtSkZTbEpXVkVKNlZrUkNSMUZzVWpWbFJXaFNWbFZhY1ZSRlpGZFJiRVpZVmxoT1VrMUZXa05WVmxJd1UyeEdWbFJZYUZKbFdHaExWVlpXUjFScmVFZFNhMHBTVm10V2VsVnFRa2RSYkd4VVpVZHdVbFpWV25GVVJWWlBVV3hHVmxKVVpGUldWVnBGV2xkMFRtTXhUbFpTYTBwVlZUTm9WVlZXVmtkV1JYaEdXa1ZLVWxadGRIcFdSbFpIVVd4T1ZHVkdTbEpXVlZwWFZFVldUMUZzUmxaU1ZHUlVWbFZhUlZwWGRFNWpNVTVXVW10S1ZWVXphR0ZWVmxaSFYydDRSbHBGU2xKV2F6RjZWbXBDUjFGc1dqVmxSVkpTVmxWYVExUjZRbk5SYkVWNlZXdFNUVkpYZUVOVlZsVjNZekpGZDFOclNsSldNMUpFVkVWV2ExRnNSbFpaTTA1U1RVVmFRMVZZYkRSU1JrWldVbXRTVFZKV1drTlZWbFpXWXpGRmQxSnJTbEpsV0doTFZWWldSMU5yZUVaVWEwcFNWbFV4ZWxWVVFrZFJiRVpWWkVWd1VsWldXalZWV0d3MFUyeEdWbEpyTlUxU1ZHeERWVlpWTkdNeFNYZFNhMHBUWlc1U1UxVldWazloTUhoR1RWVktVbFpVUW5wVmJGWkhVV3hLTldWRldsSldWVnBIVkhwR1IxRnNSWGhhTTA1VlZsVmFRMVpHVGpSU2JFWldVbXRvVFZKVVJrTlZWbFYzVGpGV1ZsSnJVbUZoV0doUFZWWldSMVJyZUVaV2EwcFNWbGRPZWxWc1ZrZFJiRXBWWkVWNFVsWlZOV2hVUlZaUFVXeEdWbEpVWkZSV1ZWcEhWV3RPTkZOc1JsWlNhelZOVW0xU1ExVldXbXBqTVVsM1VtdEtVMlZ1VWxOVlZsWlBZekZHY0dWRk5WSldWVnBQVkVWV1YxRnNSbFpaTTA1V1ZsVmFRMVpXVWpCVmJFWldWRzVHVW1GWWFFOVZWbFpIVkd0NFJsWnJTbEpXVjA1NlZsWldSMUZzVmxWa1JrcFNWbFUxZUZWWGJEUlViRVpXVW1zMVRWSldXa05WVmxacVl6SkZkMU5yU2xKV00xSkVWSHBDTUZGc1JqWldhMDVOVWxVMVExVldWa1pPTVU1V1VtdGFVMUV6YUV0VlZsWkhWR3Q0Um1SRlNsSldXRTU2VldwQ1IxRnNTalprUmtwU1ZsVTFhRlJGV2tkUmJFWlhVbGhPVTFaVldrTldWazQwWVVaR1ZsSnNhRTFTYXpWRFZWWmFhazR4VmxaU2ExSnJVbFV4ZWxaR1ZrZFJiRkpVWlVWYVVsWlZXbGRVUlZwclVXeEdWMVJZVGxaTlJWcERWbTV3TUZWc1JsWlVibVJTWlZob2IxVldWa2RoUlhoR1ZtdEtVbFpYVG5wV1ZFSkhVV3hTTldWR1VsSldWVnBWVkVWV2ExRnNSbFpaTTA1WVZsVmFRMWRZY0RCVVJrWldWRzVPVTFFemFFVlZWbFpIVVdzNGQySkZTbE5XVmtaNlZURldSMUZzVWxSbFJsSlNWbFZhVlZSRlZtdFJiRVpXV1hwa1ZsWlZXa1ZaVlZaS1l6RnNWbEpyU2xwVk0yaEhWVlpXUjFORmVFaFdhMHBTVmpGVk0xWldWa2RTUlhkM1UxaE9XbFpWV2tOWFZrNDBVbXhHVmxKcmFFMVNNVnBEVlZaa1ZrNHhWbFpTYTFKTlRVVnNlbFpXVmtkUmJGWlVaVVZhVWxaVldsTlVSVnBYVVd4R1YxWlVaRlpXVlZwRlZGWldTbU14U1hkU2EwcFRaVmhvUjFWV1ZrZGhSWGhHWkVWS1VsWllUVE5XVmxaSFVrZE9jbE5ZVGxWV1ZWcERWa1pPTkZKc1JsWlNiRnBOVW10YVExVldXa1pPTVUxM1VtdFNiR0V3YkhwVlZFSkhVV3hHVldSRmNGSldWbHBHVkVWV2MxRnNSbFpOU0U1V1ZsVmFRMVpXVGpSVFJrWldVbXRvVUUxVldrTlZWRXBhWXpGV1ZsSnJTbFpWTTJoSFZWWldSMVpyZUVsU2EwNVNWbFZhTkZWWGNEQlZiRVpXVkdwS1VtVllhRTlWVmxaSFZHdDRSbFpyU2xKV2JYUjZWbFJDUjFGc1ZqWmtSa3BTVmxVeE5sVlhiRFJXUmtaV1VteFNUVkpXV2tOVlZscE9ZekZrVmxKclNsaFdTRkpUVlZaV1RrNVdSbkJsUlZwU1ZsVmFSMVJGVmxkUmJFWllXa1ZPVFZKWGVFTlZWbFp5VGpGV1ZsSnJVbXRTVld4NlZtcENSMUZzV2pWbFJWcFNWbFZhVVZSRlpFZFJiRVpZVWxSa1ZsWlZXa1ZVUkVKS1l6RlZkMUpyU2xabFdHaEhWVlpXUjFaRmVFZGFSVXBTVm0xTk0xWldWa2RTUlRSM1UxaE9WbFpWV2tOV1ZrNDBVbXhHVmxKc1drMVNiVkpEVlZaYWFrNHhWbFpTYTFKUFRVVnNlbGRVUWtkUmJHdzFaVVZhVWxaVldrdFVSV1JyVVRGR1ZsSnROVkpoYmxKVFZWWldUMk14UmpWbFIzaFNWbFZhYzFSRlZsZFJiRVpXV1ROT2FFMUZjRU5WVm1Rd1VUQTRkMlJGU2xKTk1IQkZWRVZXVDFGc1JsWlNWR1JVVmxWYVIxVnJUalJUYkVaV1VtczFUVkp0ZUVOVlZscHlZekZKZDFKclNsTmxibEpUVlZaV1QyUldSbkJsUlRWU1ZsVmFUMVJGVmxkUmJFWldZek5PVmxaVldrTldWbEl3Vld4R1ZsUnVWbEpoV0doVFZWWldSMVZyZUVaV2EwcFNWbGRPZWxac1ZrZFJiRnBWWkVWNFVsWlZOSGRWVjJ3MFVrWkdWbEpyU2xCTlIzaERWV3BDVWs0d09UWmplbVJWVFVWYVMxVnVjREJUYkVaV1ZtdHNVRTFWV2tOVmJGWldZekpLVmxOclNsSldiWFI2VmtSQ1IxRnNValZsUlZwU1ZsVmFSMVJGVlhoUmJFWldUVVJrV0ZaVldrTlVWRUpLWXpKR1ZsTnJTbUZXVlRBelZqRldSMkV4UmpWbFJYQlNWbFZhUzFSRlZrOVJiRVpXVkZoT1ZsWlZXa05XVms0MFUwWkdWbEpzVWsxU1ZHeERWVlpWTkdNeFJYZFNhMHBTVmtoU1lWVldWazVOTVVad1pVVndVbFpWV2t0VVJWWlBVV3hHVmxSWVRscE5SVnBEVjFoc05GTkdSbFpTYTJoTlVsUnNRMVZXVlRSak1VVjNVbXRLVW1WWWFGRlZWbFpIVlVWNFJtUkZTbEpXV0U1NlZrWldSMUZzVWxSbFJXaFNWbFZhU1ZSRlZYaFJiRVpXVFVoT1UwMUZXa05WYm13MFZVWkdWbEpzUWsxU1ZUVkRWVlpXUms0eFpGWlNhMUpwWVRGV2VsVXhWa2RSYkU1VVpVVlNVbFpWV2tWVVJWVTFVV3hHVms5SVRsTk5SVnBEVm14T05GTnNSbFpTYTNCTlVsVTFRMVZXVms1ak1WcFdVbXRLVjFVemFFVlZWbFpIVWtWNFJrMVZTbEpXVkVKNlZWUkNSMUZzUmpWbFJWSlNWbFZhUTFSNlJuTlJiRVkyV2tWU1RWSlhlRU5WVmxaeVl6RkZkMUpyU2xKbFdHaFZWVlpXUjFaRmVFWmFSVXBTVm0xT2VsVXhWa2RSYkU1VVpVVlNVbFpWV2tWVVJWVTFVV3hHVms5SVRsSk5SVnBEVlZoc05GUnNSbFpTYXpWTlVtczFRMVZXVm5Kak1WWldVbXRLVmxVemFFVlZWbFpIVWtWNFIxUnJTbEpXYXpGNlZrWldSMUZzU2paa1NGSlNZVEJhUlZSc1ZrNWpNVTVXVW10S1ZGVXphRVZWVmxaSFVrVjRSazlWU2xKV1ZHaDZWVlJDUjFGc1JqVmxSVFZTVmxWYVQxUkZXazlSYkVaV1lUTk9WbFpWV2tOV1ZrNDBVa1pHVmxKclVrMVNNRFZEVlZaa2ExRXdlRVpVYTBwU1ZsVldlbFZVUWtkUmJFWlZaRVp3VWxaVk5ESlZiRTQwVTJ4R1ZsSnJjRTFTVlRWRFZWWldUbU14VmxaU2EwcFdWVE5vU1ZWV1ZrZFdSWGhHVm10S1VsWldWbnBWVkVKSFVXeEdWV1JHY0ZKV1ZUUXdWVmRzTkZOc1JsWlNhM0JOVWxVMVExVldWazVqTVZaV1VtdEtWbFV6YUVsVlZsWkhWa1Y0UmxaclNsSldWbFo2VlZSQ1IxRnNSbFZrUm5CU1ZsVTBNRlZYYkRSVGJFWldVbXR3VFZKVk5VTlZWbFpPWXpGc1ZsSnJTbHBWTTJoSlZWWldSMU5yZUVaaVJVcFNWbGQwZWxWVVFrZFJiRVpWWkVad1VsWlZNVFJWVjJ3MFUyeEdWbEpyY0UxU1ZUVkRWVlpXVG1NeGJGWlNhMHBhVlROb1NWVldWa2RUYTNoR1ZHdEtVbFpWTVhwVlZFSkhVV3hHVldSR2NGSldWbGw1VlZkc05GSkdSbFpTYTFKTlVsVTFRMVZXVms1ak1VNVdVbXRLVkZVemFFVlZWbFpIVWtWNFNGUnJTbEpXTURGNlZWUkNSMUZzUmpWbFJWSlNWbFZhUlZSRlZsZFJiRVpXVmxoT1VrMUZXa05WV0d3MFZFWkdWbEpyZUUxU1ZUVkRWVlpXVG1NeFVsWlNhMHBWVlROb1IxVldWa2RTYTNoSFZtdEtVbFpWTVhwVmVrSkhVV3hPTldWRmNGSldWVnBOVkVWVk5WRnNSbFpTV0U1VVRVVmFRMVV4VGpSU1JrWldVbXRTVFZKcldrTlZWbHBHWXpGRmQxSnJTbEpsV0doTlZWWldSMVJGZUVaVWEwcFNWbFV4ZWxWc1ZrZFJiVTVHVTFoT1VrMUZXa05aYWtKS1l6RkZkMUpyU2xKbFdHaEZWVlpXUjFGck9IaGlSVXBUVjBkb1IxUkZWbk5SYkVaV1lUTk9VazFGV2tOVldHdzBWVVpHVmxKc1FrMVNWbHBEVlZaV1ZtTXhSWGRTYTBwU1ZraFNZVlZXVms5aE1IaEdZa1ZLVWxaWGRIcFZWRUpIVVd4R05XVkdTbEpXVlZwVFZFVldWMUZzUmxaV1dFNVNUVVZhUTFWV1VqQlZiRVpXVkc1R1VtRllhRVZWVmxaSFVrVTRlRkpyU2xSTlJrWjZXWHBDUzFGc1JsZFpNMDVwVFVWd1ExVldWVFJPTVdSV1VtdGthVkpWYkhwV2JGWkhVV3hhVldSSVFsSmhNRnBIVm0xd01HSnNSbkpTYTFKVFZUTm9UMVZXVmtkVWEzaEdWR3RLVWxaVk1YcFdSRUpIVVd4U05XVkZVbEpXVlZwRFZIcEdjMUZzUlhsaFJVNU5VbFUxUTFWV1ZrNU9NRGsyWkVab1VsWlZXa05VZWtaSFVXeEtWbFZZVG1wTlJYQkRWVlphYW1NeVNYZFRhMHBTVmxSbk0xbFdWa3RSYkVaWVpVVk9VRTF0VWtSVlZsWlBVbXQ0UmsxVlNsSldWRUo2VlZSQ1IxRnNSalZsUmtKU1ZsVmFVVlJGVms5UmJFWldVbFJrV0ZaVldrVlpWVlpLWXpGRmQxSnJTbEpsYmswelZIcEdhMUZzUmxaU1ZHUldWbFZhU1ZWclRqUldSa1pXVW14U1VFMVZXa05WYkZwU1l6QXhjbE5yU2xKV1ZHaDZWV3BDUjFGc1ZrVmtSbkJTVmxWYVExUkZaSE5STVVaWllrVlNVbVZ1VW1GVlZtaHZVa1pHTldWRmNGSldWVnBQVkVWYVYxRnNSbGRXV0U1VFRVVmFRMVZ1YkRSVGJFWldVbXR3VFZKVk5VTlZWbFpPWXpGcmQxSnJTbHBsV0doTlZWWldSMVJGZUVaaVJVcFNWbGQwZWxWVVFrZFJiRVkxWlVkd1VsWlZXbkZVUlZaUFVXeEdWbFJZVGxWV1ZWcERWa1pTTUdKc1JuSlNhMUpwWVRGV2VsWXhWa2RSYkdSVVpVVlNVbFpWV2tWVVJWcEhVV3hHVjFKWVRsTk5SVnBEVlc1c05GZHNSbFpTYkhCTlVsVTFRMVZXVms1ak1WSldVbXRLVlZVemFFVlZWbFpIVVdzNGVHSkZTbE5XUjFKRlZFVldjMUZzUmxaTlNFNVlWbFZhUTFZeFRqUlRSa1pXVW10b1RWSlhlRU5WVmxaeVl6RkZkMUpyU2xKbFdHaFJWVlpXUjFWRmVFWlVhMHBTVmxVeGVsWkdWa2RSYkZKVVpVVjRVbFpWV2sxVVJWVjRVV3hHVmsxRVpHRk5SWEJEVlZSS2QxSlZlRWRXYTBwU1ZteFdlbFZxUWtkUmJFbzFaVVZ3VWxaVldrdFVSVlpQVVd4R1ZsUllUbFZOUlZwRFZraHNORkpHUmxaU2ExSk5VbFJHUTFWV1ZYZGpNVVYzVW10S1VsWklVbUZWVmxaWFl6RkdOV1ZGY0ZKV1ZWcFBWRVZhVjFGc1JsZFdXRTVUVFVWYVExVnViRFJYYkVaV1VteHdUVkpZVWtOVlZsWjZZekZrVmxKclNsaFZNMmhGVlZaV1IxSkZlRWRTYTBwU1ZtdFZNMWRxUWt0UmJFVjZWMnRXVFZKWGVFTlZWbFp5WXpGRmQxSnJTbEpsV0dodlZWWldSMkZGZUVaV2EwcFNWbFpXZWxWcVFrZFJiRW8xWlVWU1VsWlZXa1ZVUlZaUFVXeEdWbEpVWkZoV1ZWcEhWRlpXU21NeFRsWlNhMHBVVlROb1JWVldWa2RTUlhoSFVtdEtVbFpyVm5wVmFrSkhVV3hLTldWRldsSldWVnBIVkVWV1QxRnNSbFpTVkdSWVZsVmFSVmxyVmtwak1VNVdVbXRLVkZVemFFVlZWbFpIVWtWNFIxSnJTbEpXYTFaNlZXcENSMUZzU2pWbFJWcFNWbFZhUjFSRlZrOVJiRVpXVWxSa1dGWlZXa2RaYTFaS1l6Rk9WbEpyU2xSVk0yaEZWVlpXUjFKRmVFaFNhMHBTVmpCV2VsVnFRa2RSYkVvMVpVVndVbFpWV2t0VVJWWlBVV3hHVmxSWVRtRk5SWEJEVlZaa2ExRXdlRVpXYTBwU1ZsWldlbFZVUWtkUmJFWlZaRVp3VWxaV1ZYaFZXR3cwVTJ4R1ZsSnJOVTFTVkd4RFZWWlZOR014U1hkU2EwcFRaVmhvUlZWV1ZrZFNSWGhHVkd0S1VsWlZNWHBXVkVKSFVXeFdOV1ZGVWxKV1ZWcEZWRVZXVDFGc1JsWlVXRTVTVFVWYVExVlliRFJUYkVaV1VtdHdUVkpWTlVOVlZsWk9ZekZWZDFKclNsWmxXR2hGVlZaV1IxSkZlRVpVYTBwU1ZsVXhlbFZVUWtkUmJFWlZaRVp3VWxaV1ZURlZXR3cwVlVaR1ZsSnNRbEJOYlhoRVZWWldUMU13ZUVaYVJVcFNWbGRPZWxWVVFrZFJiRVkxWlVaYVVsWlZXa1ZVUlZVMVVXeEdWazlFWkdGTlJYQkRWVlJHYm1NeFRsWlNhMHBVVlROb1QxVldWa2RVYTNoR1ZHdEtVbFpWVlROWGFrSkxVV3hGZUZkWVRsUldWVnBEVmtaT05HRnNSbFpTYlhCTlVsZFNRMVZXVm1wak1XdDNVbXRLVkZVemFFVlZWbFpIVWtWNFNWUnJUbEpXVlZvMlZWZHNORkpHUmxaU2ExSk5VbFJzUTFWV1ZUUmpNVVYzVW10S1VtVllhRVZWVmxaSFVXczRlVnBGVGxKV1ZsWTJWV3RPTkZKc1JsWlNhMXBOVWxVMVExVldWazVqTVVWM1VtdEtVbVZZYUhGVlZsWkhZV3Q0UmxSclNsSldWVEY2VlZSQ1IxRnNSalZsUlZKU1ZsVmFSVlI2U1RWUk1VWldWRzVXVW1GWWFFOVZWbFpIVkd0NFJscEZTbEpXVjA1NlZWUkNSMUZzUmpWbFJWSlNWbFZhUlZSRlpFOVJiRVpZVkZoT1VrMUZXa05WV0d3MFVrWkdWbEpyVWsxU1ZUVkRWVlpXVG1NeFJYZFNhMHBTWlZob1JWVldWa2RSYXpoNVdrVk9VbFpWTVRKVlYydzBVa1pHVmxKclVsQk5iVkpFVlZaV1YxSlZlRVpXYTBwU1ZsWldlbFZVUWtkUmJFWTFaVVZTVWxaVldrVlVSVlY0VVd4R1ZrMUlUbFJXVlZwRFZURk9ORkpHUmxaU2ExSk5VbFJHUTFWV1ZYZGpNVVYzVW10S1VtVllhRmxWVmxaSFYwVjRSbUpGU2xKV1YzUjZWa1pXUjFGc1VsUmxSVkpTVmxWYVJWUkZXbk5SYkVaWFlUTk9VazFGV2tOVldHdzBVa1pHVmxKclVrMVNWVFZEVlZaV1RtTXhSWGRTYTBwU1pXNVNNbFZYZEVkU1JURldWVmhPVEUxR1NrTlZWazR3VWxVNGVVOVZUbEpXVlRFeVZXdE9ORlJzUmxaU2F6Vk5VbFUxUTFWV1ZrNU9NbEYzVTJ0S1VrMUlaSHBWVkVKSFVXeEdOV1ZGVWxKV1ZWcEZWRVZWZUZGc1JsWk5TRTVTVFVWYVExVlliRFJTUmtaV1VtdFNUVkp0ZUVOVlZscHlZekZGZDFKclNsSmxXR2hIVlZaV1IxSnJlRVpVYTBwU1ZsVXhlbFZxUWtkUmJFbzFaVVZvVWxaVldrbFVSVnBYVVd4R1YxWlVaR3ROUlhCRFZWaHdSMUpGZUVoVWEwcFNWakF3TTFreFZrdFJiRVY1VjFoT1VrMUZXa05WVmxJd1lteEdjbEpyVWxSUk0yaEZWVlpXUjFKRk9IbGFSVTVTVmxVMVJsUkZWWGhSYkVaV1RVaE9VazFGV2tOVldHdzBVMnhHVmxKcmNFMVNWVFZEVlZaV1JrNHhaRlpTYTFKYVlWaG9SVlZXVmtkU1JYaEdWR3RLVWxaVk1ETlpWbFpMVVd4RmQxVllUbFZXVlZwRFZrWk9ORkpHUmxaU2ExSk5VbXhhUTFWV1ZrNWpNVTVXVW10S1ZGVXphRXRWVmxaSFZHdDRSazlWU2xKV1ZWWjZWVEZXUjFGc1RsUmxSVnBTVmxWYVRGUkZWazlSYkVaV1lUTk9VazFGV2tOVldIQXdZMFpHY2xKclVtdGhNR3g2VlRGV1IxRnNUbFJsUlZKU1ZsVmFSVlJGV2xkUmJFWldWRmhPVWsxRldrTlZXR3cwVW14R1ZsSnJXazFTVlRWRFZWWldUbU14VGxaU2EwcFdWVE5vVVZWV1ZrZFJhM2hHVkd0S1VsWlZNWHBWVkVKSFVXeEdOV1ZGVWxKV1ZWcEZWRVZXVDFGc1JsWlVXRTVUVFVWYVExVnViRFJTUmtaV1VtdFNUVkpWTlVOVlZsWk9ZekZGZDFKclNsSmxXR2hGVlZaV1IxSkZlRVpXYTBwU1ZtMWtlbFZVUWtkUmJGbzFaVVZTVWxaVldrVlVla3B6VVRGR1ZsUlVWbEpoV0doUlZWWldSMVZGZUVaVWEwcFNWbFV4ZWxac1ZrZFJiRVkxWlVWd1VsWlZXa3RVZWtwclVURkdWbFJ0UmsxU1dGSkRWVlpXY21NeFJYZFNhMHBTWlZob1UxVldWa2RWYTNoR1ZHdEtVbFpWTVhwVk1WWkhVV3hPVkdWRlVsSldWVnBGVkVWV2MxRnNSbFpoTTA1U1RVVmFRMVZZYkRSU1JrWldVbXRTVFZKVk5VTlZWbFpPWXpGRmQxSnJTbEpsV0doRlZWWldSMUZyT0hsYVJVNVNWbFV4TmxWWGJEUlVSa1pXVW10d1RWSlZOVU5WVmxaT1l6RldWbEpyU2xaVk0yaEZWVlpXUjFKRmVFWmlSVXBTVmxkMGVsVlVRa2RSYkVZMVpVVndVbFpWV2t0VVJWWlBVV3hHVmxSWVRsSk5SVnBEVlZoc05GSkdSbFpTYTFKTlVsVTFRMVZXVms1ak1VVjNVbXRLVWxaSVVtRlZWbFpPVFRGR2NHVkZVbEpXVlZwRlZFVldUMUZzUmxaVVdFNVNUVVZhUTFWV1VqQlZiRVpXVkdzNVRWSlZOVU5WVmxaT1RqRldWbEpyV2xOUk0yUTFWVmQwUjFGc1VqVmxSV2hTVmxWYVVsUjZSbk5SYkVWM1ZsaE9VazFGV2tOVldHdzBVa1pHVmxKclVrMVNiRnBEVlZaYVZtTXhSWGRTYTBwU1pWaG9TMVZXVmtkVGEzaEdWR3RLVWxaVk1YcFdWbFpIVVd4V1ZHVkZXbEpXVlZwSFZFVmFSMUZzUmxkU1dFNVNUVVZhUTFWWWJEUlNSa1pXVW10S1VFMVhlRU5WVkU1TFVrVjRSbFJyU2xKV1ZURjZWVlJDUjFGc1JqVmxSWEJTVmxWYVMxUkZWazlSYkVaV1ZGaE9XazFGV2tOWFdHdzBVa1pHVmxKclVrMVNWVFZEVlZaV1RtTXhTWGRTYTBwVFpWaG9SVlZXVmtkU1JYaEhWR3RLVWxack1YcFZWRUpIVVd4R05XVkZVbEpXVlZwRFZIcEdjMUZzU2xsVGExSk5VbGQ0UTFWV1ZuSmpNVVYzVW10S1VtVllhRk5WVmxaSFZXdDRSbHBGU2xKV2F6RjZWVEZXUjFGc1RsUmxSVkpTVmxWYVExUjZSbk5SYkVZMlVtdE9UVkpYZUVOVlZsWnlZekZGZDFKclNsSmxXR2h4VlZaV1IyRnJlRVphUlVwU1ZsZE9lbFV4VmtkUmJFNVVaVVZTVWxaVldrTlVla1p6VVd4R05sSnJUazFTVjNoRFZWWldjbU14UlhkU2EwcFNaVmhvVVZWV1ZrZFZSWGhHV2tWS1VsWnNWbnBWTVZaSFVXeE9WR1ZGVWxKV1ZWcERWSHBHYzFGc1JqWlNhMDVOVWxkNFExVldWbkpqTVVWM1VtdEtVbVZZYUZWVlZsWkhWa1Y0UmxwRlNsSldhMVo2VlRGV1IxRnNUbFJsUlZKU1ZsVmFRMVI2Um5OUmJFWTJVbXRPVFZKWGVFTlZWbFp5WXpGRmQxSnJTbEpsV0doVFZWWldSMVZyZUVaYVJVcFNWbXN4ZWxVeFZrZFJiRTVVWlVWU1VsWlZXa05VZWtaelVXeEdObEpyVGsxU1YzaERWVlpXY21NeFJYZFNhMHBTWlZob1UxVldWa2RWYTNoR1drVktVbFpyTVhwVk1WWkhVV3hPVkdWRlVsSldWVnBEVkhwR2MxRnNSalpTYTA1TlVsZDRRMVZXVm5Kak1VVjNVbXRLVW1WWWFHOVZWbFpIWVVWNFJscEZTbEpXVjNSNlZURldSMUZzVGxSbFJWSlNWbFZhUTFSNlJuTlJiRVkyVW10T1RWSlhlRU5WVmxaeVl6RkZkMUpyU2xKbFdHaHZWVlpXUjJGRmVFWmFSVXBTVmxkMGVsVXhWa2RSYkU1VVpVVlNVbFpWV2tOVWVrWkhVV3hHTmxaclRrMVNWVFZEVlZaV1RrNHhWbFpTYTJoVFVUTm9WMVZXVmtkV2F6aDRVbXRLVTFac2JIcFVNRlpMVVd4R1YxWllUbE5OUlZwRFZtMXNORlpzUmxaU2JHaE5VbFJHUTFWV1ZYZE9NV1JXVW10U1lXRllhRTlWVmxaSFZHdDRSbHBGU2xKV1YwNTZWVlJDUjFGc1JqVmxSVkpTVmxWYVJWUkZWWGhSYkVaV1RVaE9VazFGV2tOVldHdzBVbXhHVmxKcldrMVNWbHBEVlZaV1ZtTXhVWGRTYTBwVlpWaG9SMVZXVmtkU2EzaEdUVlZLVWxaVVFucFZWRUpIVVd4R05XVkZVbEpXVlZwRFZIcEdjMUZzU2xsVmExSk5VbFphUTFWV1ZsWmpNVVYzVW10S1VtVllhRVZWVmxaSFVrVjRSazlWU2xKV1ZHaDZWa1pXUjFGc1VsUmxSVkpTVmxWYVJWUkZWWGhSYkVaV1RVaE9WRTFGV2tOVk0ydzBWV3hHVmxKc1NrMVNWVFZEVlZaV1RtTXhSWGRTYTBwU1pWaG9SVlZXVmtkU1JUaDVXa1ZPVWxaVk5IZFZXR3cwVTJ4R1ZsSnJjRTFTVmxwRFZWWldWbU14U1hkU2EwcFRaVmhvUlZWV1ZrZFNSWGhHVkd0S1VsWlZNWHBXUmxaSFVXeFNWR1ZGVWxKV1ZWcEZWRVZWZUZGc1JsWk5TRTVTVFVWYVExVlliRFJTUmtaV1VtdFNUVkpYZUVOVlZsWnlZekZGZDFKclNsSmxXR2hMVlZaV1IxTnJlRVpVYTBwU1ZsVXhlbFZVUWtkUmJFWlZaRWMxVW1Fd1drVlpNRlpPWXpGS1ZsSnJTbE5WTTJoRlZWWldSMUpGZUVaVWEwcFNWbFV4ZWxWVVFrZFJiRVkxWlVWYVVsWlZXa2RVUlZaUFVXeEdWbFJZVGxKTlJWcERWVmhzTkZKR1JsWlNhMUpRVFdwc1JGVldWazlWTUhoR1ZtdEtVbFpXVm5wVmFrSkhVV3hLTldWSGNGSldWVnBMVkVWV1QxRnNSbFpVV0U1VlZsVmFRMVpHVGpSU1JrWldVbXRTVFZKWGVFTlZWbFp5WXpGRmQxSnJTbEpsV0doRlZWWldSMUZyT0hsUFZVNVNWbFUwZDFWWGJEUlNSa1pXVW10U1RWSlZOVU5WVmxaT1l6RlNWbEpyU2xWVk0yaEZWVlpXUjFKRmVFWk5WVXBTVmxSQ2VsVlVRa2RSYkVZMVpVVlNVbFpWV2tWVVJWWnpVV3hHVm1FelRsSk5SVnBEVlZoc05GTnNSbFpTYTNCTlVsWmFRMVZXVmxaak1VcFdVbXRLVTFVemFFVlZWbFpIVWtWNFJsUnJTbEpXVlZVelYycENTMUZzUlhsalJWSk5VbFUxUTFWV1ZrNU9NVzkzVTJ0S1VrMUdSbnBXUmxaSFVXeFNWR1ZGVWxKV1ZWcEZWRVZWZUZGc1JsWk5TRTVUVFVWYVExVnViRFJVYkVaV1VtdHdUVkpXV2tOVlZsWnlZekZGZDFKclNsSldTRkpoVlZaV1RtVkdSbkJsUlZKU1ZsVmFSVlI2Um5OUmJFcFdWVmhPV2sxRldrTlZNVTQwVWtaR1ZsSnJVazFTTVZwRFZWWmtWbU14UlhkU2EwcFNaVmhvUzFWV1ZrZFRhM2hHVm10S1VsWldWbnBXUmxaSFVXeFNWR1ZGV2xKV1ZWcEhWRVZhYTFGc1JsZFpNMDVTVFVWYVExVlliRFJTUmtaV1VtdEtVRTFYZUVOVmJFMDFVa1Y0UmsxVlNsSldWRUo2VlZSQ1IxRnNSalZsUlRWU1ZsVmFUMVJGVms5UmJFWldVbFJrVmxaVldrVlhiV3cwVWtaR1ZsSnJVbEJOVlZwRFZXeFdVbU15UmxaVWEwcFNWakJXZWxWcVFrZFJiR3h4WkVad1VsWlZOVWRVUlZWNFVXeEdWazFJVGxKTlJWcERWVmhzTkZOc1JsWlNhM0JOVWxVMVExVldWazVqTVd0M1VtdEtXbVZZYUUxVlZsWkhWRVY0UmsxVlNsSldWRUV6VjJwQ1MxRnNSWGxqUlZKTlVsZDRRMVZXVm5Kak1VVjNVbXRLVW1WWWFIRlZWbFpIWVd0NFJsUnJTbEpXVlRGNlZtcENSMUZzV2pWbFJXaFNWbFZhU1ZSRlZuTlJiRVpXWVROT1VrMUZXa05WV0d3MFlXeEdWbEp0Y0UxU1ZUVkRWVlpXVG1NeFZYZFNhMHBXWlZob1JWVldWa2RSYXpoNFVtdEtVazB3Y0VkVVJWWlBVV3hHVmxSVVpGWldWVnBIVld0T05HUnNSWGRTYTBwaFRVVnNlbFZxUWtkUmJVWkdVMVJrV0ZaVldrVlZiRTQwVkd4R1ZsSnJOVTFTVlRWRFZWWldUbU14VGxaU2EwcFVWVE5vUlZWV1ZrZFNSWGhJVkd0S1VsWXdNWHBWVkVKSFVXeEdOV1ZHY0ZKV1ZWcGhWRVZXYzFGc1JsWmhNMDVVVmxWYVExVXhUalJTUmtaV1VtdFNUVkpYVWtOVlZsWnFZekZGZDFKclVtaGhNVVo2VmxaV1IxRnNWbFJsUlZKU1ZsVmFSVlJGVm5OUmJFWldZVE5PVWsxRldrTlZXR3cwVjJ4R1ZsSnNjRTFTVmxwRFZWaHdSMUV3ZUVkU2EwcFNWbXRXZWxWVVFrZFJiRVkxWlVkNFVsWlZXbk5VUlZaUFVXeEdWbFJZVGxoV1ZWcERWakZPTkZKR1JsWlVha0pTWlZob1JWVldWa2RSYXpoNFVtdEtVazFIWkhwVlZFSkhVV3hHTm1SR1NsSldWbHBHVkVWak5WSkdSbFpTYlRWU1lWaG9TVlZXVmtkaU1VWnhaRVp3VWxaVk5VZFVSVlY0VVd4R1ZrMUlUbEpOUlZwRFZWaHNORk5zUmxaU2EzQk5VbFUxUTFWV1ZrNWpNV3QzVW10S1dtVllhRTFWVmxaSFZFVjRSazFWU2xKV1ZFRXpWMnBDUzFGc1JYbGpSVkpOVWxSR1ExVldWWGRqTVVWM1VtdEtVbVZZYUZsVlZsWkhWMFY0UmxwRlNsSldWMDU2VlRGV1IxRnNUbFJsUlZKU1ZsVmFSVlJGWkU5UmJFWllWRmhPVWsxRldrTlZXR3cwVjJ4R1ZsSnNjRTFTVlRWRFZWWldSazR4VmxaU2ExSk9UVVpHZWxWVVFrZFJiRVkyWkVaS1VsWldXa1pVUlZKVFVURkdWbEpzU2sxU1YxSkRWVlphU2s0eFpGWlNhMUpUVlROb1MxVldWa2RVYTNoSFZHdEtVbFpyTVhwVmFrSkhVV3hTVkdWRmNGSldWVnBMVkVWV1QxRnNSbFpVV0U1YVZsVmFRMWRXVGpSU2JFWldVbXRhVFZKWFVrTlZWbFpxWXpGT1ZsSnJTbFJWTTJoRlZWWldSMUpGZUVaUFZVcFNWbFJvZWxWVVFrZFJiRVkxWlVVMVVsWlZXazlVUlZaUFVXeEdWbEpVWkZoV1ZWcEZWRVJDVW1NeFRsWlNhMHBWVlROb1lWVldWa2RYYTNoR1drVktVbFpYVG5wVk1WWkhVV3hPVkdWRlVsSldWVnBGVkVWa2ExRXhSbFpTYlRWU1lWaG9SMVZXVmtkU2EzaEdWR3RLVWxaVlZUTldNVlpIVWtVMVZsUllUbFJXVlZwRFZrWk9ORlpHUmxaU2JGSk5VbGRTUTFWV1ZYZGpNVTVXVW10S1ZGVXphRVZWVmxaSFVrVjRSazlWU2xKV1ZHaDZWVlJDUjFGc1JqVmxSVFZTVmxWYVQxUjZTakJSTVVaV1ZHNWtVbVZZYUdGVlZsWkhWMnM0ZVdSRlRsSldWVFZvVkVWV2MxRnNSbFpoTTA1U1RVVmFRMVZZYkRSaWJFWnlVbXRLWVUxRmJIcFZiRlpIVVd4S1ZHVkZVbEpXVlZwRFZIcEdjMUZzU2xWVWEwNU5VbFphUTFWV1ZsWmpNVVYzVW10S1VtVllhRVZWVmxaSFVrVjRSbUpGU2xKV1YzUjZWVlJDUjFGc1JqVmxSMmhTVmxWYWIxUkZWakJSYkVaV1l6Tk9XRlpWV2tOV01VNDBVa1pHVmxKclVrMVNWVFZEVlZaV1RtTXhSWGRTYTBwU1pXNVNkVlZYZEVkU1IxWkdWRmhPVkZaVldrTlZNVTQwVWtaR1ZsSnJVazFTVkd4RFZWWlZOR014U2xaU2EwcFRWVE5vUlZWV1ZrZFJhemg0WWtWS1VrMXRhRVJVUlZaUFVXeEdWbFJVWkZoV1ZWcEhWV3RPTkZKc1JsWlNhMXBOVWxVMVExVldWazVqTVVWM1VtdEtVbVZZYUZWVlZsWkhWa1Y0Um1KRlNsSldWM1I2VmxSQ1IxRnNWalZsUlZKU1ZsVmFSVlJGVms5UmJFWldWRmhPVWsxRldrTlZXSEF3WW14R2NsSnJVazVOUld4NlZURldSMUZzVWxSbFJUVlNWbFZhVDFSRlZtdFJiRVpXV1ROT1ZGWlZXa05WTVU0MFVrWkdWbEpyVWsxU2ExcERWVlphUm1NeFJYZFNhMHBTWlZob1MxVldWa2RUYTNoR1ZHdEtVbFpWTVhwV1ZsWkhVV3hXVkdWRlVsSldWVnBGVkVWVmVGRnNSbFpOU0U1VFRVVmFRMVZ1YkRSU1JrWldVbXRTVFZKVk5VTlZWbFpPWXpGRmQxSnJTbEpXU0ZKMVZWZDBSMUp0VWtaVldFNVRWbFZhUTFWc1RqUlNSa1pXVW10U1RWSlZOVU5WVmxaT1l6Rk9WbEpyU2xSVk0yaEZWVlpXUjFKRmVFaFNhMHBTVmpCV2VsVjZRa2RSYkU0MVpVVTFVbFpWV2s5VVJWWlBVV3hHVmxSWVRsSk5SVnBEVlZoc05GSkdSbFpTYTFKUVRXcHNSRlZXVms5ak1VWTFaVVZ3VWxaVldrdFVSVlpQVVd4R1ZsUllUbFpOUlZwRFZsaHNORkpHUmxaU2ExSk5VbFJHUTFWV1ZYZGpNVVYzVW10S1VtVllhRVZWVmxaSFVXczRlVnBGVGxKV1ZUUXdWVmRzTkZKR1JsWlNhMUpRVFcxU1JGVldWazlTVlhoR1RWVktVbFpVUW5wVlZFSkhVV3hHVldSR2NGSldWVFZVVkVWV1QxRnNSbFpVVkdSWVZsVmFSMVZyVGpSU2JFWldVbXRhVFZKVk5VTlZWbFpPWXpGRmQxSnJTbEpsV0doTFZWWldSMU5yZUVaVWEwcFNWbFV4ZWxkV1ZrZFJiR3hVWlVWd1VsWlZXa3RVUlZwUFVXeEdWMVJZVGxOTlJWcERWVzVzTkZOc1JsWlNhM0JOVWxVMVExVldWazVqTVZaV1VtdEtWbFV6YUVWVlZsWkhVa1Y0UmxSclNsSldWVEY2VlZSQ1IxRnNSalZsUlhCU1ZsVmFTMVJGVm5OUmJFWldZVE5PVWsxRldrTlZXR3cwVld4R1ZsSnNTazFTVlRWRFZWWldUbU14UlhkU2EwcFNaVmhvUlZWV1ZrZFNSWGhHV2tWS1VsWlhUbnBWVkVKSFVXeEdOV1ZGVWxKV1ZWcEZWRVZXVDFGc1JsWlVXRTVTVFVWYVExVlljREJpYkVaeVVtdFNUVTFHVm5wVk1WWkhVV3hPVkdWRlVsSldWVnBGVkVWa1IxRnNSbGhTV0U1VFRVVmFRMVZ1YkRSVGJFWldVbXR3VFZKVk5VTlZWbFpHVGpGdmQxTnJTbEpOTTBKRVZFVldjMUZzUmxaaE0wNVNUVVZhUTFWWWJEUlViRVpXVW1zMVRWSldXa05WVmxaV1l6RkZkMUpyU2xKV1NGSjFWVmQwUjFKR2JIQmxSVFZTVmxWYVQxUkZWazlSYkVaV1VsUmtXRlpWV2tWV1YydzBVa1pHVmxKclVsQk5WM2hEVld4V1VtTXhTWGRTYTBwVFpWaG9SVlZXVmtkU1JYaEdWR3RLVWxaVk1YcFZNVlpIVVd4T1ZHVkZVbEpXVlZwRlZFVldhMUZzUmxaWk0wNVVWbFZhUTFVeFRqUlNSa1pXVW10U1RWSnJXa05WVmxwR1l6RkZkMUpyU2xKbFdHaFBWVlpXUjFScmVFWldhMHBTVmxaV2VsVlVRa2RSYkVZMVpVVmFVbFpWV2tkVVJWWnJVV3hHVmxrelRsSk5SVnBEVlZod01HSnNSbkpTYTFKc1VsVXhlbFV4VmtkUmJGSlVaVWR3VWxaVlduRlVSVlpyVVd4R1Zsa3pUbFJXVlZwRFZURk9ORkpHUmxaU2ExSk5VakJhUTFWV1pFWmpNVTEzVW10S1ZHVllhRXRWVmxaSFUydDRSbFJyU2xKV1ZURjZWbFpXUjFGc1ZsUmxSVkpTVmxWYVJWUkZWazlSYkVaV1ZGaE9VazFGV2tOVldIQXdUVlpHY2xKclVtdGhNVVo2VmxSQ1IxRnNWalZsUlhCU1ZsVmFTMVJGVm5OUmJFWldZVE5PVWsxRldrTlZXR3cwVld4R1ZsSnNTazFTVlRWRFZWWldUbU14UlhkU2EwcFNaVmhvUlZWV1ZrZFNSVGg2Vm10T1VsWlZNSHBWVjJ3MFVrWkdWbEpyVWsxU1YzaERWVlpXY21NeFJYZFNhMHBTWlZob1UxVldWa2RWYTNoR1ZHdEtVbFpWTVhwVlZFSkhVV3hHTldWRmFGSldWVnBKVkVWV1QxRnNSbFpVV0U1U1RVVmFRMVZZYkRSVVJrWldVbXQ0VFZKck5VTlZWbHBPVGpKUmQxTnJTbEpOYm1oRlZFVmFUMUZzUmxkVVdFNVRUVVZhUTFWdWJEUlRiRVpXVW10d1RWSlZOVU5WVmxaT1l6RldWbEpyU2xaVk0yaEZWVlpXUjFKRmVFWlVhMHBTVmxVeGVsVnFRa2RSYkVvMVpVVlNVbFpWV2tWVVJWWlBVV3hHVmxSWVRsSk5SVnBEVlZoc05GSkdSbFpTYTBwUVRXMVNSRlZXVmxkT2JFWTFaVVZhVWxaVldrZFVSVlpQVVd4R1ZsUllUbEpOUlZwRFZWaHNOR0ZzUmxaU2JYQk5VbFUxUTFWV1ZrNWpNVVYzVW10S1VtVllhRVZWVmxaSFVrVTRlVTlWVGxKV1ZUVXhWVmRzTkZOc1JsWlNhM0JOVWxVMVExVldWazVqTVZWM1VtdEtWbVZZYUVWVlZsWkhVa1Y0Um1KRlNsSldWM1I2VlZSQ1IxRnNSalZsUmtwU1ZsVmFVMVJGVms5UmJFWldWRmhPVWsxRldrTlZXR3cwVWtaR1ZsSnJVazFTVlRWRFZWWldUbU14UlhkU2EwcFNWa2hTZFZWWGRFZFNSMHBHVkZoT1VrMUZXa05WV0hBd1YyeEdWbFJyYkUxU1ZUVkRWVlpXVGs0eFZsWlNhMUpVVVROb1JWVldWa2RTUlRoNFVtdEtVMVpXUm5wVWJYUkxVV3hHVjFSWVRsTk5SVnBEVm10T05GWnNSbFpTYkZwTlVsUkdRMVZXVlhkT01XUldVbXRTWVZFemFFdFZWbFpIVTJ0NFJsUnJTbEpXVlRGNlYxWldSMUZzYkZSbFJXaFNWbFZhU1ZSRlZYaFJiRVpXVFVoT1VrMUZXa05WVmxJd1YyeEdWbFpZY0ZKaFdHaExWVlpXUjFOcmVFWlVhMHBTVmxVeGVsWkdWa2RSYkZKVVpVVmFVbFpWV2tkVVJWWlBVV3hHVmxKVVpGaFdWVnBIVjFkc05GTnNSbFpTYTNCTlVsUnNRMVZXVlRSak1VbDNVbXRLVTJWWWFFdFZWbFpIVTJ0NFJsUnJTbEpXVlRGNlZsUkNSMUZzVmpWbFJWSlNWbFZhUlZSRlZqQlJiRVpXWXpOT1VrMUZXa05WV0d3MFUwWkdWbEpyYUUxU1ZUVkRWVlpXVG1NeFJYZFNhMHBTVmtoU1lWVldWazlOYkVZMVpVWkNVbFpWV2xGVVJWWnJVV3hHVms5SVRsVk5SVnBEVmtoc05GSkdSbFpTYTFKTlVsZFNRMVZXVm1wak1VVjNVbXRLVW1WWWFGZFZWbFpIVWtWNFIxSnJTbEpXYTFVelYycENTMUZzUlhsalJWSk5VbFJHUTFWV1ZYZGpNVVYzVW10S1ZGVXphRk5WVmxaSFZXdDRTVlpyVGxKV1ZWcDNWVmRzTkZSc1JsWlNhelZOVW1zMVExVldWbnBPTWs1V1UydEtVazB3U2tWVVJWcEhVV3hHVjFKWVRtRk5SWEJEVlZaYVZtTXhVbFpTYTBwVlZUTm9VMVZXVmtkVGEzaEdWR3RLVWxaVlZucFZWRUpIVVd4R1ZXUkdjRkpXVlRRd1ZWaHNORkpHUmxaU2ExSk5VbFUxUTFWV1ZrNWpNVVYzVW10S1VsWklVbUZWVmxaWFVqQjRSbUpGU2xKV1ZFSjZWWHBDUjFGc1RqVmxSV2hTVmxWYVNWUkZWazlSYkVaV1ZGaE9VazFGV2tOVldHdzBWVVpHVmxKc1FrMVNWVFZEVlZaV1RtTXhUbFpTYTBwVVZUTm9SVlZXVmtkU1JYaEdXa1ZLVWxaWFRucFZWRUpIVVd4R05XVkZVbEpXVlZwRlZFVldUMUZzUmxaU1ZHUllWbFZhUjFsclZrNWpNVXBXVW10S1UxVXphRVZWVmxaSFVrVjRSbFJyU2xKV1ZURjZWWHBDUjFGc1RqVmxSVkpTVmxWYVJWUkZXa2RSYkVaWFVsaE9VazFGV2tOVldHdzBWa1pHVmxKc1VrMVNWVFZEVlZaV1RtTXhiRlpTYTBwYVZUTm9SVlZXVmtkU1JYaEdWR3RLVWxaVk1YcFZWRUpIVVd4R05XVkZVbEpXVlZwRlZIcEthMUV4UmxaVVZFWlNaVmhvVFZWV1ZrZFVSWGhHVkd0S1VsWlZNWHBXUkVKSFVXeFNOV1ZGVWxKV1ZWcEZWRVZhUjFGc1JsZFNXRTVTVFVWYVExVlliRFJWYkVaV1VteEtUVkpWTlVOVlZsWk9ZekZGZDFKclNsSmxXR2hMVlZaV1IxTnJlRVpVYTBwU1ZsVXhlbFpXVmtkUmJGWlVaVVZTVWxaVldrVlVSV1JYVVd4R1dGWllUbEpOUlZwRFZWaHNORkpHUmxaU2ExSk5VbXRhUTFWV1drWmpNVVYzVW10S1VtVllhRlZWVmxaSFZrVjRSbFJyU2xKV1ZURjZWa1pXUjFGc1VsUmxSVkpTVmxWYVJWUkZWazlSYkVaV1VsUmtZVTFGY0VOVldIQkhVakI0Um1SRlNsSldXRTU2VlZSQ1IxRnNSalZsUmtwU1ZsVmFVMVJGVms5UmJFWldWRmhPVmsxRldrTldXR3cwVWtaR1ZsSnJVazFTVkVaRFZWWlZkMk14UlhkU2EwcFNaVmhvUlZWV1ZrZFJhemg0WWtWS1VrMXVhRVZVUlZaUFVXeEdWbFJVWkZoV1ZWcERWVmhzTkZOc1JsWlNhM0JOVWxVMVExVldWazVqTVVWM1VtdEtVbVZ1VW5WVlYzUkhVa1pTY0dWSVNsSk5SVnBEV1ZSQ1RrNHhiM2RUYTBwU1RXNW9SVlJGVW05U1JrWldVbFJTVW1WdVVuVlZWM1JIVWtVNVZsUllUbFJOUlZwRFZUTnNORkpHUmxaU2ExSk5VbFJzUTFWV1ZUUmpNVVYzVW10S1VtVllhRk5WVmxaSFZXdDRSbFJyU2xKV1ZURjZWV3hXUjFGc1NsUmxSVkpTVmxWYVJWUkZWazlSYkVaV1ZGaE9WRlpWV2tOVk1VNDBVa1pHVmxKclVrMVNWR3hEVlZaV2VtTXhWbFpTYTBwV1ZUTm9SVlZXVmtkU1JYaEhWR3RLVWxadFRucFZWRUpIVVd4R05XVkZVbEpXVlZwRlZFVmFSMUZzUmxkU1dFNVNUVVZhUTFWWWJEUldSa1pXVW14U1RWSlZOVU5WVmxaT1l6RlNWbEpyU2xWVk0yaEZWVlpXUjFKRmVFWlVhMHBTVmxWVk0xWXhWa2RTUjFKeVYxaE9VazFGV2tOVldIQXdWMnhHVmxaclZrMVNWVFZEVlZaV1RtTXhSWGRTYTBwU1pWaG9TMVZXVmtkVGEzaEdWR3RLVWxaVk1YcFhWRUpIVVd4c05XVkZVbEpXVlZwRlZFVldUMUZzUmxaVVdFNVZUVVZhUTFaSWJEUlNSa1pXVW10U1RWSllVa05WVmxaNll6RkZkMUpyU2xKbFdHaFRWVlpXUjFWcmVFWldhMHBTVmxaVk0xZHFRa3RSYkVZMldrVlNUVkl3V2tOVlZtUkdZekZLVmxKclNsTlZNMmhQVlZaV1IxUnJPSGxTYTBwU1RURktSRlJGVms5UmJFWldWRmhPVWsxRldrTlZWbEl3Vld4R1ZsUnJkRTFTVlRWRFZWWldUazR4VmxaU2ExcFRVVE5rTTFWWGRFZFJiRkpVWlVWb1VsWlZXbEJVZWtaelVXeEZkMVpZVGxKTlJWcERWVmhzTkZKR1JsWlNhMUpOVWxkNFExVldWbkpqTVVWM1VtdEtVbVZZYUZWVlZsWkhWa1Y0UmxSclNsSldWVEY2VlZSQ1IxRnNSalZsUlRWU1ZsVmFUMVJGVms5UmJFWldWRmhPVmxaVldrTldWazQwVWtaR1ZsSnJVazFTVkVaRFZWWlZkMk14UlhkU2EwcFNaVmhvUlZWV1ZrZFNSWGhIV2tWS1VsWnRUbnBWVkVKSFVXeEdOV1ZHVWxKV1ZWcFZWRVZXVDFGc1JsWlVXRTVWVmxWYVExWkdUalJTUmtaV1VtdFNUVkpWTlVOVlZsWkdUakZXVmxKclVteGhNVlo2VlZSQ1IxRnNSalprUmtwU1ZsZFNSbFJGV2s5UmJFWlhWRlJrVmxaVldrZFZiV3d6WkRGR2NsSnJTbUZOUld4NlZXcENSMUZ0VW5KVFdFNVhWbFZhUTFwRVFrcGpNVkpXVW10S1ZWWklVbUZWVmxaT1RWWkdjR1ZGTlZKV1ZWcFBWRVZXVDFGc1JsWlVXRTVVVmxWYVExVXhUalJTUmtaV1VtdFNUVkpYZUVOVlZsWnlZekZGZDFKclNsSmxibEoxVlZkMFIxSkdjSEJsUlhCU1ZsVmFTMVJGVm5OUmJFWldZVE5PVTAxRldrTldWazQwVWtaR1ZsSnJVazFTVlRWRFZWWldUbU14VGxaU2EwcFVWVE5vUlZWV1ZrZFNSWGhHVkd0S1VsWlZNWHBWTVZaSFVXeE9WR1ZGVWxKV1ZWcEZWRVZhUjFGc1JsZFNXRTVTVFVWYVExVlliRFJTUmtaV1VtdEtVRTF0VWtSVlZsWlBUVVpHTldWRmNGSldWVnBQVkVWVk5WRnNSbFpQU0U1VFRVVmFRMVZ1YkRSVlJrWldVbXhDVFZKVVJrTlZWbFYzWXpGTmQxSnJTbFJsV0doVFZWWldSMVZyZUVaaVJVcFNWbGQwZWxaR1ZrZFJiRkpVWlVWU1VsWlZXa05VZWtwclVURkdWbFp1WkZOUk0yaEhWVlpXUjFKcmVFWlVhMHBTVmxVeGVsVlVRa2RSYkVZMVpVVlNVbFpWV2tWVVJWWnpVV3hHVm1FelRsSk5SVnBEVlZoc05GSkdSbFpTYTFKTlVsVTFRMVZXVms1T01rbDNVMnRLVWsxV2JIcFZNVlpIVVd4T1ZHVkZhRkpXVlZwSlZFVldjMUZzUmxaaE0wNVdUVVZhUTFaWWJEUlNSa1pXVW10U1RWSlhlRU5WVmxaeVl6RktWbEpyU2xOVk0yaFJWVlpXUjFWRmVFWlVhMHBTVmxVeGVsVlVRa2RSYkVaVlpFaGFVbUV3V2tWWmJYUk9ZekZGZDFKclNsSmxXR2hGVlZaV1IxSkZlRVppUlVwU1ZsZDBlbFZVUWtkUmJFWTFaVVZTVWxaVldrVlVSVlp6VVd4R1ZtRXpUbEpOUlZwRFZWaHNORlZzUmxaU2JFcE5VbFphUTFWV1ZsWmpNVTVXVW10S1ZGVXphRVZWVmxaSFVrVjRSbFJyU2xKV1ZWVXpWMnBDUzFGc1JqWmlSVTVOVWxVMVExVldWazVPTVc5M1UydEtVMVpXUm5wVmJGWkhVV3hLVkdWRlVsSldWVnBGVkVWV1QxRnNSbFpVV0U1VlRVVmFRMVpJYkRSVWJFWldVbXMxVFZKWVVrTlZWbFo2WXpGV1ZsSnJTbFpWTTJoRlZWWldSMUpGZUVaVWEwcFNWbFV4ZWxWVVFrZFJiRVkyWkVoYVVtRXdXa1ZVUkVKS1l6RktWbEpyU2xOVk0yaEZWVlpXUjFKRmVFWlVhMHBTVmxVeGVsVXhWa2RSYkU1VVpVVlNVbFpWV2tWVVJWVjRVV3hHVmsxSVRsSk5SVnBEVlZoc05GUkdSbFpTYTNoTlVtczFRMVZXV2s1ak1VVjNVbXRLVW1WWWFFVlZWbFpIVWtWNFJsUnJTbEpXVlRBeldrUkNTMUZzUmpWUFZVNU5VbFJHUTFWV1ZYZGpNVTVXVW10S1ZGVXphRTFWVmxaSFZFVjRSbFJyU2xKV1ZURjZXa1pXUzFGc1JsaFBWVTVOVWxSR1ExVldWWGRqTVZGM1VtdEtVMlZZYUVWVlZsWkhVa1Y0UmxSclNsSldWVlV6V1dwQ1MxRnNSWGxoUlZaTlVsVTFRMVZXVms1T01rbDNVMnRLVWsxR1JucFZNVlpIVVd4T1ZHVkZVbEpXVlZwRlZFVlZlRkZzUmxaTlNFNVNUVVZhUTFWWWJEUlNiRVpXVW10YVRWSlZOVU5WVmxaR1RqRnZkMU5yU2xKTmJXaEVWRVZXVDFGc1JsWlVWR1JZVmxWYVJWVXdUalJTUmtaV1VtdFNUVkpWTlVOVlZsWk9ZekZGZDFKclNsSldTRkpUVlZaV1QxTXdlRVpVYTBwU1ZsVXdNMVpXVmtkVFJrNUVaVWMxVW1Fd1drTlZXSEF3VTJ4R1ZsSnJWazFTVlRWRFZGUkJNVkZyZUVaU2EwcE9ZWHBXUlZSRlZuTlJiRVpXVWxSa1ZGWlZXa2xWYTFKNlRqQTVObVJHUWxKV1YzaEpWSHBDYzFGc1NsWmFNMDVTVFVWYVExVlliRFJTUmtaV1VtdFNUVkpVUmtOVlZsVjNZekZGZDFKclNsSmxXR2hGVlZaV1IxSkZlRVpXYTBwU1ZsWldlbFZVUWtkUmJFWTFaVVY0VWxaVldrMVVSVlpQVVd4R1ZsUllUbHBXVlZwRFYxWk9ORkpzUmxaU2ExcFFUVlZhUTFWVVNtOVNSWGhHWWtWS1VsWlVRbnBXYkZaSFVXeGFWR1ZGYUZKV1ZWcEpWRVZXVDFGc1JsWlVXRTVTVFVWYVExVlliRFJXUmtaV1VteFNUVkpWTlVOVlZsWk9ZekZGZDFKclNsSmxXR2hGVlZaV1IxSkZlRWRTYTBwU1ZtdFdlbFZVUWtkUmJFWTFaVVpLVWxaVldsTlVSVlpQVVd4R1ZsUllUbEpOUlZwRFZWaHNORkpHUmxaU2EwcFFUVlZhUTFWc2FFTlNWWGhHV2tWS1VsWlhUbnBWVkVKSFVXeEdOV1ZGVWxKV1ZWcEZWRVZXYzFGc1JsWmhNMDVTVFVWYVExVlliRFJUUmtaV1VtdG9UVkpzV2tOVlZscFdZekZGZDFKclNsSmxXR2hQVlZaV1IxUnJlRVpXYTBwU1ZsWldlbFZVUWtkUmJFWTFaVVZhVWxaVldrZFVSVlpyVVd4R1Zsa3pUbEpOUlZwRFZWaHdNRmRzUmxaVWJteFNaVmhvUzFWV1ZrZFVhM2hHWWtWS1VsWlhkSHBWYWtKSFVXeEtOV1ZGVWxKV1ZWcEZWRVZXVDFGc1JsWlVXRTVYVmxWYVExWnNUalJTUmtaV1VtdFNUVkpWTlVOVlZsWk9ZekZGZDFKclNsSmxXR2hGVlZaV1IxSkZlRVpVYTBwU1ZsVlZNMVl4VmtkU1JUUjNVMWhPVmsxRldrTldXR3cwVWtaR1ZsSnJVazFTTWxKRVZWWldSMkpzUm5CbFJWSlNWbFZhUlZSRlZuTlJiRVpXWVROT1VrMUZXa05WV0d3MFUyeEdWbEpyY0UxU1ZscERWVlpXVm1NeFRsWlNhMHBVVlROb1JWVldWa2RTUlhoR1lrVktVbFpYZEhwVmJGWkhVV3hLVkdWRlVsSldWVnBGVkVWV1QxRnNSbFpTVkdSV1ZsVmFSVmt3VmxKak1VVjNVbXRLVW1WdVVrdFZWbFpQVTFWNFJsUnJTbEpXVlRGNlZWUkNSMUZzUmpWbFJWSlNWbFZhUTFSNlFuTlJiRWwzVjFSa1VHVnVUVE5XUkVKSFUyeEtObVJGY0ZKV1ZscEtWRVZXVDFGc1JsWlVXRTVTVFVWYVExVlliRFJTYkVaV1VtdGFUVkpWTlVOVlZsWk9ZekZPVmxKclNsUlZNMmhGVlZaV1IxSkZlRVphUlVwU1ZqRldlbFpVUWtkUmJGWTFaVVZTVWxaVldrVlVSV1JyVVRGR1ZsSnROVkpoV0doRlZWWldSMUZyT0hkaVJVcFNUV3BXUmxSRlZrOVJiRVpXVkZoT1VrMUZXa05WV0d3MFVteEdWbEpyV2sxU1ZUVkRWVlpXVG1NeFRsWlNhMHBVVlROb1JWVldWa2RTUlhoR1ZHdEtVbFpWTVhwV2FrSkhVV3hhTldWRmFGSldWVnBKVkVWYVQxRnNSbGRVV0U1U1RVVmFRMVZXVWpCVGJFWldWRzVPVW1WWWFFVlZWbFpIVWtWNFJsUnJTbEpXVlRGNlZXeFdSMUZzU2xSbFJWSlNWbFZhUlZSRlZuTlJiRVpXWVROT1VrMUZXa05WV0d3MFVrWkdWbEpyVWsxU2JGcERWVlphVm1NeFNYZFNhMHBVVmtoU1UxVldWazlOYkVad1pVVlNVbFpWV2tWVVJWWlBVV3hHVmxSWVRsTldWVnBEVld4T05GSkdSbFpTYTFKTlVsZDRRMVZXVm5Kak1VVjNVbXRLVW1WWWFFbFZWbFpIVTBWNFNHUkZUbEpXVlZwNVZWZHNORkpHUmxaU2EwcFFUVlZhUTFWWWF6VlJNSGhHVFZWS1VsWlVRbnBWVkVKSFVXeEdOV1ZHVWxKV1ZWcFZWRVZXVDFGc1JsWlVXRTVoVFVWd1ExVldaR3RSTUhoR1ZHdEtVbFpWVlROVk1WWkhVa2RLY2xSWVRsSk5SVnBEVlZoc05GSkdSbFpTYTBwUVRVZDRRMVZzVmxKak1WSldVbXRLVlZVemFFVlZWbFpIVWtWNFIxUnJTbEpXYXpGNlZWUkNSMUZzUmxWa1JVcFNWbFphZWxWWGJEUlNSa1pXVW10U1RWSlZOVU5WVmxaT1l6RkZkMUpyU2xKbFdHaFBWVlpXUjFScmVFWlVhMHBTVmxVeGVsVlVRa2RSYkVaVlpFVktVbFpXV2xoVVJXUXdVVEZHVmxKdGVFMVNhelZEVlZaYVRtTXhSWGRTYTBwU1ZUQnNlbE5YTVdGalIwcElWbGRzVUdGVmNHOVplazVQWWtkU1NWUllXbXBTTUZweFdWUk9UbVJzYkhSUFdGcHJVMFUwZDFreU1VZGtNSGQ1WTBod1RVMHdOVFZYV0dzMVpXeHJlbE51V21sU00yZzJXVEJvY21SWFJuVlVWMnhOVVRCd05sbHFUbGRsVm10NVZtNXdVazFxYkRGYVJXUlhaRmRTUkZOVVdsaGxWWEIzV1d4b1EyUnRUblZWVjJSWFYwWktkMWxyVGtOaVYwNTBUMWhTU2xFeVRqRlVSRTVYVFVkR1dHUXlOVmxTZWxacVdXMTROR1JWZURWaU0wWlpVbnBTYmxNeWJFSmtSWGhVVFVoU1RWVjZRakJVUmsxM1pFVjRWRTFJVWsxVmVrSXdWRVpOZDJSRmVGUk5TRkpOVlhwQ01GUkdUWGRrUlhoVVRVaFNUVlY2UWpCVVJrMTNaRVY0VkUxSVVrMVZla0l3VkVaTmQyUkZlRlJOU0ZKTlZYcENNRlJHVFhka1JYaFVUVWhTVFZWNlFqQlVSazEzWkVWNFZFMUlVazFWZWtJd1ZFWk5kMlJGZUZkbFNGWktVVEk1YmxWWE1EVmtiVkpKVkdwQ2FtSlZXak5UVlU1dlRXczFSRTVJWkUxaGEwWXdWMVprTkdReVJraFNXRlpQWVZkek1sTlZhRTloYlU1MFQxaE9hVk5GTlROYVZrMHhZMWROZUdWSVZrcFJNamx1VmtWa2MyRnNjRmhPV0hCaFZqRkdibHBHWXpGaE1YQlpVMWRrVlZaWGVGWlRWVTV2WWpKU1NWVnVaR3BsYlRreVZFUkthMk5IVWtoaFJFWmFZVlJXY1ZscVNYZGtiVkpKV2tkc2FtVlViSEJaYWtrMVRVZE5lbFZ1YkZwWFJVWXlWMWN4TkdSc2JIQlBXRkphVjBVMGQxZHNhRXBrYkZKR1lrVlNVMVpVVmxWVmJFNXpXVEpLY0ZGWVJrcFJla0l3VkVaTmQyUkZlRlJOU0ZKTlZYcENNRlJHVFhka1JYaFVUVWhTVFZWNlFqQlVSazEzWkVWNFZFMUlVazFWZWtJd1ZFWk5kMlJGZUZSTlNGSk5WWHBDTUZSR1RYZGtSWGhVVFVoU1RWVjZRakJVUmsxM1pFVjRWRTFJVWsxVmVrSXdWRVpOZDJSRmVGUk5TRkpOVlhwQ01GUkdUWGRrUlhoVVRVaFNUVlY2UWpCWFJXTXdXakIwY0U5WFRtbGlTR2d4VjFSSk5XUlhUWHBWVjJSV1RXczFOVmxxU2pSak1WVjZVV3BXU2xKRVFtNVRNRTV1WVRCMFZGRlViRkZoVlVrelYwVmpNVmt5U25ObFNGWktVVEJHTWxNeWJIZFpNa3B3VVZka1NsRXlPVzVVUmsxM1pFVjRWRTFJVWsxVmVrSXdWRVpOZDJSRmVGUk5TRkpOVlhwQ01GUkdUWGRrUlhoVVRVaFNUVlY2UWpCVVJrMTNaRVY0VkUxSVVrMVZla0l3VkVaTmQyUkZlRlJOU0ZKTlZYcENNRlJHVFhka1JYaFVUVWhTVFZWNlFqQlVSazEzWkVWNFZFMUlVazFWZWtJd1ZFWk5kMlJGZUZSTlNGSk5WWHBDTUZkRll6QmFNR3hFVVZoR1NsSlZOVEpaYlRWUFRVWnNXRTVVUW1wTldHZ3hVMVZPUWxvd2RIQlJXRkpOVlhwQ01GUkdUWGRrUlhoVVRVaFNUVlY2UWpCVVJrMTNaRVY0VkUxSVVrMVZla0l3VkVaTmQyUkZlRlJOU0ZKTlZYcENNRlJHVFhka1JYaFVUVWhTVFZWNlFqQlVSazEzWkVWNFZFMUlVazFWZWtJd1ZFWk5kMlJGZUZSTlNGSk5WWHBDTUZSR1RYZGtSWGhVVFVoU1RWVjZRakJVUmsxM1pFVjRWRTFYVG1saFZVWnVVMVZPZG1Sc2FFaE9WMDVwWVZWR2JsZFVTVFZrVjAxNlZWZGtWV0V3V2s5VmJFNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VrUkNibE5xVGs5aGJVNTBUMWhPYVZORk5UTmFWazVyV1RKS2NGRlhaRnBOYW13eFdYcE9VbG94V25KV2JFNVdUVWQ0VVZaSGJFSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSVTFIWkV0bGJFWXhWRlZOTUdRd2VGaFNiazVxVWpKb2IxUkhjRnBpYkdoSVRrZGtTbEl3TlRKWmJUVlBUVVZzUmxWclNsZFNWVnB0VlhwQ1YxZHJiRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVlJzU2xFeVVuQlpNMnN4Wld4cmVsTnVXbWxTTTJnMldUQm9jbUpzYUVoT1IyUktVakExTWxsdE5VOU5SV3hHVm14a1UxWlVWbFpYUkVJd1VteGtWRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWR3hLVWpCR01WTnJhREJTVmtaWFZXdEtXVTFJVWtkV01XZDRXakZvU0U1SFpFcFNNRFV5V1cwMVQwMUZiRVpWYTBwWFVsVmFiVlZXV2tOVGJHZDNaRVZhV0ZVd1JtNVRWVTVDV2pCc1JGRlViRXBSTWs0eFYydGtSMDFHYkZSTlYyaHFVakowZFZkRll6QmFNR3hJVkc1YWFXSnJOSGRUVlZaM1ZXeGFWbFpzVGxoV2FteFFWa1JGTlZKR1VYZE9WV1JWVWxkNFJWWnJUa0pQVld4RVZWaFdZV0pVVm1sV1IzUkhWR3hLVjAxWFRtbGlTR2d4VTFWT1EyRnRTWGxPV0hCclVUQktSbGRzWkdGaFIxSllaVVJDU2xKRVFtNWFWRVkwWkZWc1JGRlhaRXBTZW14MFYyMDFUMkpIVWtSUlZGcEtVa1ZXTTFSRldqUmtWV3hFVVZka1NsSjZSbk5hUldSdlpHeHdSRkZVV2twUk1sSnZXa1pvVTJScmNEVmxSMDVwWVZWR2JsTlZUa05OUm14WlUyMDFZVmRHUm01VU1teENZbXR2ZUdWSVZrcFJNRWsxVjBWak1Wa3lTbkJSVjJSYVRXcHNNVmw2VGxKYU1VcElWbTB4V2xkR1ducGFSVnBUVGxkT1NGWlhaRkZWTUVrelYwVmpNRm93YkVSUlYyUnBUV3h3ZEZsNlNsZE5SV3hGWWpKa1MwMXFWWGhaYkdSTFlrZE9jRmt6VGxsU2VsSnVVMVZPUWxveVNsaFdha0pvVW5wc2NsTlZVblphTUc5NlZHcENhbUpYZURGWGJteHFZekZvU0U1SFpFcFJNRVp1V2tWa1IyVldiM2xXYWtKS1VrYzVibE51Ykc5bGJWSkpVMjVDYVdKWFVUUlhiR1EwWWtkS1dGWnVWbXRSTW5SMVYwVmpNRm93YkVsTlYwNXBZa2hvTVZOVlRrTmhiVWw1VGxod2ExRXdTa2RhUnpGWFpGZFNSRkZVYkVwVFNGSnFXVzFzUWxvd2JFUlJhMHBTVFZaS1MxWnRkRWRXVmtwVVVWZGtTbEV3Um01VFZWSjJXakZzU0ZKdGNHdFNNbmQ1VjFab1UySkZjRWxrUlZwWFlURmFVRlpyV1RWVVJrcFhZa1JzV2xFemFHcFpiV3hDV2pCc1JGRnNVbEpOVlhCUlZrVldNMW93YkVSUlYyUktVVEJHYmxOVlVuWmFNV3hKVkcxd2FtSlViSHBaYTA1VFRqRktWMWRyV2xWaVJrcHRWWHBDVjFkdFdsaFJXRTVaVW5wU2JsTlZUa0phTVZKR1QxVktVMUpxYkVaVlZscFRVV3huZDFKc1JsUlZNRVV5VTFWa1EyTXlTWGxTYlhSTFUwaFNSMVp0ZEZkVU1WcEhUMVY0VTFadGR6VlRhMmd3VWxaR1YxVnJTbGxOUlZwU1ZURlpOVlJHU2xkaVJHeGFVbTVvTVZOVlRrTlBWbWhJVGxkT2FXRlZSbTVYVkVrMVpGZE5lbFZYWkZKTmJtaHZXWHBPVDFReGJGaE5WM2hLVWtSQ2JscFVSalJrVld4RVVWZGtTbEpXU2xSV1JFWkRVbFpSZUZwRk9WbE5SM2hXVld4VmQxb3dPWEJSVnpWaFUwVndNbGt3WkZOa2JWRjVUa2hTYUZkR1NuTlpiRTVxWXpGb1NFNUhaRXBSTUVadVZXdGFTMVZHVmtaVmJFSlhUVVJXYlZaR1ZsZFVNVnBVVVZSYVNsRXlVbkpaTWpBMVpERndTRTlVVG1saFZFWXdWMnhqTVUxVmNEVmxSMDVwWVZWR2JsTlZUa05VTVVaWFYyMWFWVkpYZUZCVk0yeENXakJzUkZGWFpFcFNSemx1VTJwSk1XRkhVbkJOV0U1b1ZucFdlVk51YkRSWk1rcHdVVmRrU2xFd1NsQlZWbHBhV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVWaU1tUkxUV3BXYjFwSGJHcGpNV2hJVGtka1NsRXdSbTVWVmxaUFZsWk9WMWRyV2twUk1FWnVVMVZPUWxvd2JFUlJWRnBLVVRKU2IxZFVUbE5qUjFKMFZsYzFXVko2VW01VFZXZDRXVEpLYzJWSVZrcFJNRXB4V1dwSk1XVnRVa1JSYkZKaFZqTm9jMWRVVGxOa2JVNXdVVlJzU2xOSVVtcFpiV3hDV2pCc1JGRnJWbEpXYkVwRFYwUkdUMVZXWkZSUlYyUktVVEJHYmxOVlRrSmFNRGx3VVZjMVdFMXNTbTlhUldSR1pFZE5lbEZxVmxGV2JtUndXWHBLVDJWWFNYbGxTRTVaVVRCd2ExTnViRFJaTWtwd1VWZGtTbEV3U2tOVlZFWlRVMnhhY2xaWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSUVlWVkdkVlJITVVkaGJWSklZa1JLWVZVeVRucFhSV013V2pCc1JGRlhaRlZTVjNoVlZtdFpOVk5zV2taV2F6VktVVEJHYmxOVlRrSmFNR3hGWWpKa1MyVlVWbnBaVm1oUFRVVjRXR0pFUW1GV2VrSjFWRVZhTkdSVmJFUlJWMlJLVWxob1MxTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGVVdrcFJNbEo2V1ZaT2FtTXhhRWhPUjJSS1VUQkdibFpGVm5OYWJFcEhVMnhDVmxKV1NsRldha0V3V2pCc1JGRlhaRXBTUnpsdVUycEtOR05GZUhSVmJteHBUVEJLY2xscVRtdGtWWEExWlVkT2FXRlZSbTVUVlU1RFZERkdWMWR0V2xWU1YzaFFWWHBHVGxvd2JFUlJWMlJLVVRCR2JsUXliRUppYTNoMFRsZG9hMkZVUm5wWlZtTXhZMnR3TldWSFRtbGhWVVp1VTFWT1ExSldWbkpQVmtaVFVsUnNXVlpIYkVKYU1HeEVVVmRrU2xFd1JtNVVNbXhDWW10NGRGVnViR2xOTUVweVdXcE9hMlJWY0RWbFIwNXBZVlZHYmxOVlRrTlNWbFp5VDFaR1UxSlViRmxXUjNjMVUyeGFSbFpyTlZabFZVWnVWREpzUW1KcmVIUlZibXhwVFRCS2NsbHFUbXRrVlhoWVlrUkNZVlo2UW5WVVJWbzBaRlZzUkZGWFpFcFNWa3BVVmtSR1ExSldVWGhhUlRsWlRWWktVVlZxUW10VVZrcFVVVlJhU2xFeVRqRlhhMmhMWkcxT1NGVnVXbXROYWxJd1drVmpOV0pzYjNsbFIzaExUVmhvTVZOVlRrTlBWbWhJVGxkT2FXRlZSbTVYVkVrMVpGZE5lbFZYWkZWTmJIQjBXWHBLVjAxR1VsaFdha0pvVW5wc2NsTlZVWGRhTWxWNFpVaFdTbEV3Um01VFZWVTFVakZLYzFScldsZFJNRVp1VTFWU2Rsb3diM2xQVnpGaFltczFjMXBGVG1wak1XaElUa2RrU2xFd1JtNVdWVlUxVmtaT1YxVnJjRlZOUkZKdVZESnNRbUp0VGtoUFdIQm9WMFpLZDFscVNUQmliR2hJVGtka1NsTkVSbXBaYlhnMFpGWm9TRTVIWkVwUmVtaDRVeko0TkdSVmJFUlJWMlJNWVZWR01GUkdUWGRrUlhoVVRVaFNUVlY2UWpCVVJrMTNaRVY0VkUxSVVrMVZla0l3VkVaTmQyUkZlRlJOU0ZKTlZYcENNRlJHVFhka1JYaFVUVWhTVFZWNlFqQlVSazEzWkVWNFZFMUlVazFWZWtJd1ZFWk5kMlJGZUZSTlNGSk5WWHBDTUZSR1RYZGtSWGhVVFVoU1RWVjZRakJVUmsxM1pFVjRWRTFJVWsxVmVrWnFXVzFzUWxvd2JFUmlNbVJTVFc1b2IxbDZUazVhTVVwSVZtMHhhRlo2Vm5kYVJXUnpaRzFLYzJWSVZrcFJNRVp1VXpKc1FtUkZlRlJOU0ZKTlZYcENNRlJHVFhka1JYaFVUVWhTVFZWNlFqQlVSazEzWkVWNFZFMUlVazFWZWtJd1ZFWk5kMlJGZUZSTlNGSk5WWHBDTUZSR1RYZGtSWGhVVFVoU1RWVjZRakJVUmsxM1pFVjRWRTFJVWsxVmVrSXdWRVpOZDJSRmVGUk5TRkpOVlhwQ01GUkdUWGRrUlhoVVRVaFNUVlY2UWpCVVJrMTRXVEpLY0ZGWFpFcFJNamt5VjBWak1Wa3lTbkJSVjJSYVRXNW9iMWw2VGs1YU1WVjVWRzVzYVUxdWFIcFdWRTVEVGxWc1NXUkhUbWxpU0dneFUxVk9RbG93YkVoVWJscHBZbXMwZDFreU5WZGhiVkpJVDFoc1RGSXhXbnBYYkdONFlrZEtkVlZZVGtwU01EVXlXVzB4WVdOR2NEVmhNbVJzVFZob01WTlZUa0phTUd4RVVWZGthMUl5YUhkWk0yc3hXbXh3V0dWSGVHbFdNVm94V2tWT1Fsb3diRVJSVjJSS1VUQkZOVk5WWkZkak1YQllUVmQ0YVdKc1NtcFpiV3hDV2pCc1JGRlhaRXBUUmtwMldWWm9UbVJXWjNwVWJYQnFZbFJzZWxsclZsZGpNWEJZVFZkNGFXSnNSbTVWUms1RFlrZEtTRlp1VW1GV2VsVjNWRWMxVTJGR2IzZE9WMmhwVmpGV2JsVkdVWGRQVld4RVdrVk9WVTFHU21GVGJteENUREJzU1ZwSVFtbGlWa295V2toc1FrNXJiRWhXYms1aFZucEdjMWx0TlZOWk1rcHdVVmRrU2xFd1JtNVRWV2hUWWpKR1dWUllWbGxOYXpVeVdXMHhZV05HY0RWUlYyUktVVEJHYmxOVlRrSmFNVUpVVVdwQ2FGSXllRFpVUjNjMVlteHdXVlZyVW1sTmFsWjBXVlprYW1JeGEzbFBXRlpoWWxkNGRWTXhXalJrVld4RVVWZGtTbEV3Um01YVJXUnZZMGRPTlU1WFdtcE5iRnA2VjJ4a1QwMUhTWHBUVjJSS1VUQkdibE5WVGtKUFZXeElVVmQwYkUweFNuWlpWbWhPWkZabmVWUnVXbWxpVm5CM1YyNXJNVTFHYkZsVGJUVmhWMFpKTlZOVlRsTk9NVlY1Vm01T1lWWXdOSGRaYWs1S1pGWlNjbEpzWkZsTlNHaExWa2QwTUZaSFdsUmxSMlJaVW5wU2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUTk9ibGRWVGxOT01sSklZVWhDYW1WVVZtMVhWRWsxWkZad2RHSkhOVTFpYkVwdldUSXhhMkpIVWtsTlIyUkxVMGhTVlZkc1pEUmlSbXQ2Vlc1YWFtRlVWa1pXVjNNMVZWWktSazlXYUZWaVJHeExWbXRXVjFSc1ZYcE5WMlJaVW5wU2JsTlZUa0phTUd4RVVXcENhRkl5ZURaVVIzYzFaR3h3ZEZkdWNHRlhSa28yVTFWT1Fsb3diRVJSVjJSS1VrUkNibFo2UlhoWk1rcHdVVmRrU2xFd1JtNVRWV2hUWWpKR1dWUllWbGxOTVVwdldUSXhhMkpIVWtsVVYyUktVVEJHYmxOVlRrSmFNVUpVVVcxS1dWWnVhREZUVlU1Q1dqQnNSRkZYWkd0U01taDNXVE5yTVZwc2JGaFVha0pvVjBad2MxWnJaRWRsVm05NVZtcENTbEV3UlRWVFZXTXhUVmRLU0dWSFRtbGhWVVp1VTFWT1Fsb3diRWxWYlRsb1YwVXhNVmRFVGs5aGJVNTBUMWhPYVZKWGFITlpWbVJyWWpKU1JGRlhaRkZWTUVZelYwVmpNVmt5U25CUlYyUktVVEJHYmxOVlRsSmlNbEpJWVVoQ2FtVlVWbTFaZWtwUFpWZEplV1ZJVGxOV00yaHpXV3hrVjJSWFVrUmhNMVpwVFdwU2RsVnNhR0ZpUjBwMVZWaFdWazFGTlZSV1JFSTBWRlY0UkZGWE9XRlhSbkJ6V1cwMVVtTkZiRVZOUTNSS1UwWktkbGxXYUU1a1ZtZDZVVzVzYVUxck5YTlplazVPWWpGd1dWZHRlR2xpYkVaM1V6RmFOR1JXYUVoT1IyUktVVEJHYmxOVlRrTk5SMFpJWWtod1RXSnJjSE5YYlRWTFlrZE5lVm95T1V4V2JtZ3hVMVZPUWxvd2JFUlJWMlJyVWpKb2Qxa3phekZhYlU1SlUyNWFXazFzV2paWk0yeHVZMFpvU0U1SFpFcFJNRVp1V214YU5HUldhRWhPVjA1cFlWVkdibE5WVGtKa2EzZzFVVzAxWVZkR1NYZFhiR2hMWld4b1NFNVhUbWxoVlVadVUxVk9RMlZ0VWtoU2FrSm9WakF4YmxkcVNsZE5SV3hIVjJ0YVZtSkZOVXRXUkVFd1lqQjBWRkZxWkZsU2VsSnVVMVZPUWxvd2JFUlJibXhoVjBaSmVGa3lNREJhTVZweVZteE9WazFIZUZGV1IzZzBaRlZzUkZGWFpFcFRSRVpxV1cxNE5HUlZiRVJSVjJSS1UwVTBkMWRXYUZOalJtdzFVVzAxWVZkR1JtNVZhMlJYWWxac1dWWnVUbXRSTW1SM1UxVm9NRmt5U25CUlYyUktVVEJHYmxOVmFFdGlSMUpKVm01c2FXRlZTa1pYYkdSaFlVZFNXR1ZFUWxsU2VsSnVVMVZPUWxveVdsZGxTRlpaVW5wV2FsbHRiRUphTUd4RVVWaGFUV1ZWU2pOYVJtUkxZekpHV0ZSdFRtbGlTR2d4VTFWT1Fsb3diRWxUYlhoaFltdHdjMWw2U201aU1IUlVVV3BrV1ZKNlVtNVRWVTVDV2pCc1JGRnRjR2xOYWxZMldrVk9RMkZIVWxsVmJscFZWakZaZDFsVll6VmhNR3hGVFVka2ExSXlhSGRaTTJzeFdtMU5lVlJ1YkdsTmJtaDZWV3hrTkdKSFNsaFdibFpyVVRCR2IxVkdVWGRhTWxKSVlVaENhbVZVVm0xWmVrcFBaVmRKZVdWSVRsTldNMmh6V1d4a1YyUlhVa1JPVkU1b1ZucFdjbGxxVG1wYU1VRjRaVWhXU2xFd1JtNVRWVTVDV2pCc1JGRnNRbUZpVm5BMlYyeG9VMVJzY0ZsVmJUbHBUV3hHTVZaVlZUVldSazVYVld0d1ZVMUVVbTVVTW14RFZVWndkRmR1Y0dGWFJrcFBWMnhvVTJJeVNYbFZXRlpWVFVad1NGWlVRbGRXVm1oSVRsZE9hV0ZWUm01VFZVNUNXakJzU0ZSdVdtbGlhelIzVTFWak5XSldjSFZVYlhoclVsUkdjMXBGWkc5a2JIQkVVVlJzU2xOR1NuWlpWbWhPWkZabmVWUnVXbWxpVm5CM1YyNXJNV1JHY0ZsVmJUbHBUV3hHYmxWR1VYZFBWV3hFV2tkb2ExZEdTakpUYm14Q1RERm9TRTVIWkVwUk1FWnVVMVZPUWxvd2JFaFNha1pyVW5wc1QxZHNhRk5pTWtsNVZWZGtVR0ZWU1hkWlZXUnpaV3Q0YzA5WGNHbE5hbFowV1Zaa2FtUlhTbGhXYWtKb1VucHNjbGRGWXpGWk1rcHdVVmRrU2xFd1JtNVRWV1JQWkcxS2RWUnFRa3BTZW14MFYyMDFUMkpIVWtaVGJXaHFUV3hXYmxWR1RrTmtiSEIwVjI1d1lWZEdTazlYYkdoVFlqSkplVlZYWkZGV1JFRTFVMVZWTldKV2NIVlViWGhyVWxSR2MxcEZaRzlrYkhCRVRsWkdWVTFWTlV0V2ExWnpWVVpTY0ZGVE9WbFNlbEp1VTFWT1Fsb3diRVJSVjJSS1UwWktkbGxXYUU1a1ZtZDVXa2Q0YTFKck5YRlpNakExWXpKS1IxVnVXbXBSTW1SM1UxVlNkbG93TVVkbFNGWlpVbnBTYmxOVlRrSmFNR3hFVVdwQ2FGSXllRFpVUjNjMVpHeHdkRmR1Y0dGWFJrbzJVMVZSZDFveFkzaE5WMDVwWVZWR2JsTlZUa0phTUd4SlZXMDVhRmRGTVRGWFJFNVRZVWRPZEZwSGVHdFRSVEZ1VlVaT1ExbHNhRmRsU0ZaWlVucFNibE5WVGtKYU1HeEVVV3BDYUZJeWVEWlVSM2MxWld4cmVsTnVXbWxTTTJoS1YyeGtjMkp0UmtsVlYyUlJWVEJKZDFsVlpITmxhM2h6VDFjMVlWZEdTbFZYVkU1TFpHMUtTR1ZGYkdGV01uaDFXVlZvVW1Jd2RGZGxTRlpaVW5wU2JsTlZUa0phTUd4RVVXMXdhVTFxVmpaYVJVNURUVVpzV1ZOdE5XRlhSa28yVTFWUmQxb3djRVJPV0ZKYVZqTlNjMVZXYUV0bFZteFpZVEk1UzFFeVozZFpWV1J6Wld0NGMwOVljR0ZXTTJoelYxUk9VMlJ0VG5CaE0wSlpVbnBXYWxsdGJFSmFNR3hFVVZka1NsTkdTbTlaTWpGcllrZFNTVlJ0VG1saFZVWnVVMVZPUWxvd2JFUlJWMlJOWWxSR2Ixa3dUbTVpTVhCWVpVZDRhVll4V2pGYVJVNXlXakZDVlU1SFpHeE5XR2d4VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WWkRSaVIxSkVVV3BDV2xkRmNIVlhiR2hUV1RKS2NGRlhaRXBSTUVadVUxVk9RbG93YkVSUmJYQnBUV3BXTmxwRlRrTk5SbXhaVTIwMVlWZEdTbFZYYkdRMFlrWnJlbFZ1V21waFZVVTFVMVZhVjAxSFJsaGtNMVpoVFd4WmQxWlVTbGRqTVhCWVZHcENhVTB3Y0VoWk1qQTFaRVpLV0dWSGVHbFdNVm94V2tWT2IySkhTa2hXYmxKaFZucFZkMU14V2pSa1ZtaElUa2RrU2xFd1JtNVRWVTVDV2pCc1JGRlhaR2hXTVd4dVV6Qm9VMkZIVG5SYVIzaHJVbXMxYzFsclpGZGhiVkpJVDFoc1RGVXdTVE5YUldNd1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJha0phVjBWd2RWZHNhRkphTVVKVVVWZDBURk5HU205Wk1qRnJZa2RTUjFSdGVHbFNNVnB4V2tWak5XVlZkRmRqTTJSWlZtNW9NVk5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWV2Q0V1RKS2MyVklWa3BSTUVadVUxVk9RbG93YkVSUlYyUktVako0ZEZOVlRtOU5SbXhaVTIwMVlWZEdSbTVUYld4YVdqQjBTVlZ0YUdwaVYxSnpXa1ZOTVdSc2NIUlhibkJoVjBaS1dWbFdaRk5OUjBaRVVXcG9iVkV3U1hkWFZtaExZbXh3V1ZWWVZtbE5iSEIwV1hwS1YwMUdUa2hXYmtKaFRXMW5kMU14VG5KYU1sVjRaVWhXU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVZFaHJORm95VWtoUFYzUnBaVlZHZGxkdE1VZE5SWFJWWWpKa2FtSldXakJaYWs1aFlrVnNTVlJ1U21GWFJrcHhXVlZPUTJWV2NGaGxTRUphVm5wV2NWZHNUa05rYlVwd1VXNUdWbGRHV25OWk1qVnlXakpPU0U5WWNHaFhSa3AzV1dwSk1HUnRTWGxYYlRGcVRXeFpkMWRGWXpCYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRnViR0ZYUmtsNFdUSXdNRm94WTNobFNGWktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1lUQjBTVlZ0YUdwaVYxSnpXa1ZPYzFsdFNYbFhiVEZxVFd4WmQxWkdaRmROUjBaSVQxZDBXVlV5WkhkVVJ6VlRaRzFPUkZGWVNrcFNlbXgwVjIwMVQySkhVa1pUYldocVRXeFdlbGRGWXpCYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBUUmtwdldUSXhhMkpIVWtkVWJYaHBVakZhY1ZwRll6VmxWbWhJVGtka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FcHJWMFZqTUZvd2JFUlJWMlJLVVRCR2JsTlZUa0phTWxwWFpVaFdTbEV3Um01VFZVNUNXakJzUkZGWFpFcFRSWEJ6V2tWb1YyVlhTbkJSYmxaclZqTm9lbGRGWXpCYU1HeEVVVmRrU2xFd1JtNVRWV2QzWTBab1NFNUhaRXBSTUVadVUxVk9RbG93YkVST1Z6Rm9Wak5uZDFkc2FFcGlNSFJJWWtSQ1lWWjZRbmRUVlU1Q1QxWkNjRkZ1UW10U01Wb3dVekZhTkdSVmJFUlJWMlJLVVRCR2JsTlZUa0prVjAxNVQxaHNhMUV5WkhaWFZrNHpXakZzY0dFeVpFcFJNRVp1VlVaUk1Gb3hiRmRqTTJSWlZUQkdNRk5WWkV0WmF6RkhUVWhDV1ZKNlVtNVRWVTVDV2pCc1JGRlhaRXBSZWxaMFdXcE9TMUpzYkZoVWJUbE1VVEpvZDFwRlpGZGtSWFJVVVZSc1VXRlZTVE5YUldNd1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxveVVraGhTRUpxWlZSV2JWbHFTbUZpVjAxNVZtcENhbVZVVmpOYVJtaFBZakIwU0dKRVFtRldla1pwVkZWWmQyTkdhRWhPUjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrYTFJeWFIZFpNMnN4V20xU1NGSnViR0ZOYkZsM1dUTnJNV1F5VWxsVWJUbE1VakozZDFkc1kzaFphekZYVFVoQ1dWSjZVbTVUVlU1Q1dqQnNSRkZYWkVwVFJFSjNWMFZqTUZvd2JFUlJWMlJ0Vm01b01WZEZZekJhTUd4RVVWZGtZVkl5ZURaWk1HTTFaV3h3VkZvelFrcFRTRkpxV1cxc1Fsb3diRVJSVjJSS1VURkdNVmt5TVZka1IwbDZWMjE0VTFJd1dYZFhWazV2VFVkR1NHSkljRTFpUkd4eldXdGtWMlJHY0ZoT1ZFSk5VVEJLUmxWV1dsTlJiR2QzWkVWYVdGVXllR3BaYld4Q1dqQnNSRkZYWkVwUk1VWjJXa1ZrYjJOSFRqVk9WMXBxVFdzMU5WbHFTalJqTVVwWVpVZDRhVll4V2pGYVJVNXlaRmRKZVZkdE1VeFNWbHBZVld4Vk1WWldaM2RrUlZwWVZUSjRhbGx0ZURSa1ZXeEVVVmRrU2xFd1JtNWFSV1J2WTBkT05VNVhXbUZXTTJoeldXeGtWMlJYVWtSUlYyUktVVEJHYmxOVlRrSlBWV3hJVGxSR2FWSXphR3BaYld4Q1dqQnNSRkZYWkVwVFJrcDJXVlpvVG1SV1ozcFViWEJxWWxSc2VsbHJWbGRqTVhCWVRWZDRhV0pzUm01VlJrNURaRmRTV0dWSVRsbFNlbEp1VTFWT1Fsb3diRVJSYWtKb1VqSjRObFJIZHpWaGJVbDVUbGN4YUZZeVRtNVRWVTVDV2pCc1JGRlhaRXBTUkVKdVdXMDFWMk15U2tkbFNGWktVVEJHYmxOVlRrSmFNbEpJWVVoQ2FtVlVWbTFaZWtwWFl6RndXRlJxUW1sTk1HeHVVMVZPUWxvd2JFUlJWR3hLVW5wVmVGbHJaRFJaTWtwd1VWZGtTbEV3Um01VFZXaFRZakpHV1ZSWVZsbE5hbXgwVjIwMVQySkhVa2xVVjJSS1VUQkdibE5WVGtKYU1VSlVVVzVXYTFZemFIcFhSV013V2pCc1JGRlhaRXBSTUVsM1dWVmtjMlZyZUhOUFZFSmFWMFZ3ZFZkc2FGTmxhMnhFVVZka1NsRXdSbTVUVlZGM1dqSktkVlp1VG1sU2JtZ3hVMVZPUWxvd2JFUlJWMlJyVWpKb2Qxa3phekZhYkd4WVZHcENhRmRHY0hOV2EyUkhaVlp2ZVZacVFrcFJNRVUxVTFWak1VMVhTa2hsUjA1cFlWVkdibE5WVGtKYU1HeEpWVzA1YUZkRk1URlhSRTVQWVcxT2RFOVlUbWxTVjJoeldWWmthMkl5VWtSUlYyUlJWVEJLTVZwR1pEUmpNV2hJVGtka1NsRXdSbTVhYkZvMFpGWm9TRTVYVG1saFZVWnVVMVZPUW1ScmVEVlJibVJxWWxkM2VWZFdhRk5pUm1oSVRsZE9hV0ZWUm01VFZVNURXbXh2ZVZacVFsSk5hbXd4VjIweGMySnJkRWhVYmxwcFlsWndkMWR1YkhKYU1sVjRaVWhXU2xFd1JtNVRWVTVDV2pGcmVVOVlWbUZpVjNoMVUxVlJkMW93Y0VST1YzaHNVMFpLYzFsdE1WSmlNbFY2VFVoT1NsSldTbk5YYlRGSFRWZEtTVlZZVGtwU01EVXlXVzB4WVdOR2NEVmlSMDVwWWtob01WTlZUa0phTUd4RVVWZGthRll4Ykc1VE1HaFRUbGRPU0ZadVdtRmhWVXB4V1dwSk1XSlhSbGhaTTFaclVqQmFOVmRxU2xkTlJXeEVVbFJzVVZVd1JuVlplazVUWlZkR1dFNVhOVXRsVjNSdVdsUkdOR1JWYkVSUlYyUktVVEJHYmxOVlRrTmpNWEJaVlZka2FGWXhSbTVWUms1Q1lUQjBTRlJ1V21saVZuQjNWMjVyTVUxR2JGbFRiVFZoVjBaR2QxUkhNVWROUjFKSlUxYzVTMDF0ZUhKVGJteHpXVEpLY0ZGWFpFcFJNRVp1VTFWT1Fsb3lSbGhYVjJSTVVUQmFkMWRyVG5KYU1sVjRaVWhXU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBTTW5oeVUxVlJkMW94V2xsVmJrSnBVWHBXZFZkc2FGTldiRTVXVlZjNVZXRXdXazlWYkU1eldUSktjRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWM1JNVWpBMU1sbHRNV0ZqUm5BMVRsUkNXbGRGY0hWWGJHaFNZMFY0ZEZKcVFtdFRSV3gyVTJwS2MyRXdjRFZrTW1Sb1ZqRkdkMWRGWXpCYU1HeEVVVmRrU2xFd1JtNVRWV2Q0V1RKS2NGRlhaRXBSTUVadVUxVk9RbG94YTNsUFdGWmhZbGQ0ZFZSSE5WTmhSMDUwV2tkNGExRXdSVFZUVldSQ1lXdHdTV1JJUW1GVFJFWnVWMFZqTUZvd2JFUlJWMlJLVVRCSk5WZEZZekZaTWtwd1VWZGtTbEV3Um01VFZWcFhUVWRHV0dRelZtdFRSM2d6VjJ4V1QySXhjRmhVYmtwU1RXcHNNVmR0TVhOaWEzUkdUbFZLVlZaV1ZucFRWV1JQWkcxS2RGZHVRbUZsV0dSdVZXdGtWMkpXYkZsV2JrNXJVbXhKTVZrd1pGWmpSbWhJVGxkT2FXRlZSbTVUVlU1Q1dqQnNTVk50ZUd0VFJsbzFXVzFzUTJGdFNYbE9WekZvVmpKU2FsbHRiRUphTUd4RVVXcHNXVko2Vm1wWmJXeENXakJzUkZGdFdtRk5iRmwzVmxSS1QyVlhTWGxsU0U1WFVucHNNMU13VG5KYU1sVjRaVWhXU2xFd1JtNVRWVTVDV2pKT2RGWnFRbXRYUlhBeFUxVm9VMkl5UmxsVVdGWlpUVEExY1ZreU1EVmpNa3BHVm01T1lWWjZSbk5aYlRWU1dqRkNWVTFFYkVwVFIxSjNXVzB4VTJSdFVqVlJVemxaVW5wU2JsTlZUa0phTUd4RVVWZGtTbEV3Um01YVJXUnZZMGRPTlU1WFdtcE5helUxV1dwS05HTXhTbGhsUjNocFZqRmFNVnBGVFRGa01XeFlXa2Q0V0ZaVWJIUlhiVFZQWWtkU1JGRlVXa3BUUmtwMldWWm9UbVJXWjNwVWJYQnFZbFJzZWxsclZsZGpNWEJZVFZkNGFXSnNSakZaZWtwUFpWZEplV1ZJVGxkU2Vtd3pWMFZqTUZvd2JFUlJWMlJ0Vm01b01WZEZZekJhTUd4RVVWZGtXVTF0VW5OYVJWcFBZVzFPZEU5WVRtbFNWMmh6V1Zaa2EySXlVa1JhTTBKS1UwaFNhbGx0YkVKYU1HeEVVVmRrU2xORmNITmFSV2hYWlZkS2NGRnFRbWhTTW5nMlZFZDNOV1ZzYTNwVGJscHBVak5vUjFsclpGZGtSbkJZVGxSQ1RXSnJOWEZaTWpBMVl6SktSbUZIZUdoV01sSjJXa1ZPUTA5SFdrUlJhelZhVjBaS2RsUkhNSGhoUjFaRVlVZE9hV0ZWUm01VFZVNUNXakJzUkZGWFpHRlNlbXh4V2taamVHSkhTblZWV0ZaYVlsUnNjbHBXVFRGbGJHdDZVMjVhYVZJemFFcFhiR1J6WW0xR1NWVllUbGxTZWxKdVUxVk9RbG93YkVSUlYyUktVakZLTWxkVVRsZGtSbkJZVGxSQ1RXSldTakpYVkU1WFpFWndXRTVVUWxOV00yaHpXV3hrVjJSWFVrUk9XSEJhVFRCd01sbHJaRFJUVm5CWVlrYzFhRk5HU21wWmJXeENXakJzUkZGWFpFcFJNbmhxV1cxc1Fsb3diRVJSYW14WlVucFdhbGx0YkVKYU1HeEVVVzFhWVUxc1dYZFdSRXBoWWxkTmVWWnFRbFJTTVZwM1YycEtiMDFGZEVSaE1tUnNUVmhvTVZOVlRrSmFNR3hFVVZka2FtSldXWGRhUm1oTFpGVnNTVlZ0T1doWFJURXhWMFJPVDJGdFRuUlBXRTVwVWxaYWVsZHNZM2hpUjBwMVZWZGtVVlpFUVRWVFZXaHJZMGRLZEZWdVdtdGxWVVYyVjBWak1Gb3diRVJSVjJSS1VUQkdibE5WVGtKYU1sRjVZa2hXWVZKNmEzcFVSekZ6WkZkS2RGWnViRlJTTVZwM1YycEtiMDFGYkVWaU1tUnJVakpvZDFremF6RmFiVTE1Vkc1c2FVMXVhSHBWYkdRMFlrZEtXRlp1Vm10UmVsWXlWMjB4WVdWc2NGbFZhMnhoVmpKNGRWbFZhRk5aTWtwd1VWZGtTbEV3U1RWWFJXTXhXVEpLY0ZGWFpFcFJNRXB0V1RCb1MyUnNhM2xXYm5CcVpWZGtkMU5WYURCWk1rcHdVVmRrU2xFd1JtNVRWV1JQWkcxS2RWUnFRa3BUUlRWeFdUSXdOV015U2tkVmJscHFVVEJHYmxOVlRrSlBWV3hKVlcwNWFGZEZNVEZYUkVwcllrZFNSMVJ0Y0dwaVZHeDZXV3RhVTJSdFRrUmFNMEpLVVROT2JscEZaRzlqUjA0MVRsZGFXazFxYkRGWGJURnpZbXQ0ZEU5WE1XRmlhelZ6V2tWYU5HUlZiRVJSVjJSS1VUQkdibGRVU1RWa1YwMTZWVmRrYWsxck5UVlpha28wWXpGT1NGWnVRbUZOYldkM1UxVlJkMW95VWtoaFNFSnFaVlJXYlZkcVNsZE5SbFY1Vkc1c2FVMXVhSHBWTUdSWFkwWnZlV0ZFUWt4Uk1uaHFXVzFzUWxvd2JFUlJWMlJLVWpBMU1sbHROVTlOUld4SVRWZG9iRkpyTlhGWk1qQTFZekpLUkZGWFpFcFJNRVUxVTFWb1UySXlSbGxVV0ZaWlRXczFNbGx0TVdGalJuQTFUbGhhWVdKV2NEWlhiR2hUV1RKS2NGRlhaRXBSTUVadVUxVk9RbG93ZERWUmJuQmFUVEJ3TWxsclpEUlRWbkJZWWtjMWFGTkdTbXBaYld4Q1dqQnNSRkZYWkVwUk1FWnVWRVpPUTAxSFJraGlTSEJOWWtSc2RWZHNhRk5WUm5CMFYyNXdZVmRHU2twWGJHUnpZbTFHU1ZWWE9VeFdibWd4VjBWak1Gb3diRVJSVjJSS1VUQktkMWR0YkVKaU1sSklZVWhDYW1WVVZtMVpla3BQWlZkSmVXVklUbFJTTVZwM1YycEtiMDFGYkVSU1ZHeFJWVEJLTmxkVVRrdGtiVXBJWlVWc1lWWXllSFZaVldoU1kwVnNTV1JIVG1saFZVWnVVMVZPUWxvd2JFUlJWMlJyVWpKb2Qxa3phekZsVm5CWVYyNXNZVmRGTlhaVE1FNXpXVEpLY0ZGWFpFcFJNRVp1VTFWbmVGa3lTbk5sU0ZaS1VUQkdibE5WVGtKYU1rWllWMWRrVEZORk5YRlpNakExWXpKS1IxVnVXbXBSTUVWeVZVWk9RMlJHYkZsaFJsSmFUVEJ3TWxsclpETmpSV3hKWkVkT2FXRlZSbTVUVlU1Q1dqQnNSRkZYWkZwTmFtd3hXWHBPVWxveVVraFNibXhoVFd4WmQxTlZVWGRhTWxKSVlVaENhbVZVVm0xYVJXUkhaVlp2ZVZacVFtcE5XRkYzV1ZWa2MyVnJlSE5QVkVKYVYwVndkVmRzYUZObGEzaDBaVWQ0YVdKWFVYZFpWVTVDWkVWc1JWSnRVbGxTZWxacVdXMXNRbG93YkVSUlYyUktVVEJHYmxsV1pGcGFNSFJKVlcwNWFGZEZNVEZYUkVwSFlXMVNTR0pFU21GV2JFcHZXVEl4YTJKSFVrUlJWMmhSVmtSQ2JscEZaRWRsVm05NVZtcENURlV3U1ROWFJXTXdXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3lVa2hoU0VKcVpWUldiVmRXWkU5TlIwWlpWMjFvYTFJeFZuWmFSV1JIWlZadmVWWnFRa3hXYm1neFUxVk9RbG93YkVSUlYyUktVVEJKTlZkRll6QmFNR3hFVVZka1NsRXdSbTVUVldoTFlrZFNTVlp1YkdsaVNHZ3hVMVZPUWxvd2JFUlJWMlJ0Vm01b01WZEZZekJhTUd4RVVWZGtTbEV3U25kWGJXeENZakpTU0dGSVFtcGxWRlp0VjFaa1QwMUhSbGxYYlhoWFVqQmFOVmRxU2xkTlJXeEVWMWN4U2xORk5YRlpNakExWXpKS1IxVnVXbXBSTUVVMFUxVm9VMkl5UmxsVVdGWlpUV3BzZEZkdE5VOWlSMUpKVkcxS1RsSnFRbTVUYld4YVdqSlNTR0ZJUW1wbFZGWnRXV3BLWVdKWFRYbFdha0pxVFZoT00xZEdUa0pMTUd4RlVWaENTbE5JVW1wWmJXeENXakJzUkZGWFpFcFJNRVp1V2tWa2IyTkhUalZPVjFwYVZqQTBkMWxXYUdGaVJscElVbTVzWVUxc1dYZFRWVkYzV2pKS2RWWnVUbWxTYm1neFUxVk9RbG93YkVSUlYyUktVVEJKZDFsVlpITmxhM2h6VDFkd2FWSXhXbTlaTW14dVkwWm9TRTVIWkVwUk1FWnVVMVZPUWxvd2JFbFRiWGhyVTBaYU5WbHRlRFJrVld4RVVWZGtTbEV3Um01YWJGbzBaRlpvU0U1SFpFcFJNRVp1VTFWT1EySlhTWHBUVjJSTVVqTm9jMXBGVGtOalJXeEZUVWRrYTFJeWFIZFpNMnN4V20xSmVWZHRNV3BOYkZsM1dUTnJNV014Y0ZoT1Z6VnJVakpqTTFOVlpISmtSWGhWWXpOQ1NsTklVbXBaYld4Q1dqQnNSRkZYWkVwUk1FWnVWMVJKTldSWFRYcFZWMlJvVjBVMVExZFVUbE5qUjFKMFZteFdXbGRGY0hWWGJHaFNXakZDVkZGcVFtaFNNbmcyVkVkM05XRkdhM3BWYmtKcllsWmFWbGRXYUV0aWJIQlpWVmRrU2xaRVFUVlRWV2hUWWpKR1dWUllWbGxOTVVwdldUSXhhMkpIVWtsVWJVcG9WbXBHYWxsdGJFSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRmRYTVVwVFJUVnhXVEl3TldNeVNrZFZibHBxVVRCRmNsVkdUa05OUjBaSVlraHdUV0pFYkRKWGJURmhaV3h3V1ZWdWNGaE5iWGhyVjBWak1Gb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmN4UzJGVlJuWmFSV1J2WTBkT05VNVhXbWxOYkhCMFdYcEtWMDFIVFhoa1NFSktVVE5PYmxSV1dYZGFNVUpWVFVSc1NsTkdXakZYYTJSWFlsZEdXRTVYZUdGUk1FazBXbXRhTkdSVmJFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZXaFBZVzFPZEU5WVRtbFNiRW95V1RCT1FrOUZiRWxWYlRsb1YwVXhNVmRFU1RWaVZuQjFWRzE0YTFORk5XbFpWazVDWTJ0c1JWSnRVa3hXYm1neFYwVmpNRm93YkVSUlYyUktVVEJHYmxOVlpITmlWV3hFWVVoQ2FrMUZXbkZhUldSelRXeHdWMVZ0YUdwaVYxSnpXa1ZPY2xveVZYaGxTRlpLVVRCR2JsTlZUa0phTUd4RVVWZGtTbE5HU25aWlZtaE9aRlpuZVZKdGNHdFNNbmQ1VjFab1UySkZkRWxWYlRsb1YwVXhNVmRFVGxOaFIwNTBXa2Q0YTFORk5XbFpWbGwzWTBab1NFNUhaRXBSTUVadVUxVk9RbG93YkVsTlYwNXBZVlZHYmxOVlRrSmFNR3hKVFZkT2FXRlZSbTVUVlU1RFQxWm9TRTVYVG1saFZVWnVVMVZPUTFwc2JGaFVha0pvVjBad2IxcEZaRlppTWxKSVVtNXNZVTFzV1hkVE1VNURUakZvU0U1SFpFcFJNRVp1VTFWT1EwMUhSa2hpU0hCTllrUnNiMWRVVGxOalIxSjBWbXhXV2xkRmNIVlhiR2hTV2pGQ1ZGRnFRbHBYUlhCMVYyeG9VMWt5U25ObFNGWktVVEJHYmxOVlRrSmFNbEpJWVVoQ2FtVlVWbTFYVkVvMFlrWnNXVk5YT1V4V2JtZ3hWMFZqTUZvd2JFUlJWMlJLVVRCS2VsZHNhRkphTWs1WlZtMTRhbUpYZUhOWk0yeENUMVZzU1ZWdE9XaFhSVEV4VjBST1QySkhTa2hXYlhCclVucHNOVlJITlU5a01rcElZa1JDVEZFeVRucFRibXh6V1RKS2NGRlhaRXBSTUVadVUxVm9SMDFXY0ZsVGJrSmhWMFV4YmxOVlRrSmFNR3hGVFVka2FsZEdXbk5aTWpGellrZE9OVTVZVWxwWFJVWjJVekJvVDJKSFNraFdiWEJyVW5wc05WTXhUa0pQVmtKd1VXcGtXVko2VW01VFZVNUNXakJzUkZGWFpFcFRSWEJ6V2tWb1YyVlhTbkJSYldSTFUwaFNObGRzWkRSaVJtdDZWVzVhYW1KcVJtbFhhMlJIVFVac1ZFMVVRbHBYUlhCMVYyeG9VazlXYUVSVFYzUnNUVEZLYjFreU1XdGlSMUpKVFZkT1NtSkVRbnBYVlU1Q1kyeG9TRTVIWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa05hTUhCSlpFaHdZVll6YUhOWFZFNVRaRzFPZFUxWFNtaFRSWEJ6VjIxdmVGa3diSEJWYW1SclVqQmFOVmRxU2xkTlIxcFhaREpzV1ZZd1NtcFpiV3hDV2pCc1JGRlhaRXBUUkVKM1YwVmpNVmt5U25CUlYyUktVVEJHYmxOVlpFOWtiVXAxVkdwQ1NsRXhTbnBaVm1NeFkydHNSVTFIWkV0Uk1tZzBXa1prVjJWWFJsaFdibkJOWWxoQ01sbFdZekJpTUhBMVpESTFURlV5ZUdwWmJYZzBaRlZzUkZGWFpFcFJNRVp1V1Zaa1dsb3dkRVJWYms1b1ZucFdlVlJITVc5aFIwMTNWRzVPV2xkRk5UWlRNRlpQWXpGc1dWUnVjRlZpVlZvd1YyeE5NVkpXVm5KUFZrWlRVbFJzV1ZaSGR6VlRiRnBHVm1zMVRGVXlkRzVhVkVZMFpGVnNSRkZYWkVwUk1FWnVVMVZPUW1FeVNraGlTRlpvWlZSV2NWbHJZelZsYkhCWlZHcENURkpyTlhOWmEyUlhZVzFTU0U5WWJFMWhNVXBVVmtSR1ExSldVWGhhUlRsTVZYcFdkRmxXWXpGaE1IUkhWRzE0YVZJeFduRmFSV00xWlZWNGNsVnNUbFZOVlVwR1ZrUkdhMVF4WjNoVmJFSlRUVWRTVGxWc1RuSmtWbXhZVlcxMFVrMXVhRzlaZWs1T1lqRkZlV1ZIYUdwTk1EVlFWMVpqZUdKRmVISlNhMUpYVWxkNFdGVnNUbk5aTWtwd1VWZGtTbEV3Um01VFZVNUNXakJ3U0dWSVFtbGlXRTR4VjFaa1UyRXhSWGxsUjJocVRUQXhkbFZVU2pSaFIwMTZWR3M1V2xaNlJuTlVSM1JIVWtaYVJtSkdaRk5WTW5ocVdXMXNRbG93YkVSUlYyUktVMFJDYmxkc1pEUmxiSEJVVVdwa1dWSjZVbTVUVlU1Q1dqQnNSRkZYWkVwUmVtZ3lVMVZvVTJSc2NFaFBSMlJNVWpGd2IxcEZUbkphTWxKSVlVaENhbVZWU25kWk0yeERZMjFHV0U1WGRGcFZNRW8yV2tab1RtUlZlSEJPVjA1cFlWVkdibE5WVGtKYU1HeEVVVmRrVFdWVWFHNVpNakZYWVcxU1dWTnVjR2hYUm5CeldXdG9jbG94YkZoVmJYUktVakJhY1ZwRlpITk5iSEJaVkZka2ExSjZhRzVhUldSWFpXMVNTRlp0ZEVwU2VsWnZXa2RyZUdNeVJsaE9XRXBxVFZob01WTlZUa0phTUd4RVVWZGtTbEV3Um5KWmEyUnpaRmRHTlU1WVpGcFhSWEJ6V1cwMVUyVnJkRWRVYlhocFVqRmFjVnBGWXpWbFZYaHlaVVZ3VEZWNlZuUlpWbU14WVRCMFNGRlRkRXBSTVVrelZsUktWMk14Y0ZoVWFrSnBUVEJzTVZaSGRFZFdNV2QzWlVWd1ZXRXpVbFZhYkdSQ1kwVjRkRkp0ZEdGU1ZUVjZWMVpvVDJWcmRFWlViazVhVjBVMU5sWkhNVWRrUm5CVVRsVktVazFXU2t0V2JYUldZMFpvU0U1SFpFcFJNRVp1VTFWT1EwOVdhRWhPVjA1cFlWVkdibE5WVGtKYU1HeEVWVmM1YTFJeWFIZFpNMnN4V20xTmVWUnViR2xOYm1oNlZXeGtOR0pIU2xoV2JsWnJVVEowTVZwRmFFdGpSbTk1V2tkNGFtRlhhRWRhUnpGWFpGZFNSRTVWU2xKTlZrcExWbTEwUjFaV1NsUmtNbVJzVFZob01WTlZUa0phTUd4RVVWZGtTbEV3U2pWWGJHUTBZVWRTU0ZadGRGZFNNRm8xVjJwS1YwMUZPWEJSYWtKYVYwVndkVmRzYUZOWk1rcHdVVmRrU2xFd1JtNVRWV2QzWTBab1NFNUhaRXBSTUVadVdteGFOR1JXYUVoT1IyUktVVEJHYmxkRVNrOWpNWEJZVW01c1RGRXlkRzVhVkVZMFpGVnNSRkZYWkVwUk1FWnVVMnRPYjAxSFJraGlTSEJOWWtSc05sZHNaRFJpUm10NlZXNWFhbUZYZERGWGJURnpZekpTU0ZadWJFeFNhelZ6V1d0a1YyRnRVa2hQV0d4TllUQmFSVlpyVm5OV01VcFVZVE5XYW1KV1dqQlphazVoWWtaRmVXVkhhR3BOTURGMlZWUktOR0ZIVFhwVWF6bGFWbnBHYzFSSGRFZFNSbHBHWWtaa1UxVXllR3BaYld4Q1dqQnNSRkZxYkZsU2VsWnFXVzE0TkdSVmJFUlJWMlJLVVhwb01sTlZhRTlOUm14WlZXNUNXazFZYURGWFJXTXdXakJzUkZGWFpHcE5NVXB2V2tWa2MyRnJiRWRQV0VaV1YwWmFjMWt5TlhOVGJVcDFWVzE0YW1KV2NHOVhWRXBXWWpGcmVVOVlWbUZpVjNoMVV6Rk9RMDR4YUVoT1IyUktVVEJHYmxOVlRrTmxWbkJaVldwR2FtSlVVbTVhUldSdlkwZE9OVTVYZUZwV01EVjJVekJrWVUxWFNuUlVha0pvVm5wc01WTlZUbTVqUld4SlpFZE9hV0ZWUm01VFZVNUNXakJzUkZGWFpHbFNNVmwzVTFWa1UyRkhVa2hTVjJSS1VUQkdibE5WVGtKUFZXeEVWVmM1YTFJeWFIZFpNMnh5WkZad1NGSnFRbHBWTW1oR1ZWWmFVMUZzWjNka1JWcFlWVEo0YWxsdGJFSmFNR3hFVVZka1NsRXdSbTVYVkVrMVpGZE5lbFZYWkZsTmF6VXlXVzB4WVdOR2NEVlJWR3hLVTBaSk1Wa3daRmRrYkhCd1VXMXdhVTFxVm5SWlZtUnFXakZDVlUxRWJFcFJNbEl5VjFjeGQySkdhM3BWVnpWS1VURnNkRk5WWkU5a2JVcDBWMjVDWVUxWWFERlhSV013V2pCc1JGRlhaRXBSTUVadVUxVmtjMkpWYkVSYU1taGhVakJaZDFkV1RuSmFNbFY0WlVoV1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwU01VcHZXa1ZrUmxveFFsUlJibFpoVjBkT2JsWlVTazlsVjBsNVpVaE9WazB3U1RGVE1HaFRZakpHV1ZSWVRrcFNhbXh4V1dwSk1XSlhSbGhaTTBKWlVucFNibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRhMDV2VFVkR1NHSkljRXhWZWxaeVYxWm9VMkZGZEVaVmEwcFhVbFZhYlZWNlFsZFhhM2hFVVcxMFdsZEdTbTlUTVZvMFpGVnNSRkZYWkVwUk1FWnVVMVZPUTA5V2FFaE9WMDVwWVZWR2JsTlZUa0phTUd4RVVWZGthRll4Ykc1VE1HaFRUbGRPU0ZadVdtRmhWVXB4V1dwSk1XSlhSbGhaTW1SUlZrUkJOVk5WVG10bGJWSkpVMjVDYVdKWFRuVlRNVTVEVGpGb1NFNUhaRXBSTUVadVUxVk9RbG93YkVSUlYyUm9WakZzYmxNd1pGTmhSMUpJVW0xS1drMXFiREZYYlRGellteG9WRkZVYkZGV1JFSnVXa1pqTVdFeGNGaFhia0pwWWxaYWNsTXhUa05PTVdoSVRrZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRWwzV1ZWb1MyUnRValZSYmxaaFYwZE9ibFZzYUV0bFYwbDZVMWM1V2xKVVZqSlRWV040WWtkU1NHRklXbUZSTUVveFYxWmplR0pHY0VSUmJVNUtZVlpKTTFkVVNUVmtWbkIwWWtjMWJWWnVaSEJYVlU1eldUSktjRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJhbXhaVW5wU2JsTlZUa0phTUd4RVVWZGtTbEV3Um01WGEyUkhUVVpzVjJSSGNHbE5hbFowV1Zaa2ExcEZkRVJpUjA1cFlWVkdibE5WVGtKYU1HeEVVVmRrYlZadWFERlRWVTVDV2pCc1JGRlhaRzFWTW5ocVdXMXNRbG93YkVSUmFteFpVbnBXYWxsdGVEUmtWV3hFVVdwc1dWSjZWbXBaYlhnMFpGVnNSRkZZV2t4aFdFSnFXVzFzUWxvd2JFUmlNbVJOVlhwQ01GUkdUWGRrUlhoVVRVaFNUVlY2UWpCVVJrMTNaRVY0VkUxSVVrMVZla0l3VkVaTmQyUkZlRlJOU0ZKTlZYcENNRlJHVFhka1JYaFVUVWhTVFZWNlFqQlVSazEzWkVWNFZFMUlVazFWZWtJd1ZFWk5kMlJGZUZSTlNGSk5WWHBDTUZSR1RYZGtSWGhVVFVoU1RWVjZRakJVUmsxM1pFVjRWRTFJVWxsU2VsSnVVMVZPUW1OVmJFWlZiV2hyVWpCV2JsVldhRU5qUld4SVlraFNhbEl6YUhOWmJHUlhaRmRTU0ZKcVFtaFdlbXd4VjBWak1Gb3diRVJSV0VaS1VYcENNRlJHVFhka1JYaFVUVWhTVFZWNlFqQlVSazEzWkVWNFZFMUlVazFWZWtJd1ZFWk5kMlJGZUZSTlNGSk5WWHBDTUZSR1RYZGtSWGhVVFVoU1RWVjZRakJVUmsxM1pFVjRWRTFJVWsxVmVrSXdWRVpOZDJSRmVGUk5TRkpOVlhwQ01GUkdUWGRrUlhoVVRVaFNUVlY2UWpCVVJrMTNaRVY0VkUxSVVrMVdibWd4VTFWT1Fsb3dkSEJQVjA1cFlraG9NVk5WVGtKaE1IUkpXa2hDYVdKV1NqSmFTR3h5WkZkSmVVNUhPVk5YUm5CeldXMDFVbVJXVWtaUFZVcFRVbXBzUmxWV1dsTlJiR2QzVW14R1ZGVXpaRzVUTUU1eVdqRkNWVTVIWkd4TldHZ3hVMVZPUWxvd2JFaFVibHBwWW1zMGQxTlZhRTloYlU1MFQxaE9hVkpyTlROYVZtaE9XakZDVkZGWGRFMWlWRVp2V1ZSS1YxRnRUblZUYldoc1ZUSmtjbE13V2s5aVIwcElWbTF3YTFKNmJEVlVSM1JUVVd4YVJsSnRXbFpOVlVwaFV6Rk9jMWt5U25ObFNGWktVVEJHYmxOVlpHRmtiVTV3VVZjNWFWSXhXWGRUVldSeVdqRkNWRkZ1Y0ZwTk1IQXlXV3RrTkZaSFRrbGlTSEJOWWxob2MxbHRNV3ROUjBaRll6SmthRlY2UWpCVU0yeHlXakpWZUdWSVZrcFJNRVp1VTFWT1Fsb3hhM2xQV0ZacVRURkdibE5yYUU5a01sWlVVVlJzU2xFeFJuWlpla3BQWlZkSmVXVklUbFpOTUVreFdYcEdNR05HYUZSaVIwNXBZVlZHYmxOVlRrSmFNR3hIVkcxd2FtSlViSHBaYTFwUFpESldWRTVYV21oaVJWbDRWMnhvUzA1V1RsaE9WRUpoVjBWd2RGZFdaRTlpUlhoMFZHMW9hVkl6WkhaVGEyaFBaREpXVkdReVpFdFRSVFV6V2xaTk1XRXhiRmxWYldoTVVUSjBkMWRGWXpCYU1HeEVVVmRrYlZadWFERlRWVTVEVDFWMFYyVklWbGxTZWxacVdXMXNRbG93ZURWaU0wWlpVbnBTYmxOVlRrSmpWV3hFVFVoU1RWVjZRakJVUmsxM1pFVjRWRTFJVWsxVmVrSXdWRVpOZDJSRmVGUk5TRkpOVlhwQ01GUkdUWGRrUlhoVVRVaFNUVlY2UWpCVVJrMTNaRVY0VkUxSVVrMVZla0l3VkVaTmQyUkZlRlJOU0ZKTlZYcENNRlJHVFhka1JYaFVUVWhTVFZWNlFqQlVSazEzWkVWNFZFMUlVazFWZWtJd1ZFWk5kMlJGZUZkbFNGWktVVEJHYmxNeWJFTmpWbFpaVm0xNGFtSnRlR3BaYld4Q1dqQnNSR0l5WkUxVmVrSXdWRVpOZDJSRmVGUk5TRkpOVlhwQ01GUkdUWGRrUlhoVVRVaFNUVlY2UWpCVVJrMTNaRVY0VkUxSVVrMVZla0l3VkVaTmQyUkZlRlJOU0ZKTlZYcENNRlJHVFhka1JYaFVUVWhTVFZWNlFqQlVSazEzWkVWNFZFMUlVazFWZWtJd1ZFWk5kMlJGZUZSTlNGSk5WWHBDTUZSR1RYZGtSWGhVVFVoU1dWSjZVbTVUVlU1Q1kxVjNlR1ZJVmxsU2VsSnVVMVZPVW1SV2NIUk9WMHBWWVRCYVQxVnNXWGRhTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpGRlZNRXBWVjFST1MyUnRTa2hsUmxKcVUwZDBNVmRFU25kVmJWSllWbTVzYkZaWGVERmFSV1JYWlZad2RGSnRjR0ZXYm1neFUxVk9RbUV3ZUhSWGJsWllUVVJXUTFaR1ZsZGFSWGh5Vkc1YWFXSnJOSGRaTWpWWFlXMVNTRTlZYkVwU1JFSnVWbFJLVDJWWFNYbGxTRTVXVFRCSk1WZEZZekJhTUd4RVZWaFdZV0pVVm1sV1IzUkhWR3hLVjAxSVZtbGlWR3hGV1dwSk1XSlhTa2hpUjNCclVUQkdibFZHVGtOaVYxSllUbGR3YTFJeWVESlpiV3hDWWpCMFZGRnFaRmxTZWxKdVUxVk9RbG93Y0VST1Z6RnBZa2hTVUZWV1ZYaFNiR2hVVVZSc1NsSllRbE5XYkZaWFZURmtWMDlWT1ZWTlZHeEZWa1JCTVZJeFVrWmlSVkpYVW01b01WTlZUa0phTUd4SlUyMTRhMU5HV2pWWmJXeERWa1pyZWxOdVdtbFNNMmhWV1RCb2NtUldaM2xqUmtwclZqRmFOVnBXVm5Oa1YxSklWbTVzWVdKVlduRlhiRm8wWkZWc1JGRnFiRmxTZWxacVdXMXNRbG95VG5SV2FrSnJWMFZ3TVZOVldrOWhiVTUwVDFoT2FWSnJOVE5hVmxvMFpGWm9TRTVVYkV4Vk1taDRWbFpvVjJKSFRuVmhNMEpaVW5wV2FsbHRNVmRPUjA1SVQxaHNhMUV3U25KWGJHUmhZVWRTV0dWRVFrcFNhelZ4V1RJd05XTXlTa2RVYm1Sc1ZtNW9NVk5YZDNoUFZuaDFTV3d4T1Z4dUlsMTlcbiJdfQ==
