module.exports = {
    use: [
        'postcss-flexbugs-fixes',
        'autoprefixer'
    ],
    map: {
        inline: false,
        annotation: true,
        sourcesContent: true
    },
    autoprefixer: {
        browsers: [
            //
            // Official browser support policy:
            // https://v4-alpha.getbootstrap.com/getting-started/browsers-devices/#supported-browsers
            //
            'Chrome >= 35',
            // Rather than using Autoprefixer's native "Firefox ESR" version specifier string,
            // we deliberately hardcode the number. This is to avoid unwittingly severely breaking the previous ESR in the event that:
            // (a) we happen to ship a new Bootstrap release soon after the release of a new ESR,
            //     such that folks haven't yet had a reasonable amount of time to upgrade; and
            // (b) the new ESR has unprefixed CSS properties/values whose absence would severely break webpages
            //     (e.g. `box-sizing`, as opposed to `background: linear-gradient(...)`).
            //     Since they've been unprefixed, Autoprefixer will stop prefixing them,
            //     thus causing them to not work in the previous ESR (where the prefixes were required).
            'Firefox >= 38',
            // Note: Edge versions in Autoprefixer & Can I Use refer to the EdgeHTML rendering engine version,
            // NOT the Edge app version shown in Edge's "About" screen.
            // For example, at the time of writing, Edge 20 on an up-to-date system uses EdgeHTML 12.
            // See also https://github.com/Fyrd/caniuse/issues/1928
            'Edge >= 12',
            'Explorer >= 10',
            // Out of leniency, we prefix these 1 version further back than the official policy.
            'iOS >= 8',
            'Safari >= 8',
            // The following remain NOT officially supported, but we're lenient and include their prefixes to avoid severely breaking in them.
            'Android 2.3',
            'Android >= 4',
            'Opera >= 12'
        ]
    }
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9ib290c3RyYXAvZ3J1bnQvcG9zdGNzcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsT0FBTyxHQUFHO0lBQ2YsR0FBRyxFQUFFO1FBQ0gsd0JBQXdCO1FBQ3hCLGNBQWM7S0FDZjtJQUNELEdBQUcsRUFBRTtRQUNILE1BQU0sRUFBRSxLQUFLO1FBQ2IsVUFBVSxFQUFFLElBQUk7UUFDaEIsY0FBYyxFQUFFLElBQUk7S0FDckI7SUFDRCxZQUFZLEVBQUU7UUFDWixRQUFRLEVBQUU7WUFDUixFQUFFO1lBQ0YsbUNBQW1DO1lBQ25DLHlGQUF5RjtZQUN6RixFQUFFO1lBQ0YsY0FBYztZQUNkLGtGQUFrRjtZQUNsRiwwSEFBMEg7WUFDMUgscUZBQXFGO1lBQ3JGLGtGQUFrRjtZQUNsRixtR0FBbUc7WUFDbkcsNkVBQTZFO1lBQzdFLDRFQUE0RTtZQUM1RSw0RkFBNEY7WUFDNUYsZUFBZTtZQUNmLGtHQUFrRztZQUNsRywyREFBMkQ7WUFDM0QseUZBQXlGO1lBQ3pGLHVEQUF1RDtZQUN2RCxZQUFZO1lBQ1osZ0JBQWdCO1lBQ2hCLG9GQUFvRjtZQUNwRixVQUFVO1lBQ1YsYUFBYTtZQUNiLGtJQUFrSTtZQUNsSSxhQUFhO1lBQ2IsY0FBYztZQUNkLGFBQWE7U0FDZDtLQUNGO0NBQ0YsQ0FBQSIsImZpbGUiOiJhc3NldHMvcGFja3MvYm9vdHN0cmFwL2dydW50L3Bvc3Rjc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgdXNlOiBbXG4gICAgJ3Bvc3Rjc3MtZmxleGJ1Z3MtZml4ZXMnLFxuICAgICdhdXRvcHJlZml4ZXInXG4gIF0sXG4gIG1hcDoge1xuICAgIGlubGluZTogZmFsc2UsXG4gICAgYW5ub3RhdGlvbjogdHJ1ZSxcbiAgICBzb3VyY2VzQ29udGVudDogdHJ1ZVxuICB9LFxuICBhdXRvcHJlZml4ZXI6IHtcbiAgICBicm93c2VyczogW1xuICAgICAgLy9cbiAgICAgIC8vIE9mZmljaWFsIGJyb3dzZXIgc3VwcG9ydCBwb2xpY3k6XG4gICAgICAvLyBodHRwczovL3Y0LWFscGhhLmdldGJvb3RzdHJhcC5jb20vZ2V0dGluZy1zdGFydGVkL2Jyb3dzZXJzLWRldmljZXMvI3N1cHBvcnRlZC1icm93c2Vyc1xuICAgICAgLy9cbiAgICAgICdDaHJvbWUgPj0gMzUnLCAvLyBFeGFjdCB2ZXJzaW9uIG51bWJlciBoZXJlIGlzIGtpbmRhIGFyYml0cmFyeVxuICAgICAgLy8gUmF0aGVyIHRoYW4gdXNpbmcgQXV0b3ByZWZpeGVyJ3MgbmF0aXZlIFwiRmlyZWZveCBFU1JcIiB2ZXJzaW9uIHNwZWNpZmllciBzdHJpbmcsXG4gICAgICAvLyB3ZSBkZWxpYmVyYXRlbHkgaGFyZGNvZGUgdGhlIG51bWJlci4gVGhpcyBpcyB0byBhdm9pZCB1bndpdHRpbmdseSBzZXZlcmVseSBicmVha2luZyB0aGUgcHJldmlvdXMgRVNSIGluIHRoZSBldmVudCB0aGF0OlxuICAgICAgLy8gKGEpIHdlIGhhcHBlbiB0byBzaGlwIGEgbmV3IEJvb3RzdHJhcCByZWxlYXNlIHNvb24gYWZ0ZXIgdGhlIHJlbGVhc2Ugb2YgYSBuZXcgRVNSLFxuICAgICAgLy8gICAgIHN1Y2ggdGhhdCBmb2xrcyBoYXZlbid0IHlldCBoYWQgYSByZWFzb25hYmxlIGFtb3VudCBvZiB0aW1lIHRvIHVwZ3JhZGU7IGFuZFxuICAgICAgLy8gKGIpIHRoZSBuZXcgRVNSIGhhcyB1bnByZWZpeGVkIENTUyBwcm9wZXJ0aWVzL3ZhbHVlcyB3aG9zZSBhYnNlbmNlIHdvdWxkIHNldmVyZWx5IGJyZWFrIHdlYnBhZ2VzXG4gICAgICAvLyAgICAgKGUuZy4gYGJveC1zaXppbmdgLCBhcyBvcHBvc2VkIHRvIGBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoLi4uKWApLlxuICAgICAgLy8gICAgIFNpbmNlIHRoZXkndmUgYmVlbiB1bnByZWZpeGVkLCBBdXRvcHJlZml4ZXIgd2lsbCBzdG9wIHByZWZpeGluZyB0aGVtLFxuICAgICAgLy8gICAgIHRodXMgY2F1c2luZyB0aGVtIHRvIG5vdCB3b3JrIGluIHRoZSBwcmV2aW91cyBFU1IgKHdoZXJlIHRoZSBwcmVmaXhlcyB3ZXJlIHJlcXVpcmVkKS5cbiAgICAgICdGaXJlZm94ID49IDM4JywgLy8gQ3VycmVudCBGaXJlZm94IEV4dGVuZGVkIFN1cHBvcnQgUmVsZWFzZSAoRVNSKTsgaHR0cHM6Ly93d3cubW96aWxsYS5vcmcvZW4tVVMvZmlyZWZveC9vcmdhbml6YXRpb25zL2ZhcS9cbiAgICAgIC8vIE5vdGU6IEVkZ2UgdmVyc2lvbnMgaW4gQXV0b3ByZWZpeGVyICYgQ2FuIEkgVXNlIHJlZmVyIHRvIHRoZSBFZGdlSFRNTCByZW5kZXJpbmcgZW5naW5lIHZlcnNpb24sXG4gICAgICAvLyBOT1QgdGhlIEVkZ2UgYXBwIHZlcnNpb24gc2hvd24gaW4gRWRnZSdzIFwiQWJvdXRcIiBzY3JlZW4uXG4gICAgICAvLyBGb3IgZXhhbXBsZSwgYXQgdGhlIHRpbWUgb2Ygd3JpdGluZywgRWRnZSAyMCBvbiBhbiB1cC10by1kYXRlIHN5c3RlbSB1c2VzIEVkZ2VIVE1MIDEyLlxuICAgICAgLy8gU2VlIGFsc28gaHR0cHM6Ly9naXRodWIuY29tL0Z5cmQvY2FuaXVzZS9pc3N1ZXMvMTkyOFxuICAgICAgJ0VkZ2UgPj0gMTInLFxuICAgICAgJ0V4cGxvcmVyID49IDEwJyxcbiAgICAgIC8vIE91dCBvZiBsZW5pZW5jeSwgd2UgcHJlZml4IHRoZXNlIDEgdmVyc2lvbiBmdXJ0aGVyIGJhY2sgdGhhbiB0aGUgb2ZmaWNpYWwgcG9saWN5LlxuICAgICAgJ2lPUyA+PSA4JyxcbiAgICAgICdTYWZhcmkgPj0gOCcsXG4gICAgICAvLyBUaGUgZm9sbG93aW5nIHJlbWFpbiBOT1Qgb2ZmaWNpYWxseSBzdXBwb3J0ZWQsIGJ1dCB3ZSdyZSBsZW5pZW50IGFuZCBpbmNsdWRlIHRoZWlyIHByZWZpeGVzIHRvIGF2b2lkIHNldmVyZWx5IGJyZWFraW5nIGluIHRoZW0uXG4gICAgICAnQW5kcm9pZCAyLjMnLFxuICAgICAgJ0FuZHJvaWQgPj0gNCcsXG4gICAgICAnT3BlcmEgPj0gMTInXG4gICAgXVxuICB9XG59XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf8;base64,
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,
