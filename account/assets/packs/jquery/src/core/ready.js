define([
    "../core",
    "../var/document",
    "../core/readyException",
    "../deferred"
], function (jQuery, document) {
    "use strict";
    // The deferred used on DOM ready
    var readyList = jQuery.Deferred();
    jQuery.fn.ready = function (fn) {
        readyList
            .then(fn)
            .catch(function (error) {
            jQuery.readyException(error);
        });
        return this;
    };
    jQuery.extend({
        // Is the DOM ready to be used? Set to true once it occurs.
        isReady: false,
        // A counter to track how many items to wait for before
        // the ready event fires. See #6781
        readyWait: 1,
        // Handle when the DOM is ready
        ready: function (wait) {
            // Abort if there are pending holds or we're already ready
            if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                return;
            }
            // Remember that the DOM is ready
            jQuery.isReady = true;
            // If a normal DOM Ready event fired, decrement, and wait if need be
            if (wait !== true && --jQuery.readyWait > 0) {
                return;
            }
            // If there are functions bound, to execute
            readyList.resolveWith(document, [jQuery]);
        }
    });
    jQuery.ready.then = readyList.then;
    // The ready event handler and self cleanup method
    function completed() {
        document.removeEventListener("DOMContentLoaded", completed);
        window.removeEventListener("load", completed);
        jQuery.ready();
    }
    // Catch cases where $(document).ready() is called
    // after the browser event has already occurred.
    // Support: IE <=9 - 10 only
    // Older IE sometimes signals "interactive" too soon
    if (document.readyState === "complete" ||
        (document.readyState !== "loading" && !document.documentElement.doScroll)) {
        // Handle it asynchronously to allow scripts the opportunity to delay ready
        window.setTimeout(jQuery.ready);
    }
    else {
        // Use the handy event callback
        document.addEventListener("DOMContentLoaded", completed);
        // A fallback to window.onload, that will always work
        window.addEventListener("load", completed);
    }
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL2NvcmUvcmVhZHkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFFO0lBQ1AsU0FBUztJQUNULGlCQUFpQjtJQUNqQix3QkFBd0I7SUFDeEIsYUFBYTtDQUNiLEVBQUUsVUFBVSxNQUFNLEVBQUUsUUFBUTtJQUU3QixZQUFZLENBQUM7SUFFYixpQ0FBaUM7SUFDakMsSUFBSSxTQUFTLEdBQUcsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBRWxDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxHQUFHLFVBQVUsRUFBRTtRQUU3QixTQUFTO2FBQ1AsSUFBSSxDQUFFLEVBQUUsQ0FBRTthQUtWLEtBQUssQ0FBRSxVQUFVLEtBQUs7WUFDdEIsTUFBTSxDQUFDLGNBQWMsQ0FBRSxLQUFLLENBQUUsQ0FBQztRQUNoQyxDQUFDLENBQUUsQ0FBQztRQUVMLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDYixDQUFDLENBQUM7SUFFRixNQUFNLENBQUMsTUFBTSxDQUFFO1FBRWQsMkRBQTJEO1FBQzNELE9BQU8sRUFBRSxLQUFLO1FBRWQsdURBQXVEO1FBQ3ZELG1DQUFtQztRQUNuQyxTQUFTLEVBQUUsQ0FBQztRQUVaLCtCQUErQjtRQUMvQixLQUFLLEVBQUUsVUFBVSxJQUFJO1lBRXBCLDBEQUEwRDtZQUMxRCxFQUFFLENBQUMsQ0FBRSxJQUFJLEtBQUssSUFBSSxHQUFHLEVBQUUsTUFBTSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsT0FBUSxDQUFDLENBQUMsQ0FBQztnQkFDM0QsTUFBTSxDQUFDO1lBQ1IsQ0FBQztZQUVELGlDQUFpQztZQUNqQyxNQUFNLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztZQUV0QixvRUFBb0U7WUFDcEUsRUFBRSxDQUFDLENBQUUsSUFBSSxLQUFLLElBQUksSUFBSSxFQUFFLE1BQU0sQ0FBQyxTQUFTLEdBQUcsQ0FBRSxDQUFDLENBQUMsQ0FBQztnQkFDL0MsTUFBTSxDQUFDO1lBQ1IsQ0FBQztZQUVELDJDQUEyQztZQUMzQyxTQUFTLENBQUMsV0FBVyxDQUFFLFFBQVEsRUFBRSxDQUFFLE1BQU0sQ0FBRSxDQUFFLENBQUM7UUFDL0MsQ0FBQztLQUNELENBQUUsQ0FBQztJQUVKLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUM7SUFFbkMsa0RBQWtEO0lBQ2xEO1FBQ0MsUUFBUSxDQUFDLG1CQUFtQixDQUFFLGtCQUFrQixFQUFFLFNBQVMsQ0FBRSxDQUFDO1FBQzlELE1BQU0sQ0FBQyxtQkFBbUIsQ0FBRSxNQUFNLEVBQUUsU0FBUyxDQUFFLENBQUM7UUFDaEQsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxrREFBa0Q7SUFDbEQsZ0RBQWdEO0lBQ2hELDRCQUE0QjtJQUM1QixvREFBb0Q7SUFDcEQsRUFBRSxDQUFDLENBQUUsUUFBUSxDQUFDLFVBQVUsS0FBSyxVQUFVO1FBQ3RDLENBQUUsUUFBUSxDQUFDLFVBQVUsS0FBSyxTQUFTLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBRyxDQUFDLENBQUMsQ0FBQztRQUUvRSwyRUFBMkU7UUFDM0UsTUFBTSxDQUFDLFVBQVUsQ0FBRSxNQUFNLENBQUMsS0FBSyxDQUFFLENBQUM7SUFFbkMsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBRVAsK0JBQStCO1FBQy9CLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBRSxrQkFBa0IsRUFBRSxTQUFTLENBQUUsQ0FBQztRQUUzRCxxREFBcUQ7UUFDckQsTUFBTSxDQUFDLGdCQUFnQixDQUFFLE1BQU0sRUFBRSxTQUFTLENBQUUsQ0FBQztJQUM5QyxDQUFDO0FBRUQsQ0FBQyxDQUFFLENBQUMiLCJmaWxlIjoiYXNzZXRzL3BhY2tzL2pxdWVyeS9zcmMvY29yZS9yZWFkeS5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSggW1xuXHRcIi4uL2NvcmVcIixcblx0XCIuLi92YXIvZG9jdW1lbnRcIixcblx0XCIuLi9jb3JlL3JlYWR5RXhjZXB0aW9uXCIsXG5cdFwiLi4vZGVmZXJyZWRcIlxuXSwgZnVuY3Rpb24oIGpRdWVyeSwgZG9jdW1lbnQgKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXG5cdHJlYWR5TGlzdFxuXHRcdC50aGVuKCBmbiApXG5cblx0XHQvLyBXcmFwIGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiBpbiBhIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIGxvb2t1cFxuXHRcdC8vIGhhcHBlbnMgYXQgdGhlIHRpbWUgb2YgZXJyb3IgaGFuZGxpbmcgaW5zdGVhZCBvZiBjYWxsYmFja1xuXHRcdC8vIHJlZ2lzdHJhdGlvbi5cblx0XHQuY2F0Y2goIGZ1bmN0aW9uKCBlcnJvciApIHtcblx0XHRcdGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiggZXJyb3IgKTtcblx0XHR9ICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5yZWFkeS50aGVuID0gcmVhZHlMaXN0LnRoZW47XG5cbi8vIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbi8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXG4vLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDEwIG9ubHlcbi8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxuaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0KCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XG5cblx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxufSBlbHNlIHtcblxuXHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblxuXHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xufVxuXG59ICk7XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf8;base64,
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL2NvcmUvcmVhZHkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDO0lBQ0gsU0FBUztJQUNULGlCQUFpQjtJQUNqQix3QkFBd0I7SUFDeEIsYUFBYTtDQUNoQixFQUFFLFVBQVUsTUFBTSxFQUFFLFFBQVE7SUFDekIsWUFBWSxDQUFDO0lBQ2IsaUNBQWlDO0lBQ2pDLElBQUksU0FBUyxHQUFHLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNsQyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssR0FBRyxVQUFVLEVBQUU7UUFDMUIsU0FBUzthQUNKLElBQUksQ0FBQyxFQUFFLENBQUM7YUFDUixLQUFLLENBQUMsVUFBVSxLQUFLO1lBQ3RCLE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDakMsQ0FBQyxDQUFDLENBQUM7UUFDSCxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2hCLENBQUMsQ0FBQztJQUNGLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDViwyREFBMkQ7UUFDM0QsT0FBTyxFQUFFLEtBQUs7UUFDZCx1REFBdUQ7UUFDdkQsbUNBQW1DO1FBQ25DLFNBQVMsRUFBRSxDQUFDO1FBQ1osK0JBQStCO1FBQy9CLEtBQUssRUFBRSxVQUFVLElBQUk7WUFDakIsMERBQTBEO1lBQzFELEVBQUUsQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJLEdBQUcsRUFBRSxNQUFNLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUN0RCxNQUFNLENBQUM7WUFDWCxDQUFDO1lBQ0QsaUNBQWlDO1lBQ2pDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1lBQ3RCLG9FQUFvRTtZQUNwRSxFQUFFLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxJQUFJLEVBQUUsTUFBTSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMxQyxNQUFNLENBQUM7WUFDWCxDQUFDO1lBQ0QsMkNBQTJDO1lBQzNDLFNBQVMsQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUM5QyxDQUFDO0tBQ0osQ0FBQyxDQUFDO0lBQ0gsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQztJQUNuQyxrREFBa0Q7SUFDbEQ7UUFDSSxRQUFRLENBQUMsbUJBQW1CLENBQUMsa0JBQWtCLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDNUQsTUFBTSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUM5QyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDbkIsQ0FBQztJQUNELGtEQUFrRDtJQUNsRCxnREFBZ0Q7SUFDaEQsNEJBQTRCO0lBQzVCLG9EQUFvRDtJQUNwRCxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsVUFBVSxLQUFLLFVBQVU7UUFDbEMsQ0FBQyxRQUFRLENBQUMsVUFBVSxLQUFLLFNBQVMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVFLDJFQUEyRTtRQUMzRSxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBQ0QsSUFBSSxDQUFDLENBQUM7UUFDRiwrQkFBK0I7UUFDL0IsUUFBUSxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3pELHFEQUFxRDtRQUNyRCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQy9DLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUNILHV6S0FBdXpLO0FBQ3Z6SywyaFpBQTJoWjtBQUUzaFosK3Y2QkFBK3Y2QiIsImZpbGUiOiJhc3NldHMvcGFja3MvanF1ZXJ5L3NyYy9jb3JlL3JlYWR5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKFtcbiAgICBcIi4uL2NvcmVcIixcbiAgICBcIi4uL3Zhci9kb2N1bWVudFwiLFxuICAgIFwiLi4vY29yZS9yZWFkeUV4Y2VwdGlvblwiLFxuICAgIFwiLi4vZGVmZXJyZWRcIlxuXSwgZnVuY3Rpb24gKGpRdWVyeSwgZG9jdW1lbnQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAvLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbiAgICB2YXIgcmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG4gICAgalF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIHJlYWR5TGlzdFxuICAgICAgICAgICAgLnRoZW4oZm4pXG4gICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBqUXVlcnkucmVhZHlFeGNlcHRpb24oZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBqUXVlcnkuZXh0ZW5kKHtcbiAgICAgICAgLy8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cbiAgICAgICAgaXNSZWFkeTogZmFsc2UsXG4gICAgICAgIC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcbiAgICAgICAgLy8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcbiAgICAgICAgcmVhZHlXYWl0OiAxLFxuICAgICAgICAvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG4gICAgICAgIHJlYWR5OiBmdW5jdGlvbiAod2FpdCkge1xuICAgICAgICAgICAgLy8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuICAgICAgICAgICAgaWYgKHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuICAgICAgICAgICAgalF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuICAgICAgICAgICAgLy8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcbiAgICAgICAgICAgIGlmICh3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG4gICAgICAgICAgICByZWFkeUxpc3QucmVzb2x2ZVdpdGgoZG9jdW1lbnQsIFtqUXVlcnldKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGpRdWVyeS5yZWFkeS50aGVuID0gcmVhZHlMaXN0LnRoZW47XG4gICAgLy8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbiAgICBmdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCk7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibG9hZFwiLCBjb21wbGV0ZWQpO1xuICAgICAgICBqUXVlcnkucmVhZHkoKTtcbiAgICB9XG4gICAgLy8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWRcbiAgICAvLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cbiAgICAvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMCBvbmx5XG4gICAgLy8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG4gICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxuICAgICAgICAoZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCkpIHtcbiAgICAgICAgLy8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGpRdWVyeS5yZWFkeSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCk7XG4gICAgICAgIC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBjb21wbGV0ZWQpO1xuICAgIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbUZ6YzJWMGN5OXdZV05yY3k5cWNYVmxjbmt2YzNKakwyTnZjbVV2Y21WaFpIa3Vhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1RVRkJUU3hEUVVGRk8wbEJRMUFzVTBGQlV6dEpRVU5VTEdsQ1FVRnBRanRKUVVOcVFpeDNRa0ZCZDBJN1NVRkRlRUlzWVVGQllUdERRVU5pTEVWQlFVVXNWVUZCVlN4TlFVRk5MRVZCUVVVc1VVRkJVVHRKUVVVM1FpeFpRVUZaTEVOQlFVTTdTVUZGWWl4cFEwRkJhVU03U1VGRGFrTXNTVUZCU1N4VFFVRlRMRWRCUVVjc1RVRkJUU3hEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZETzBsQlJXeERMRTFCUVUwc1EwRkJReXhGUVVGRkxFTkJRVU1zUzBGQlN5eEhRVUZITEZWQlFWVXNSVUZCUlR0UlFVVTNRaXhUUVVGVE8yRkJRMUFzU1VGQlNTeERRVUZGTEVWQlFVVXNRMEZCUlR0aFFVdFdMRXRCUVVzc1EwRkJSU3hWUVVGVkxFdEJRVXM3V1VGRGRFSXNUVUZCVFN4RFFVRkRMR05CUVdNc1EwRkJSU3hMUVVGTExFTkJRVVVzUTBGQlF6dFJRVU5vUXl4RFFVRkRMRU5CUVVVc1EwRkJRenRSUVVWTUxFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTTdTVUZEWWl4RFFVRkRMRU5CUVVNN1NVRkZSaXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZGTzFGQlJXUXNNa1JCUVRKRU8xRkJRek5FTEU5QlFVOHNSVUZCUlN4TFFVRkxPMUZCUldRc2RVUkJRWFZFTzFGQlEzWkVMRzFEUVVGdFF6dFJRVU51UXl4VFFVRlRMRVZCUVVVc1EwRkJRenRSUVVWYUxDdENRVUVyUWp0UlFVTXZRaXhMUVVGTExFVkJRVVVzVlVGQlZTeEpRVUZKTzFsQlJYQkNMREJFUVVFd1JEdFpRVU14UkN4RlFVRkZMRU5CUVVNc1EwRkJSU3hKUVVGSkxFdEJRVXNzU1VGQlNTeEhRVUZITEVWQlFVVXNUVUZCVFN4RFFVRkRMRk5CUVZNc1IwRkJSeXhOUVVGTkxFTkJRVU1zVDBGQlVTeERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkRNMFFzVFVGQlRTeERRVUZETzFsQlExSXNRMEZCUXp0WlFVVkVMR2xEUVVGcFF6dFpRVU5xUXl4TlFVRk5MRU5CUVVNc1QwRkJUeXhIUVVGSExFbEJRVWtzUTBGQlF6dFpRVVYwUWl4dlJVRkJiMFU3V1VGRGNFVXNSVUZCUlN4RFFVRkRMRU5CUVVVc1NVRkJTU3hMUVVGTExFbEJRVWtzU1VGQlNTeEZRVUZGTEUxQlFVMHNRMEZCUXl4VFFVRlRMRWRCUVVjc1EwRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dG5Ra0ZETDBNc1RVRkJUU3hEUVVGRE8xbEJRMUlzUTBGQlF6dFpRVVZFTERKRFFVRXlRenRaUVVNelF5eFRRVUZUTEVOQlFVTXNWMEZCVnl4RFFVRkZMRkZCUVZFc1JVRkJSU3hEUVVGRkxFMUJRVTBzUTBGQlJTeERRVUZGTEVOQlFVTTdVVUZETDBNc1EwRkJRenRMUVVORUxFTkJRVVVzUTBGQlF6dEpRVVZLTEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hIUVVGSExGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTTdTVUZGYmtNc2EwUkJRV3RFTzBsQlEyeEVPMUZCUTBNc1VVRkJVU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkZMR3RDUVVGclFpeEZRVUZGTEZOQlFWTXNRMEZCUlN4RFFVRkRPMUZCUXpsRUxFMUJRVTBzUTBGQlF5eHRRa0ZCYlVJc1EwRkJSU3hOUVVGTkxFVkJRVVVzVTBGQlV5eERRVUZGTEVOQlFVTTdVVUZEYUVRc1RVRkJUU3hEUVVGRExFdEJRVXNzUlVGQlJTeERRVUZETzBsQlEyaENMRU5CUVVNN1NVRkZSQ3hyUkVGQmEwUTdTVUZEYkVRc1owUkJRV2RFTzBsQlEyaEVMRFJDUVVFMFFqdEpRVU0xUWl4dlJFRkJiMFE3U1VGRGNFUXNSVUZCUlN4RFFVRkRMRU5CUVVVc1VVRkJVU3hEUVVGRExGVkJRVlVzUzBGQlN5eFZRVUZWTzFGQlEzUkRMRU5CUVVVc1VVRkJVU3hEUVVGRExGVkJRVlVzUzBGQlN5eFRRVUZUTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1pVRkJaU3hEUVVGRExGRkJRVkVzUTBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXp0UlFVVXZSU3d5UlVGQk1rVTdVVUZETTBVc1RVRkJUU3hEUVVGRExGVkJRVlVzUTBGQlJTeE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkZMRU5CUVVNN1NVRkZia01zUTBGQlF6dEpRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMUZCUlZBc0swSkJRU3RDTzFGQlF5OUNMRkZCUVZFc1EwRkJReXhuUWtGQlowSXNRMEZCUlN4clFrRkJhMElzUlVGQlJTeFRRVUZUTEVOQlFVVXNRMEZCUXp0UlFVVXpSQ3h4UkVGQmNVUTdVVUZEY2tRc1RVRkJUU3hEUVVGRExHZENRVUZuUWl4RFFVRkZMRTFCUVUwc1JVRkJSU3hUUVVGVExFTkJRVVVzUTBGQlF6dEpRVU01UXl4RFFVRkRPMEZCUlVRc1EwRkJReXhEUVVGRkxFTkJRVU1pTENKbWFXeGxJam9pWVhOelpYUnpMM0JoWTJ0ekwycHhkV1Z5ZVM5emNtTXZZMjl5WlM5eVpXRmtlUzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltUmxabWx1WlNnZ1cxeHVYSFJjSWk0dUwyTnZjbVZjSWl4Y2JseDBYQ0l1TGk5MllYSXZaRzlqZFcxbGJuUmNJaXhjYmx4MFhDSXVMaTlqYjNKbEwzSmxZV1I1UlhoalpYQjBhVzl1WENJc1hHNWNkRndpTGk0dlpHVm1aWEp5WldSY0lseHVYU3dnWm5WdVkzUnBiMjRvSUdwUmRXVnllU3dnWkc5amRXMWxiblFnS1NCN1hHNWNibHdpZFhObElITjBjbWxqZEZ3aU8xeHVYRzR2THlCVWFHVWdaR1ZtWlhKeVpXUWdkWE5sWkNCdmJpQkVUMDBnY21WaFpIbGNiblpoY2lCeVpXRmtlVXhwYzNRZ1BTQnFVWFZsY25rdVJHVm1aWEp5WldRb0tUdGNibHh1YWxGMVpYSjVMbVp1TG5KbFlXUjVJRDBnWm5WdVkzUnBiMjRvSUdadUlDa2dlMXh1WEc1Y2RISmxZV1I1VEdsemRGeHVYSFJjZEM1MGFHVnVLQ0JtYmlBcFhHNWNibHgwWEhRdkx5QlhjbUZ3SUdwUmRXVnllUzV5WldGa2VVVjRZMlZ3ZEdsdmJpQnBiaUJoSUdaMWJtTjBhVzl1SUhOdklIUm9ZWFFnZEdobElHeHZiMnQxY0Z4dVhIUmNkQzh2SUdoaGNIQmxibk1nWVhRZ2RHaGxJSFJwYldVZ2IyWWdaWEp5YjNJZ2FHRnVaR3hwYm1jZ2FXNXpkR1ZoWkNCdlppQmpZV3hzWW1GamExeHVYSFJjZEM4dklISmxaMmx6ZEhKaGRHbHZiaTVjYmx4MFhIUXVZMkYwWTJnb0lHWjFibU4wYVc5dUtDQmxjbkp2Y2lBcElIdGNibHgwWEhSY2RHcFJkV1Z5ZVM1eVpXRmtlVVY0WTJWd2RHbHZiaWdnWlhKeWIzSWdLVHRjYmx4MFhIUjlJQ2s3WEc1Y2JseDBjbVYwZFhKdUlIUm9hWE03WEc1OU8xeHVYRzVxVVhWbGNua3VaWGgwWlc1a0tDQjdYRzVjYmx4MEx5OGdTWE1nZEdobElFUlBUU0J5WldGa2VTQjBieUJpWlNCMWMyVmtQeUJUWlhRZ2RHOGdkSEoxWlNCdmJtTmxJR2wwSUc5alkzVnljeTVjYmx4MGFYTlNaV0ZrZVRvZ1ptRnNjMlVzWEc1Y2JseDBMeThnUVNCamIzVnVkR1Z5SUhSdklIUnlZV05ySUdodmR5QnRZVzU1SUdsMFpXMXpJSFJ2SUhkaGFYUWdabTl5SUdKbFptOXlaVnh1WEhRdkx5QjBhR1VnY21WaFpIa2daWFpsYm5RZ1ptbHlaWE11SUZObFpTQWpOamM0TVZ4dVhIUnlaV0ZrZVZkaGFYUTZJREVzWEc1Y2JseDBMeThnU0dGdVpHeGxJSGRvWlc0Z2RHaGxJRVJQVFNCcGN5QnlaV0ZrZVZ4dVhIUnlaV0ZrZVRvZ1puVnVZM1JwYjI0b0lIZGhhWFFnS1NCN1hHNWNibHgwWEhRdkx5QkJZbTl5ZENCcFppQjBhR1Z5WlNCaGNtVWdjR1Z1WkdsdVp5Qm9iMnhrY3lCdmNpQjNaU2R5WlNCaGJISmxZV1I1SUhKbFlXUjVYRzVjZEZ4MGFXWWdLQ0IzWVdsMElEMDlQU0IwY25WbElEOGdMUzFxVVhWbGNua3VjbVZoWkhsWFlXbDBJRG9nYWxGMVpYSjVMbWx6VW1WaFpIa2dLU0I3WEc1Y2RGeDBYSFJ5WlhSMWNtNDdYRzVjZEZ4MGZWeHVYRzVjZEZ4MEx5OGdVbVZ0WlcxaVpYSWdkR2hoZENCMGFHVWdSRTlOSUdseklISmxZV1I1WEc1Y2RGeDBhbEYxWlhKNUxtbHpVbVZoWkhrZ1BTQjBjblZsTzF4dVhHNWNkRngwTHk4Z1NXWWdZU0J1YjNKdFlXd2dSRTlOSUZKbFlXUjVJR1YyWlc1MElHWnBjbVZrTENCa1pXTnlaVzFsYm5Rc0lHRnVaQ0IzWVdsMElHbG1JRzVsWldRZ1ltVmNibHgwWEhScFppQW9JSGRoYVhRZ0lUMDlJSFJ5ZFdVZ0ppWWdMUzFxVVhWbGNua3VjbVZoWkhsWFlXbDBJRDRnTUNBcElIdGNibHgwWEhSY2RISmxkSFZ5Ymp0Y2JseDBYSFI5WEc1Y2JseDBYSFF2THlCSlppQjBhR1Z5WlNCaGNtVWdablZ1WTNScGIyNXpJR0p2ZFc1a0xDQjBieUJsZUdWamRYUmxYRzVjZEZ4MGNtVmhaSGxNYVhOMExuSmxjMjlzZG1WWGFYUm9LQ0JrYjJOMWJXVnVkQ3dnV3lCcVVYVmxjbmtnWFNBcE8xeHVYSFI5WEc1OUlDazdYRzVjYm1wUmRXVnllUzV5WldGa2VTNTBhR1Z1SUQwZ2NtVmhaSGxNYVhOMExuUm9aVzQ3WEc1Y2JpOHZJRlJvWlNCeVpXRmtlU0JsZG1WdWRDQm9ZVzVrYkdWeUlHRnVaQ0J6Wld4bUlHTnNaV0Z1ZFhBZ2JXVjBhRzlrWEc1bWRXNWpkR2x2YmlCamIyMXdiR1YwWldRb0tTQjdYRzVjZEdSdlkzVnRaVzUwTG5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJb0lGd2lSRTlOUTI5dWRHVnVkRXh2WVdSbFpGd2lMQ0JqYjIxd2JHVjBaV1FnS1R0Y2JseDBkMmx1Wkc5M0xuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9JRndpYkc5aFpGd2lMQ0JqYjIxd2JHVjBaV1FnS1R0Y2JseDBhbEYxWlhKNUxuSmxZV1I1S0NrN1hHNTlYRzVjYmk4dklFTmhkR05vSUdOaGMyVnpJSGRvWlhKbElDUW9aRzlqZFcxbGJuUXBMbkpsWVdSNUtDa2dhWE1nWTJGc2JHVmtYRzR2THlCaFpuUmxjaUIwYUdVZ1luSnZkM05sY2lCbGRtVnVkQ0JvWVhNZ1lXeHlaV0ZrZVNCdlkyTjFjbkpsWkM1Y2JpOHZJRk4xY0hCdmNuUTZJRWxGSUR3OU9TQXRJREV3SUc5dWJIbGNiaTh2SUU5c1pHVnlJRWxGSUhOdmJXVjBhVzFsY3lCemFXZHVZV3h6SUZ3aWFXNTBaWEpoWTNScGRtVmNJaUIwYjI4Z2MyOXZibHh1YVdZZ0tDQmtiMk4xYldWdWRDNXlaV0ZrZVZOMFlYUmxJRDA5UFNCY0ltTnZiWEJzWlhSbFhDSWdmSHhjYmx4MEtDQmtiMk4xYldWdWRDNXlaV0ZrZVZOMFlYUmxJQ0U5UFNCY0lteHZZV1JwYm1kY0lpQW1KaUFoWkc5amRXMWxiblF1Wkc5amRXMWxiblJGYkdWdFpXNTBMbVJ2VTJOeWIyeHNJQ2tnS1NCN1hHNWNibHgwTHk4Z1NHRnVaR3hsSUdsMElHRnplVzVqYUhKdmJtOTFjMng1SUhSdklHRnNiRzkzSUhOamNtbHdkSE1nZEdobElHOXdjRzl5ZEhWdWFYUjVJSFJ2SUdSbGJHRjVJSEpsWVdSNVhHNWNkSGRwYm1SdmR5NXpaWFJVYVcxbGIzVjBLQ0JxVVhWbGNua3VjbVZoWkhrZ0tUdGNibHh1ZlNCbGJITmxJSHRjYmx4dVhIUXZMeUJWYzJVZ2RHaGxJR2hoYm1SNUlHVjJaVzUwSUdOaGJHeGlZV05yWEc1Y2RHUnZZM1Z0Wlc1MExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0lGd2lSRTlOUTI5dWRHVnVkRXh2WVdSbFpGd2lMQ0JqYjIxd2JHVjBaV1FnS1R0Y2JseHVYSFF2THlCQklHWmhiR3hpWVdOcklIUnZJSGRwYm1SdmR5NXZibXh2WVdRc0lIUm9ZWFFnZDJsc2JDQmhiSGRoZVhNZ2QyOXlhMXh1WEhSM2FXNWtiM2N1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWdnWENKc2IyRmtYQ0lzSUdOdmJYQnNaWFJsWkNBcE8xeHVmVnh1WEc1OUlDazdYRzRpWFgwPVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbUZ6YzJWMGN5OXdZV05yY3k5cWNYVmxjbmt2YzNKakwyTnZjbVV2Y21WaFpIa3Vhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1RVRkJUU3hEUVVGRE8wbEJRMGdzVTBGQlV6dEpRVU5VTEdsQ1FVRnBRanRKUVVOcVFpeDNRa0ZCZDBJN1NVRkRlRUlzWVVGQllUdERRVU5vUWl4RlFVRkZMRlZCUVZVc1RVRkJUU3hGUVVGRkxGRkJRVkU3U1VGRGVrSXNXVUZCV1N4RFFVRkRPMGxCUTJJc2FVTkJRV2xETzBsQlEycERMRWxCUVVrc1UwRkJVeXhIUVVGSExFMUJRVTBzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXp0SlFVTnNReXhOUVVGTkxFTkJRVU1zUlVGQlJTeERRVUZETEV0QlFVc3NSMEZCUnl4VlFVRlZMRVZCUVVVN1VVRkRNVUlzVTBGQlV6dGhRVU5LTEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNN1lVRkRVaXhMUVVGTExFTkJRVU1zVlVGQlZTeExRVUZMTzFsQlEzUkNMRTFCUVUwc1EwRkJReXhqUVVGakxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdVVUZEYWtNc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRFNDeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRPMGxCUTJoQ0xFTkJRVU1zUTBGQlF6dEpRVU5HTEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNN1VVRkRWaXd5UkVGQk1rUTdVVUZETTBRc1QwRkJUeXhGUVVGRkxFdEJRVXM3VVVGRFpDeDFSRUZCZFVRN1VVRkRka1FzYlVOQlFXMURPMUZCUTI1RExGTkJRVk1zUlVGQlJTeERRVUZETzFGQlExb3NLMEpCUVN0Q08xRkJReTlDTEV0QlFVc3NSVUZCUlN4VlFVRlZMRWxCUVVrN1dVRkRha0lzTUVSQlFUQkVPMWxCUXpGRUxFVkJRVVVzUTBGQlF5eERRVUZETEVsQlFVa3NTMEZCU3l4SlFVRkpMRWRCUVVjc1JVRkJSU3hOUVVGTkxFTkJRVU1zVTBGQlV5eEhRVUZITEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRE8yZENRVU4wUkN4TlFVRk5MRU5CUVVNN1dVRkRXQ3hEUVVGRE8xbEJRMFFzYVVOQlFXbERPMWxCUTJwRExFMUJRVTBzUTBGQlF5eFBRVUZQTEVkQlFVY3NTVUZCU1N4RFFVRkRPMWxCUTNSQ0xHOUZRVUZ2UlR0WlFVTndSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eEpRVUZKTEV0QlFVc3NTVUZCU1N4SlFVRkpMRVZCUVVVc1RVRkJUU3hEUVVGRExGTkJRVk1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVNeFF5eE5RVUZOTEVOQlFVTTdXVUZEV0N4RFFVRkRPMWxCUTBRc01rTkJRVEpETzFsQlF6TkRMRk5CUVZNc1EwRkJReXhYUVVGWExFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVNNVF5eERRVUZETzB0QlEwb3NRMEZCUXl4RFFVRkRPMGxCUTBnc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVkQlFVY3NVMEZCVXl4RFFVRkRMRWxCUVVrc1EwRkJRenRKUVVOdVF5eHJSRUZCYTBRN1NVRkRiRVE3VVVGRFNTeFJRVUZSTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zYTBKQlFXdENMRVZCUVVVc1UwRkJVeXhEUVVGRExFTkJRVU03VVVGRE5VUXNUVUZCVFN4RFFVRkRMRzFDUVVGdFFpeERRVUZETEUxQlFVMHNSVUZCUlN4VFFVRlRMRU5CUVVNc1EwRkJRenRSUVVNNVF5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RlFVRkZMRU5CUVVNN1NVRkRia0lzUTBGQlF6dEpRVU5FTEd0RVFVRnJSRHRKUVVOc1JDeG5SRUZCWjBRN1NVRkRhRVFzTkVKQlFUUkNPMGxCUXpWQ0xHOUVRVUZ2UkR0SlFVTndSQ3hGUVVGRkxFTkJRVU1zUTBGQlF5eFJRVUZSTEVOQlFVTXNWVUZCVlN4TFFVRkxMRlZCUVZVN1VVRkRiRU1zUTBGQlF5eFJRVUZSTEVOQlFVTXNWVUZCVlN4TFFVRkxMRk5CUVZNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eGxRVUZsTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRelZGTERKRlFVRXlSVHRSUVVNelJTeE5RVUZOTEVOQlFVTXNWVUZCVlN4RFFVRkRMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dEpRVU53UXl4RFFVRkRPMGxCUTBRc1NVRkJTU3hEUVVGRExFTkJRVU03VVVGRFJpd3JRa0ZCSzBJN1VVRkRMMElzVVVGQlVTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExHdENRVUZyUWl4RlFVRkZMRk5CUVZNc1EwRkJReXhEUVVGRE8xRkJRM3BFTEhGRVFVRnhSRHRSUVVOeVJDeE5RVUZOTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVFVGQlRTeEZRVUZGTEZOQlFWTXNRMEZCUXl4RFFVRkRPMGxCUXk5RExFTkJRVU03UVVGRFRDeERRVUZETEVOQlFVTXNRMEZCUXp0QlFVVklMSFY2UzBGQmRYcExJaXdpWm1sc1pTSTZJbUZ6YzJWMGN5OXdZV05yY3k5cWNYVmxjbmt2YzNKakwyTnZjbVV2Y21WaFpIa3Vhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKa1pXWnBibVVvVzF4dUlDQWdJRndpTGk0dlkyOXlaVndpTEZ4dUlDQWdJRndpTGk0dmRtRnlMMlJ2WTNWdFpXNTBYQ0lzWEc0Z0lDQWdYQ0l1TGk5amIzSmxMM0psWVdSNVJYaGpaWEIwYVc5dVhDSXNYRzRnSUNBZ1hDSXVMaTlrWldabGNuSmxaRndpWEc1ZExDQm1kVzVqZEdsdmJpQW9hbEYxWlhKNUxDQmtiMk4xYldWdWRDa2dlMXh1SUNBZ0lGd2lkWE5sSUhOMGNtbGpkRndpTzF4dUlDQWdJQzh2SUZSb1pTQmtaV1psY25KbFpDQjFjMlZrSUc5dUlFUlBUU0J5WldGa2VWeHVJQ0FnSUhaaGNpQnlaV0ZrZVV4cGMzUWdQU0JxVVhWbGNua3VSR1ZtWlhKeVpXUW9LVHRjYmlBZ0lDQnFVWFZsY25rdVptNHVjbVZoWkhrZ1BTQm1kVzVqZEdsdmJpQW9abTRwSUh0Y2JpQWdJQ0FnSUNBZ2NtVmhaSGxNYVhOMFhHNGdJQ0FnSUNBZ0lDQWdJQ0F1ZEdobGJpaG1iaWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDNWpZWFJqYUNobWRXNWpkR2x2YmlBb1pYSnliM0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3BSZFdWeWVTNXlaV0ZrZVVWNFkyVndkR2x2YmlobGNuSnZjaWs3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmlBZ0lDQjlPMXh1SUNBZ0lHcFJkV1Z5ZVM1bGVIUmxibVFvZTF4dUlDQWdJQ0FnSUNBdkx5QkpjeUIwYUdVZ1JFOU5JSEpsWVdSNUlIUnZJR0psSUhWelpXUS9JRk5sZENCMGJ5QjBjblZsSUc5dVkyVWdhWFFnYjJOamRYSnpMbHh1SUNBZ0lDQWdJQ0JwYzFKbFlXUjVPaUJtWVd4elpTeGNiaUFnSUNBZ0lDQWdMeThnUVNCamIzVnVkR1Z5SUhSdklIUnlZV05ySUdodmR5QnRZVzU1SUdsMFpXMXpJSFJ2SUhkaGFYUWdabTl5SUdKbFptOXlaVnh1SUNBZ0lDQWdJQ0F2THlCMGFHVWdjbVZoWkhrZ1pYWmxiblFnWm1seVpYTXVJRk5sWlNBak5qYzRNVnh1SUNBZ0lDQWdJQ0J5WldGa2VWZGhhWFE2SURFc1hHNGdJQ0FnSUNBZ0lDOHZJRWhoYm1Sc1pTQjNhR1Z1SUhSb1pTQkVUMDBnYVhNZ2NtVmhaSGxjYmlBZ0lDQWdJQ0FnY21WaFpIazZJR1oxYm1OMGFXOXVJQ2gzWVdsMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QkJZbTl5ZENCcFppQjBhR1Z5WlNCaGNtVWdjR1Z1WkdsdVp5Qm9iMnhrY3lCdmNpQjNaU2R5WlNCaGJISmxZV1I1SUhKbFlXUjVYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kMkZwZENBOVBUMGdkSEoxWlNBL0lDMHRhbEYxWlhKNUxuSmxZV1I1VjJGcGRDQTZJR3BSZFdWeWVTNXBjMUpsWVdSNUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnVW1WdFpXMWlaWElnZEdoaGRDQjBhR1VnUkU5TklHbHpJSEpsWVdSNVhHNGdJQ0FnSUNBZ0lDQWdJQ0JxVVhWbGNua3VhWE5TWldGa2VTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCSlppQmhJRzV2Y20xaGJDQkVUMDBnVW1WaFpIa2daWFpsYm5RZ1ptbHlaV1FzSUdSbFkzSmxiV1Z1ZEN3Z1lXNWtJSGRoYVhRZ2FXWWdibVZsWkNCaVpWeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIZGhhWFFnSVQwOUlIUnlkV1VnSmlZZ0xTMXFVWFZsY25rdWNtVmhaSGxYWVdsMElENGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklFbG1JSFJvWlhKbElHRnlaU0JtZFc1amRHbHZibk1nWW05MWJtUXNJSFJ2SUdWNFpXTjFkR1ZjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxZV1I1VEdsemRDNXlaWE52YkhabFYybDBhQ2hrYjJOMWJXVnVkQ3dnVzJwUmRXVnllVjBwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlNrN1hHNGdJQ0FnYWxGMVpYSjVMbkpsWVdSNUxuUm9aVzRnUFNCeVpXRmtlVXhwYzNRdWRHaGxianRjYmlBZ0lDQXZMeUJVYUdVZ2NtVmhaSGtnWlhabGJuUWdhR0Z1Wkd4bGNpQmhibVFnYzJWc1ppQmpiR1ZoYm5Wd0lHMWxkR2h2WkZ4dUlDQWdJR1oxYm1OMGFXOXVJR052YlhCc1pYUmxaQ2dwSUh0Y2JpQWdJQ0FnSUNBZ1pHOWpkVzFsYm5RdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpaGNJa1JQVFVOdmJuUmxiblJNYjJGa1pXUmNJaXdnWTI5dGNHeGxkR1ZrS1R0Y2JpQWdJQ0FnSUNBZ2QybHVaRzkzTG5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJb1hDSnNiMkZrWENJc0lHTnZiWEJzWlhSbFpDazdYRzRnSUNBZ0lDQWdJR3BSZFdWeWVTNXlaV0ZrZVNncE8xeHVJQ0FnSUgxY2JpQWdJQ0F2THlCRFlYUmphQ0JqWVhObGN5QjNhR1Z5WlNBa0tHUnZZM1Z0Wlc1MEtTNXlaV0ZrZVNncElHbHpJR05oYkd4bFpGeHVJQ0FnSUM4dklHRm1kR1Z5SUhSb1pTQmljbTkzYzJWeUlHVjJaVzUwSUdoaGN5QmhiSEpsWVdSNUlHOWpZM1Z5Y21Wa0xseHVJQ0FnSUM4dklGTjFjSEJ2Y25RNklFbEZJRHc5T1NBdElERXdJRzl1YkhsY2JpQWdJQ0F2THlCUGJHUmxjaUJKUlNCemIyMWxkR2x0WlhNZ2MybG5ibUZzY3lCY0ltbHVkR1Z5WVdOMGFYWmxYQ0lnZEc5dklITnZiMjVjYmlBZ0lDQnBaaUFvWkc5amRXMWxiblF1Y21WaFpIbFRkR0YwWlNBOVBUMGdYQ0pqYjIxd2JHVjBaVndpSUh4OFhHNGdJQ0FnSUNBZ0lDaGtiMk4xYldWdWRDNXlaV0ZrZVZOMFlYUmxJQ0U5UFNCY0lteHZZV1JwYm1kY0lpQW1KaUFoWkc5amRXMWxiblF1Wkc5amRXMWxiblJGYkdWdFpXNTBMbVJ2VTJOeWIyeHNLU2tnZTF4dUlDQWdJQ0FnSUNBdkx5QklZVzVrYkdVZ2FYUWdZWE41Ym1Ob2NtOXViM1Z6YkhrZ2RHOGdZV3hzYjNjZ2MyTnlhWEIwY3lCMGFHVWdiM0J3YjNKMGRXNXBkSGtnZEc4Z1pHVnNZWGtnY21WaFpIbGNiaUFnSUNBZ0lDQWdkMmx1Wkc5M0xuTmxkRlJwYldWdmRYUW9hbEYxWlhKNUxuSmxZV1I1S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDOHZJRlZ6WlNCMGFHVWdhR0Z1WkhrZ1pYWmxiblFnWTJGc2JHSmhZMnRjYmlBZ0lDQWdJQ0FnWkc5amRXMWxiblF1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWhjSWtSUFRVTnZiblJsYm5STWIyRmtaV1JjSWl3Z1kyOXRjR3hsZEdWa0tUdGNiaUFnSUNBZ0lDQWdMeThnUVNCbVlXeHNZbUZqYXlCMGJ5QjNhVzVrYjNjdWIyNXNiMkZrTENCMGFHRjBJSGRwYkd3Z1lXeDNZWGx6SUhkdmNtdGNiaUFnSUNBZ0lDQWdkMmx1Wkc5M0xtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb1hDSnNiMkZrWENJc0lHTnZiWEJzWlhSbFpDazdYRzRnSUNBZ2ZWeHVmU2s3WEc1Y2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QV1JoZEdFNllYQndiR2xqWVhScGIyNHZhbk52Ymp0amFHRnljMlYwUFhWMFpqZzdZbUZ6WlRZMExHVjVTakphV0VwNllWYzVkVWxxYjNwTVEwcDZZak5XZVZreVZucEphbkJpU1cxR2VtTXlWakJqZVRsM1dWZE9jbU41T1hGaldGWnNZMjVyZG1NelNtcE1NazUyWTIxVmRtTnRWbWhhU0d0MVlXNU5hVmhUZDJsaWJVWjBXbGhOYVU5c2RHUk1RMHAwV1ZoQ2QyRlhOVzVqZVVrMlNXdEdRbEZWUlhOVVZVWkNWRk40UkZGVlJrWlBNR3hDVVRGQmMxVXdSa0pWZW5SS1VWVk9WVXhIYkVOUlZVWndVV3AwU2xGVlRuRlJhWGd6VVd0R1FtUXdTVGRUVlVaRVpVVkpjMWxWUmtKWlZIUkVVVlZPYVV4RlZrSlJWVlZ6VmxWR1FsWlRlRTVSVlVaT1RFVldRbEZWVlhOVlZVWkNWVlIwU2xGVlZUTlJhWGhhVVZWR1dreEZUa0pSVlUwM1UxVkdSbGxwZUhCUk1FWkNZVlZOTjFOVlJrUmhhMDF6VTFWR1FsTlRlRlJSVlVaVVRFVmtRbEZWWTNOVVZVWkNWRk40UkZGVlJrUk1Sa1pDVVZaRmMxSlZSa0pTVTNoRVVWVkdSRTh3YkVKU1YzaEVURVV4UWxGVk1ITlJNRVpDVVhsNFJsRlZSa1pNUlU1Q1VWVk5jMU13UmtKVGVYaElVVlZHU0V4R1ZrSlJWbFZ6VWxWR1FsSlVkRkpSVlZVelVXbDRWRkZWUmxSUE1rWkNVVEZCYzFOVlJrSlRVM2hFVVZWR1JreEZWa0pSVlZWelVUQkdRbEpVZEdoUlZYUlhURVYwUWxGVmMzTlJNRVpDVWxONFZsRlZSbFpNUlhSQ1VWVnpOMWRWUmtSa1JVbHpWRlZHUWxSVGVFUlJWVVpFVEVkT1FsRlhUWE5STUVaQ1VsTjRURkZWUmt4TVJVNUNVVlZWYzFFd1JrSlJlblJTVVZWT2IxRjVlRVJSVlVaRVRFVk9RbEZWVlhOUk1FWkNVWHAwVWxGVlZrMU1SVEZDVVZVd2MxRXdSa0pSZVhoS1VWVkdTa3hGVGtKUlZVMDNVMVZHUkZscGVFUlJWVVpFVEVWT1FsRlZUVGRUVlVaR1VtbDRUbEZWUms1TVJVNUNVVlZOYzFSVlJrSlVVM2hFVVZWR1JrOHhSa0pTVjFGelRXdFNRbEZVU2tWUE1VWkNVWHBPUlV4Rk9VSlJWVGh6VWxWR1FsSlRlRXhSVlVaTVR6RkdRbEpYVVhOa1ZWSkNVVmhXUlU4eFJrSlJNMXBGVEVjeFJGRlZSblJSZW5SU1VWVk9kVkY1ZUZSUlZVWlVURVZXUWxGVlZYTlJNRVpDVVhwMFVsRlZWbUZNUTNSRFVWVkZjbEZxZEZKUlZVMTJVV2w0VEZGVlJreE1SVlpDVVZWVmMxWlZSa0pXVTNoS1VWVkdTazh4YkVKU1dFSkRURVJDUlZGVlJYZFNSSFJhVVZWTmVGSkRlRVpSVlVaR1RFVk9RbEZWVFhOUk1FWkNVbE40U2xGVlJrcE1SWFJDVVZWemMxTlZSa0pUVTNoSVVWVkdTRXhGVmtKUlZWVnpWRlZHUWxSVGVFUlJWVVpFVEVaT1FsRldUWE5TTUVaQ1VubDRUbEZWUms1TVJVNUNVVlZOYzFRd1JrSlZVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEc1UmEwWkVUVEJSYzFSVlJrSlVVM2hFVVZWR1JFOHhiRUpSTVVselVUQkdRbEY2ZEZwUlZWWkZURWRzUkZGVlJuQlJlblJhVVZWT2NWRjVlRTVSVlVaT1RFVk9RbEZWVFhOVU1FWkNWSGw0U0ZGVlJraE1SV3hDVVZWcmMxRXdSa0pSZW5SYVVWVldNRkZwZUhaU1ZVWkNZakJWTjFkVlJrUmpSVlZ6VWxWR1FsSlRlRVJSVlVaRVRFVk9RbEZWVlhOVFZVWkNVMU40VEZGVlJreE1SV3hDVVZWcmMxTlZSa0pUVTNoR1VWVkdSa3hGTVVKUlZUQnpVVEJHUWxGNWVGUlJWVVpVVEVWa1FsRlZZM05STUVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlblJ1VVd0R1JFd3dUWE5VVlVaQ1ZGTjRSRkZWUmtSUE1XeENVVEZKYzFFd1JrSlJlblJhVVZWV1JVeEVTa1JSVlVWNVVYcDBXbEZWVFhwUmVYaFVVVlZHVkV4RlRrSlJWVTF6VmpCR1FsWjVlRVJSVlVaR1RFWkdRbEZXUlhOU1ZVWkNVbE40UkZGVlJrWk1SVEZDVVZVd2MxRXdSa0pTVTNoRVVWVkdSa3hGVGtKUlZVMDNWVlZHUkV3d1RYTlJNRVpDVVhwMFRGRlZUa1ZNUlU1Q1VWVlZjMUV3UmtKUmVuUktVVlZXUzB4Rk1VSlJWVEJ6VVRCR1FsRjVlRXhSVlVaTVRFVk9RbEZWVFhOVFZVWkNVMU40U0ZGVlJraE1SazVDVVZaTmMxRXdSa0pSZVhoS1VWVkdTa3hGVGtKUlZVMDNVMVZHUm1KclRYTmhNRkpDVVZkMFJVOHdiRUpSTW5oRlR6RkdRbEV3VFhOVlZVWkNWVk40UkZGVlJrUk1SekZEVVZWR2RGRnBlRVJSVlVaR1RFZDBRMUZWUm5KUmFYaEdVVlZHUmt4R1RrSlJWazF6VVRCR1FsSlRlRVJSVlVaRVR6RkdRbEY2YkVWTVJURkNVVlV3YzFFd1JrSlJlWGgwVVd0R1FtSlZTWE5STUVaQ1VsTjRUbEZWUms1TVJWWkNVVlZWYzFVd1JrSlZlWGhFVVZWR1JreEZUa0pSVlUwM1ZWVkdSR0ZGVVhOVVZVWkNWRk40UkZGVlJrUk1SWFJDVVZWemMxSlZSa0pTVTNoRVVWVkdSRTh3YkVKUk1taERURVZPUWxGVlRUZFRWVVpHVWtONGNsSkZSa0poTUZFM1UxVkdSR0pGVVhOYU1GSkNVVmRrUlU4d2JFSlJNbWhGVEVSU1ExRlZSVEJSYW5SS1VWVk5NVkZwZUhaU1JVWkNZakJSTjFOVlJrUmpSVkZ6VWxWR1FsSlRlRVJSVlVaRVRFVk9RbEZWVlhOVlZVWkNWVk40UkZGVlJrUk1SbFpDVVZaVmMxTXdSa0pUZVhoV1VWVkdWazh4UmtKUk0xSkVURVZPUWxGVlZYTlZWVVpDVlZONFJGRlZSa1JNUmxaQ1VWWlZjMU13UmtKVGVYaFVVVlZHVkV4RmJFSlJWV3R6VVRCR1FsRjVlRkpSVlVaU1RFVk9RbEZWVFhOYVZVWkNXbE40UkZGVlJrUk1Sa1pDVVZaRmMxRXdSa0pTZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRGSlJWVlYyVWxOM2VWSlZSa0pOYTFVM1ZWVkdSRTB3VlhOVVZVWkNWRk40UkZGVlJrUk1SbFpDVVZaVmMxRXdSa0pTVTNoT1VWVkdUa3hGVGtKUlZVMXpVekJHUWxONWVFUlJWVVpHVEVWT1FsRlZUVGRUVlVaR1ltdE5jMUV3UmtKUmVuUktVVlZHUkV4RmJFSlJWV3R6VVRCR1FsRjVlRVJSVlVaRVR6RkdRbEpXUVhOTE1FcENVVk4wUTA4eFJrSlJlVGxEVEVaR1FsRldSWE5STUVaQ1VYbDRibEZyUmtKYU1FbHpVVEJHUWxKVGVISlJhMFpDWVRCSmMxSlZSa0pTVTNoVVVWVkdWRXhGVGtKUlZWVnpVVEJHUWxGNmRGSlJWVlY2VWtONGVGSkZSa0pqVlZFM1ZWVkdSR05yVVhOVVZVWkNWRk40UkZGVlJrUk1SMlJEVVZWR2JsRnBlRVJSVlVaR1RFVXhRbEZWTUhOU1ZVWkNVbE40VkZGVlJsUk1SVTVDVVZWVmMxRXdSa0pSZW5SS1VWVk5OVkY1ZUVSUlZVWkVUekJHUWxKVlVYTlJNRVpDVVhsNFJGRlZSa1pNUlU1Q1VWVk5hVXhEU20xaFYzaHNTV3B2YVZsWVRucGFXRko2VEROQ2FGa3lkSHBNTW5CNFpGZFdlV1ZUT1hwamJVMTJXVEk1ZVZwVE9YbGFWMFpyWlZNMWNXTjVTWE5KYms1MlpGaEthbHBZVGtSaU1qVXdXbGMxTUVscWNHSkpiVkpzV20xc2RWcFRaMmRYTVhoMVdFaFNZMGxwTkhWTU1rNTJZMjFXWTBscGVHTmliSGd3V0VOSmRVeHBPVEpaV0VsMldrYzVhbVJYTVd4aWJsSmpTV2w0WTJKc2VEQllRMGwxVEdrNWFtSXpTbXhNTTBwc1dWZFNOVkpZYUdwYVdFSXdZVmM1ZFZoRFNYTllSelZqWkVaM2FVeHBOSFphUjFadFdsaEtlVnBYVW1OSmJIaDFXRk4zWjFwdVZuVlpNMUp3WWpJMGIwbEhjRkprVjFaNVpWTjNaMXBIT1dwa1Z6RnNZbTVSWjB0VFFqZFlSelZqWW14M2FXUllUbXhKU0U0d1kyMXNhbVJHZDJsUE1YaDFXRWMwZGt4NVFsVmhSMVZuV2tkV2JWcFlTbmxhVjFGblpGaE9iRnBEUW5aaWFVSkZWREF3WjJOdFZtaGFTR3hqWW01YWFHTnBRbmxhVjBaclpWVjRjR016VVdkUVUwSnhWVmhXYkdOdWEzVlNSMVp0V2xoS2VWcFhVVzlMVkhSallteDRkV0ZzUmpGYVdFbzFURzFhZFV4dVNteFpWMUkxU1VRd1oxcHVWblZaTTFKd1lqSTBiMGxIV25WSlEydG5aVEY0ZFZoSE5XTmtTRXBzV1ZkU05WUkhiSHBrUm5oMVdFaFNZMlJETlRCaFIxWjFTME5DYldKcFFYQllSelZqWW14NE1GaElVWFpNZVVKWVkyMUdkMGxIY0ZKa1YxWjVaVk0xZVZwWFJtdGxWVlkwV1RKV2QyUkhiSFppYVVKd1ltbENhRWxIV2pGaWJVNHdZVmM1ZFVsSVRuWkpTRkp2V1ZoUloyUkhhR3hKUjNoMllqSjBNV05HZUhWWVNGSmpaRU00ZGtsSGFHaGpTRUpzWW01TloxbFlVV2RrUjJoc1NVaFNjR0pYVldkaU1sbG5XbGhLZVdJelNXZGhSMFoxV2tkNGNHSnRZMmRoVnpWNlpFZFdhRnBEUW5aYWFVSnFXVmQ0YzFsdFJtcGhNWGgxV0VoU1kyUkRPSFpKU0Vwc1dqSnNlbVJJU21oa1IyeDJZbWsxWTJKc2VEQllTRkYxV1RKR01Ga3laMjlKUjFveFltMU9NR0ZYT1hWTFEwSnNZMjVLZG1OcFFYQkpTSFJqWW14NE1GaElVbU5rUjNCU1pGZFdlV1ZUTlhsYVYwWnJaVlZXTkZreVZuZGtSMngyWW1sbloxcFlTbmxpTTBsblMxUjBZMkpzZURCWVNGSTVTVU5yTjFoSE5XTmliSGd3WTIxV01HUllTblZKU0ZKdllWaE5OMWhITlRsUE1YaDFXRWMxY1ZWWVZteGpibXQxV2xob01GcFhOV3RMUTBJM1dFYzFZMkpzZURCTWVUaG5VMWhOWjJSSGFHeEpSVkpRVkZOQ2VWcFhSbXRsVTBJd1lubENhVnBUUWpGak1sWnJVSGxDVkZwWVVXZGtSemhuWkVoS01WcFRRblppYlU1c1NVZHNNRWxIT1dwWk0xWjVZM2sxWTJKc2VEQmhXRTVUV2xkR2EyVlViMmRhYlVaell6SlZjMWhITldOaWJIZ3dUSGs0WjFGVFFtcGlNMVoxWkVkV2VVbElVblpKU0ZKNVdWZE9ja2xIYUhaa2VVSjBXVmMxTlVsSGJEQmFWekY2U1VoU2RrbElaR2hoV0ZGbldtMDVlVWxIU214YWJUbDVXbFo0ZFZoSVVYWk1lVUl3WVVkVloyTnRWbWhhU0d0bldsaGFiR0p1VVdkYWJXeDVXbGhOZFVsR1RteGFVMEZxVG1wak5FMVdlSFZZU0ZKNVdsZEdhMlZXWkdoaFdGRTJTVVJGYzFoSE5XTmliSGd3VEhrNFoxTkhSblZhUjNoc1NVaGtiMXBYTkdka1IyaHNTVVZTVUZSVFFuQmplVUo1V2xkR2EyVldlSFZZU0ZKNVdsZEdhMlZVYjJkYWJsWjFXVE5TY0dJeU5HOUpTR1JvWVZoUlowdFRRamRZUnpWallteDRNRmhJVVhaTWVVSkNXVzA1ZVdSRFFuQmFhVUl3WVVkV2VWcFRRbWhqYlZWblkwZFdkVnBIYkhWYWVVSnZZako0YTJONVFuWmphVUl6V2xOa2VWcFRRbWhpU0Vwc1dWZFNOVWxJU214WlYxSTFXRWMxWTJSR2VEQmhWMWxuUzBOQ00xbFhiREJKUkRBNVVGTkNNR051Vm14SlJEaG5URk14Y1ZWWVZteGpibXQxWTIxV2FGcEliRmhaVjJ3d1NVUnZaMkZzUmpGYVdFbzFURzFzZWxWdFZtaGFTR3RuUzFOQ04xaEhOV05rUm5nd1dFaFNlVnBZVWpGamJUUTNXRWMxWTJSR2VEQm1WbmgxV0VjMVkyUkdlREJNZVRoblZXMVdkRnBYTVdsYVdFbG5aRWRvYUdSRFFqQmhSMVZuVWtVNVRrbEhiSHBKU0Vwc1dWZFNOVmhITldOa1JuZ3dZV3hHTVZwWVNqVk1iV3g2VlcxV2FGcElhMmRRVTBJd1kyNVdiRTh4ZUhWWVJ6VmpaRVo0TUV4NU9HZFRWMWxuV1ZOQ2RXSXpTblJaVjNkblVrVTVUa2xHU214WlYxSTFTVWRXTWxwWE5UQkpSMXB3WTIxV2EweERRbXRhVjA1NVdsY3hiR0p1VVhOSlIwWjFXa05DTTFsWGJEQkpSMnh0U1VjMWJGcFhVV2RaYlZaallteDRNRmhJVW5CYWFVRnZTVWhrYUdGWVVXZEpWREE1U1VoU2VXUlhWV2RLYVZsblRGTXhjVlZZVm14amJtdDFZMjFXYUZwSWJGaFpWMnd3U1VRMFowMURRWEJKU0hSallteDRNRmhJVW1Oa1NFcHNaRWhXZVdKcWRHTmliSGd3V0VoU09WaEhOV05pYkhnd1dFaFJka3g1UWtwYWFVSXdZVWRXZVZwVFFtaGpiVlZuV201V2RWa3pVbkJpTWpWNlNVZEtkbVJYTld0TVEwSXdZbmxDYkdWSFZtcGtXRkpzV0VjMVkyUkdlREJqYlZab1draHNUV0ZZVGpCTWJrcHNZekk1YzJSdFZsaGhXRkp2UzBOQ2EySXlUakZpVjFaMVpFTjNaMWQ1UW5GVldGWnNZMjVyWjFoVFFYQlBNWGgxV0VoU09WaEhOVGxKUTJzM1dFYzFZMkp0Y0ZKa1YxWjVaVk0xZVZwWFJtdGxVelV3WVVkV2RVbEVNR2RqYlZab1draHNUV0ZZVGpCTWJsSnZXbGMwTjFoSE5XTmlhVGgyU1VaU2IxcFRRbmxhVjBaclpWTkNiR1J0Vm5Wa1EwSnZXVmMxYTJKSFZubEpSMFoxV2tOQ2VscFhlRzFKUjA1eldsZEdkV1JZUVdkaVYxWXdZVWM1YTFoSE5XMWtWelZxWkVkc2RtSnBRbXBpTWpGM1lrZFdNRnBYVVc5TFUwSTNXRWMxWTJSSFVuWlpNMVowV2xjMU1FeHVTbXhpVnpreVdsVldNbHBYTlRCVVIyeDZaRWRXZFZwWVNXOUpSbmRwVWtVNVRsRXlPWFZrUjFaMVpFVjRkbGxYVW14YVJuZHBURU5DYW1JeU1YZGlSMVl3V2xkUlowdFVkR05pYkhnd1pESnNkVnBIT1ROTWJrcHNZbGM1TWxwVlZqSmFWelV3VkVkc2VtUkhWblZhV0VsdlNVWjNhV0pIT1doYVJuZHBURU5DYW1JeU1YZGlSMVl3V2xkUlowdFVkR05pYkhnd1lXeEdNVnBZU2pWTWJrcHNXVmRTTlV0RGF6ZFlSelU1V0VjMVkySnBPSFpKUlU1b1pFZE9iMGxIVG1oak1sWjZTVWhrYjFwWVNteEpRMUZ2V2tjNWFtUlhNV3hpYmxGd1RHNUtiRmxYVWpWTFEydG5ZVmhOWjFreVJuTmlSMVpyV0VjMGRreDVRbWhhYmxKc1kybENNR0ZIVldkWmJrcDJaRE5PYkdOcFFteGtiVloxWkVOQ2IxbFlUV2RaVjNoNVdsZEdhMlZUUW5aWk1rNHhZMjVLYkZwRE5XTmlhVGgyU1VaT01XTklRblpqYmxFMlNVVnNSa2xFZHpsUFUwRjBTVVJGZDBsSE9YVmlTR3hqWW1rNGRrbEZPWE5hUjFaNVNVVnNSa2xJVG5aaVYxWXdZVmN4YkdONVFucGhWMlIxV1ZkNGVrbEdkMmxoVnpVd1dsaEthRmt6VW5Ca2JWWmpTV2xDTUdJeU9HZGpNamwyWW14NGRXRlhXV2RMUTBKcllqSk9NV0pYVm5Wa1F6VjVXbGRHYTJWV1RqQlpXRkpzU1VRd09WQlRRbU5KYlU1MllsaENjMXBZVW14WVEwbG5aa2g0WTJKc2VEQkxRMEpyWWpKT01XSlhWblZrUXpWNVdsZEdhMlZXVGpCWldGSnNTVU5GT1ZCVFFtTkpiWGgyV1ZkU2NHSnRaR05KYVVGdFNtbEJhRnBIT1dwa1Z6RnNZbTVSZFZwSE9XcGtWekZzWW01U1JtSkhWblJhVnpVd1RHMVNkbFV5VG5saU1uaHpTVU5yWjB0VFFqZFlSelZqWW14NE1FeDVPR2RUUjBaMVdrZDRiRWxIYkRCSlIwWjZaVmMxYW1GSVNuWmliVGt4WXpKNE5VbElVblpKUjBaellrYzVNMGxJVG1wamJXeDNaRWhOWjJSSGFHeEpSemwzWTBjNWVXUklWblZoV0ZJMVNVaFNka2xIVW14aVIwWTFTVWhLYkZsWFVqVllSelZqWkVoa2NHSnRVblprZVRWNldsaFNWV0ZYTVd4aU0xWXdTME5DY1ZWWVZteGpibXQxWTIxV2FGcElhMmRMVkhSallteDRkV1pUUW14aVNFNXNTVWgwWTJKc2VIVllTRkYyVEhsQ1ZtTXlWV2RrUjJoc1NVZG9hR0p0VWpWSlIxWXlXbGMxTUVsSFRtaGlSM2hwV1ZkT2NsaEhOV05rUjFKMldUTldkRnBYTlRCTWJVWnJXa1ZXTWxwWE5UQlVSMng2WkVkV2RWcFlTVzlKUm5kcFVrVTVUbEV5T1hWa1IxWjFaRVY0ZGxsWFVteGFSbmRwVEVOQ2FtSXlNWGRpUjFZd1dsZFJaMHRVZEdOaWJIaDFXRWhSZGt4NVFrSkpSMXBvWWtkNGFWbFhUbkpKU0ZKMlNVaGtjR0p0VW5aa2VUVjJZbTE0ZGxsWFVYTkpTRkp2V1ZoUloyUXliSE5pUTBKb1lraGthR1ZZVFdka01qbDVZVEY0ZFZoSVVqTmhWelZyWWpOamRWbFhVbXRTV0Zwc1ltNVNUV0ZZVGpCYVZ6VnNZMmxuWjFoRFNuTmlNa1pyV0VOSmMwbEhUblppV0VKeldsaFNiRnBEUVhCUE1YaDFabFo0ZFZoSE5UbEpRMnMzV0VjMGFWaFlNRDFjYmlKZGZRPT1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbUZ6YzJWMGN5OXdZV05yY3k5cWNYVmxjbmt2YzNKakwyTnZjbVV2Y21WaFpIa3Vhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1RVRkJUU3hEUVVGRE8wbEJRMGdzVTBGQlV6dEpRVU5VTEdsQ1FVRnBRanRKUVVOcVFpeDNRa0ZCZDBJN1NVRkRlRUlzWVVGQllUdERRVU5vUWl4RlFVRkZMRlZCUVZVc1RVRkJUU3hGUVVGRkxGRkJRVkU3U1VGRGVrSXNXVUZCV1N4RFFVRkRPMGxCUTJJc2FVTkJRV2xETzBsQlEycERMRWxCUVVrc1UwRkJVeXhIUVVGSExFMUJRVTBzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXp0SlFVTnNReXhOUVVGTkxFTkJRVU1zUlVGQlJTeERRVUZETEV0QlFVc3NSMEZCUnl4VlFVRlZMRVZCUVVVN1VVRkRNVUlzVTBGQlV6dGhRVU5LTEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNN1lVRkRVaXhMUVVGTExFTkJRVU1zVlVGQlZTeExRVUZMTzFsQlEzUkNMRTFCUVUwc1EwRkJReXhqUVVGakxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdVVUZEYWtNc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRFNDeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRPMGxCUTJoQ0xFTkJRVU1zUTBGQlF6dEpRVU5HTEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNN1VVRkRWaXd5UkVGQk1rUTdVVUZETTBRc1QwRkJUeXhGUVVGRkxFdEJRVXM3VVVGRFpDeDFSRUZCZFVRN1VVRkRka1FzYlVOQlFXMURPMUZCUTI1RExGTkJRVk1zUlVGQlJTeERRVUZETzFGQlExb3NLMEpCUVN0Q08xRkJReTlDTEV0QlFVc3NSVUZCUlN4VlFVRlZMRWxCUVVrN1dVRkRha0lzTUVSQlFUQkVPMWxCUXpGRUxFVkJRVVVzUTBGQlF5eERRVUZETEVsQlFVa3NTMEZCU3l4SlFVRkpMRWRCUVVjc1JVRkJSU3hOUVVGTkxFTkJRVU1zVTBGQlV5eEhRVUZITEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRE8yZENRVU4wUkN4TlFVRk5MRU5CUVVNN1dVRkRXQ3hEUVVGRE8xbEJRMFFzYVVOQlFXbERPMWxCUTJwRExFMUJRVTBzUTBGQlF5eFBRVUZQTEVkQlFVY3NTVUZCU1N4RFFVRkRPMWxCUTNSQ0xHOUZRVUZ2UlR0WlFVTndSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eEpRVUZKTEV0QlFVc3NTVUZCU1N4SlFVRkpMRVZCUVVVc1RVRkJUU3hEUVVGRExGTkJRVk1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVNeFF5eE5RVUZOTEVOQlFVTTdXVUZEV0N4RFFVRkRPMWxCUTBRc01rTkJRVEpETzFsQlF6TkRMRk5CUVZNc1EwRkJReXhYUVVGWExFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVNNVF5eERRVUZETzB0QlEwb3NRMEZCUXl4RFFVRkRPMGxCUTBnc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVkQlFVY3NVMEZCVXl4RFFVRkRMRWxCUVVrc1EwRkJRenRKUVVOdVF5eHJSRUZCYTBRN1NVRkRiRVE3VVVGRFNTeFJRVUZSTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zYTBKQlFXdENMRVZCUVVVc1UwRkJVeXhEUVVGRExFTkJRVU03VVVGRE5VUXNUVUZCVFN4RFFVRkRMRzFDUVVGdFFpeERRVUZETEUxQlFVMHNSVUZCUlN4VFFVRlRMRU5CUVVNc1EwRkJRenRSUVVNNVF5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RlFVRkZMRU5CUVVNN1NVRkRia0lzUTBGQlF6dEpRVU5FTEd0RVFVRnJSRHRKUVVOc1JDeG5SRUZCWjBRN1NVRkRhRVFzTkVKQlFUUkNPMGxCUXpWQ0xHOUVRVUZ2UkR0SlFVTndSQ3hGUVVGRkxFTkJRVU1zUTBGQlF5eFJRVUZSTEVOQlFVTXNWVUZCVlN4TFFVRkxMRlZCUVZVN1VVRkRiRU1zUTBGQlF5eFJRVUZSTEVOQlFVTXNWVUZCVlN4TFFVRkxMRk5CUVZNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eGxRVUZsTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRelZGTERKRlFVRXlSVHRSUVVNelJTeE5RVUZOTEVOQlFVTXNWVUZCVlN4RFFVRkRMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dEpRVU53UXl4RFFVRkRPMGxCUTBRc1NVRkJTU3hEUVVGRExFTkJRVU03VVVGRFJpd3JRa0ZCSzBJN1VVRkRMMElzVVVGQlVTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExHdENRVUZyUWl4RlFVRkZMRk5CUVZNc1EwRkJReXhEUVVGRE8xRkJRM3BFTEhGRVFVRnhSRHRSUVVOeVJDeE5RVUZOTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVFVGQlRTeEZRVUZGTEZOQlFWTXNRMEZCUXl4RFFVRkRPMGxCUXk5RExFTkJRVU03UVVGRFRDeERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTklMSFY2UzBGQmRYcExPMEZCUlhaNlN5d3lhRnBCUVRKb1dpSXNJbVpwYkdVaU9pSmhjM05sZEhNdmNHRmphM012YW5GMVpYSjVMM055WXk5amIzSmxMM0psWVdSNUxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpWkdWbWFXNWxLRnRjYmlBZ0lDQmNJaTR1TDJOdmNtVmNJaXhjYmlBZ0lDQmNJaTR1TDNaaGNpOWtiMk4xYldWdWRGd2lMRnh1SUNBZ0lGd2lMaTR2WTI5eVpTOXlaV0ZrZVVWNFkyVndkR2x2Ymx3aUxGeHVJQ0FnSUZ3aUxpNHZaR1ZtWlhKeVpXUmNJbHh1WFN3Z1puVnVZM1JwYjI0Z0tHcFJkV1Z5ZVN3Z1pHOWpkVzFsYm5RcElIdGNiaUFnSUNCY0luVnpaU0J6ZEhKcFkzUmNJanRjYmlBZ0lDQXZMeUJVYUdVZ1pHVm1aWEp5WldRZ2RYTmxaQ0J2YmlCRVQwMGdjbVZoWkhsY2JpQWdJQ0IyWVhJZ2NtVmhaSGxNYVhOMElEMGdhbEYxWlhKNUxrUmxabVZ5Y21Wa0tDazdYRzRnSUNBZ2FsRjFaWEo1TG1adUxuSmxZV1I1SUQwZ1puVnVZM1JwYjI0Z0tHWnVLU0I3WEc0Z0lDQWdJQ0FnSUhKbFlXUjVUR2x6ZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdMblJvWlc0b1ptNHBYRzRnSUNBZ0lDQWdJQ0FnSUNBdVkyRjBZMmdvWm5WdVkzUnBiMjRnS0dWeWNtOXlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnFVWFZsY25rdWNtVmhaSGxGZUdObGNIUnBiMjRvWlhKeWIzSXBPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUNBZ2ZUdGNiaUFnSUNCcVVYVmxjbmt1WlhoMFpXNWtLSHRjYmlBZ0lDQWdJQ0FnTHk4Z1NYTWdkR2hsSUVSUFRTQnlaV0ZrZVNCMGJ5QmlaU0IxYzJWa1B5QlRaWFFnZEc4Z2RISjFaU0J2Ym1ObElHbDBJRzlqWTNWeWN5NWNiaUFnSUNBZ0lDQWdhWE5TWldGa2VUb2dabUZzYzJVc1hHNGdJQ0FnSUNBZ0lDOHZJRUVnWTI5MWJuUmxjaUIwYnlCMGNtRmpheUJvYjNjZ2JXRnVlU0JwZEdWdGN5QjBieUIzWVdsMElHWnZjaUJpWldadmNtVmNiaUFnSUNBZ0lDQWdMeThnZEdobElISmxZV1I1SUdWMlpXNTBJR1pwY21WekxpQlRaV1VnSXpZM09ERmNiaUFnSUNBZ0lDQWdjbVZoWkhsWFlXbDBPaUF4TEZ4dUlDQWdJQ0FnSUNBdkx5QklZVzVrYkdVZ2QyaGxiaUIwYUdVZ1JFOU5JR2x6SUhKbFlXUjVYRzRnSUNBZ0lDQWdJSEpsWVdSNU9pQm1kVzVqZEdsdmJpQW9kMkZwZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1FXSnZjblFnYVdZZ2RHaGxjbVVnWVhKbElIQmxibVJwYm1jZ2FHOXNaSE1nYjNJZ2QyVW5jbVVnWVd4eVpXRmtlU0J5WldGa2VWeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIZGhhWFFnUFQwOUlIUnlkV1VnUHlBdExXcFJkV1Z5ZVM1eVpXRmtlVmRoYVhRZ09pQnFVWFZsY25rdWFYTlNaV0ZrZVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRkpsYldWdFltVnlJSFJvWVhRZ2RHaGxJRVJQVFNCcGN5QnlaV0ZrZVZ4dUlDQWdJQ0FnSUNBZ0lDQWdhbEYxWlhKNUxtbHpVbVZoWkhrZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnU1dZZ1lTQnViM0p0WVd3Z1JFOU5JRkpsWVdSNUlHVjJaVzUwSUdacGNtVmtMQ0JrWldOeVpXMWxiblFzSUdGdVpDQjNZV2wwSUdsbUlHNWxaV1FnWW1WY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoM1lXbDBJQ0U5UFNCMGNuVmxJQ1ltSUMwdGFsRjFaWEo1TG5KbFlXUjVWMkZwZENBK0lEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCSlppQjBhR1Z5WlNCaGNtVWdablZ1WTNScGIyNXpJR0p2ZFc1a0xDQjBieUJsZUdWamRYUmxYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXRmtlVXhwYzNRdWNtVnpiMngyWlZkcGRHZ29aRzlqZFcxbGJuUXNJRnRxVVhWbGNubGRLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDBwTzF4dUlDQWdJR3BSZFdWeWVTNXlaV0ZrZVM1MGFHVnVJRDBnY21WaFpIbE1hWE4wTG5Sb1pXNDdYRzRnSUNBZ0x5OGdWR2hsSUhKbFlXUjVJR1YyWlc1MElHaGhibVJzWlhJZ1lXNWtJSE5sYkdZZ1kyeGxZVzUxY0NCdFpYUm9iMlJjYmlBZ0lDQm1kVzVqZEdsdmJpQmpiMjF3YkdWMFpXUW9LU0I3WEc0Z0lDQWdJQ0FnSUdSdlkzVnRaVzUwTG5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJb1hDSkVUMDFEYjI1MFpXNTBURzloWkdWa1hDSXNJR052YlhCc1pYUmxaQ2s3WEc0Z0lDQWdJQ0FnSUhkcGJtUnZkeTV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0Z3aWJHOWhaRndpTENCamIyMXdiR1YwWldRcE8xeHVJQ0FnSUNBZ0lDQnFVWFZsY25rdWNtVmhaSGtvS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdMeThnUTJGMFkyZ2dZMkZ6WlhNZ2QyaGxjbVVnSkNoa2IyTjFiV1Z1ZENrdWNtVmhaSGtvS1NCcGN5QmpZV3hzWldSY2JpQWdJQ0F2THlCaFpuUmxjaUIwYUdVZ1luSnZkM05sY2lCbGRtVnVkQ0JvWVhNZ1lXeHlaV0ZrZVNCdlkyTjFjbkpsWkM1Y2JpQWdJQ0F2THlCVGRYQndiM0owT2lCSlJTQThQVGtnTFNBeE1DQnZibXg1WEc0Z0lDQWdMeThnVDJ4a1pYSWdTVVVnYzI5dFpYUnBiV1Z6SUhOcFoyNWhiSE1nWENKcGJuUmxjbUZqZEdsMlpWd2lJSFJ2YnlCemIyOXVYRzRnSUNBZ2FXWWdLR1J2WTNWdFpXNTBMbkpsWVdSNVUzUmhkR1VnUFQwOUlGd2lZMjl0Y0d4bGRHVmNJaUI4ZkZ4dUlDQWdJQ0FnSUNBb1pHOWpkVzFsYm5RdWNtVmhaSGxUZEdGMFpTQWhQVDBnWENKc2IyRmthVzVuWENJZ0ppWWdJV1J2WTNWdFpXNTBMbVJ2WTNWdFpXNTBSV3hsYldWdWRDNWtiMU5qY205c2JDa3BJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1NHRnVaR3hsSUdsMElHRnplVzVqYUhKdmJtOTFjMng1SUhSdklHRnNiRzkzSUhOamNtbHdkSE1nZEdobElHOXdjRzl5ZEhWdWFYUjVJSFJ2SUdSbGJHRjVJSEpsWVdSNVhHNGdJQ0FnSUNBZ0lIZHBibVJ2ZHk1elpYUlVhVzFsYjNWMEtHcFJkV1Z5ZVM1eVpXRmtlU2s3WEc0Z0lDQWdmVnh1SUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBdkx5QlZjMlVnZEdobElHaGhibVI1SUdWMlpXNTBJR05oYkd4aVlXTnJYRzRnSUNBZ0lDQWdJR1J2WTNWdFpXNTBMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9YQ0pFVDAxRGIyNTBaVzUwVEc5aFpHVmtYQ0lzSUdOdmJYQnNaWFJsWkNrN1hHNGdJQ0FnSUNBZ0lDOHZJRUVnWm1Gc2JHSmhZMnNnZEc4Z2QybHVaRzkzTG05dWJHOWhaQ3dnZEdoaGRDQjNhV3hzSUdGc2QyRjVjeUIzYjNKclhHNGdJQ0FnSUNBZ0lIZHBibVJ2ZHk1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0Z3aWJHOWhaRndpTENCamIyMXdiR1YwWldRcE8xeHVJQ0FnSUgxY2JuMHBPMXh1THk4aklITnZkWEpqWlUxaGNIQnBibWRWVWt3OVpHRjBZVHBoY0hCc2FXTmhkR2x2Ymk5cWMyOXVPMk5vWVhKelpYUTlkWFJtT0R0aVlYTmxOalFzWlhsS01scFlTbnBoVnpsMVNXcHZla3hEU25waU0xWjVXVEpXZWtscWNHSkpiVVo2WXpKV01HTjVPWGRaVjA1eVkzazVjV05ZVm14amJtdDJZek5LYWt3eVRuWmpiVlYyWTIxV2FGcElhM1ZoYmsxcFdGTjNhV0p0Um5SYVdFMXBUMngwWkV4RFNuUlpXRUozWVZjMWJtTjVTVFpKYTBaQ1VWVkZjMVJWUmtKVVUzaEVVVlZHUms4d2JFSlJNVUZ6VlRCR1FsVjZkRXBSVlU1VlRFZHNRMUZWUm5CUmFuUktVVlZPY1ZGcGVETlJhMFpDWkRCSk4xTlZSa1JsUlVseldWVkdRbGxVZEVSUlZVNXBURVZXUWxGVlZYTldWVVpDVmxONFRsRlZSazVNUlZaQ1VWVlZjMVZWUmtKVlZIUktVVlZWTTFGcGVGcFJWVVphVEVWT1FsRlZUVGRUVlVaR1dXbDRjRkV3UmtKaFZVMDNVMVZHUkdGclRYTlRWVVpDVTFONFZGRlZSbFJNUldSQ1VWVmpjMVJWUmtKVVUzaEVVVlZHUkV4R1JrSlJWa1Z6VWxWR1FsSlRlRVJSVlVaRVR6QnNRbEpYZUVSTVJURkNVVlV3YzFFd1JrSlJlWGhHVVZWR1JreEZUa0pSVlUxelV6QkdRbE41ZUVoUlZVWklURVpXUWxGV1ZYTlNWVVpDVWxSMFVsRlZWVE5SYVhoVVVWVkdWRTh5UmtKUk1VRnpVMVZHUWxOVGVFUlJWVVpHVEVWV1FsRlZWWE5STUVaQ1VsUjBhRkZWZEZkTVJYUkNVVlZ6YzFFd1JrSlNVM2hXVVZWR1ZreEZkRUpSVlhNM1YxVkdSR1JGU1hOVVZVWkNWRk40UkZGVlJrUk1SMDVDVVZkTmMxRXdSa0pTVTNoTVVWVkdURXhGVGtKUlZWVnpVVEJHUWxGNmRGSlJWVTV2VVhsNFJGRlZSa1JNUlU1Q1VWVlZjMUV3UmtKUmVuUlNVVlZXVFV4Rk1VSlJWVEJ6VVRCR1FsRjVlRXBSVlVaS1RFVk9RbEZWVFRkVFZVWkVXV2w0UkZGVlJrUk1SVTVDVVZWTk4xTlZSa1pTYVhoT1VWVkdUa3hGVGtKUlZVMXpWRlZHUWxSVGVFUlJWVVpHVHpGR1FsSlhVWE5OYTFKQ1VWUktSVTh4UmtKUmVrNUZURVU1UWxGVk9ITlNWVVpDVWxONFRGRlZSa3hQTVVaQ1VsZFJjMlJWVWtKUldGWkZUekZHUWxFeldrVk1SekZFVVZWR2RGRjZkRkpSVlU1MVVYbDRWRkZWUmxSTVJWWkNVVlZWYzFFd1JrSlJlblJTVVZWV1lVeERkRU5SVlVWeVVXcDBVbEZWVFhaUmFYaE1VVlZHVEV4RlZrSlJWVlZ6VmxWR1FsWlRlRXBSVlVaS1R6RnNRbEpZUWtOTVJFSkZVVlZGZDFKRWRGcFJWVTE0VWtONFJsRlZSa1pNUlU1Q1VWVk5jMUV3UmtKU1UzaEtVVlZHU2t4RmRFSlJWWE56VTFWR1FsTlRlRWhSVlVaSVRFVldRbEZWVlhOVVZVWkNWRk40UkZGVlJrUk1SazVDVVZaTmMxSXdSa0pTZVhoT1VWVkdUa3hGVGtKUlZVMXpWREJHUWxWVGVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBibEZyUmtSTk1GRnpWRlZHUWxSVGVFUlJWVVpFVHpGc1FsRXhTWE5STUVaQ1VYcDBXbEZWVmtWTVIyeEVVVlZHY0ZGNmRGcFJWVTV4VVhsNFRsRlZSazVNUlU1Q1VWVk5jMVF3UmtKVWVYaElVVlZHU0V4RmJFSlJWV3R6VVRCR1FsRjZkRnBSVlZZd1VXbDRkbEpWUmtKaU1GVTNWMVZHUkdORlZYTlNWVVpDVWxONFJGRlZSa1JNUlU1Q1VWVlZjMU5WUmtKVFUzaE1VVlZHVEV4RmJFSlJWV3R6VTFWR1FsTlRlRVpSVlVaR1RFVXhRbEZWTUhOUk1FWkNVWGw0VkZGVlJsUk1SV1JDVVZWamMxRXdSa0pTVTNoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRHNVJhMFpFVERCTmMxUlZSa0pVVTNoRVVWVkdSRTh4YkVKUk1VbHpVVEJHUWxGNmRGcFJWVlpGVEVSS1JGRlZSWGxSZW5SYVVWVk5lbEY1ZUZSUlZVWlVURVZPUWxGVlRYTldNRVpDVm5sNFJGRlZSa1pNUmtaQ1VWWkZjMUpWUmtKU1UzaEVVVlZHUmt4Rk1VSlJWVEJ6VVRCR1FsSlRlRVJSVlVaR1RFVk9RbEZWVFRkVlZVWkVUREJOYzFFd1JrSlJlblJNVVZWT1JVeEZUa0pSVlZWelVUQkdRbEY2ZEVwUlZWWkxURVV4UWxGVk1ITlJNRVpDVVhsNFRGRlZSa3hNUlU1Q1VWVk5jMU5WUmtKVFUzaElVVlZHU0V4R1RrSlJWazF6VVRCR1FsRjVlRXBSVlVaS1RFVk9RbEZWVFRkVFZVWkdZbXROYzJFd1VrSlJWM1JGVHpCc1FsRXllRVZQTVVaQ1VUQk5jMVZWUmtKVlUzaEVVVlZHUkV4SE1VTlJWVVowVVdsNFJGRlZSa1pNUjNSRFVWVkdjbEZwZUVaUlZVWkdURVpPUWxGV1RYTlJNRVpDVWxONFJGRlZSa1JQTVVaQ1VYcHNSVXhGTVVKUlZUQnpVVEJHUWxGNWVIUlJhMFpDWWxWSmMxRXdSa0pTVTNoT1VWVkdUa3hGVmtKUlZWVnpWVEJHUWxWNWVFUlJWVVpHVEVWT1FsRlZUVGRWVlVaRVlVVlJjMVJWUmtKVVUzaEVVVlZHUkV4RmRFSlJWWE56VWxWR1FsSlRlRVJSVlVaRVR6QnNRbEV5YUVOTVJVNUNVVlZOTjFOVlJrWlNRM2h5VWtWR1FtRXdVVGRUVlVaRVlrVlJjMW93VWtKUlYyUkZUekJzUWxFeWFFVk1SRkpEVVZWRk1GRnFkRXBSVlUweFVXbDRkbEpGUmtKaU1GRTNVMVZHUkdORlVYTlNWVVpDVWxONFJGRlZSa1JNUlU1Q1VWVlZjMVZWUmtKVlUzaEVVVlZHUkV4R1ZrSlJWbFZ6VXpCR1FsTjVlRlpSVlVaV1R6RkdRbEV6VWtSTVJVNUNVVlZWYzFWVlJrSlZVM2hFVVZWR1JFeEdWa0pSVmxWelV6QkdRbE41ZUZSUlZVWlVURVZzUWxGVmEzTlJNRVpDVVhsNFVsRlZSbEpNUlU1Q1VWVk5jMXBWUmtKYVUzaEVVVlZHUkV4R1JrSlJWa1Z6VVRCR1FsSjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWHAwVWxGVlZYWlNVM2Q1VWxWR1FrMXJWVGRWVlVaRVRUQlZjMVJWUmtKVVUzaEVVVlZHUkV4R1ZrSlJWbFZ6VVRCR1FsSlRlRTVSVlVaT1RFVk9RbEZWVFhOVE1FWkNVM2w0UkZGVlJrWk1SVTVDVVZWTk4xTlZSa1ppYTAxelVUQkdRbEY2ZEVwUlZVWkVURVZzUWxGVmEzTlJNRVpDVVhsNFJGRlZSa1JQTVVaQ1VsWkJjMHN3U2tKUlUzUkRUekZHUWxGNU9VTk1Sa1pDVVZaRmMxRXdSa0pSZVhodVVXdEdRbG93U1hOUk1FWkNVbE40Y2xGclJrSmhNRWx6VWxWR1FsSlRlRlJSVlVaVVRFVk9RbEZWVlhOUk1FWkNVWHAwVWxGVlZYcFNRM2g0VWtWR1FtTlZVVGRWVlVaRVkydFJjMVJWUmtKVVUzaEVVVlZHUkV4SFpFTlJWVVp1VVdsNFJGRlZSa1pNUlRGQ1VWVXdjMUpWUmtKU1UzaFVVVlZHVkV4RlRrSlJWVlZ6VVRCR1FsRjZkRXBSVlUwMVVYbDRSRkZWUmtSUE1FWkNVbFZSYzFFd1JrSlJlWGhFVVZWR1JreEZUa0pSVlUxcFRFTktiV0ZYZUd4SmFtOXBXVmhPZWxwWVVucE1NMEpvV1RKMGVrd3ljSGhrVjFaNVpWTTVlbU50VFhaWk1qbDVXbE01ZVZwWFJtdGxVelZ4WTNsSmMwbHVUblprV0VwcVdsaE9SR0l5TlRCYVZ6VXdTV3B3WWtsdFVteGFiV3gxV2xObloxY3hlSFZZU0ZKalNXazBkVXd5VG5aamJWWmpTV2w0WTJKc2VEQllRMGwxVEdrNU1sbFlTWFphUnpscVpGY3hiR0p1VW1OSmFYaGpZbXg0TUZoRFNYVk1hVGxxWWpOS2JFd3pTbXhaVjFJMVVsaG9hbHBZUWpCaFZ6bDFXRU5KYzFoSE5XTmtSbmRwVEdrMGRscEhWbTFhV0VwNVdsZFNZMGxzZUhWWVUzZG5XbTVXZFZrelVuQmlNalJ2U1Vkd1VtUlhWbmxsVTNkbldrYzVhbVJYTVd4aWJsRm5TMU5DTjFoSE5XTmliSGRwWkZoT2JFbElUakJqYld4cVpFWjNhVTh4ZUhWWVJ6UjJUSGxDVldGSFZXZGFSMVp0V2xoS2VWcFhVV2RrV0U1c1drTkNkbUpwUWtWVU1EQm5ZMjFXYUZwSWJHTmlibHBvWTJsQ2VWcFhSbXRsVlhod1l6TlJaMUJUUW5GVldGWnNZMjVyZFZKSFZtMWFXRXA1V2xkUmIwdFVkR05pYkhoMVlXeEdNVnBZU2pWTWJWcDFURzVLYkZsWFVqVkpSREJuV201V2RWa3pVbkJpTWpSdlNVZGFkVWxEYTJkbE1YaDFXRWMxWTJSSVNteFpWMUkxVkVkc2VtUkdlSFZZU0ZKalpFTTFNR0ZIVm5WTFEwSnRZbWxCY0ZoSE5XTmliSGd3V0VoUmRreDVRbGhqYlVaM1NVZHdVbVJYVm5sbFV6VjVXbGRHYTJWVlZqUlpNbFozWkVkc2RtSnBRbkJpYVVKb1NVZGFNV0p0VGpCaFZ6bDFTVWhPZGtsSVVtOVpXRkZuWkVkb2JFbEhlSFppTW5ReFkwWjRkVmhJVW1Oa1F6aDJTVWRvYUdOSVFteGliazFuV1ZoUloyUkhhR3hKU0ZKd1lsZFZaMkl5V1dkYVdFcDVZak5KWjJGSFJuVmFSM2h3WW0xaloyRlhOWHBrUjFab1drTkNkbHBwUW1wWlYzaHpXVzFHYW1FeGVIVllTRkpqWkVNNGRrbElTbXhhTW14NlpFaEthR1JIYkhaaWFUVmpZbXg0TUZoSVVYVlpNa1l3V1RKbmIwbEhXakZpYlU0d1lWYzVkVXREUW14amJrcDJZMmxCY0VsSWRHTmliSGd3V0VoU1kyUkhjRkprVjFaNVpWTTFlVnBYUm10bFZWWTBXVEpXZDJSSGJIWmlhV2RuV2xoS2VXSXpTV2RMVkhSallteDRNRmhJVWpsSlEyczNXRWMxWTJKc2VEQmpiVll3WkZoS2RVbElVbTloV0UwM1dFYzFPVTh4ZUhWWVJ6VnhWVmhXYkdOdWEzVmFXR2d3V2xjMWEwdERRamRZUnpWallteDRNRXg1T0dkVFdFMW5aRWRvYkVsRlVsQlVVMEo1V2xkR2EyVlRRakJpZVVKcFdsTkNNV015Vm10UWVVSlVXbGhSWjJSSE9HZGtTRW94V2xOQ2RtSnRUbXhKUjJ3d1NVYzVhbGt6Vm5samVUVmpZbXg0TUdGWVRsTmFWMFpyWlZSdloxcHRSbk5qTWxWeldFYzFZMkpzZURCTWVUaG5VVk5DYW1JelZuVmtSMVo1U1VoU2RrbElVbmxaVjA1eVNVZG9kbVI1UW5SWlZ6VTFTVWRzTUZwWE1YcEpTRkoyU1Voa2FHRllVV2RhYlRsNVNVZEtiRnB0T1hsYVZuaDFXRWhSZGt4NVFqQmhSMVZuWTIxV2FGcElhMmRhV0Zwc1ltNVJaMXB0YkhsYVdFMTFTVVpPYkZwVFFXcE9hbU0wVFZaNGRWaElVbmxhVjBaclpWWmthR0ZZVVRaSlJFVnpXRWMxWTJKc2VEQk1lVGhuVTBkR2RWcEhlR3hKU0dSdldsYzBaMlJIYUd4SlJWSlFWRk5DY0dONVFubGFWMFpyWlZaNGRWaElVbmxhVjBaclpWUnZaMXB1Vm5WWk0xSndZakkwYjBsSVpHaGhXRkZuUzFOQ04xaEhOV05pYkhnd1dFaFJka3g1UWtKWmJUbDVaRU5DY0ZwcFFqQmhSMVo1V2xOQ2FHTnRWV2RqUjFaMVdrZHNkVnA1UW05aU1uaHJZM2xDZG1OcFFqTmFVMlI1V2xOQ2FHSklTbXhaVjFJMVNVaEtiRmxYVWpWWVJ6VmpaRVo0TUdGWFdXZExRMEl6V1Zkc01FbEVNRGxRVTBJd1kyNVdiRWxFT0dkTVV6RnhWVmhXYkdOdWEzVmpiVlpvV2toc1dGbFhiREJKUkc5bllXeEdNVnBZU2pWTWJXeDZWVzFXYUZwSWEyZExVMEkzV0VjMVkyUkdlREJZU0ZKNVdsaFNNV050TkRkWVJ6VmpaRVo0TUdaV2VIVllSelZqWkVaNE1FeDVPR2RWYlZaMFdsY3hhVnBZU1dka1IyaG9aRU5DTUdGSFZXZFNSVGxPU1Vkc2VrbElTbXhaVjFJMVdFYzFZMlJHZURCaGJFWXhXbGhLTlV4dGJIcFZiVlpvV2tocloxQlRRakJqYmxac1R6RjRkVmhITldOa1JuZ3dUSGs0WjFOWFdXZFpVMEoxWWpOS2RGbFhkMmRTUlRsT1NVWktiRmxYVWpWSlIxWXlXbGMxTUVsSFduQmpiVlpyVEVOQ2ExcFhUbmxhVnpGc1ltNVJjMGxIUm5WYVEwSXpXVmRzTUVsSGJHMUpSelZzV2xkUloxbHRWbU5pYkhnd1dFaFNjRnBwUVc5SlNHUm9ZVmhSWjBsVU1EbEpTRko1WkZkVlowcHBXV2RNVXpGeFZWaFdiR051YTNWamJWWm9Xa2hzV0ZsWGJEQkpSRFJuVFVOQmNFbElkR05pYkhnd1dFaFNZMlJJU214a1NGWjVZbXAwWTJKc2VEQllTRkk1V0VjMVkySnNlREJZU0ZGMlRIbENTbHBwUWpCaFIxWjVXbE5DYUdOdFZXZGFibFoxV1ROU2NHSXlOWHBKUjBwMlpGYzFhMHhEUWpCaWVVSnNaVWRXYW1SWVVteFlSelZqWkVaNE1HTnRWbWhhU0d4TllWaE9NRXh1U214ak1qbHpaRzFXV0dGWVVtOUxRMEpyWWpKT01XSlhWblZrUTNkblYzbENjVlZZVm14amJtdG5XRk5CY0U4eGVIVllTRkk1V0VjMU9VbERhemRZUnpWalltMXdVbVJYVm5sbFV6VjVXbGRHYTJWVE5UQmhSMVoxU1VRd1oyTnRWbWhhU0d4TllWaE9NRXh1VW05YVZ6UTNXRWMxWTJKcE9IWkpSbEp2V2xOQ2VWcFhSbXRsVTBKc1pHMVdkV1JEUW05WlZ6VnJZa2RXZVVsSFJuVmFRMEo2V2xkNGJVbEhUbk5hVjBaMVpGaEJaMkpYVmpCaFJ6bHJXRWMxYldSWE5XcGtSMngyWW1sQ2FtSXlNWGRpUjFZd1dsZFJiMHRUUWpkWVJ6VmpaRWRTZGxrelZuUmFWelV3VEc1S2JHSlhPVEphVlZZeVdsYzFNRlJIYkhwa1IxWjFXbGhKYjBsR2QybFNSVGxPVVRJNWRXUkhWblZrUlhoMldWZFNiRnBHZDJsTVEwSnFZakl4ZDJKSFZqQmFWMUZuUzFSMFkySnNlREJrTW14MVdrYzVNMHh1U214aVZ6a3lXbFZXTWxwWE5UQlVSMng2WkVkV2RWcFlTVzlKUm5kcFlrYzVhRnBHZDJsTVEwSnFZakl4ZDJKSFZqQmFWMUZuUzFSMFkySnNlREJoYkVZeFdsaEtOVXh1U214WlYxSTFTME5yTjFoSE5UbFlSelZqWW1rNGRrbEZUbWhrUjA1dlNVZE9hR015Vm5wSlNHUnZXbGhLYkVsRFVXOWFSemxxWkZjeGJHSnVVWEJNYmtwc1dWZFNOVXREYTJkaFdFMW5XVEpHYzJKSFZtdFlSelIyVEhsQ2FGcHVVbXhqYVVJd1lVZFZaMWx1U25aa00wNXNZMmxDYkdSdFZuVmtRMEp2V1ZoTloxbFhlSGxhVjBaclpWTkNkbGt5VGpGamJrcHNXa00xWTJKcE9IWkpSazR4WTBoQ2RtTnVVVFpKUld4R1NVUjNPVTlUUVhSSlJFVjNTVWM1ZFdKSWJHTmlhVGgyU1VVNWMxcEhWbmxKUld4R1NVaE9kbUpYVmpCaFZ6RnNZM2xDZW1GWFpIVlpWM2g2U1VaM2FXRlhOVEJhV0Vwb1dUTlNjR1J0Vm1OSmFVSXdZakk0WjJNeU9YWmliSGgxWVZkWlowdERRbXRpTWs0eFlsZFdkV1JETlhsYVYwWnJaVlpPTUZsWVVteEpSREE1VUZOQ1kwbHRUblppV0VKeldsaFNiRmhEU1dkbVNIaGpZbXg0TUV0RFFtdGlNazR4WWxkV2RXUkROWGxhVjBaclpWWk9NRmxZVW14SlEwVTVVRk5DWTBsdGVIWlpWMUp3WW0xa1kwbHBRVzFLYVVGb1drYzVhbVJYTVd4aWJsRjFXa2M1YW1SWE1XeGlibEpHWWtkV2RGcFhOVEJNYlZKMlZUSk9lV0l5ZUhOSlEydG5TMU5DTjFoSE5XTmliSGd3VEhrNFoxTkhSblZhUjNoc1NVZHNNRWxIUm5wbFZ6VnFZVWhLZG1KdE9URmpNbmcxU1VoU2RrbEhSbk5pUnprelNVaE9hbU50Ykhka1NFMW5aRWRvYkVsSE9YZGpSemw1WkVoV2RXRllValZKU0ZKMlNVZFNiR0pIUmpWSlNFcHNXVmRTTlZoSE5XTmtTR1J3WW0xU2RtUjVOWHBhV0ZKVllWY3hiR0l6VmpCTFEwSnhWVmhXYkdOdWEzVmpiVlpvV2toclowdFVkR05pYkhoMVpsTkNiR0pJVG14SlNIUmpZbXg0ZFZoSVVYWk1lVUpXWXpKVloyUkhhR3hKUjJob1ltMVNOVWxIVmpKYVZ6VXdTVWRPYUdKSGVHbFpWMDV5V0VjMVkyUkhVblpaTTFaMFdsYzFNRXh0Um10YVJWWXlXbGMxTUZSSGJIcGtSMVoxV2xoSmIwbEdkMmxTUlRsT1VUSTVkV1JIVm5Wa1JYaDJXVmRTYkZwR2QybE1RMEpxWWpJeGQySkhWakJhVjFGblMxUjBZMkpzZUhWWVNGRjJUSGxDUWtsSFdtaGlSM2hwV1ZkT2NrbElVblpKU0dSd1ltMVNkbVI1TlhaaWJYaDJXVmRSYzBsSVVtOVpXRkZuWkRKc2MySkRRbWhpU0dSb1pWaE5aMlF5T1hsaE1YaDFXRWhTTTJGWE5XdGlNMk4xV1ZkU2ExSllXbXhpYmxKTllWaE9NRnBYTld4amFXZG5XRU5LYzJJeVJtdFlRMGx6U1VkT2RtSllRbk5hV0ZKc1drTkJjRTh4ZUhWbVZuaDFXRWMxT1VsRGF6ZFlSelJwV0Znd1BWeHVYRzR2THlNZ2MyOTFjbU5sVFdGd2NHbHVaMVZTVEQxa1lYUmhPbUZ3Y0d4cFkyRjBhVzl1TDJwemIyNDdZMmhoY25ObGREMTFkR1k0TzJKaGMyVTJOQ3hsZVVveVdsaEtlbUZYT1hWSmFtOTZURU5LZW1JelZubFpNbFo2U1dwd1lrbHRSbnBqTWxZd1kzazVkMWxYVG5KamVUbHhZMWhXYkdOdWEzWmpNMHBxVERKT2RtTnRWWFpqYlZab1draHJkV0Z1VFdsWVUzZHBZbTFHZEZwWVRXbFBiSFJrVEVOS2RGbFlRbmRoVnpWdVkzbEpOa2xyUmtKUlZVVnpWRlZHUWxSVGVFUlJWVVpFVHpCc1FsRXdaM05WTUVaQ1ZYcDBTbEZWVGxWTVIyeERVVlZHY0ZGcWRFcFJWVTV4VVdsNE0xRnJSa0prTUVrM1UxVkdSR1ZGU1hOWlZVWkNXVlIwUkZGVlRtOVJhWGhHVVZWR1JreEdWa0pSVmxWelZGVkdRbFJUZUVaUlZVWkdURVpHUWxGV1JUZFRWVVpFWld0SmMxZFZSa0pYVTNoRVVWVkdSRTh3YkVKUk1rbHpZVlZPUWxGWGJFUlBNR3hDVVRKd1JFeEZiRUpSVld0elZUQkdRbFY1ZUVoUlZVWklURVV4UWxGVk1ITlJNRVpDVVhsNFVsRlZSbEpNUlZaQ1VWVlZjMUV3UmtKUmVuUktVVlZPYzFGNWVFNVJWVVpPVEVWT1FsRlZUWE5TVlVaQ1VsTjRSRkZWUmtSTVJYUkNVVlZ6YzFJd1JrSlNlWGhXVVZWR1ZreEZWa0pSVlZVM1ZWVkdSRTFWU1hOVk1FWkNWWHAwYUZGVlRrdE1SV3hDVVZWcmMxRXdSa0pSZVhoR1VWVkdSa3hGVGtKUlZVMDNXVlZHUkZWcGVFeFJWVVpNVEVWT1FsRlZUWE5XVlVaQ1ZsTjRURkZWUmt4UE1XeENVVE5TUTB4Rk1VSlJWVEJ6VVRCR1FsRjVlR3BSVlVacVRFVk9RbEZWVFhOVE1FWkNVM2w0UkZGVlJrUk1SVTVDVVZWTk4xVlZSa1JoYTAxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRUZFZWVVpFVTBONFRsRlZSazVNUlU1Q1VWVk5jMU5WUmtKVFUzaEVVVlZHUkU4d2JFSlJNbWhEVEVWT1FsRlZUWE5STUVaQ1VYcDBTbEZWVGtkTVJURkNVVlV3YzFFd1JrSlJlWGhPVVZWR1RreEZUa0pSVlUwM1ZWVkdSRlpwZDNsU1JVWkNUV3RSTjFWVlJrUk5NRkZ6VkRCR1FsUjVlRVpSVlVaR1RFVjBRbEZWY3pkVlZVWkVXa040TVZKRlJrSmtWVkUzVlZWR1JHUnJVWE5pVlU1Q1VWY3hSRTh4UmtKUk1qVkVURVpPUWxGV1RYTlNWVVpDVWxONFJGRlZSa1JQTVVaQ1VURnZjMHN3U2tKUlUzUkRUekZHUWxGNU9VTk1SWFJDVVZWemMxSlZSa0pTVTNoV1VWVkdWa3hGYkVKUlZXczNWMVZHUkdGclNYTk5SVkpDVVZSQ1JVOHhiRUpSZWtaRlRFVldRbEZWVlhOUk1FWkNVWGw0UkZGVlJrUk1SV3hDVVZWcmMxTXdSa0pUZVhoS1VWVkdTa3hGWkVKUlZXTnpVbFZHUWxKVGVFNVJWVVpPVEVWT1FsRlZUWE5WTUVaQ1ZYbDRTRkZWUmtoTVJURkNVVlV3YzFFd1JrSlJlWGhRVVZWR1VFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVUekprUTFGVlRqQlNRM2hPVVZWR1RreEZUa0pSVlUwM1YxVkdSRmREZUVSUlZVWkVUekZzUWxFd1VYTmhWVTVDVVZkc1JFOHhiRUpSTW5CRVRFVXhRbEZWTUhOUk1FWkNVWGw0VUZGVlJsQk1SV1JDVVZWamMxTlZSa0pUVTNoRVVWVkdSRTh4YkVKUk0xSkRURWM1UmxGVlJuWlNWSFJhVVZWT2QxSlRlRVpSVlVaR1RFVk9RbEZWVFhOUk1FWkNVWGw0U2xGVlJrcE1SWFJDVVZWemMxTlZSa0pUVTNoS1VWVkdTa3hGVmtKUlZWVnpWRlZHUWxSVGVFUlJWVVpFVEVaT1FsRldUWE5TTUVaQ1VubDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFOHlaRU5SVlUxNFVYbDRUbEZWUms1TVJVNUNVVlZOTjFkVlJrUlhRM2hFVVZWR1JFOHhiRUpSTUZGelRXdE9RbEZVU2tSUE1XeENVWHBPUkV4R1RrSlJWazF6VVRCR1FsRjVlRmhSVlVaWVRFVk9RbEZWVFhOVlZVWkNWVk40UmxGVlJrWk1SVTVDVVZWTmMxUlZSa0pVVTNoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRGSlJWVTAxVVhsNFJGRlZSa1JQTUhSQ1VUQnZjMUV3UmtKUmVYaEVVVlZHUkU4d2JFSlJNR2R6VkZWR1FsUlRlRVJSVlVaRVRFVjBRbEZWYzNOUk1FWkNVWGw0U2xGVlJrcE1SV1JDVVZWamMxVXdSa0pWZVhoRVVWVkdSRXhGYkVKUlZXdHpVVEJHUWxGNmRFcFJWVTUxVVhsNGNsSkZSa0poTUZFM1UxVkdSR0pGVVRkVlZVWkVVMU40VWxGVlJsSk1SVTVDVVZWTmMySlZTa0pSVnpGRFRFVk9RbEZWVFhOaE1FcENVVmQwUTB4RlZrSlJWVlZ6VlRCR1FsVjVlRVJSVlVaRVRFVk9RbEZWVFRkVlZVWkVUbFZSYzFSVlJrSlVVM2hFVVZWR1JFeEhNVU5SVlVaMFVXbDRSRkZWUmtSTVJURkNVVlV3YzFKVlJrSlNVM2hVVVZWR1ZFeEZUa0pSVlUxelVUQkdRbEY2ZEZKUlZVMDFVWGw0VGxGVlJrNU1SVTVDVVZWTmMxTXdSa0pUZVhoR1VWVkdSa3hGVGtKUlZVMDNVMVZHUkdKclNYTlJNRVpDVVhwMFNsRlZUa1ZNUjNSRlVWVkdjbEpFZEVwUlZVNXpVa040YmxKRlJrSmFNRkUzVTFWR1JHRkZVWE5PUlVwQ1VWUlNRMDh3YkVKUmVsWkRURWM1UlZGVlJuWlNSSFJLVVZWT2QxSkRlRVpSVlVaR1RFVk9RbEZWVFhOUk1FWkNVWGw0VWxGVlJsSk1SVTVDVVZWTmMxWlZSa0pXVTNoTVVWVkdURXhHVmtKUlZsVTNWVlZHUkdKRlRYTlJNRVpDVVhsNFVsRlZSbEpNUlU1Q1VWVk5jMVpWUmtKV1UzaE1VVlZHVEV4R1RrSlJWazF6VTFWR1FsTlRlRVJSVlVaRVRFWkdRbEZXUlhOUk1FWkNVWGw0YkZGVlJteE1SVTVDVVZWTmMxVlZSa0pWVTNoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVHpGR1FsRjZWa1pNUkVwR1VWVkZlVkpVZEZKUlZVMTZVbE40VGxGVlJrNU1SVTVDVVZWTmMxWlZSa0pXVTNoRVVWVkdSRXhGTVVKUlZUQnpVVEJHUWxGNWVFeFJWVVpNVEVWT1FsRlZUWE5STUVaQ1VYcDBTbEZWVG5kUmVYaEVVVlZHUkU4d2JFSlJNRkZ6VTFWR1FsTlRlRVJSVlVaRVRFVk9RbEZWVFRkVlZVWkVVbWwzY2xGclJrSkxNRWszVlZWR1JFd3dTWE5WVlVaQ1ZWTjRSRkZWUmtSTVIyUkRVVlZHYmxGcGVFUlJWVVpFVEVkMFExRlZSbkpSYVhoR1VWVkdSa3hHVGtKUlZrMXpVVEJHUWxGNWVFUlJWVVpFVHpGR1FsRXpjRVZNU0VaRlVWVkdlRkpFZEZKUlZVNTVVa040VGxGVlJrNU1SVTVDVVZWTmMxb3dTa0pSVjJSRFRFVk9RbEZWVFhOVVZVWkNWRk40UmxGVlJrWk1SazVDVVZaTmMxRXdSa0pSZVhoRVVWVkdSRTh3YkVKUmVUbEVURVZPUWxGVlRUZFJWVVpFVkVONFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUkNVVlZXU1V4SVZqWlRNRVpDWkZod1RFbHBkMmxhYld4eldsTkpOa2x0Um5wak1sWXdZM2s1ZDFsWFRuSmplVGx4WTFoV2JHTnVhM1pqTTBwcVRESk9kbU50VlhaamJWWm9Xa2hyZFdGdVRXbE1RMHA2WWpOV2VWa3lWbnBSTWpsMVpFZFdkV1JEU1RaWGVVcHJXbGRhY0dKdFZXOVhNWGgxU1VOQlowbEdkMmxNYVRSMldUSTVlVnBXZDJsTVJuaDFTVU5CWjBsR2QybE1hVFIyWkcxR2VVd3lVblpaTTFaMFdsYzFNRmhEU1hOWVJ6Um5TVU5CWjFoRFNYVk1hVGxxWWpOS2JFd3pTbXhaVjFJMVVsaG9hbHBZUWpCaFZ6bDFXRU5KYzFoSE5HZEpRMEZuV0VOSmRVeHBPV3RhVjFwc1kyNUtiRnBHZDJsWVJ6VmtURU5DYldSWE5XcGtSMngyWW1sQmIyRnNSakZhV0VvMVRFTkNhMkl5VGpGaVYxWjFaRU5yWjJVeGVIVkpRMEZuU1VaM2FXUllUbXhKU0U0d1kyMXNhbVJHZDJsUE1YaDFTVU5CWjBsRE9IWkpSbEp2V2xOQ2ExcFhXbXhqYmtwc1drTkNNV015Vm10SlJ6bDFTVVZTVUZSVFFubGFWMFpyWlZaNGRVbERRV2RKU0Zwb1kybENlVnBYUm10bFZYaHdZek5SWjFCVFFuRlZXRlpzWTI1cmRWSkhWbTFhV0VwNVdsZFJiMHRVZEdOaWFVRm5TVU5DY1ZWWVZteGpibXQxV20wMGRXTnRWbWhhU0d0blVGTkNiV1JYTldwa1IyeDJZbWxCYjFwdE5IQkpTSFJqWW1sQlowbERRV2RKUTBGblkyMVdhRnBJYkUxaFdFNHdXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRWFZrUjJoc1ltbG9iV0pwYkdOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VNMWFsbFlVbXBoUTJodFpGYzFhbVJIYkhaaWFVRnZXbGhLZVdJelNYQkpTSFJqWW1sQlowbERRV2RKUTBGblNVTkJaMGxIY0ZKa1YxWjVaVk0xZVZwWFJtdGxWVlkwV1RKV2QyUkhiSFppYVdoc1kyNUtkbU5wYXpkWVJ6Um5TVU5CWjBsRFFXZEpTREJ3VHpGNGRVbERRV2RKUTBGblNVTkNlVnBZVWpGamJUUm5aRWRvY0dONmRHTmlhVUZuU1VOQ09VOHhlSFZKUTBGblNVZHdVbVJYVm5sbFV6VnNaVWhTYkdKdFVXOWxNWGgxU1VOQlowbERRV2RKUTBGMlRIbENTbU41UWpCaFIxVm5Va1U1VGtsSVNteFpWMUkxU1VoU2RrbEhTbXhKU0ZaNldsZFJMMGxHVG14a1EwSXdZbmxDTUdOdVZteEpSemwxV1RKVloyRllVV2RpTWs1cVpGaEtla3hzZUhWSlEwRm5TVU5CWjBsRFFuQmpNVXBzV1ZkU05VOXBRbTFaVjNoNldsTjRZMkpwUVdkSlEwRm5TVU5CWjB4NU9HZFJVMEpxWWpOV2RXUkhWbmxKU0ZKMlNVaFNlVmxYVG5KSlIyaDJaSGxDZEZsWE5UVkpSMnd3V2xjeGVrbElVblpKU0dSb1lWaFJaMXB0T1hsSlIwcHNXbTA1ZVZwV2VIVkpRMEZuU1VOQlowbERRWFpNZVVJd1lVZFZaMk50Vm1oYVNHdG5XbGhhYkdKdVVXZGFiV3g1V2xoTmRVbEdUbXhhVTBGcVRtcGpORTFXZUhWSlEwRm5TVU5CWjBsRFFubGFWMFpyWlZaa2FHRllVVFpKUkVWeldFYzBaMGxEUVdkSlEwRm5TVU00ZGtsRmFHaGliVkp6V2xOQ00yRkhWblZKU0ZKdldsTkNSVlF3TUdkaFdFMW5ZMjFXYUZwSWJHTmlhVUZuU1VOQlowbERRV2RqYlZab1draHJOa2xIV2pGaWJVNHdZVmM1ZFVsRGFETlpWMnd3UzFOQ04xaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRjJUSGxDUWxsdE9YbGtRMEp3V21sQ01HRkhWbmxhVTBKb1kyMVZaMk5IVm5WYVIyeDFXbmxDYjJJeWVHdGplVUoyWTJsQ00xcFRaSGxhVTBKb1lraEtiRmxYVWpWSlNFcHNXVmRTTlZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBKd1dtbEJiMlF5Um5Ca1EwRTVVRlF3WjJSSVNqRmFVMEV2U1VNd2RHRnNSakZhV0VvMVRHNUtiRmxYVWpWV01rWndaRU5CTmtsSGNGSmtWMVo1WlZNMWNHTXhTbXhaVjFJMVMxTkNOMWhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloyTnRWakJrV0VwMVR6RjRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZG1WbmgxU1VOQlowbERRV2RKUTBGblNVTkJaMHg1T0dkVmJWWjBXbGN4YVZwWVNXZGtSMmhvWkVOQ01HRkhWV2RTUlRsT1NVZHNla2xJU214WlYxSTFXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRbkZWV0Zac1kyNXJkV0ZZVGxOYVYwWnJaVk5CT1VsSVVubGtWMVUzV0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVhaTWVVSktXbWxDYUVsSE5YWmpiVEZvWWtOQ1JWUXdNR2RWYlZab1draHJaMXBZV214aWJsRm5XbTFzZVZwWFVYTkpSMUpzV1ROS2JHSlhWblZrUTNkbldWYzFhMGxJWkdoaFdGRm5ZVmRaWjJKdFZteGFRMEpwV2xaNGRVbERRV2RKUTBGblNVTkJaMGxEUVdkaFYxbG5TMGhrYUdGWVVXZEpWREE1U1VoU2VXUlhWV2RLYVZsblRGTXhjVlZZVm14amJtdDFZMjFXYUZwSWJGaFpWMnd3U1VRMFowMURhMmRsTVhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpTRXBzWkVoV2VXSnFkR05pYVVGblNVTkJaMGxEUVdkSlEwRm5TVWd4WTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUXpoMlNVVnNiVWxJVW05YVdFcHNTVWRHZVZwVFFtMWtWelZxWkVkc2RtSnVUV2RaYlRreFltMVJjMGxJVW5aSlIxWTBXbGRPTVdSSFZtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVaEtiRmxYVWpWVVIyeDZaRU0xZVZwWVRuWmlTRnBzVmpKc01HRkRhR3RpTWs0eFlsZFdkV1JEZDJkWE1uQlNaRmRXZVdWV01IQlBNWGgxU1VOQlowbERRV2RKUTBJNVdFYzBaMGxEUVdkbVUyczNXRWMwWjBsRFFXZGhiRVl4V2xoS05VeHVTbXhaVjFJMVRHNVNiMXBYTkdkUVUwSjVXbGRHYTJWVmVIQmpNMUYxWkVkb2JHSnFkR05pYVVGblNVTkJka3g1UWxWaFIxVm5ZMjFXYUZwSWEyZGFXRnBzWW01UloyRkhSblZhUjNoc1kybENhR0p0VVdkak1sWnpXbWxDYW1KSFZtaGlibFozU1VjeGJHUkhhSFphUm5oMVNVTkJaMGxIV2pGaWJVNHdZVmM1ZFVsSFRuWmlXRUp6V2xoU2JGcERaM0JKU0hSalltbEJaMGxEUVdkSlEwRm5Xa2M1YW1SWE1XeGlibEYxWTIxV2RHSXpXbXhTV0Zwc1ltNVNUV0ZZVGpCYVZ6VnNZMmxvWTBsclVsQlVWVTUyWW01U2JHSnVVazFpTWtacldsZFNZMGxwZDJkWk1qbDBZMGQ0YkdSSFZtdExWSFJqWW1sQlowbERRV2RKUTBGblpESnNkVnBIT1ROTWJrcHNZbGM1TWxwVlZqSmFWelV3VkVkc2VtUkhWblZhV0VsdldFTktjMkl5Um10WVEwbHpTVWRPZG1KWVFuTmFXRkpzV2tOck4xaEhOR2RKUTBGblNVTkJaMGxIY0ZKa1YxWjVaVk0xZVZwWFJtdGxVMmR3VHpGNGRVbERRV2RKU0RGalltbEJaMGxEUVhaTWVVSkVXVmhTYW1GRFFtcFpXRTVzWTNsQ00yRkhWbmxhVTBGclMwZFNkbGt6Vm5SYVZ6VXdTMU0xZVZwWFJtdGxVMmR3U1Vkc2VrbEhUbWhpUjNoc1drWjRkVWxEUVdkSlF6aDJTVWRHYldSSFZubEpTRkp2V2xOQ2FXTnRPVE5qTWxaNVNVZFdNbHBYTlRCSlIyaG9ZM2xDYUdKSVNteFpWMUkxU1VjNWFsa3pWbmxqYlZaclRHeDRkVWxEUVdkSlF6aDJTVVpPTVdOSVFuWmpibEUyU1VWc1JrbEVkemxQVTBGMFNVUkZkMGxIT1hWaVNHeGpZbWxCWjBsRFFYWk1lVUpRWWtkU2JHTnBRa3BTVTBKNllqSXhiR1JIYkhSYVdFMW5ZekpzYm1KdFJuTmplVUpqU1cxc2RXUkhWbmxaVjA0d1lWaGFiRmhEU1dka1J6bDJTVWhPZG1JeU5XTmlhVUZuU1VOQ2NGcHBRVzlhUnpscVpGY3hiR0p1VVhWamJWWm9Xa2hzVkdSSFJqQmFVMEU1VUZRd1oxaERTbXBpTWpGM1lrZFdNRnBXZDJsSlNIZzRXRWMwWjBsRFFXZEpRMEZuU1VOb2EySXlUakZpVjFaMVpFTTFlVnBYUm10bFZrNHdXVmhTYkVsRFJUbFFVMEpqU1cxNGRsbFhVbkJpYldSalNXbEJiVXBwUVdoYVJ6bHFaRmN4YkdKdVVYVmFSemxxWkZjeGJHSnVVa1ppUjFaMFdsYzFNRXh0VW5aVk1rNTVZako0YzB0VGEyZGxNWGgxU1VOQlowbERRV2RKUTBGMlRIbENTVmxYTld0aVIxVm5ZVmhSWjFsWVRqVmliVTV2WTIwNWRXSXpWbnBpU0d0blpFYzRaMWxYZUhOaU0yTm5ZekpPZVdGWVFqQmplVUl3WVVkVloySXpRbmRpTTBvd1pGYzFjR1JJYTJka1J6aG5Xa2RXYzFsWWEyZGpiVlpvV2toc1kySnBRV2RKUTBGblNVTkJaMlF5YkhWYVJ6a3pURzVPYkdSR1VuQmlWMVoyWkZoUmIyRnNSakZhV0VvMVRHNUtiRmxYVWpWTFZIUmpZbWxCWjBsRFFqbFlSelJuU1VOQloxcFhlSHBhVTBJM1dFYzBaMGxEUVdkSlEwRm5TVU00ZGtsR1ZucGFVMEl3WVVkVloyRkhSblZhU0d0bldsaGFiR0p1VVdkWk1rWnpZa2RLYUZreWRHTmlhVUZuU1VOQlowbERRV2RhUnpscVpGY3hiR0p1VVhWWlYxSnJVbGhhYkdKdVVrMWhXRTR3V2xjMWJHTnBhR05KYTFKUVZGVk9kbUp1VW14aWJsSk5ZakpHYTFwWFVtTkphWGRuV1RJNWRHTkhlR3hrUjFaclMxUjBZMkpwUVdkSlEwRm5TVU5CWjB4NU9HZFJVMEp0V1ZkNGMxbHRSbXBoZVVJd1lubENNMkZYTld0aU0yTjFZakkxYzJJeVJtdE1RMEl3WVVkR01FbElaSEJpUjNkbldWZDRNMWxZYkhwSlNHUjJZMjEwWTJKcFFXZEpRMEZuU1VOQloyUXliSFZhUnprelRHMUdhMXBGVmpKYVZ6VXdWRWRzZW1SSFZuVmFXRWx2V0VOS2MySXlSbXRZUTBselNVZE9kbUpZUW5OYVdGSnNXa05yTjFoSE5HZEpRMEZuWmxaNGRXWlRhemRZUnpWalltazRka2w1UW5waU0xWjVXVEpXVGxsWVFuZGhWelZ1VmxaS1RWQlhVbWhrUjBVMldWaENkMkpIYkdwWldGSndZakkwZG1GdVRuWmlhblJxWVVkR2VXTXlWakJRV0ZZd1dtcG5OMWx0Um5wYVZGa3dURWRXTlZOcVNtRlhSWEEyV1Zaak5XUlZiSEZpTTNCTlVUQndObGxxVGxkbFZtdDVWbTV3U21GdVFtbFRWekZIWlcxTmVWWnFRbXBsVkd3elYxWmtUMk50VGpWUFdFWnFWMFphYzFreU5YSmtiVTE2VTIxd1RVMXJOVEpaTWpGV1pHMU9kRlp0YUdGVFIzUXhXVmMxVG1GV2FGUmtNbXhwWWxWYU1GZHNhRTVoVlRselpFZFNUVkV3Y0RCWFZtaERaREpHV0U1WE5XcGxWV3N5VTFkMFIxRnNSbFpTV0U1VlZsVmFRMVpHVGpSU1JrWldVbXRhVUUxSGVFTlZWRVpDWXpGVmQxSnJTbFpsYmxKTFZWWldUMVpWZUVoaVJVNVNWbFZhZDFWWGNEQlRiRVpXVkc1R1VtRllaM3BWVjNSSFVXMVJkMU5VWkZSV1ZWcEZXbFZXU21NeGJGWlNhMHBhVmtoU1JWVldWazloVlhoR1ZtdEtVbFpXVm5wV2JGWkhVV3hhVkdWRk5WSldWVnBQVkVWV1YxRnNSbFpXV0U1V1ZsVmFRMVpXVWpCVGJFWldWbFJPVW1GWWFHRlZWbFpIVjJ0NFJsUnJTbEpXVlRBelZURldSMUpzYkhCbFNFSlNUVVZhUTFsV1ZrNU9NVTVXVW10U2FHRXdNWHBWTVZaSFVXeE9WR1ZHVWxKV1ZWcFZWRVZXYTFGc1JsWlpNMDVWVmxWYVExWkdUalJTUmtaV1VtdFNUVkpyV2tOVlZscEdZekZLVmxKclNsTlZNMmhGVlZaV1IxSkZPSGRpUlVwVFZqTm9SVlJGVlhoUmJFWldUVWhPVWsxRldrTlZXR3cwVW14R1ZsSnJXazFTVlRWRFZWWldUbU14VFhkU2EwcFVaVmhvU1ZWV1ZrZFRSWGhIVm10S1VsWnNWbnBWYkZaSFVXeEtWV1JHU2xKV1ZsVjZWVmRzTkZaR1JsWlNiRkpRVFd0YVExVlVSa0pqTVU1V1VtdEtWRlV6YUVWVlZsWkhVbXQ0UmxaclNsSldWbFo2VlZSQ1IxRnNTbFZrUjJoU1ZsaFNXRlJGVmpCUmJFWldZek5PVWsxRldrTlZiRTQwVm14R1ZsSnNXazFTV0ZKRFZWWldlazR4WkZaU2ExSnJVbFZzZWxaR1ZrZFJiRkpVWlVWU1VsWlZXa1ZVUldSUFVXeEdXRlJZVGxKTlJWcERWV3hPTkZSR1JsWlNhM2hOVWxVMVExVldWbFpqTVVWM1VtdEtVbVZ1VWxOVlZsWlBZakZHTldWRlVsSldWVnBGVkVWV1QxRnNSbFpXV0U1U1RVVmFRMVZZY0RCVmJFWldWbXN4VFZKVVJrTlZWbFYzWXpGRmQxSnJTbEpsV0doTFZWWldSMU5yZUVaVWEwcFNWbFV3TTFVeFZrZFNSbXh3WlVWU1VsWlZXa1ZVUlZaUFVXeEdWbFJVWkZSV1ZWcEhWVzFzTkZSc1JsWlNhelZOVWxVMVExVldWazVqTVZKV1VtdEtWVlV6YUVWVlZsWkhVbXM0ZUZKclNsTldNVVo2VkZkMFUxRnNSbFZUYTFaUVRWVmFRMVZZY0U5U1ZYaEdUMVZLVWxaVWFIcFZiRlpIVVd4S1ZHVkZlRkpXVlZwTlZIcEdSMUZzU2xoVldFNXJWbFpLUTFWV2FGZFNWVGg0VW10S1VrMHhjRVpVUldONFVrWkdWbEp1VWxKbGJsSlRWVlpXVDJSV1JqVmxSbEpTVmxWYVZWUkZWbGRSYkVaV1ZsaE9VazFGV2tOVldIQXdWV3hHVmxadFJrMVJNMUpFVlZaV1JtTnNSbkZrUmtwU1ZsVXhNbFZYYkRSVVJrWldVbXQ0VFZKV1drTlZWbFpXWXpGYVZsSnJTbGRWTTJoTFZWWldSMU5yT0hoaVJVcFRWMFZLUkZSRlVrTlNWa1pXVWxoa1UxSklVbUZWVmxaT1pVWktSR1ZGV2xKV1ZWcEhWRVZXVDFGc1JsWlVXRTVTVFVWYVExVnNUalJUYkVaV1VtdHdUVkpZVWtOVlZsWjZZekZPVmxKclNsUlZNMmhKVlZaV1IxTkZlRVpXYTBwU1ZsWldlbFpHVmtkUmJGSlVaVVZTVWxaVldrVlVSVnBQVVd4R1YxUllUbE5OUlZwRFZXNXNORlJzUmxaU2F6Vk5VbFUxUTFWV1ZrNWpNVkYzVW10S1ZsVXphRVZWVmxaSFVrVjRSbFJyU2xKV1ZURjZWVlJDUjFGc1JqWmtSelZTWVRCYVJWUlVRbEpqTVZKV1VtdEtWVlV6YUVWVlZsWkhVa1U0ZUdKRlNsSk5WV3g2VlZSQ1IxRnNSalprUm5CU1ZsWmFSbFJGWkhOU1JrWldVbTVDVW1WdVVtRlZWbFpQWTFaR05XVkZOVkpXVlZwUFZFVldUMUZzUmxaVVdFNVZUVVZhUTFaSWJEUlRSa1pXVW10b1RWSlhlRU5WVmxaeVl6RkZkMUpyU2xKbGJsSmhWVlpXVjAxR1JuQmxTRnBUVmxWYVExbHFRbFpPTVdSV1VtdFNhbEpXVm5wVmJGWkhVV3hLVkdWRlVsSldWVnBGVkVWV1QxRnNSbFpXV0U1VVZsVmFRMVV4VGpSVVJrWldVbXQ0VFZKWGVFTlZWbFp5WXpGT1ZsSnJTbFJWTTJoSFZWWldSMUpyZUVaTlZVcFNWbFJDZWxWVVFrZFJiRVkxWlVaU1VsWlZXbFZVUlZaclVXeEdWbGt6VGxKTlJWcERWV3hPTkZKR1JsWlNhMUpOVWxVMVExVldWazVqTVVWM1VtdEtVbVZ1VW5WVlYzUkhVa1YzZDFSWVRsVldWVnBEVmtaT05GSkdSbFpTYTFKUVRWZDRRMVZVUmtwak1VVjNVbXRLVW1WdVVtRlZWbFpYVWxWNFJWTnJVbEpXVlZZMVZWaHdNRmRzUmxaVVdIQlNaVmhvVlZWV1ZrZFdSWGhHVkd0S1VsWlZNWHBXYWtKSFVXeGFOV1ZGVWxKV1ZWcEhWRVZhUjFGc1JsZFNXRTVUVmxWYVExVnNUalJTUmtaV1VtdGFUVkpVUmtOVlZsVjNZekZGZDFKclNsTlZNMmhGVlZaV1IxSnJlRVpVYTBwU1ZsVXdNMVpXVmtkU1JYZDNWRmhPVWsxRldrTlZXSEF3VkVaR1ZsUnJWazFTVlRWRFZWWldWbU14UlhkU2EwcFNaVzVTUzFWV1ZsZFRNSGhHVFZWS1VsWlVRbnBWVkVKSFVXeEdOV1ZGZUZKV1ZWcE5WRVZXVDFGc1JsWlVXRTVVVmxWYVExVXhUalJUUmtaV1VtdG9UVkpyTlVOVlZscE9ZekZGZDFKclNsSmxXR2hMVlZaV1IxTnJlRVpVYTBwU1ZsVXdNMVV4VmtkU2JVcHlWRmhPYUUxR1NrTlZWbVF3VWxVNGQySkZTbEpOYm1oR1ZIcEdSMUZzUlhkVVdFNVdWbFZhUTFaV1RqUlNSa1pXVW10U1RWSjZSa1JWVmxaSFpFWkdjR1ZGVWxKV1ZWcEhWRVZrTUZFeFJsWlNia3BTWVZob1IxVldWa2RTYTNoSFZHdEtVbFpyTVhwVlZFSkhVV3hLVkdWRlVsSldWVnBGVkhwR1IxRnNSalppUlZaTlVsUkdRMVZXVlhkak1VVjNVbXRLVW1WWWFEQlZWM1JIVVcxS1ZsTllUbEpOUlZwRFZXeE9ORlJzUmxaU2F6Vk5VbFphUTFWV1ZsWmpNVlYzVW10S1ZtVllhRVZWVmxaSFVtdDRSbFJyU2xKV1ZUQXpWbFpXUjFKSFJrWlZXRTVWVmxWYVExWkdUalJTUmtaV1VtdFNUVkpZVWtOVlZsWjZZekZLVmxKclNsTlZNMmhGVlZaV1IxSkZPSGRpUlVwU1RXMW9SRlJGVms5UmJFWldWRlJrVkZaVldrZFZhMDQwWTJ4S1JsSnJTbWhOUmtVelZURldSMUpIU2taVldFNWhUVVpLUTFWV1pHdFNWVGgzWWtWS1VrMXRhRVpVUlZKVFVURkdWbEpVUWxKaGJsSkxWVlpXVGsxV1JuQmxTRnBUVWxWYVExbHFRbEpPTVU1V1VtdFNhbEpXUm5wVmJGWkhVV3hLVkdWRlVsSldWVnBGVkVWV1QxRnNSbFpXV0U1V1ZsVmFRMVpXVGpSU1JrWldVbXRTVFZKc1drTlZWbHBXWXpGTmQxSnJTbFJsV0doWFZWWldSMVpyT0hoU2EwcFNUVEZLUlZSRlZrOVJiRVpXVmxoT1ZsWlZXa05XVms0MFVrWkdWbEpyVWsxU2JGcERWVlphVm1NeFRYZFNhMHBVWlZob1ZWVldWa2RXUlhoR1lrVktVbFpYZEhwVlZFSkhVV3hHTldWR1NsSldWVnBUVkVWV1QxRnNSbFpVV0U1aFZsVmFRMWRzVGpSU1JrWldVbXRTVFZKcldrTlZWbHBHWXpGRmQxSnJTbE5sV0doRlZWWldSMUpGZUVaVWEwcFNWbFV4ZWxWVVFrZFJiRVkyWkVaS1VsWldWakpWYkU0elpWWktWbEpyU2s1aE1WVXpWbFpXUjFKRk1IZFdXRTVWVmxWYVExWkdUalJTUmtaV1VtdFNUVkpzV2tOVlZscFdZekZGZDFKclNsTlZNMmhQVlZaV1IxUnJlRVpVYTBwU1ZsVXhlbFY2UWtkUmJFNDFaVVZTVWxaVldrZFVSVlpQVVd4R1ZsUlVaRlJXVlZwSFdXMTBUbU14UlhkU2EwcFNaVzVTUzFWV1ZrZFNSWGhHWWtWS1VsWlhkSHBWVkVKSFVXeEdOV1ZGVWxKV1ZWcEZWSHBHUjFGc1NsZFJXRTVNVFVWd1ExVldUakJSTURoNFVtdEtVbVZVYkVSVVJWcEhVV3hHVjFKWVRsSk5SVnBEVlZoc05HSnNSbkpTYTBwaFRVVnNlbFZVUWtkUmJFcFVaVWhLVW1Fd1drTlpWRUpLWXpGS1ZsSnJTbE5WTTJoVlZWWldSMVpGZUVaVWEwcFNWbFpXZWxWVVFrZFJiRVkyWkVaS1VsWldWalpWYTA0MFpVWktSbEpyU21wV1ZrVXpWbFpXUjFKSFRuSlZXRTVWVmxWYVExWkdUalJTUmtaV1VtdFNUVkl5VWtSVlZsWkhZbXhHY0dWRlVsSldWVnBIVkVWVmVGRnNSbFpOU0U1VFZsVmFRMVZzVGpSV1JrWldVbXhTVFZKVk5VTlZWbFpXWXpGRmQxSnJTbEpsYmxKTFZWWldUazVXUmpWbFJWSlNWbFZhUlZSNlFrZFJiRXBXVlZoT1VrMUZXa05WV0d3MFVrWkdWbEpyV2sxU1ZUVkRWVlpXVG1GVmVFUlRiVEZvVmpOb2MxTlhjSFpoVm14WlZHNXdZVmRHU2paVVJFNURZVVpyZVdSSWNFMU5ia0kwV2taa1YyVlhWbFJQV0hCcVlsVXhNbGRVU1RWbFZuQlVUMWhzWVZZd1duSmFWazB4WTFkT05WTllUa3BpYXpVeVdrWm9TMkZzY0ZsVWExSnBUV3BWZDFkc1l6Rk5SV3h4WTBkS1NtSldTbk5YYlRGelpGWndWRm95WkZoTldHZ3hWMFZvVTFrd2JIQk9TRlpOVFdzMU1sa3lNVmRaTUd4d1pVZE9hV0pJWjNkWFJVNUtaRlY0Y0U5VVNscFhSV3d5VjJ0ak5XRnRVbGhOVjNocFlteEthbE5YYkRSWk1rcHpaVVJDV1ZFd2JERlVSMnMxWVcxSmVsTnRlRTFOTUhCelYxWmtVMDVXU2xsaFIzQmhWMFZKZDFsV1l6VmtWbWhFVTFoT1dWSjZWbXBhUlZvellWVjRjRTVJV21GU01WcDBWMnhvUzJWV2NGaFZiVTVLWWtob01WZEdUak5hTVhCMVZtNVdXazB4U25kWmFra3dZakJzU0dOR1NtdFdNVm8xV2xaT00xb3hjRWhQVjNCclZucEdjMWx0TlZKYU1IUlVVV3BrV1ZKNlZtcFpiWGd6WVZkU1dWUnRlRXBUUlRSM1dUSXhjMkZ0VWtka01teFFUVmhvTVZkRll6QmthM2cxVVd4V2FGSXhWbTVYYTJSWFlsWndXVk51YkdGV01VWnVXa1pvVDJKR2NFUlJibHBwWVZWS1JsWkVRWGRhTWs1MFZtMW9ZVk5IZUdwWmJUVmhZVWRPY0ZGdWJHRldNRnB5V2xaV05HTkhUWHBWVjJSUlZUQktlRlpXYUZkaVIwNTFZVE5XVTFJeFduUlhiR2hMWlZad1dGVlhPVXhXU0ZKcVdXMTROR1JYUm5OU2FrWmhWMFZ2TVZSSE1XRmtWWGgxVTIxNFdsWXhTVEZUVlZGM1dqRndkVlp1VmxwTk1VcDNXV3BKTUdJd2JFaFhibFpLVVRKMGJscFVSalJrVm1oSVRsZE9hMU5GY0hOWFZtUlRUbFpTU0dKSWNHdFNibWd4VjBWb1Uxa3lVa1JPVkVKb1VqRmFNVk13VGtOaVYwcHdVVmhDV1ZKNlZtcFpiWGcwVFVab1NWVllXazFsVlVwWldUSXhSMlF3YkVoalJrcHJWakZhTlZwV1RURmxWbkJZVW0xMGJGWldXVEJYVkVwWFpESlNTR0pJV21saFZVcDNXVzFzUTJGRmJFaFhha1pwWWxVMGQxbFdZelZrVld4SlZHNWFTbE5HU25aWFZtaFNXakpTU0dGSGVFcFNNMmd5V1dwS01FMVhUa2RsU0ZaWlUwWkthbHBGVFRSa2EyeElZVWRvYWxORlNuTlpiVFZPV2pGc1dWVlhaR3RTTW1oelUxVm9VMk5IU2xoV1YyUnBUV3hzYmxkc2FFdGxWMGw2VTFka2FGSXdXakZYYTJRMFkwZEtkRmt5WkdoV2VsWTJXa1ZrVjJGR2NFUlJibHBoWVZWS2NWZFdaRFJqTVd4MFVtMXdhRTFZYURGWFJXaFRXVEpTUkU5SVdrcFRSWEJ6VjJwS2MyVnRVa2xUYldoclVqSjRNbGx0YXpGWk1rcHpaVVJDV1ZOR1JqRlhWRXBIVFVacmVWb3lPVXBTTVc5NFdXMHhUMDFIUmxoUFdGWk1VVEJLYzFreU5VdGtiVTV3VVZoQ1NsTklVbXBaYlhnMFRVWm9TVlZ0VG10U00wSlRXa1prVjJWWFZsUk9XR3hoVmpCYWNscFdWbGRPUm10NVZtNWthMUl5ZURKWmJXeHVXakZ3V1ZOdWJHbE5NR3h1VXpGU01Ga3lTbk5sUkVKWlUwWkpOVk5WVG5KT01XaElUbGRPYVdKSVozZFpNakZYVFVkU1dWTnVWa3BUUmtwMldWWm9UazR4YUVoT1ZHeFFUVmhvTVZkRll6RmpWbFpaVm0xNGFtSnRkREZYYkdodlRVWndXRTVYZEV4Uk1Fa3pWMFZqTVZreVNuTmxSRUpOWlZSb2JsVXhhRTVhTWxKSVlVZDRTbEpXU2xGV1JrNURaVlp3V0ZKdGRHeFZNRWwzV1c1c1EyRldjRlJSYWtacVRXeGFjbFZJYkVOV1JuQlpWVmRrYTFKNmFHNWFSV2hMVFZad1ZGRnVXbWxpVlRWelUxVmtjMDFGYkVoUFYzQmFUVEZhTlZremF6RlpNa3B6WlVSQ2FGZEZOVlJYYkdSSFlUSldWV0l5WkdGaVZWcDZXWHBLVm1NeGFFaE9WMDVwWWtobmQxUklhelJhTVVaVVVXMXdhVTB4V2pGYVJXUlhaVlZzU1ZWdVdrcFRSa28xVjFaa1QyTnJiRWhoU0ZwclpWVktNRmRXWXpGT1ZXeElZa1JDWVZaNlJqWlRWV2hUWkd0c1NWcEhhR2hYUmtadVYyMHdOV1ZWYkVoVGJYaGhZbFJzTlZkc1dqUmtWbWhKVlZoYVRXVlZTWGRaVldSV1dqSk9kRlp0YUdGVFIzUnVWMnhvWVdKSFNuVlZWMlJoWWxkNE5WZHNhRTVrVld4SFZHMTRZVlV3Um5GVWJYQnFUa1V4VjJWSVZsbFRSa28xVjJ4a1IyRXlWbGRhUjJob1YwWkZNbE5WVWtaak1XaElUbGRPYVdKSVozZFVTR3MwV2pGT1NGSnVWbUZTTTJoelUxVm9hMkl4Y0ZoT1IyUnJVakpvYzFOVlZsTlZSbEpVVVc1Q2FtVlZTalZYYkdSSFlUSldWMlZJVmxsVFJrbzFWMnhrUjJFeVZsVmlNbVJoWW14YU1WZFVUbE5qUjBsNVRrYzVTbE5IVW05WlZtaFNXakIwVkZGcVpGbFNlbFpxV1cxNE5FMUdhRWxWV0ZwTlpWVktRMWRYTURWbFYxSkVVVzVDWVdGVlNYZFpWV1JYWlZad1ZGRnRhR3BpVmxadVdUQmtWMlJXY0VoaVNGWmhaVlZLZGxscVNqUmhNazQxVVc1YWFtRlZTWHBYYkU1clpWWndWRkZ0YUdsVFJYQnpWMVprVTA1VmJFbFRiWGhhVmpGSk1WZEZZekZaTWxKSFpVUkNhRll4Ykc1VE1FNURUVEZzV0dKRVFrcFNSRUUxVlVaT1EwMUhUblZXYlhoS1VrUm9ibFJHVFhoalZsWlpWbTE0YW1KdGRERlpNakZYWVVad1NXSkdhRnBXTW5kM1UxVlNkbG95Um5OU2FrWmhWMFZ2TVZSSE1YTmxiRlowVm0xb1lWTkhkRzVUTVU1RFRqRm9TRTVYVG10U2JtZDNWMFZvVTJWV2NGbFZha1pxWWxSUk0xZEZZekZaTWxKSFpVUkNiVlp1YURGWFJXTXhXVEpTUjJWRVFrMWxWR2h1VmxjeFYyUkdjRmhOVjJ4aFYwVnNibHBGWkc5aFIxSkVVV3BDYUZJeFZtNVZhMVUxVkd0c1NHSkljRXBUUlhCelYxWmtVMDVXYUVoT1YwNXJVbTVuZDFsWGVFZE5WbkJaVTJwV1RXSlhlRFpXVnpGWFlVWndTV0V5WkZGVk1FbDNXVEkxVjJKRk9IaGxTRlpaVW5wV2FscEZXalJOUlhnMVQwZGtWRll4Ykc1WFZrNURaRmRKZWxOdVVscFdNMlJ1Vld0Vk5WUnJiRWRUYlhoYVZqRkpNVk5WWkZkTmJIQllUbFJDU2xJeGNIZFpNakZYWVRCNFJGRnRkR0ZXTURVMVYyeGplR0pIU25WVldFNUtVakJhTVZkclRrTk5NV3hZWWtSQ1NsSXllSFJUVldNeFlrWndXRlZYWkZwaVZscHFXVzE0TkUxR2FFbFZia0poWVZWR2RsTlZhR3RoUjBaWlZWZGtTbFpFUVRWVFZXaFRaVmRTV0ZaWFpFdGhWbXh1VkVaTmVHTldWbGxXYlhocVltMTBNVmt5TVZkaFJuQkpZa1pvV2xZeWQzZFRWVkV3V2pBeFJGRllRa3BUU0ZKcVdXMTRORTFHYUVsVmJVNXJVMFZ3YzFwRmFGZGxWMHB4WkVkT2FXSklaM2RYUldoVFQxWm9TRTVYVG1saVNHZDNWMFZvVW1ScmVEVlJhM0JoWVZWSmQxbFZaRmRsVm5CVVVXMW9hbUpXVm01WGJUVlhaRlpyZWxWdVFtbE5hbFkyVTFWa1MyUnRVbGhPVjNSTlVUQkpkMWx1YkVOaVIxWklWbTF3YTFkR1NuTlhSV014V1RKU1IyVkVRbXBpVmxwdlYydG9jMVJYUmxsVWFrSk5ZbXR3YzFsNlNUVmpNbEowVm14b2FGZEdTblpUTUU1RFlUSkplVlJxUm1sV01Wb3hXa1ZPTTFveFpEVlJia1pXVjBaYWMxa3lOWEphTVdoVVVWaENVRTFZYURGWFJXaFRUMVpvU0U1VWJFcFJNbk16VjBWak1Wa3lTblJqUmtwclZqRmFOVnBXVFRGbFZuQllVbTEwYkZWNlZYZFpWV1JYWkZWc1JVMUhaR3BpVmxwdlYydG9jMVJYUmxsVWFrSk5ZbXhLZGxkc1l6Qk9NV2hJVGxkT2FXRlVhREpUVlZwVFlqRndWRkZ1YkdGV01GcHlXbFpPUTJKSFVuUldibFpyVVRCS2RsZFdZekZoTWtwSVZtNXNTbEl3V2pGWGEwNURaV3h3V0dWSE1VcFNNRFY2VjJ4a1IyUlhVbGxSVjJScFZqRlpkMWxWWXpWaE1XaElUbGN4YTFaNlZuRmFSV1J6WkcxS2NGRnRjR2xOYWtZeldXdGtWMDFHY0ZoVlZ6bE1WVEJKTTFkRll6RlpNbEpJVlc1YVdrMHhXakJYYkdNeFRVVjRkVk50ZUdsV2VtdDVWMnhXVjAxc2NGaE9WRUpWVWpKNE5scEZaRmRrVm5CWlUxYzVTbEp1WkhCVmExVTFWR3hGZVU5WVZtdFNNVm94V2tWV05HUnNiRmhWYlhoaFVtNWtjRlJGVGtOaGJVbDVUVmhrYVZJeFdYZFhiR1JTV2pCMFZXUkhUbWxpU0dkM1drUktjMlJXY0VoUFZFNU5ZbXR3YzFsc1l6Vk5iSEJXVm1wS1lWWjZWWGRXUldSelpXMVNTRlp1Vm1GWFJXeDJVMVZhTTJGWFNraFBWMmhoVW01a2NGUkZUa05oYlVsNVRWaGthVkl4V1hkWGJHUlNXakIwVldSSFRtbGlTR2QzV1ZkNFIwMVdjRmxUYWxaTlltdHdjMWRXWkZOT1ZYUkVZWHBrV1ZKNlZUVlhSV014V1RKS2NFOUlXa3BTVlRWdldrVmtUMkl3YkVoVWJXaHFUV3hhTmxOVmFHdGlNWEJaVTIxNFNsRXhSblpYYTJNMVlXMVNXRTFYZUdsaWJFWjNWRWMxUzJKR2JGaFZhbFpNVVRKMGJsbFdhRTVhTVd0NVVtNU9hVkl4V25KWFJXTXdaR3Q0TlZGdGFHRmliRXB6V1RKc1EwMUhSa2hXVjJSYVltdHdNbHBFVGs5aVIwNXdVVzE0YTJKV1dqRmFSVTVEWWpGc1dWUlhaRnBXTTJnMVYyeGtSMkV5VmxSUmJscGFUV3MwZUZreU5VdGlSbkJFVGxkT2FXRlVhREpUVlZwUFRWZE9TVkZ1V21waWJFVXlVMVZXYzFKcmJFVmtlbXhRVlRCR01GTlZVa1prTUd4SVQxaFdhVk5IZUdwWmJXczBaR3RzUms5WVRtRlNNVm8xVTFWV2MxSnJiRWxVYmxwcFZqRlpkMWxXWTNoaVIwNDFVVzV3YUZZeVVqRlhWbVEwWld0c1IyUXliR2hXZWxWM1YyeG9TMkZHYTNwVmJrSnJZbFphYWxOWGJFTk5SMGw1VDBka2FrMXFiREpaYlhnMFpGZEdXRmRYWkV4Uk1FcHlXV3BLVDAxWFNsaFdibFpyVVhwV05WZHNaRWRoTWxaWFZHcENXbGRHU25OVFZWRjNUMVpDVkZGdFRrcGlWVFV5V1d4b1EyTXhjRmxWYlhoWlVUQnNibHByYURSWk1rcHpaVVJDVEZFd1NuSlpha3BQVFZkS1dGWnVWbXRSZWxZMVYyeGtSMkV5VmxkVWFrSmFWMFpLYzFOVlRrWlBWa0pVVVcxT1NtSllhREpYVm1SVFkwZEtkRnBIVGtwaFZVWjBVMjFzUW1GR2NFaFBWM0JyVm5wR2MxbHROVkprVm5CSVQxZHdhMVo2Um5OWmJUVlRVbTFLU0ZadVVtRldlbFYzVkVjeFUyUnNWWGxVYm14cFRXNW9lbE5WVG5KYU1IUlVVV3BrV1ZKNlZtcFpiWGcwVFVWNE5VOUhaRlJTTUZveFYydGtOR0pGYkVoaVJFSktVakJhTmxwV1l6RmhiVVpKVTI1YWFXSlVhM2haZWtvMFRsVnNTVlZ1V2twU01GcDZXV3RqTlUwd2JFbFViWEJxWWxkNE0xcEZhRTVhTWxKSVlVZDRTbEo2YkROWk1HTTFaVmRTU1ZadVZtaFhSa2t4VTFWb1UyUnJiRWhWYlhocFVqQlpNVk5WYUV0aVJteFlWV3BXV1ZKNlZtcGFSV2hyWTBkS2RGVnVXbXRsVkZZMlYyeG9VMVpYUmxoTlYzaHBUVEZaZDFNd1RrTmpWbFpaVm0xNGFtSnRkREZaTWpGWFlVWndTV0V5WkV4V1NGSnFXVzE0TkdSWFdsUlJiWGhwVTBVMWMxTlZhREJaTWtwelpVaFdXVk5HUmpKVVNHeERWbTFOZVZaWFpHdFNNbWh6VTFWa2IyRkhTblJWYWxaS1VqRlplVmRzWXpGTlJXeElWRzFvYVZJemFIQlhWbVJQWTJ4b1NFNVhUbXRTTVVveVYxUk9WMlJHY0ZoT1ZFSk5ZbFZhY2xkclZsZE5iSEJZVGxSQ1ZWSXllRFphUldSWFpGWndXVk5YT1VwU2JtUndWV3RWTlZSc1JYbFBXRlpyVWpGYU1WcEZWalJrYkd4WVZXMTRZVkp1WkhCVVJVNURZVzFKZVUxWVpHbFNNVmwzVjJ4a1Vsb3dkRlZrUjA1cFlraG9NVmRGYUZKa2EzZzFVV3RLU2xJeGNHOVphMlEwWVZac1dGUnVTa3BUUmtveVUxVm9hMk5IU25SVmJscHJaVlJXTWxsdE1UUmtiR3hZVlZoT1NsTkdTblpYVm1oU1dqSlJlV0pJVG1sUk1FcHZXV3RvYTJGSFZsbFVWMlJyVFdwc05WbFVSalJrVm1oSlZXcE9hRlo2Vm5KWmFrNXFaRlpzV0ZWdGRGTlhSbkJ6V1cwMVUxUlhSbGxVYWtKaFZucFdjMWt5Ykc1YU1XaEVVMjVPYVUxclduSlhSVTVLWXpCc1NGUnVXbWxYUlVwNlYyeG9VMkpHY0VSUldFSlFUVmhvTVZwc1dqUmtWbWhJVGxSc1NsRXljek5YUldNd1lWWm9XVTFFTVdOaWFVcGtabEU5UFZ4dUlsMTlcbiJdfQ==
