define([
    "../core",
    "../var/document",
    "../data/var/dataPriv",
    "../data/var/acceptData",
    "../var/hasOwn",
    "../event"
], function (jQuery, document, dataPriv, acceptData, hasOwn) {
    "use strict";
    var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;
    jQuery.extend(jQuery.event, {
        trigger: function (event, data, elem, onlyHandlers) {
            var i, cur, tmp, bubbleType, ontype, handle, special, eventPath = [elem || document], type = hasOwn.call(event, "type") ? event.type : event, namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
            cur = tmp = elem = elem || document;
            // Don't do events on text and comment nodes
            if (elem.nodeType === 3 || elem.nodeType === 8) {
                return;
            }
            // focus/blur morphs to focusin/out; ensure we're not firing them right now
            if (rfocusMorph.test(type + jQuery.event.triggered)) {
                return;
            }
            if (type.indexOf(".") > -1) {
                // Namespaced trigger; create a regexp to match event type in handle()
                namespaces = type.split(".");
                type = namespaces.shift();
                namespaces.sort();
            }
            ontype = type.indexOf(":") < 0 && "on" + type;
            // Caller can pass in a jQuery.Event object, Object, or just an event type string
            event = event[jQuery.expando] ?
                event :
                new jQuery.Event(type, typeof event === "object" && event);
            // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join(".");
            event.rnamespace = event.namespace ?
                new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") :
                null;
            // Clean up the event in case it is being reused
            event.result = undefined;
            if (!event.target) {
                event.target = elem;
            }
            // Clone any incoming data and prepend the event, creating the handler arg list
            data = data == null ?
                [event] :
                jQuery.makeArray(data, [event]);
            // Allow special events to draw outside the lines
            special = jQuery.event.special[type] || {};
            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
                return;
            }
            // Determine event propagation path in advance, per W3C events spec (#9951)
            // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
            if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
                bubbleType = special.delegateType || type;
                if (!rfocusMorph.test(bubbleType + type)) {
                    cur = cur.parentNode;
                }
                for (; cur; cur = cur.parentNode) {
                    eventPath.push(cur);
                    tmp = cur;
                }
                // Only add window if we got to document (e.g., not plain obj or detached DOM)
                if (tmp === (elem.ownerDocument || document)) {
                    eventPath.push(tmp.defaultView || tmp.parentWindow || window);
                }
            }
            // Fire handlers on the event path
            i = 0;
            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
                event.type = i > 1 ?
                    bubbleType :
                    special.bindType || type;
                // jQuery handler
                handle = (dataPriv.get(cur, "events") || {})[event.type] &&
                    dataPriv.get(cur, "handle");
                if (handle) {
                    handle.apply(cur, data);
                }
                // Native handler
                handle = ontype && cur[ontype];
                if (handle && handle.apply && acceptData(cur)) {
                    event.result = handle.apply(cur, data);
                    if (event.result === false) {
                        event.preventDefault();
                    }
                }
            }
            event.type = type;
            // If nobody prevented the default action, do it now
            if (!onlyHandlers && !event.isDefaultPrevented()) {
                if ((!special._default ||
                    special._default.apply(eventPath.pop(), data) === false) &&
                    acceptData(elem)) {
                    // Call a native DOM method on the target with the same name as the event.
                    // Don't do default actions on window, that's where global variables be (#6170)
                    if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {
                        // Don't re-trigger an onFOO event when we call its FOO() method
                        tmp = elem[ontype];
                        if (tmp) {
                            elem[ontype] = null;
                        }
                        // Prevent re-triggering of the same event, since we already bubbled it above
                        jQuery.event.triggered = type;
                        elem[type]();
                        jQuery.event.triggered = undefined;
                        if (tmp) {
                            elem[ontype] = tmp;
                        }
                    }
                }
            }
            return event.result;
        },
        // Piggyback on a donor event to simulate a different one
        // Used only for `focus(in | out)` events
        simulate: function (type, elem, event) {
            var e = jQuery.extend(new jQuery.Event(), event, {
                type: type,
                isSimulated: true
            });
            jQuery.event.trigger(e, null, elem);
        }
    });
    jQuery.fn.extend({
        trigger: function (type, data) {
            return this.each(function () {
                jQuery.event.trigger(type, data, this);
            });
        },
        triggerHandler: function (type, data) {
            var elem = this[0];
            if (elem) {
                return jQuery.event.trigger(type, data, elem, true);
            }
        }
    });
    return jQuery;
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
//# sourceMappingURL=data:application/json;charset=utf8;base64,
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL2V2ZW50L3RyaWdnZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDO0lBQ0gsU0FBUztJQUNULGlCQUFpQjtJQUNqQixzQkFBc0I7SUFDdEIsd0JBQXdCO0lBQ3hCLGVBQWU7SUFDZixVQUFVO0NBQ2IsRUFBRSxVQUFVLE1BQU0sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxNQUFNO0lBQ3ZELFlBQVksQ0FBQztJQUNiLElBQUksV0FBVyxHQUFHLGlDQUFpQyxDQUFDO0lBQ3BELE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRTtRQUN4QixPQUFPLEVBQUUsVUFBVSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxZQUFZO1lBQzlDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFNBQVMsR0FBRyxDQUFDLElBQUksSUFBSSxRQUFRLENBQUMsRUFBRSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksR0FBRyxLQUFLLEVBQUUsVUFBVSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUM3TixHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxJQUFJLElBQUksUUFBUSxDQUFDO1lBQ3BDLDRDQUE0QztZQUM1QyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzdDLE1BQU0sQ0FBQztZQUNYLENBQUM7WUFDRCwyRUFBMkU7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QUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDeEQsQ0FBQztRQUNMLENBQUM7S0FDSixDQUFDLENBQUM7SUFDSCxNQUFNLENBQUMsTUFBTSxDQUFDO0FBQ2xCLENBQUMsQ0FBQyxDQUFDO0FBQ0gsK3FkQUErcWQ7QUFFL3FkLDJnbkNBQTJnbkMiLCJmaWxlIjoiYXNzZXRzL3BhY2tzL2pxdWVyeS9zcmMvZXZlbnQvdHJpZ2dlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZShbXG4gICAgXCIuLi9jb3JlXCIsXG4gICAgXCIuLi92YXIvZG9jdW1lbnRcIixcbiAgICBcIi4uL2RhdGEvdmFyL2RhdGFQcml2XCIsXG4gICAgXCIuLi9kYXRhL3Zhci9hY2NlcHREYXRhXCIsXG4gICAgXCIuLi92YXIvaGFzT3duXCIsXG4gICAgXCIuLi9ldmVudFwiXG5dLCBmdW5jdGlvbiAoalF1ZXJ5LCBkb2N1bWVudCwgZGF0YVByaXYsIGFjY2VwdERhdGEsIGhhc093bikge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIHZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLztcbiAgICBqUXVlcnkuZXh0ZW5kKGpRdWVyeS5ldmVudCwge1xuICAgICAgICB0cmlnZ2VyOiBmdW5jdGlvbiAoZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycykge1xuICAgICAgICAgICAgdmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCwgZXZlbnRQYXRoID0gW2VsZW0gfHwgZG9jdW1lbnRdLCB0eXBlID0gaGFzT3duLmNhbGwoZXZlbnQsIFwidHlwZVwiKSA/IGV2ZW50LnR5cGUgOiBldmVudCwgbmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKGV2ZW50LCBcIm5hbWVzcGFjZVwiKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdChcIi5cIikgOiBbXTtcbiAgICAgICAgICAgIGN1ciA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuICAgICAgICAgICAgLy8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcbiAgICAgICAgICAgIGlmIChlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcbiAgICAgICAgICAgIGlmIChyZm9jdXNNb3JwaC50ZXN0KHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlLmluZGV4T2YoXCIuXCIpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG4gICAgICAgICAgICAgICAgbmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoXCIuXCIpO1xuICAgICAgICAgICAgICAgIHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgbmFtZXNwYWNlcy5zb3J0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvbnR5cGUgPSB0eXBlLmluZGV4T2YoXCI6XCIpIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuICAgICAgICAgICAgLy8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG4gICAgICAgICAgICBldmVudCA9IGV2ZW50W2pRdWVyeS5leHBhbmRvXSA/XG4gICAgICAgICAgICAgICAgZXZlbnQgOlxuICAgICAgICAgICAgICAgIG5ldyBqUXVlcnkuRXZlbnQodHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50KTtcbiAgICAgICAgICAgIC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcbiAgICAgICAgICAgIGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuICAgICAgICAgICAgZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKFwiLlwiKTtcbiAgICAgICAgICAgIGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuICAgICAgICAgICAgICAgIG5ldyBSZWdFeHAoXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbihcIlxcXFwuKD86LipcXFxcLnwpXCIpICsgXCIoXFxcXC58JClcIikgOlxuICAgICAgICAgICAgICAgIG51bGw7XG4gICAgICAgICAgICAvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcbiAgICAgICAgICAgIGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmICghZXZlbnQudGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0ID0gZWxlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3RcbiAgICAgICAgICAgIGRhdGEgPSBkYXRhID09IG51bGwgP1xuICAgICAgICAgICAgICAgIFtldmVudF0gOlxuICAgICAgICAgICAgICAgIGpRdWVyeS5tYWtlQXJyYXkoZGF0YSwgW2V2ZW50XSk7XG4gICAgICAgICAgICAvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXG4gICAgICAgICAgICBzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbdHlwZV0gfHwge307XG4gICAgICAgICAgICBpZiAoIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KGVsZW0sIGRhdGEpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxuICAgICAgICAgICAgLy8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcbiAgICAgICAgICAgIGlmICghb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFqUXVlcnkuaXNXaW5kb3coZWxlbSkpIHtcbiAgICAgICAgICAgICAgICBidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcbiAgICAgICAgICAgICAgICBpZiAoIXJmb2N1c01vcnBoLnRlc3QoYnViYmxlVHlwZSArIHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBldmVudFBhdGgucHVzaChjdXIpO1xuICAgICAgICAgICAgICAgICAgICB0bXAgPSBjdXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuICAgICAgICAgICAgICAgIGlmICh0bXAgPT09IChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50UGF0aC5wdXNoKHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuICAgICAgICAgICAgaSA9IDA7XG4gICAgICAgICAgICB3aGlsZSAoKGN1ciA9IGV2ZW50UGF0aFtpKytdKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSkge1xuICAgICAgICAgICAgICAgIGV2ZW50LnR5cGUgPSBpID4gMSA/XG4gICAgICAgICAgICAgICAgICAgIGJ1YmJsZVR5cGUgOlxuICAgICAgICAgICAgICAgICAgICBzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG4gICAgICAgICAgICAgICAgLy8galF1ZXJ5IGhhbmRsZXJcbiAgICAgICAgICAgICAgICBoYW5kbGUgPSAoZGF0YVByaXYuZ2V0KGN1ciwgXCJldmVudHNcIikgfHwge30pW2V2ZW50LnR5cGVdICYmXG4gICAgICAgICAgICAgICAgICAgIGRhdGFQcml2LmdldChjdXIsIFwiaGFuZGxlXCIpO1xuICAgICAgICAgICAgICAgIGlmIChoYW5kbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlLmFwcGx5KGN1ciwgZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIE5hdGl2ZSBoYW5kbGVyXG4gICAgICAgICAgICAgICAgaGFuZGxlID0gb250eXBlICYmIGN1cltvbnR5cGVdO1xuICAgICAgICAgICAgICAgIGlmIChoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoY3VyKSkge1xuICAgICAgICAgICAgICAgICAgICBldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoY3VyLCBkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBldmVudC50eXBlID0gdHlwZTtcbiAgICAgICAgICAgIC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcbiAgICAgICAgICAgIGlmICghb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICAgICAgICAgIGlmICgoIXNwZWNpYWwuX2RlZmF1bHQgfHxcbiAgICAgICAgICAgICAgICAgICAgc3BlY2lhbC5fZGVmYXVsdC5hcHBseShldmVudFBhdGgucG9wKCksIGRhdGEpID09PSBmYWxzZSkgJiZcbiAgICAgICAgICAgICAgICAgICAgYWNjZXB0RGF0YShlbGVtKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxuICAgICAgICAgICAgICAgICAgICAvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXG4gICAgICAgICAgICAgICAgICAgIGlmIChvbnR5cGUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oZWxlbVt0eXBlXSkgJiYgIWpRdWVyeS5pc1dpbmRvdyhlbGVtKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxuICAgICAgICAgICAgICAgICAgICAgICAgdG1wID0gZWxlbVtvbnR5cGVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRtcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1bb250eXBlXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxuICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtW3R5cGVdKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRtcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1bb250eXBlXSA9IHRtcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBldmVudC5yZXN1bHQ7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuICAgICAgICAvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuICAgICAgICBzaW11bGF0ZTogZnVuY3Rpb24gKHR5cGUsIGVsZW0sIGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgZSA9IGpRdWVyeS5leHRlbmQobmV3IGpRdWVyeS5FdmVudCgpLCBldmVudCwge1xuICAgICAgICAgICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgICAgICAgICAgaXNTaW11bGF0ZWQ6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoZSwgbnVsbCwgZWxlbSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBqUXVlcnkuZm4uZXh0ZW5kKHtcbiAgICAgICAgdHJpZ2dlcjogZnVuY3Rpb24gKHR5cGUsIGRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGpRdWVyeS5ldmVudC50cmlnZ2VyKHR5cGUsIGRhdGEsIHRoaXMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiAodHlwZSwgZGF0YSkge1xuICAgICAgICAgICAgdmFyIGVsZW0gPSB0aGlzWzBdO1xuICAgICAgICAgICAgaWYgKGVsZW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIodHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4galF1ZXJ5O1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGY4O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltRnpjMlYwY3k5d1lXTnJjeTlxY1hWbGNua3ZjM0pqTDJWMlpXNTBMM1J5YVdkblpYSXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1RVRkJUU3hEUVVGRk8wbEJRMUFzVTBGQlV6dEpRVU5VTEdsQ1FVRnBRanRKUVVOcVFpeHpRa0ZCYzBJN1NVRkRkRUlzZDBKQlFYZENPMGxCUTNoQ0xHVkJRV1U3U1VGRlppeFZRVUZWTzBOQlExWXNSVUZCUlN4VlFVRlZMRTFCUVUwc1JVRkJSU3hSUVVGUkxFVkJRVVVzVVVGQlVTeEZRVUZGTEZWQlFWVXNSVUZCUlN4TlFVRk5PMGxCUlRORUxGbEJRVmtzUTBGQlF6dEpRVVZpTEVsQlFVa3NWMEZCVnl4SFFVRkhMR2xEUVVGcFF5eERRVUZETzBsQlJYQkVMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVVVzVFVGQlRTeERRVUZETEV0QlFVc3NSVUZCUlR0UlFVVTFRaXhQUVVGUExFVkJRVVVzVlVGQlZTeExRVUZMTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3haUVVGWk8xbEJSV3BFTEVsQlFVa3NRMEZCUXl4RlFVRkZMRWRCUVVjc1JVRkJSU3hIUVVGSExFVkJRVVVzVlVGQlZTeEZRVUZGTEUxQlFVMHNSVUZCUlN4TlFVRk5MRVZCUVVVc1QwRkJUeXhGUVVOdVJDeFRRVUZUTEVkQlFVY3NRMEZCUlN4SlFVRkpMRWxCUVVrc1VVRkJVU3hEUVVGRkxFVkJRMmhETEVsQlFVa3NSMEZCUnl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRkxFdEJRVXNzUlVGQlJTeE5RVUZOTEVOQlFVVXNSMEZCUnl4TFFVRkxMRU5CUVVNc1NVRkJTU3hIUVVGSExFdEJRVXNzUlVGRGVFUXNWVUZCVlN4SFFVRkhMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVVVzUzBGQlN5eEZRVUZGTEZkQlFWY3NRMEZCUlN4SFFVRkhMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zUzBGQlN5eERRVUZGTEVkQlFVY3NRMEZCUlN4SFFVRkhMRVZCUVVVc1EwRkJRenRaUVVWd1JpeEhRVUZITEVkQlFVY3NSMEZCUnl4SFFVRkhMRWxCUVVrc1IwRkJSeXhKUVVGSkxFbEJRVWtzVVVGQlVTeERRVUZETzFsQlJYQkRMRFJEUVVFMFF6dFpRVU0xUXl4RlFVRkZMRU5CUVVNc1EwRkJSU3hKUVVGSkxFTkJRVU1zVVVGQlVTeExRVUZMTEVOQlFVTXNTVUZCU1N4SlFVRkpMRU5CUVVNc1VVRkJVU3hMUVVGTExFTkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUTJ4RUxFMUJRVTBzUTBGQlF6dFpRVU5TTEVOQlFVTTdXVUZGUkN3eVJVRkJNa1U3V1VGRE0wVXNSVUZCUlN4RFFVRkRMRU5CUVVVc1YwRkJWeXhEUVVGRExFbEJRVWtzUTBGQlJTeEpRVUZKTEVkQlFVY3NUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVWNzUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUTNwRUxFMUJRVTBzUTBGQlF6dFpRVU5TTEVOQlFVTTdXVUZGUkN4RlFVRkZMRU5CUVVNc1EwRkJSU3hKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZGTEVkQlFVY3NRMEZCUlN4SFFVRkhMRU5CUVVNc1EwRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dG5Ra0ZGYUVNc2MwVkJRWE5GTzJkQ1FVTjBSU3hWUVVGVkxFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUlN4SFFVRkhMRU5CUVVVc1EwRkJRenRuUWtGREwwSXNTVUZCU1N4SFFVRkhMRlZCUVZVc1EwRkJReXhMUVVGTExFVkJRVVVzUTBGQlF6dG5Ra0ZETVVJc1ZVRkJWU3hEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETzFsQlEyNUNMRU5CUVVNN1dVRkRSQ3hOUVVGTkxFZEJRVWNzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUlN4SFFVRkhMRU5CUVVVc1IwRkJSeXhEUVVGRExFbEJRVWtzU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXp0WlFVVm9SQ3hwUmtGQmFVWTdXVUZEYWtZc1MwRkJTeXhIUVVGSExFdEJRVXNzUTBGQlJTeE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkZPMmRDUVVNNVFpeExRVUZMTzJkQ1FVTk1MRWxCUVVrc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlJTeEpRVUZKTEVWQlFVVXNUMEZCVHl4TFFVRkxMRXRCUVVzc1VVRkJVU3hKUVVGSkxFdEJRVXNzUTBGQlJTeERRVUZETzFsQlJUbEVMSGxGUVVGNVJUdFpRVU42UlN4TFFVRkxMRU5CUVVNc1UwRkJVeXhIUVVGSExGbEJRVmtzUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMWxCUTNaRExFdEJRVXNzUTBGQlF5eFRRVUZUTEVkQlFVY3NWVUZCVlN4RFFVRkRMRWxCUVVrc1EwRkJSU3hIUVVGSExFTkJRVVVzUTBGQlF6dFpRVU42UXl4TFFVRkxMRU5CUVVNc1ZVRkJWU3hIUVVGSExFdEJRVXNzUTBGQlF5eFRRVUZUTzJkQ1FVTnFReXhKUVVGSkxFMUJRVTBzUTBGQlJTeFRRVUZUTEVkQlFVY3NWVUZCVlN4RFFVRkRMRWxCUVVrc1EwRkJSU3hsUVVGbExFTkJRVVVzUjBGQlJ5eFRRVUZUTEVOQlFVVTdaMEpCUTNoRkxFbEJRVWtzUTBGQlF6dFpRVVZPTEdkRVFVRm5SRHRaUVVOb1JDeExRVUZMTEVOQlFVTXNUVUZCVFN4SFFVRkhMRk5CUVZNc1EwRkJRenRaUVVONlFpeEZRVUZGTEVOQlFVTXNRMEZCUlN4RFFVRkRMRXRCUVVzc1EwRkJReXhOUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETzJkQ1FVTnlRaXhMUVVGTExFTkJRVU1zVFVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXp0WlFVTnlRaXhEUVVGRE8xbEJSVVFzSzBWQlFTdEZPMWxCUXk5RkxFbEJRVWtzUjBGQlJ5eEpRVUZKTEVsQlFVa3NTVUZCU1R0blFrRkRiRUlzUTBGQlJTeExRVUZMTEVOQlFVVTdaMEpCUTFRc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlJTeEpRVUZKTEVWQlFVVXNRMEZCUlN4TFFVRkxMRU5CUVVVc1EwRkJSU3hEUVVGRE8xbEJSWEpETEdsRVFVRnBSRHRaUVVOcVJDeFBRVUZQTEVkQlFVY3NUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVVVzU1VGQlNTeERRVUZGTEVsQlFVa3NSVUZCUlN4RFFVRkRPMWxCUXpkRExFVkJRVVVzUTBGQlF5eERRVUZGTEVOQlFVTXNXVUZCV1N4SlFVRkpMRTlCUVU4c1EwRkJReXhQUVVGUExFbEJRVWtzVDBGQlR5eERRVUZETEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUTBGQlJTeExRVUZMTEV0QlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRM3BHTEUxQlFVMHNRMEZCUXp0WlFVTlNMRU5CUVVNN1dVRkZSQ3d5UlVGQk1rVTdXVUZETTBVc2MwWkJRWE5HTzFsQlEzUkdMRVZCUVVVc1EwRkJReXhEUVVGRkxFTkJRVU1zV1VGQldTeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRkZCUVZFc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVVXNTVUZCU1N4RFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRE8yZENRVVYwUlN4VlFVRlZMRWRCUVVjc1QwRkJUeXhEUVVGRExGbEJRVmtzU1VGQlNTeEpRVUZKTEVOQlFVTTdaMEpCUXpGRExFVkJRVVVzUTBGQlF5eERRVUZGTEVOQlFVTXNWMEZCVnl4RFFVRkRMRWxCUVVrc1EwRkJSU3hWUVVGVkxFZEJRVWNzU1VGQlNTeERRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRPMjlDUVVNNVF5eEhRVUZITEVkQlFVY3NSMEZCUnl4RFFVRkRMRlZCUVZVc1EwRkJRenRuUWtGRGRFSXNRMEZCUXp0blFrRkRSQ3hIUVVGSExFTkJRVU1zUTBGQlF5eEZRVUZITEVkQlFVY3NSVUZCUlN4SFFVRkhMRWRCUVVjc1IwRkJSeXhEUVVGRExGVkJRVlVzUlVGQlJ5eERRVUZETzI5Q1FVTndReXhUUVVGVExFTkJRVU1zU1VGQlNTeERRVUZGTEVkQlFVY3NRMEZCUlN4RFFVRkRPMjlDUVVOMFFpeEhRVUZITEVkQlFVY3NSMEZCUnl4RFFVRkRPMmRDUVVOWUxFTkJRVU03WjBKQlJVUXNPRVZCUVRoRk8yZENRVU01UlN4RlFVRkZMRU5CUVVNc1EwRkJSU3hIUVVGSExFdEJRVXNzUTBGQlJTeEpRVUZKTEVOQlFVTXNZVUZCWVN4SlFVRkpMRkZCUVZFc1EwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF6dHZRa0ZEYkVRc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlJTeEhRVUZITEVOQlFVTXNWMEZCVnl4SlFVRkpMRWRCUVVjc1EwRkJReXhaUVVGWkxFbEJRVWtzVFVGQlRTeERRVUZGTEVOQlFVTTdaMEpCUTJwRkxFTkJRVU03V1VGRFJpeERRVUZETzFsQlJVUXNhME5CUVd0RE8xbEJRMnhETEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1dVRkRUaXhQUVVGUkxFTkJRVVVzUjBGQlJ5eEhRVUZITEZOQlFWTXNRMEZCUlN4RFFVRkRMRVZCUVVVc1EwRkJSU3hEUVVGRkxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNiMEpCUVc5Q0xFVkJRVVVzUlVGQlJ5eERRVUZETzJkQ1FVVjBSU3hMUVVGTExFTkJRVU1zU1VGQlNTeEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRPMjlDUVVOcVFpeFZRVUZWTzI5Q1FVTldMRTlCUVU4c1EwRkJReXhSUVVGUkxFbEJRVWtzU1VGQlNTeERRVUZETzJkQ1FVVXhRaXhwUWtGQmFVSTdaMEpCUTJwQ0xFMUJRVTBzUjBGQlJ5eERRVUZGTEZGQlFWRXNRMEZCUXl4SFFVRkhMRU5CUVVVc1IwRkJSeXhGUVVGRkxGRkJRVkVzUTBGQlJTeEpRVUZKTEVWQlFVVXNRMEZCUlN4RFFVRkZMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVVU3YjBKQlF6ZEVMRkZCUVZFc1EwRkJReXhIUVVGSExFTkJRVVVzUjBGQlJ5eEZRVUZGTEZGQlFWRXNRMEZCUlN4RFFVRkRPMmRDUVVNdlFpeEZRVUZGTEVOQlFVTXNRMEZCUlN4TlFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRE8yOUNRVU5rTEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVVc1IwRkJSeXhGUVVGRkxFbEJRVWtzUTBGQlJTeERRVUZETzJkQ1FVTXpRaXhEUVVGRE8yZENRVVZFTEdsQ1FVRnBRanRuUWtGRGFrSXNUVUZCVFN4SFFVRkhMRTFCUVUwc1NVRkJTU3hIUVVGSExFTkJRVVVzVFVGQlRTeERRVUZGTEVOQlFVTTdaMEpCUTJwRExFVkJRVVVzUTBGQlF5eERRVUZGTEUxQlFVMHNTVUZCU1N4TlFVRk5MRU5CUVVNc1MwRkJTeXhKUVVGSkxGVkJRVlVzUTBGQlJTeEhRVUZITEVOQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNN2IwSkJRMjVFTEV0QlFVc3NRMEZCUXl4TlFVRk5MRWRCUVVjc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlJTeEhRVUZITEVWQlFVVXNTVUZCU1N4RFFVRkZMRU5CUVVNN2IwSkJRM3BETEVWQlFVVXNRMEZCUXl4RFFVRkZMRXRCUVVzc1EwRkJReXhOUVVGTkxFdEJRVXNzUzBGQlRTeERRVUZETEVOQlFVTXNRMEZCUXp0M1FrRkRPVUlzUzBGQlN5eERRVUZETEdOQlFXTXNSVUZCUlN4RFFVRkRPMjlDUVVONFFpeERRVUZETzJkQ1FVTkdMRU5CUVVNN1dVRkRSaXhEUVVGRE8xbEJRMFFzUzBGQlN5eERRVUZETEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNN1dVRkZiRUlzYjBSQlFXOUVPMWxCUTNCRUxFVkJRVVVzUTBGQlF5eERRVUZGTEVOQlFVTXNXVUZCV1N4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExHdENRVUZyUWl4RlFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRE8yZENRVVZ3UkN4RlFVRkZMRU5CUVVNc1EwRkJSU3hEUVVGRkxFTkJRVU1zVDBGQlR5eERRVUZETEZGQlFWRTdiMEpCUTNaQ0xFOUJRVThzUTBGQlF5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkZMRk5CUVZNc1EwRkJReXhIUVVGSExFVkJRVVVzUlVGQlJTeEpRVUZKTEVOQlFVVXNTMEZCU3l4TFFVRkxMRU5CUVVVN2IwSkJRek5FTEZWQlFWVXNRMEZCUlN4SlFVRkpMRU5CUVVjc1EwRkJReXhEUVVGRExFTkJRVU03YjBKQlJYUkNMREJGUVVFd1JUdHZRa0ZETVVVc0swVkJRU3RGTzI5Q1FVTXZSU3hGUVVGRkxFTkJRVU1zUTBGQlJTeE5RVUZOTEVsQlFVa3NUVUZCVFN4RFFVRkRMRlZCUVZVc1EwRkJSU3hKUVVGSkxFTkJRVVVzU1VGQlNTeERRVUZGTEVOQlFVVXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhSUVVGUkxFTkJRVVVzU1VGQlNTeERRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRPM2RDUVVVdlJTeG5SVUZCWjBVN2QwSkJRMmhGTEVkQlFVY3NSMEZCUnl4SlFVRkpMRU5CUVVVc1RVRkJUU3hEUVVGRkxFTkJRVU03ZDBKQlJYSkNMRVZCUVVVc1EwRkJReXhEUVVGRkxFZEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTTdORUpCUTFnc1NVRkJTU3hEUVVGRkxFMUJRVTBzUTBGQlJTeEhRVUZITEVsQlFVa3NRMEZCUXp0M1FrRkRka0lzUTBGQlF6dDNRa0ZGUkN3MlJVRkJOa1U3ZDBKQlF6ZEZMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUXp0M1FrRkRPVUlzU1VGQlNTeERRVUZGTEVsQlFVa3NRMEZCUlN4RlFVRkZMRU5CUVVNN2QwSkJRMllzVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXl4VFFVRlRMRWRCUVVjc1UwRkJVeXhEUVVGRE8zZENRVVZ1UXl4RlFVRkZMRU5CUVVNc1EwRkJSU3hIUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZET3pSQ1FVTllMRWxCUVVrc1EwRkJSU3hOUVVGTkxFTkJRVVVzUjBGQlJ5eEhRVUZITEVOQlFVTTdkMEpCUTNSQ0xFTkJRVU03YjBKQlEwWXNRMEZCUXp0blFrRkRSaXhEUVVGRE8xbEJRMFlzUTBGQlF6dFpRVVZFTEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRE8xRkJRM0pDTEVOQlFVTTdVVUZGUkN4NVJFRkJlVVE3VVVGRGVrUXNlVU5CUVhsRE8xRkJRM3BETEZGQlFWRXNSVUZCUlN4VlFVRlZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzUzBGQlN6dFpRVU53UXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVU53UWl4SlFVRkpMRTFCUVUwc1EwRkJReXhMUVVGTExFVkJRVVVzUlVGRGJFSXNTMEZCU3l4RlFVTk1PMmRDUVVORExFbEJRVWtzUlVGQlJTeEpRVUZKTzJkQ1FVTldMRmRCUVZjc1JVRkJSU3hKUVVGSk8yRkJRMnBDTEVOQlEwUXNRMEZCUXp0WlFVVkdMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZGTEVOQlFVTXNSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hEUVVGRkxFTkJRVU03VVVGRGRrTXNRMEZCUXp0TFFVVkVMRU5CUVVVc1EwRkJRenRKUVVWS0xFMUJRVTBzUTBGQlF5eEZRVUZGTEVOQlFVTXNUVUZCVFN4RFFVRkZPMUZCUldwQ0xFOUJRVThzUlVGQlJTeFZRVUZWTEVsQlFVa3NSVUZCUlN4SlFVRkpPMWxCUXpWQ0xFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkZPMmRDUVVOcVFpeE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUlN4RFFVRkRPMWxCUXpGRExFTkJRVU1zUTBGQlJTeERRVUZETzFGQlEwd3NRMEZCUXp0UlFVTkVMR05CUVdNc1JVRkJSU3hWUVVGVkxFbEJRVWtzUlVGQlJTeEpRVUZKTzFsQlEyNURMRWxCUVVrc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlJTeERRVUZETEVOQlFVVXNRMEZCUXp0WlFVTnlRaXhGUVVGRkxFTkJRVU1zUTBGQlJTeEpRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVOYUxFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVVc1EwRkJRenRaUVVOMlJDeERRVUZETzFGQlEwWXNRMEZCUXp0TFFVTkVMRU5CUVVVc1EwRkJRenRKUVVWS0xFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTTdRVUZEWkN4RFFVRkRMRU5CUVVVc1EwRkJReUlzSW1acGJHVWlPaUpoYzNObGRITXZjR0ZqYTNNdmFuRjFaWEo1TDNOeVl5OWxkbVZ1ZEM5MGNtbG5aMlZ5TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2laR1ZtYVc1bEtDQmJYRzVjZEZ3aUxpNHZZMjl5WlZ3aUxGeHVYSFJjSWk0dUwzWmhjaTlrYjJOMWJXVnVkRndpTEZ4dVhIUmNJaTR1TDJSaGRHRXZkbUZ5TDJSaGRHRlFjbWwyWENJc1hHNWNkRndpTGk0dlpHRjBZUzkyWVhJdllXTmpaWEIwUkdGMFlWd2lMRnh1WEhSY0lpNHVMM1poY2k5b1lYTlBkMjVjSWl4Y2JseHVYSFJjSWk0dUwyVjJaVzUwWENKY2JsMHNJR1oxYm1OMGFXOXVLQ0JxVVhWbGNua3NJR1J2WTNWdFpXNTBMQ0JrWVhSaFVISnBkaXdnWVdOalpYQjBSR0YwWVN3Z2FHRnpUM2R1SUNrZ2UxeHVYRzVjSW5WelpTQnpkSEpwWTNSY0lqdGNibHh1ZG1GeUlISm1iMk4xYzAxdmNuQm9JRDBnTDE0b1B6cG1iMk4xYzJsdVptOWpkWE44Wm05amRYTnZkWFJpYkhWeUtTUXZPMXh1WEc1cVVYVmxjbmt1WlhoMFpXNWtLQ0JxVVhWbGNua3VaWFpsYm5Rc0lIdGNibHh1WEhSMGNtbG5aMlZ5T2lCbWRXNWpkR2x2YmlnZ1pYWmxiblFzSUdSaGRHRXNJR1ZzWlcwc0lHOXViSGxJWVc1a2JHVnljeUFwSUh0Y2JseHVYSFJjZEhaaGNpQnBMQ0JqZFhJc0lIUnRjQ3dnWW5WaVlteGxWSGx3WlN3Z2IyNTBlWEJsTENCb1lXNWtiR1VzSUhOd1pXTnBZV3dzWEc1Y2RGeDBYSFJsZG1WdWRGQmhkR2dnUFNCYklHVnNaVzBnZkh3Z1pHOWpkVzFsYm5RZ1hTeGNibHgwWEhSY2RIUjVjR1VnUFNCb1lYTlBkMjR1WTJGc2JDZ2daWFpsYm5Rc0lGd2lkSGx3WlZ3aUlDa2dQeUJsZG1WdWRDNTBlWEJsSURvZ1pYWmxiblFzWEc1Y2RGeDBYSFJ1WVcxbGMzQmhZMlZ6SUQwZ2FHRnpUM2R1TG1OaGJHd29JR1YyWlc1MExDQmNJbTVoYldWemNHRmpaVndpSUNrZ1B5QmxkbVZ1ZEM1dVlXMWxjM0JoWTJVdWMzQnNhWFFvSUZ3aUxsd2lJQ2tnT2lCYlhUdGNibHh1WEhSY2RHTjFjaUE5SUhSdGNDQTlJR1ZzWlcwZ1BTQmxiR1Z0SUh4OElHUnZZM1Z0Wlc1ME8xeHVYRzVjZEZ4MEx5OGdSRzl1SjNRZ1pHOGdaWFpsYm5SeklHOXVJSFJsZUhRZ1lXNWtJR052YlcxbGJuUWdibTlrWlhOY2JseDBYSFJwWmlBb0lHVnNaVzB1Ym05a1pWUjVjR1VnUFQwOUlETWdmSHdnWld4bGJTNXViMlJsVkhsd1pTQTlQVDBnT0NBcElIdGNibHgwWEhSY2RISmxkSFZ5Ymp0Y2JseDBYSFI5WEc1Y2JseDBYSFF2THlCbWIyTjFjeTlpYkhWeUlHMXZjbkJvY3lCMGJ5Qm1iMk4xYzJsdUwyOTFkRHNnWlc1emRYSmxJSGRsSjNKbElHNXZkQ0JtYVhKcGJtY2dkR2hsYlNCeWFXZG9kQ0J1YjNkY2JseDBYSFJwWmlBb0lISm1iMk4xYzAxdmNuQm9MblJsYzNRb0lIUjVjR1VnS3lCcVVYVmxjbmt1WlhabGJuUXVkSEpwWjJkbGNtVmtJQ2tnS1NCN1hHNWNkRngwWEhSeVpYUjFjbTQ3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBhV1lnS0NCMGVYQmxMbWx1WkdWNFQyWW9JRndpTGx3aUlDa2dQaUF0TVNBcElIdGNibHh1WEhSY2RGeDBMeThnVG1GdFpYTndZV05sWkNCMGNtbG5aMlZ5T3lCamNtVmhkR1VnWVNCeVpXZGxlSEFnZEc4Z2JXRjBZMmdnWlhabGJuUWdkSGx3WlNCcGJpQm9ZVzVrYkdVb0tWeHVYSFJjZEZ4MGJtRnRaWE53WVdObGN5QTlJSFI1Y0dVdWMzQnNhWFFvSUZ3aUxsd2lJQ2s3WEc1Y2RGeDBYSFIwZVhCbElEMGdibUZ0WlhOd1lXTmxjeTV6YUdsbWRDZ3BPMXh1WEhSY2RGeDBibUZ0WlhOd1lXTmxjeTV6YjNKMEtDazdYRzVjZEZ4MGZWeHVYSFJjZEc5dWRIbHdaU0E5SUhSNWNHVXVhVzVrWlhoUFppZ2dYQ0k2WENJZ0tTQThJREFnSmlZZ1hDSnZibHdpSUNzZ2RIbHdaVHRjYmx4dVhIUmNkQzh2SUVOaGJHeGxjaUJqWVc0Z2NHRnpjeUJwYmlCaElHcFJkV1Z5ZVM1RmRtVnVkQ0J2WW1wbFkzUXNJRTlpYW1WamRDd2diM0lnYW5WemRDQmhiaUJsZG1WdWRDQjBlWEJsSUhOMGNtbHVaMXh1WEhSY2RHVjJaVzUwSUQwZ1pYWmxiblJiSUdwUmRXVnllUzVsZUhCaGJtUnZJRjBnUDF4dVhIUmNkRngwWlhabGJuUWdPbHh1WEhSY2RGeDBibVYzSUdwUmRXVnllUzVGZG1WdWRDZ2dkSGx3WlN3Z2RIbHdaVzltSUdWMlpXNTBJRDA5UFNCY0ltOWlhbVZqZEZ3aUlDWW1JR1YyWlc1MElDazdYRzVjYmx4MFhIUXZMeUJVY21sbloyVnlJR0pwZEcxaGMyczZJQ1lnTVNCbWIzSWdibUYwYVhabElHaGhibVJzWlhKek95QW1JRElnWm05eUlHcFJkV1Z5ZVNBb1lXeDNZWGx6SUhSeWRXVXBYRzVjZEZ4MFpYWmxiblF1YVhOVWNtbG5aMlZ5SUQwZ2IyNXNlVWhoYm1Sc1pYSnpJRDhnTWlBNklETTdYRzVjZEZ4MFpYWmxiblF1Ym1GdFpYTndZV05sSUQwZ2JtRnRaWE53WVdObGN5NXFiMmx1S0NCY0lpNWNJaUFwTzF4dVhIUmNkR1YyWlc1MExuSnVZVzFsYzNCaFkyVWdQU0JsZG1WdWRDNXVZVzFsYzNCaFkyVWdQMXh1WEhSY2RGeDBibVYzSUZKbFowVjRjQ2dnWENJb1hueGNYRnhjTGlsY0lpQXJJRzVoYldWemNHRmpaWE11YW05cGJpZ2dYQ0pjWEZ4Y0xpZy9PaTRxWEZ4Y1hDNThLVndpSUNrZ0t5QmNJaWhjWEZ4Y0xud2tLVndpSUNrZ09seHVYSFJjZEZ4MGJuVnNiRHRjYmx4dVhIUmNkQzh2SUVOc1pXRnVJSFZ3SUhSb1pTQmxkbVZ1ZENCcGJpQmpZWE5sSUdsMElHbHpJR0psYVc1bklISmxkWE5sWkZ4dVhIUmNkR1YyWlc1MExuSmxjM1ZzZENBOUlIVnVaR1ZtYVc1bFpEdGNibHgwWEhScFppQW9JQ0ZsZG1WdWRDNTBZWEpuWlhRZ0tTQjdYRzVjZEZ4MFhIUmxkbVZ1ZEM1MFlYSm5aWFFnUFNCbGJHVnRPMXh1WEhSY2RIMWNibHh1WEhSY2RDOHZJRU5zYjI1bElHRnVlU0JwYm1OdmJXbHVaeUJrWVhSaElHRnVaQ0J3Y21Wd1pXNWtJSFJvWlNCbGRtVnVkQ3dnWTNKbFlYUnBibWNnZEdobElHaGhibVJzWlhJZ1lYSm5JR3hwYzNSY2JseDBYSFJrWVhSaElEMGdaR0YwWVNBOVBTQnVkV3hzSUQ5Y2JseDBYSFJjZEZzZ1pYWmxiblFnWFNBNlhHNWNkRngwWEhScVVYVmxjbmt1YldGclpVRnljbUY1S0NCa1lYUmhMQ0JiSUdWMlpXNTBJRjBnS1R0Y2JseHVYSFJjZEM4dklFRnNiRzkzSUhOd1pXTnBZV3dnWlhabGJuUnpJSFJ2SUdSeVlYY2diM1YwYzJsa1pTQjBhR1VnYkdsdVpYTmNibHgwWEhSemNHVmphV0ZzSUQwZ2FsRjFaWEo1TG1WMlpXNTBMbk53WldOcFlXeGJJSFI1Y0dVZ1hTQjhmQ0I3ZlR0Y2JseDBYSFJwWmlBb0lDRnZibXg1U0dGdVpHeGxjbk1nSmlZZ2MzQmxZMmxoYkM1MGNtbG5aMlZ5SUNZbUlITndaV05wWVd3dWRISnBaMmRsY2k1aGNIQnNlU2dnWld4bGJTd2daR0YwWVNBcElEMDlQU0JtWVd4elpTQXBJSHRjYmx4MFhIUmNkSEpsZEhWeWJqdGNibHgwWEhSOVhHNWNibHgwWEhRdkx5QkVaWFJsY20xcGJtVWdaWFpsYm5RZ2NISnZjR0ZuWVhScGIyNGdjR0YwYUNCcGJpQmhaSFpoYm1ObExDQndaWElnVnpORElHVjJaVzUwY3lCemNHVmpJQ2dqT1RrMU1TbGNibHgwWEhRdkx5QkNkV0ppYkdVZ2RYQWdkRzhnWkc5amRXMWxiblFzSUhSb1pXNGdkRzhnZDJsdVpHOTNPeUIzWVhSamFDQm1iM0lnWVNCbmJHOWlZV3dnYjNkdVpYSkViMk4xYldWdWRDQjJZWElnS0NNNU56STBLVnh1WEhSY2RHbG1JQ2dnSVc5dWJIbElZVzVrYkdWeWN5QW1KaUFoYzNCbFkybGhiQzV1YjBKMVltSnNaU0FtSmlBaGFsRjFaWEo1TG1selYybHVaRzkzS0NCbGJHVnRJQ2tnS1NCN1hHNWNibHgwWEhSY2RHSjFZbUpzWlZSNWNHVWdQU0J6Y0dWamFXRnNMbVJsYkdWbllYUmxWSGx3WlNCOGZDQjBlWEJsTzF4dVhIUmNkRngwYVdZZ0tDQWhjbVp2WTNWelRXOXljR2d1ZEdWemRDZ2dZblZpWW14bFZIbHdaU0FySUhSNWNHVWdLU0FwSUh0Y2JseDBYSFJjZEZ4MFkzVnlJRDBnWTNWeUxuQmhjbVZ1ZEU1dlpHVTdYRzVjZEZ4MFhIUjlYRzVjZEZ4MFhIUm1iM0lnS0NBN0lHTjFjanNnWTNWeUlEMGdZM1Z5TG5CaGNtVnVkRTV2WkdVZ0tTQjdYRzVjZEZ4MFhIUmNkR1YyWlc1MFVHRjBhQzV3ZFhOb0tDQmpkWElnS1R0Y2JseDBYSFJjZEZ4MGRHMXdJRDBnWTNWeU8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUXZMeUJQYm14NUlHRmtaQ0IzYVc1a2IzY2dhV1lnZDJVZ1oyOTBJSFJ2SUdSdlkzVnRaVzUwSUNobExtY3VMQ0J1YjNRZ2NHeGhhVzRnYjJKcUlHOXlJR1JsZEdGamFHVmtJRVJQVFNsY2JseDBYSFJjZEdsbUlDZ2dkRzF3SUQwOVBTQW9JR1ZzWlcwdWIzZHVaWEpFYjJOMWJXVnVkQ0I4ZkNCa2IyTjFiV1Z1ZENBcElDa2dlMXh1WEhSY2RGeDBYSFJsZG1WdWRGQmhkR2d1Y0hWemFDZ2dkRzF3TG1SbFptRjFiSFJXYVdWM0lIeDhJSFJ0Y0M1d1lYSmxiblJYYVc1a2IzY2dmSHdnZDJsdVpHOTNJQ2s3WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmVnh1WEc1Y2RGeDBMeThnUm1seVpTQm9ZVzVrYkdWeWN5QnZiaUIwYUdVZ1pYWmxiblFnY0dGMGFGeHVYSFJjZEdrZ1BTQXdPMXh1WEhSY2RIZG9hV3hsSUNnZ0tDQmpkWElnUFNCbGRtVnVkRkJoZEdoYklHa3JLeUJkSUNrZ0ppWWdJV1YyWlc1MExtbHpVSEp2Y0dGbllYUnBiMjVUZEc5d2NHVmtLQ2tnS1NCN1hHNWNibHgwWEhSY2RHVjJaVzUwTG5SNWNHVWdQU0JwSUQ0Z01TQS9YRzVjZEZ4MFhIUmNkR0oxWW1Kc1pWUjVjR1VnT2x4dVhIUmNkRngwWEhSemNHVmphV0ZzTG1KcGJtUlVlWEJsSUh4OElIUjVjR1U3WEc1Y2JseDBYSFJjZEM4dklHcFJkV1Z5ZVNCb1lXNWtiR1Z5WEc1Y2RGeDBYSFJvWVc1a2JHVWdQU0FvSUdSaGRHRlFjbWwyTG1kbGRDZ2dZM1Z5TENCY0ltVjJaVzUwYzF3aUlDa2dmSHdnZTMwZ0tWc2daWFpsYm5RdWRIbHdaU0JkSUNZbVhHNWNkRngwWEhSY2RHUmhkR0ZRY21sMkxtZGxkQ2dnWTNWeUxDQmNJbWhoYm1Sc1pWd2lJQ2s3WEc1Y2RGeDBYSFJwWmlBb0lHaGhibVJzWlNBcElIdGNibHgwWEhSY2RGeDBhR0Z1Wkd4bExtRndjR3g1S0NCamRYSXNJR1JoZEdFZ0tUdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBMeThnVG1GMGFYWmxJR2hoYm1Sc1pYSmNibHgwWEhSY2RHaGhibVJzWlNBOUlHOXVkSGx3WlNBbUppQmpkWEpiSUc5dWRIbHdaU0JkTzF4dVhIUmNkRngwYVdZZ0tDQm9ZVzVrYkdVZ0ppWWdhR0Z1Wkd4bExtRndjR3g1SUNZbUlHRmpZMlZ3ZEVSaGRHRW9JR04xY2lBcElDa2dlMXh1WEhSY2RGeDBYSFJsZG1WdWRDNXlaWE4xYkhRZ1BTQm9ZVzVrYkdVdVlYQndiSGtvSUdOMWNpd2daR0YwWVNBcE8xeHVYSFJjZEZ4MFhIUnBaaUFvSUdWMlpXNTBMbkpsYzNWc2RDQTlQVDBnWm1Gc2MyVWdLU0I3WEc1Y2RGeDBYSFJjZEZ4MFpYWmxiblF1Y0hKbGRtVnVkRVJsWm1GMWJIUW9LVHRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4MFhIUmxkbVZ1ZEM1MGVYQmxJRDBnZEhsd1pUdGNibHh1WEhSY2RDOHZJRWxtSUc1dlltOWtlU0J3Y21WMlpXNTBaV1FnZEdobElHUmxabUYxYkhRZ1lXTjBhVzl1TENCa2J5QnBkQ0J1YjNkY2JseDBYSFJwWmlBb0lDRnZibXg1U0dGdVpHeGxjbk1nSmlZZ0lXVjJaVzUwTG1selJHVm1ZWFZzZEZCeVpYWmxiblJsWkNncElDa2dlMXh1WEc1Y2RGeDBYSFJwWmlBb0lDZ2dJWE53WldOcFlXd3VYMlJsWm1GMWJIUWdmSHhjYmx4MFhIUmNkRngwYzNCbFkybGhiQzVmWkdWbVlYVnNkQzVoY0hCc2VTZ2daWFpsYm5SUVlYUm9MbkJ2Y0NncExDQmtZWFJoSUNrZ1BUMDlJR1poYkhObElDa2dKaVpjYmx4MFhIUmNkRngwWVdOalpYQjBSR0YwWVNnZ1pXeGxiU0FwSUNrZ2UxeHVYRzVjZEZ4MFhIUmNkQzh2SUVOaGJHd2dZU0J1WVhScGRtVWdSRTlOSUcxbGRHaHZaQ0J2YmlCMGFHVWdkR0Z5WjJWMElIZHBkR2dnZEdobElITmhiV1VnYm1GdFpTQmhjeUIwYUdVZ1pYWmxiblF1WEc1Y2RGeDBYSFJjZEM4dklFUnZiaWQwSUdSdklHUmxabUYxYkhRZ1lXTjBhVzl1Y3lCdmJpQjNhVzVrYjNjc0lIUm9ZWFFuY3lCM2FHVnlaU0JuYkc5aVlXd2dkbUZ5YVdGaWJHVnpJR0psSUNnak5qRTNNQ2xjYmx4MFhIUmNkRngwYVdZZ0tDQnZiblI1Y0dVZ0ppWWdhbEYxWlhKNUxtbHpSblZ1WTNScGIyNG9JR1ZzWlcxYklIUjVjR1VnWFNBcElDWW1JQ0ZxVVhWbGNua3VhWE5YYVc1a2IzY29JR1ZzWlcwZ0tTQXBJSHRjYmx4dVhIUmNkRngwWEhSY2RDOHZJRVJ2YmlkMElISmxMWFJ5YVdkblpYSWdZVzRnYjI1R1QwOGdaWFpsYm5RZ2QyaGxiaUIzWlNCallXeHNJR2wwY3lCR1QwOG9LU0J0WlhSb2IyUmNibHgwWEhSY2RGeDBYSFIwYlhBZ1BTQmxiR1Z0V3lCdmJuUjVjR1VnWFR0Y2JseHVYSFJjZEZ4MFhIUmNkR2xtSUNnZ2RHMXdJQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBaV3hsYlZzZ2IyNTBlWEJsSUYwZ1BTQnVkV3hzTzF4dVhIUmNkRngwWEhSY2RIMWNibHh1WEhSY2RGeDBYSFJjZEM4dklGQnlaWFpsYm5RZ2NtVXRkSEpwWjJkbGNtbHVaeUJ2WmlCMGFHVWdjMkZ0WlNCbGRtVnVkQ3dnYzJsdVkyVWdkMlVnWVd4eVpXRmtlU0JpZFdKaWJHVmtJR2wwSUdGaWIzWmxYRzVjZEZ4MFhIUmNkRngwYWxGMVpYSjVMbVYyWlc1MExuUnlhV2RuWlhKbFpDQTlJSFI1Y0dVN1hHNWNkRngwWEhSY2RGeDBaV3hsYlZzZ2RIbHdaU0JkS0NrN1hHNWNkRngwWEhSY2RGeDBhbEYxWlhKNUxtVjJaVzUwTG5SeWFXZG5aWEpsWkNBOUlIVnVaR1ZtYVc1bFpEdGNibHh1WEhSY2RGeDBYSFJjZEdsbUlDZ2dkRzF3SUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwWld4bGJWc2diMjUwZVhCbElGMGdQU0IwYlhBN1hHNWNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmVnh1WEc1Y2RGeDBjbVYwZFhKdUlHVjJaVzUwTG5KbGMzVnNkRHRjYmx4MGZTeGNibHh1WEhRdkx5QlFhV2RuZVdKaFkyc2diMjRnWVNCa2IyNXZjaUJsZG1WdWRDQjBieUJ6YVcxMWJHRjBaU0JoSUdScFptWmxjbVZ1ZENCdmJtVmNibHgwTHk4Z1ZYTmxaQ0J2Ym14NUlHWnZjaUJnWm05amRYTW9hVzRnZkNCdmRYUXBZQ0JsZG1WdWRITmNibHgwYzJsdGRXeGhkR1U2SUdaMWJtTjBhVzl1S0NCMGVYQmxMQ0JsYkdWdExDQmxkbVZ1ZENBcElIdGNibHgwWEhSMllYSWdaU0E5SUdwUmRXVnllUzVsZUhSbGJtUW9YRzVjZEZ4MFhIUnVaWGNnYWxGMVpYSjVMa1YyWlc1MEtDa3NYRzVjZEZ4MFhIUmxkbVZ1ZEN4Y2JseDBYSFJjZEh0Y2JseDBYSFJjZEZ4MGRIbHdaVG9nZEhsd1pTeGNibHgwWEhSY2RGeDBhWE5UYVcxMWJHRjBaV1E2SUhSeWRXVmNibHgwWEhSY2RIMWNibHgwWEhRcE8xeHVYRzVjZEZ4MGFsRjFaWEo1TG1WMlpXNTBMblJ5YVdkblpYSW9JR1VzSUc1MWJHd3NJR1ZzWlcwZ0tUdGNibHgwZlZ4dVhHNTlJQ2s3WEc1Y2JtcFJkV1Z5ZVM1bWJpNWxlSFJsYm1Rb0lIdGNibHh1WEhSMGNtbG5aMlZ5T2lCbWRXNWpkR2x2YmlnZ2RIbHdaU3dnWkdGMFlTQXBJSHRjYmx4MFhIUnlaWFIxY200Z2RHaHBjeTVsWVdOb0tDQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUmNkR3BSZFdWeWVTNWxkbVZ1ZEM1MGNtbG5aMlZ5S0NCMGVYQmxMQ0JrWVhSaExDQjBhR2x6SUNrN1hHNWNkRngwZlNBcE8xeHVYSFI5TEZ4dVhIUjBjbWxuWjJWeVNHRnVaR3hsY2pvZ1puVnVZM1JwYjI0b0lIUjVjR1VzSUdSaGRHRWdLU0I3WEc1Y2RGeDBkbUZ5SUdWc1pXMGdQU0IwYUdseld5QXdJRjA3WEc1Y2RGeDBhV1lnS0NCbGJHVnRJQ2tnZTF4dVhIUmNkRngwY21WMGRYSnVJR3BSZFdWeWVTNWxkbVZ1ZEM1MGNtbG5aMlZ5S0NCMGVYQmxMQ0JrWVhSaExDQmxiR1Z0TENCMGNuVmxJQ2s3WEc1Y2RGeDBmVnh1WEhSOVhHNTlJQ2s3WEc1Y2JuSmxkSFZ5YmlCcVVYVmxjbms3WEc1OUlDazdYRzRpWFgwPVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGY4O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltRnpjMlYwY3k5d1lXTnJjeTlxY1hWbGNua3ZjM0pqTDJWMlpXNTBMM1J5YVdkblpYSXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1RVRkJUU3hEUVVGRE8wbEJRMGdzVTBGQlV6dEpRVU5VTEdsQ1FVRnBRanRKUVVOcVFpeHpRa0ZCYzBJN1NVRkRkRUlzZDBKQlFYZENPMGxCUTNoQ0xHVkJRV1U3U1VGRFppeFZRVUZWTzBOQlEySXNSVUZCUlN4VlFVRlZMRTFCUVUwc1JVRkJSU3hSUVVGUkxFVkJRVVVzVVVGQlVTeEZRVUZGTEZWQlFWVXNSVUZCUlN4TlFVRk5PMGxCUTNaRUxGbEJRVmtzUTBGQlF6dEpRVU5pTEVsQlFVa3NWMEZCVnl4SFFVRkhMR2xEUVVGcFF5eERRVUZETzBsQlEzQkVMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEV0QlFVc3NSVUZCUlR0UlFVTjRRaXhQUVVGUExFVkJRVVVzVlVGQlZTeExRVUZMTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3haUVVGWk8xbEJRemxETEVsQlFVa3NRMEZCUXl4RlFVRkZMRWRCUVVjc1JVRkJSU3hIUVVGSExFVkJRVVVzVlVGQlZTeEZRVUZGTEUxQlFVMHNSVUZCUlN4TlFVRk5MRVZCUVVVc1QwRkJUeXhGUVVGRkxGTkJRVk1zUjBGQlJ5eERRVUZETEVsQlFVa3NTVUZCU1N4UlFVRlJMRU5CUVVNc1JVRkJSU3hKUVVGSkxFZEJRVWNzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUVVVc1RVRkJUU3hEUVVGRExFZEJRVWNzUzBGQlN5eERRVUZETEVsQlFVa3NSMEZCUnl4TFFVRkxMRVZCUVVVc1ZVRkJWU3hIUVVGSExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RlFVRkZMRmRCUVZjc1EwRkJReXhIUVVGSExFdEJRVXNzUTBGQlF5eFRRVUZUTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF6dFpRVU0zVGl4SFFVRkhMRWRCUVVjc1IwRkJSeXhIUVVGSExFbEJRVWtzUjBGQlJ5eEpRVUZKTEVsQlFVa3NVVUZCVVN4RFFVRkRPMWxCUTNCRExEUkRRVUUwUXp0WlFVTTFReXhGUVVGRkxFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4TFFVRkxMRU5CUVVNc1NVRkJTU3hKUVVGSkxFTkJRVU1zVVVGQlVTeExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRemRETEUxQlFVMHNRMEZCUXp0WlFVTllMRU5CUVVNN1dVRkRSQ3d5UlVGQk1rVTdXVUZETTBVc1JVRkJSU3hEUVVGRExFTkJRVU1zVjBGQlZ5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRMnhFTEUxQlFVMHNRMEZCUXp0WlFVTllMRU5CUVVNN1dVRkRSQ3hGUVVGRkxFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkRla0lzYzBWQlFYTkZPMmRDUVVOMFJTeFZRVUZWTEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dG5Ra0ZETjBJc1NVRkJTU3hIUVVGSExGVkJRVlVzUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXp0blFrRkRNVUlzVlVGQlZTeERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRPMWxCUTNSQ0xFTkJRVU03V1VGRFJDeE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJRenRaUVVNNVF5eHBSa0ZCYVVZN1dVRkRha1lzUzBGQlN5eEhRVUZITEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRE8yZENRVU42UWl4TFFVRkxPMmRDUVVOTUxFbEJRVWtzVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRVZCUVVVc1QwRkJUeXhMUVVGTExFdEJRVXNzVVVGQlVTeEpRVUZKTEV0QlFVc3NRMEZCUXl4RFFVRkRPMWxCUXk5RUxIbEZRVUY1UlR0WlFVTjZSU3hMUVVGTExFTkJRVU1zVTBGQlV5eEhRVUZITEZsQlFWa3NSMEZCUnl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8xbEJRM1pETEV0QlFVc3NRMEZCUXl4VFFVRlRMRWRCUVVjc1ZVRkJWU3hEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0WlFVTjJReXhMUVVGTExFTkJRVU1zVlVGQlZTeEhRVUZITEV0QlFVc3NRMEZCUXl4VFFVRlRPMmRDUVVNNVFpeEpRVUZKTEUxQlFVMHNRMEZCUXl4VFFVRlRMRWRCUVVjc1ZVRkJWU3hEUVVGRExFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlFVTXNSMEZCUnl4VFFVRlRMRU5CUVVNN1owSkJRM0JGTEVsQlFVa3NRMEZCUXp0WlFVTlVMR2RFUVVGblJEdFpRVU5vUkN4TFFVRkxMRU5CUVVNc1RVRkJUU3hIUVVGSExGTkJRVk1zUTBGQlF6dFpRVU42UWl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVOb1FpeExRVUZMTEVOQlFVTXNUVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkJRenRaUVVONFFpeERRVUZETzFsQlEwUXNLMFZCUVN0Rk8xbEJReTlGTEVsQlFVa3NSMEZCUnl4SlFVRkpMRWxCUVVrc1NVRkJTVHRuUWtGRFppeERRVUZETEV0QlFVc3NRMEZCUXp0blFrRkRVQ3hOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRGNFTXNhVVJCUVdsRU8xbEJRMnBFTEU5QlFVOHNSMEZCUnl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNN1dVRkRNME1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4WlFVRlpMRWxCUVVrc1QwRkJUeXhEUVVGRExFOUJRVThzU1VGQlNTeFBRVUZQTEVOQlFVTXNUMEZCVHl4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZETEV0QlFVc3NTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJRenRuUWtGRGJFWXNUVUZCVFN4RFFVRkRPMWxCUTFnc1EwRkJRenRaUVVORUxESkZRVUV5UlR0WlFVTXpSU3h6UmtGQmMwWTdXVUZEZEVZc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eFpRVUZaTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1VVRkJVU3hKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlF5OUVMRlZCUVZVc1IwRkJSeXhQUVVGUExFTkJRVU1zV1VGQldTeEpRVUZKTEVsQlFVa3NRMEZCUXp0blFrRkRNVU1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4WFFVRlhMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN2IwSkJRM1pETEVkQlFVY3NSMEZCUnl4SFFVRkhMRU5CUVVNc1ZVRkJWU3hEUVVGRE8yZENRVU42UWl4RFFVRkRPMmRDUVVORUxFZEJRVWNzUTBGQlF5eERRVUZETEVWQlFVVXNSMEZCUnl4RlFVRkZMRWRCUVVjc1IwRkJSeXhIUVVGSExFTkJRVU1zVlVGQlZTeEZRVUZGTEVOQlFVTTdiMEpCUXk5Q0xGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN2IwSkJRM0JDTEVkQlFVY3NSMEZCUnl4SFFVRkhMRU5CUVVNN1owSkJRMlFzUTBGQlF6dG5Ra0ZEUkN3NFJVRkJPRVU3WjBKQlF6bEZMRVZCUVVVc1EwRkJReXhEUVVGRExFZEJRVWNzUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4aFFVRmhMRWxCUVVrc1VVRkJVU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzI5Q1FVTXpReXhUUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4WFFVRlhMRWxCUVVrc1IwRkJSeXhEUVVGRExGbEJRVmtzU1VGQlNTeE5RVUZOTEVOQlFVTXNRMEZCUXp0blFrRkRiRVVzUTBGQlF6dFpRVU5NTEVOQlFVTTdXVUZEUkN4clEwRkJhME03V1VGRGJFTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRaUVVOT0xFOUJRVThzUTBGQlF5eEhRVUZITEVkQlFVY3NVMEZCVXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4dlFrRkJiMElzUlVGQlJTeEZRVUZGTEVOQlFVTTdaMEpCUXpkRUxFdEJRVXNzUTBGQlF5eEpRVUZKTEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNN2IwSkJRMlFzVlVGQlZUdHZRa0ZEVml4UFFVRlBMRU5CUVVNc1VVRkJVU3hKUVVGSkxFbEJRVWtzUTBGQlF6dG5Ra0ZETjBJc2FVSkJRV2xDTzJkQ1FVTnFRaXhOUVVGTkxFZEJRVWNzUTBGQlF5eFJRVUZSTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1JVRkJSU3hSUVVGUkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRE8yOUNRVU53UkN4UlFVRlJMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUlVGQlJTeFJRVUZSTEVOQlFVTXNRMEZCUXp0blFrRkRhRU1zUlVGQlJTeERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJRenR2UWtGRFZDeE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF6dG5Ra0ZETlVJc1EwRkJRenRuUWtGRFJDeHBRa0ZCYVVJN1owSkJRMnBDTEUxQlFVMHNSMEZCUnl4TlFVRk5MRWxCUVVrc1IwRkJSeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzJkQ1FVTXZRaXhGUVVGRkxFTkJRVU1zUTBGQlF5eE5RVUZOTEVsQlFVa3NUVUZCVFN4RFFVRkRMRXRCUVVzc1NVRkJTU3hWUVVGVkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMjlDUVVNMVF5eExRVUZMTEVOQlFVTXNUVUZCVFN4SFFVRkhMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMjlDUVVOMlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hMUVVGTExFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTTdkMEpCUTNwQ0xFdEJRVXNzUTBGQlF5eGpRVUZqTEVWQlFVVXNRMEZCUXp0dlFrRkRNMElzUTBGQlF6dG5Ra0ZEVEN4RFFVRkRPMWxCUTB3c1EwRkJRenRaUVVORUxFdEJRVXNzUTBGQlF5eEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRPMWxCUTJ4Q0xHOUVRVUZ2UkR0WlFVTndSQ3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEZsQlFWa3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhyUWtGQmEwSXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRuUWtGREwwTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eFJRVUZSTzI5Q1FVTnNRaXhQUVVGUExFTkJRVU1zVVVGQlVTeERRVUZETEV0QlFVc3NRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSeXhGUVVGRkxFVkJRVVVzU1VGQlNTeERRVUZETEV0QlFVc3NTMEZCU3l4RFFVRkRPMjlDUVVONFJDeFZRVUZWTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8yOUNRVU51UWl3d1JVRkJNRVU3YjBKQlF6RkZMQ3RGUVVFclJUdHZRa0ZETDBVc1JVRkJSU3hEUVVGRExFTkJRVU1zVFVGQlRTeEpRVUZKTEUxQlFVMHNRMEZCUXl4VlFVRlZMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0M1FrRkRjRVVzWjBWQlFXZEZPM2RDUVVOb1JTeEhRVUZITEVkQlFVY3NTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8zZENRVU51UWl4RlFVRkZMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZET3pSQ1FVTk9MRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTTdkMEpCUTNoQ0xFTkJRVU03ZDBKQlEwUXNOa1ZCUVRaRk8zZENRVU0zUlN4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRExGTkJRVk1zUjBGQlJ5eEpRVUZKTEVOQlFVTTdkMEpCUXpsQ0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRPM2RDUVVOaUxFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNVMEZCVXl4SFFVRkhMRk5CUVZNc1EwRkJRenQzUWtGRGJrTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF6czBRa0ZEVGl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWNzUjBGQlJ5eERRVUZETzNkQ1FVTjJRaXhEUVVGRE8yOUNRVU5NTEVOQlFVTTdaMEpCUTB3c1EwRkJRenRaUVVOTUxFTkJRVU03V1VGRFJDeE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJRenRSUVVONFFpeERRVUZETzFGQlEwUXNlVVJCUVhsRU8xRkJRM3BFTEhsRFFVRjVRenRSUVVONlF5eFJRVUZSTEVWQlFVVXNWVUZCVlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFdEJRVXM3V1VGRGFrTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEUxQlFVMHNRMEZCUXl4TFFVRkxMRVZCUVVVc1JVRkJSU3hMUVVGTExFVkJRVVU3WjBKQlF6ZERMRWxCUVVrc1JVRkJSU3hKUVVGSk8yZENRVU5XTEZkQlFWY3NSVUZCUlN4SlFVRkpPMkZCUTNCQ0xFTkJRVU1zUTBGQlF6dFpRVU5JTEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNN1VVRkRlRU1zUTBGQlF6dExRVU5LTEVOQlFVTXNRMEZCUXp0SlFVTklMRTFCUVUwc1EwRkJReXhGUVVGRkxFTkJRVU1zVFVGQlRTeERRVUZETzFGQlEySXNUMEZCVHl4RlFVRkZMRlZCUVZVc1NVRkJTU3hGUVVGRkxFbEJRVWs3V1VGRGVrSXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU03WjBKQlEySXNUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRenRaUVVNelF5eERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTlFMRU5CUVVNN1VVRkRSQ3hqUVVGakxFVkJRVVVzVlVGQlZTeEpRVUZKTEVWQlFVVXNTVUZCU1R0WlFVTm9ReXhKUVVGSkxFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRia0lzUlVGQlJTeERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJRenRuUWtGRFVDeE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03V1VGRGVFUXNRMEZCUXp0UlFVTk1MRU5CUVVNN1MwRkRTaXhEUVVGRExFTkJRVU03U1VGRFNDeE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRPMEZCUTJ4Q0xFTkJRVU1zUTBGQlF5eERRVUZETzBGQlJVZ3NLM0ZrUVVFcmNXUWlMQ0ptYVd4bElqb2lZWE56WlhSekwzQmhZMnR6TDJweGRXVnllUzl6Y21NdlpYWmxiblF2ZEhKcFoyZGxjaTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltUmxabWx1WlNoYlhHNGdJQ0FnWENJdUxpOWpiM0psWENJc1hHNGdJQ0FnWENJdUxpOTJZWEl2Wkc5amRXMWxiblJjSWl4Y2JpQWdJQ0JjSWk0dUwyUmhkR0V2ZG1GeUwyUmhkR0ZRY21sMlhDSXNYRzRnSUNBZ1hDSXVMaTlrWVhSaEwzWmhjaTloWTJObGNIUkVZWFJoWENJc1hHNGdJQ0FnWENJdUxpOTJZWEl2YUdGelQzZHVYQ0lzWEc0Z0lDQWdYQ0l1TGk5bGRtVnVkRndpWEc1ZExDQm1kVzVqZEdsdmJpQW9hbEYxWlhKNUxDQmtiMk4xYldWdWRDd2daR0YwWVZCeWFYWXNJR0ZqWTJWd2RFUmhkR0VzSUdoaGMwOTNiaWtnZTF4dUlDQWdJRndpZFhObElITjBjbWxqZEZ3aU8xeHVJQ0FnSUhaaGNpQnlabTlqZFhOTmIzSndhQ0E5SUM5ZUtEODZabTlqZFhOcGJtWnZZM1Z6ZkdadlkzVnpiM1YwWW14MWNpa2tMenRjYmlBZ0lDQnFVWFZsY25rdVpYaDBaVzVrS0dwUmRXVnllUzVsZG1WdWRDd2dlMXh1SUNBZ0lDQWdJQ0IwY21sbloyVnlPaUJtZFc1amRHbHZiaUFvWlhabGJuUXNJR1JoZEdFc0lHVnNaVzBzSUc5dWJIbElZVzVrYkdWeWN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR2tzSUdOMWNpd2dkRzF3TENCaWRXSmliR1ZVZVhCbExDQnZiblI1Y0dVc0lHaGhibVJzWlN3Z2MzQmxZMmxoYkN3Z1pYWmxiblJRWVhSb0lEMGdXMlZzWlcwZ2ZId2daRzlqZFcxbGJuUmRMQ0IwZVhCbElEMGdhR0Z6VDNkdUxtTmhiR3dvWlhabGJuUXNJRndpZEhsd1pWd2lLU0EvSUdWMlpXNTBMblI1Y0dVZ09pQmxkbVZ1ZEN3Z2JtRnRaWE53WVdObGN5QTlJR2hoYzA5M2JpNWpZV3hzS0dWMlpXNTBMQ0JjSW01aGJXVnpjR0ZqWlZ3aUtTQS9JR1YyWlc1MExtNWhiV1Z6Y0dGalpTNXpjR3hwZENoY0lpNWNJaWtnT2lCYlhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOMWNpQTlJSFJ0Y0NBOUlHVnNaVzBnUFNCbGJHVnRJSHg4SUdSdlkzVnRaVzUwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnUkc5dUozUWdaRzhnWlhabGJuUnpJRzl1SUhSbGVIUWdZVzVrSUdOdmJXMWxiblFnYm05a1pYTmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGxiR1Z0TG01dlpHVlVlWEJsSUQwOVBTQXpJSHg4SUdWc1pXMHVibTlrWlZSNWNHVWdQVDA5SURncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJtYjJOMWN5OWliSFZ5SUcxdmNuQm9jeUIwYnlCbWIyTjFjMmx1TDI5MWREc2daVzV6ZFhKbElIZGxKM0psSUc1dmRDQm1hWEpwYm1jZ2RHaGxiU0J5YVdkb2RDQnViM2RjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h5Wm05amRYTk5iM0p3YUM1MFpYTjBLSFI1Y0dVZ0t5QnFVWFZsY25rdVpYWmxiblF1ZEhKcFoyZGxjbVZrS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbExtbHVaR1Y0VDJZb1hDSXVYQ0lwSUQ0Z0xURXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCT1lXMWxjM0JoWTJWa0lIUnlhV2RuWlhJN0lHTnlaV0YwWlNCaElISmxaMlY0Y0NCMGJ5QnRZWFJqYUNCbGRtVnVkQ0IwZVhCbElHbHVJR2hoYm1Sc1pTZ3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibUZ0WlhOd1lXTmxjeUE5SUhSNWNHVXVjM0JzYVhRb1hDSXVYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSNWNHVWdQU0J1WVcxbGMzQmhZMlZ6TG5Ob2FXWjBLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1GdFpYTndZV05sY3k1emIzSjBLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCdmJuUjVjR1VnUFNCMGVYQmxMbWx1WkdWNFQyWW9YQ0k2WENJcElEd2dNQ0FtSmlCY0ltOXVYQ0lnS3lCMGVYQmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdRMkZzYkdWeUlHTmhiaUJ3WVhOeklHbHVJR0VnYWxGMVpYSjVMa1YyWlc1MElHOWlhbVZqZEN3Z1QySnFaV04wTENCdmNpQnFkWE4wSUdGdUlHVjJaVzUwSUhSNWNHVWdjM1J5YVc1blhHNGdJQ0FnSUNBZ0lDQWdJQ0JsZG1WdWRDQTlJR1YyWlc1MFcycFJkV1Z5ZVM1bGVIQmhibVJ2WFNBL1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pYWmxiblFnT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1bGR5QnFVWFZsY25rdVJYWmxiblFvZEhsd1pTd2dkSGx3Wlc5bUlHVjJaVzUwSUQwOVBTQmNJbTlpYW1WamRGd2lJQ1ltSUdWMlpXNTBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRlJ5YVdkblpYSWdZbWwwYldGemF6b2dKaUF4SUdadmNpQnVZWFJwZG1VZ2FHRnVaR3hsY25NN0lDWWdNaUJtYjNJZ2FsRjFaWEo1SUNoaGJIZGhlWE1nZEhKMVpTbGNiaUFnSUNBZ0lDQWdJQ0FnSUdWMlpXNTBMbWx6VkhKcFoyZGxjaUE5SUc5dWJIbElZVzVrYkdWeWN5QS9JRElnT2lBek8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWlhabGJuUXVibUZ0WlhOd1lXTmxJRDBnYm1GdFpYTndZV05sY3k1cWIybHVLRndpTGx3aUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdWMlpXNTBMbkp1WVcxbGMzQmhZMlVnUFNCbGRtVnVkQzV1WVcxbGMzQmhZMlVnUDF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1bGR5QlNaV2RGZUhBb1hDSW9YbnhjWEZ4Y0xpbGNJaUFySUc1aGJXVnpjR0ZqWlhNdWFtOXBiaWhjSWx4Y1hGd3VLRDg2TGlwY1hGeGNMbndwWENJcElDc2dYQ0lvWEZ4Y1hDNThKQ2xjSWlrZ09seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNTFiR3c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJEYkdWaGJpQjFjQ0IwYUdVZ1pYWmxiblFnYVc0Z1kyRnpaU0JwZENCcGN5QmlaV2x1WnlCeVpYVnpaV1JjYmlBZ0lDQWdJQ0FnSUNBZ0lHVjJaVzUwTG5KbGMzVnNkQ0E5SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaFpYWmxiblF1ZEdGeVoyVjBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlhabGJuUXVkR0Z5WjJWMElEMGdaV3hsYlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRU5zYjI1bElHRnVlU0JwYm1OdmJXbHVaeUJrWVhSaElHRnVaQ0J3Y21Wd1pXNWtJSFJvWlNCbGRtVnVkQ3dnWTNKbFlYUnBibWNnZEdobElHaGhibVJzWlhJZ1lYSm5JR3hwYzNSY2JpQWdJQ0FnSUNBZ0lDQWdJR1JoZEdFZ1BTQmtZWFJoSUQwOUlHNTFiR3dnUDF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZ0bGRtVnVkRjBnT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdwUmRXVnllUzV0WVd0bFFYSnlZWGtvWkdGMFlTd2dXMlYyWlc1MFhTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QkJiR3h2ZHlCemNHVmphV0ZzSUdWMlpXNTBjeUIwYnlCa2NtRjNJRzkxZEhOcFpHVWdkR2hsSUd4cGJtVnpYRzRnSUNBZ0lDQWdJQ0FnSUNCemNHVmphV0ZzSUQwZ2FsRjFaWEo1TG1WMlpXNTBMbk53WldOcFlXeGJkSGx3WlYwZ2ZId2dlMzA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVc5dWJIbElZVzVrYkdWeWN5QW1KaUJ6Y0dWamFXRnNMblJ5YVdkblpYSWdKaVlnYzNCbFkybGhiQzUwY21sbloyVnlMbUZ3Y0d4NUtHVnNaVzBzSUdSaGRHRXBJRDA5UFNCbVlXeHpaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklFUmxkR1Z5YldsdVpTQmxkbVZ1ZENCd2NtOXdZV2RoZEdsdmJpQndZWFJvSUdsdUlHRmtkbUZ1WTJVc0lIQmxjaUJYTTBNZ1pYWmxiblJ6SUhOd1pXTWdLQ001T1RVeEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1FuVmlZbXhsSUhWd0lIUnZJR1J2WTNWdFpXNTBMQ0IwYUdWdUlIUnZJSGRwYm1SdmR6c2dkMkYwWTJnZ1ptOXlJR0VnWjJ4dlltRnNJRzkzYm1WeVJHOWpkVzFsYm5RZ2RtRnlJQ2dqT1RjeU5DbGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hiMjVzZVVoaGJtUnNaWEp6SUNZbUlDRnpjR1ZqYVdGc0xtNXZRblZpWW14bElDWW1JQ0ZxVVhWbGNua3VhWE5YYVc1a2IzY29aV3hsYlNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlkV0ppYkdWVWVYQmxJRDBnYzNCbFkybGhiQzVrWld4bFoyRjBaVlI1Y0dVZ2ZId2dkSGx3WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JWEptYjJOMWMwMXZjbkJvTG5SbGMzUW9ZblZpWW14bFZIbHdaU0FySUhSNWNHVXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTjFjaUE5SUdOMWNpNXdZWEpsYm5ST2IyUmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tEc2dZM1Z5T3lCamRYSWdQU0JqZFhJdWNHRnlaVzUwVG05a1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGRtVnVkRkJoZEdndWNIVnphQ2hqZFhJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYlhBZ1BTQmpkWEk3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklFOXViSGtnWVdSa0lIZHBibVJ2ZHlCcFppQjNaU0JuYjNRZ2RHOGdaRzlqZFcxbGJuUWdLR1V1Wnk0c0lHNXZkQ0J3YkdGcGJpQnZZbW9nYjNJZ1pHVjBZV05vWldRZ1JFOU5LVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGJYQWdQVDA5SUNobGJHVnRMbTkzYm1WeVJHOWpkVzFsYm5RZ2ZId2daRzlqZFcxbGJuUXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVjJaVzUwVUdGMGFDNXdkWE5vS0hSdGNDNWtaV1poZFd4MFZtbGxkeUI4ZkNCMGJYQXVjR0Z5Wlc1MFYybHVaRzkzSUh4OElIZHBibVJ2ZHlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnUm1seVpTQm9ZVzVrYkdWeWN5QnZiaUIwYUdVZ1pYWmxiblFnY0dGMGFGeHVJQ0FnSUNBZ0lDQWdJQ0FnYVNBOUlEQTdYRzRnSUNBZ0lDQWdJQ0FnSUNCM2FHbHNaU0FvS0dOMWNpQTlJR1YyWlc1MFVHRjBhRnRwS3l0ZEtTQW1KaUFoWlhabGJuUXVhWE5RY205d1lXZGhkR2x2YmxOMGIzQndaV1FvS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVjJaVzUwTG5SNWNHVWdQU0JwSUQ0Z01TQS9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKMVltSnNaVlI1Y0dVZ09seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6Y0dWamFXRnNMbUpwYm1SVWVYQmxJSHg4SUhSNWNHVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnYWxGMVpYSjVJR2hoYm1Sc1pYSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm9ZVzVrYkdVZ1BTQW9aR0YwWVZCeWFYWXVaMlYwS0dOMWNpd2dYQ0psZG1WdWRITmNJaWtnZkh3Z2UzMHBXMlYyWlc1MExuUjVjR1ZkSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JoZEdGUWNtbDJMbWRsZENoamRYSXNJRndpYUdGdVpHeGxYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaG9ZVzVrYkdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYUdGdVpHeGxMbUZ3Y0d4NUtHTjFjaXdnWkdGMFlTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUU1aGRHbDJaU0JvWVc1a2JHVnlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhR0Z1Wkd4bElEMGdiMjUwZVhCbElDWW1JR04xY2x0dmJuUjVjR1ZkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaG9ZVzVrYkdVZ0ppWWdhR0Z1Wkd4bExtRndjR3g1SUNZbUlHRmpZMlZ3ZEVSaGRHRW9ZM1Z5S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsZG1WdWRDNXlaWE4xYkhRZ1BTQm9ZVzVrYkdVdVlYQndiSGtvWTNWeUxDQmtZWFJoS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dWMlpXNTBMbkpsYzNWc2RDQTlQVDBnWm1Gc2MyVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1YyWlc1MExuQnlaWFpsYm5SRVpXWmhkV3gwS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCbGRtVnVkQzUwZVhCbElEMGdkSGx3WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUVsbUlHNXZZbTlrZVNCd2NtVjJaVzUwWldRZ2RHaGxJR1JsWm1GMWJIUWdZV04wYVc5dUxDQmtieUJwZENCdWIzZGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hiMjVzZVVoaGJtUnNaWEp6SUNZbUlDRmxkbVZ1ZEM1cGMwUmxabUYxYkhSUWNtVjJaVzUwWldRb0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnb0lYTndaV05wWVd3dVgyUmxabUYxYkhRZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNCbFkybGhiQzVmWkdWbVlYVnNkQzVoY0hCc2VTaGxkbVZ1ZEZCaGRHZ3VjRzl3S0Nrc0lHUmhkR0VwSUQwOVBTQm1ZV3h6WlNrZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVdOalpYQjBSR0YwWVNobGJHVnRLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJEWVd4c0lHRWdibUYwYVhabElFUlBUU0J0WlhSb2IyUWdiMjRnZEdobElIUmhjbWRsZENCM2FYUm9JSFJvWlNCellXMWxJRzVoYldVZ1lYTWdkR2hsSUdWMlpXNTBMbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QkViMjRuZENCa2J5QmtaV1poZFd4MElHRmpkR2x2Ym5NZ2IyNGdkMmx1Wkc5M0xDQjBhR0YwSjNNZ2QyaGxjbVVnWjJ4dlltRnNJSFpoY21saFlteGxjeUJpWlNBb0l6WXhOekFwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h2Ym5SNWNHVWdKaVlnYWxGMVpYSjVMbWx6Um5WdVkzUnBiMjRvWld4bGJWdDBlWEJsWFNrZ0ppWWdJV3BSZFdWeWVTNXBjMWRwYm1SdmR5aGxiR1Z0S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdSRzl1SjNRZ2NtVXRkSEpwWjJkbGNpQmhiaUJ2YmtaUFR5QmxkbVZ1ZENCM2FHVnVJSGRsSUdOaGJHd2dhWFJ6SUVaUFR5Z3BJRzFsZEdodlpGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHMXdJRDBnWld4bGJWdHZiblI1Y0dWZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJ0Y0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzWlcxYmIyNTBlWEJsWFNBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCUWNtVjJaVzUwSUhKbExYUnlhV2RuWlhKcGJtY2diMllnZEdobElITmhiV1VnWlhabGJuUXNJSE5wYm1ObElIZGxJR0ZzY21WaFpIa2dZblZpWW14bFpDQnBkQ0JoWW05MlpWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FsRjFaWEo1TG1WMlpXNTBMblJ5YVdkblpYSmxaQ0E5SUhSNWNHVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiR1Z0VzNSNWNHVmRLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JxVVhWbGNua3VaWFpsYm5RdWRISnBaMmRsY21Wa0lEMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSdGNDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc1pXMWJiMjUwZVhCbFhTQTlJSFJ0Y0R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJsZG1WdWRDNXlaWE4xYkhRN1hHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQzh2SUZCcFoyZDVZbUZqYXlCdmJpQmhJR1J2Ym05eUlHVjJaVzUwSUhSdklITnBiWFZzWVhSbElHRWdaR2xtWm1WeVpXNTBJRzl1WlZ4dUlDQWdJQ0FnSUNBdkx5QlZjMlZrSUc5dWJIa2dabTl5SUdCbWIyTjFjeWhwYmlCOElHOTFkQ2xnSUdWMlpXNTBjMXh1SUNBZ0lDQWdJQ0J6YVcxMWJHRjBaVG9nWm5WdVkzUnBiMjRnS0hSNWNHVXNJR1ZzWlcwc0lHVjJaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1pTQTlJR3BSZFdWeWVTNWxlSFJsYm1Rb2JtVjNJR3BSZFdWeWVTNUZkbVZ1ZENncExDQmxkbVZ1ZEN3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUhSNWNHVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhWE5UYVcxMWJHRjBaV1E2SUhSeWRXVmNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYWxGMVpYSjVMbVYyWlc1MExuUnlhV2RuWlhJb1pTd2diblZzYkN3Z1pXeGxiU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JpQWdJQ0JxVVhWbGNua3VabTR1WlhoMFpXNWtLSHRjYmlBZ0lDQWdJQ0FnZEhKcFoyZGxjam9nWm5WdVkzUnBiMjRnS0hSNWNHVXNJR1JoZEdFcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtVmhZMmdvWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHcFJkV1Z5ZVM1bGRtVnVkQzUwY21sbloyVnlLSFI1Y0dVc0lHUmhkR0VzSUhSb2FYTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUhSeWFXZG5aWEpJWVc1a2JHVnlPaUJtZFc1amRHbHZiaUFvZEhsd1pTd2daR0YwWVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHVnNaVzBnUFNCMGFHbHpXekJkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dWc1pXMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdhbEYxWlhKNUxtVjJaVzUwTG5SeWFXZG5aWElvZEhsd1pTd2daR0YwWVN3Z1pXeGxiU3dnZEhKMVpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOUtUdGNiaUFnSUNCeVpYUjFjbTRnYWxGMVpYSjVPMXh1ZlNrN1hHNWNiaTh2SXlCemIzVnlZMlZOWVhCd2FXNW5WVkpNUFdSaGRHRTZZWEJ3YkdsallYUnBiMjR2YW5OdmJqdGphR0Z5YzJWMFBYVjBaamc3WW1GelpUWTBMR1Y1U2pKYVdFcDZZVmM1ZFVscWIzcE1RMHA2WWpOV2VWa3lWbnBKYW5CaVNXMUdlbU15VmpCamVUbDNXVmRPY21ONU9YRmpXRlpzWTI1cmRtTXpTbXBNTWxZeVdsYzFNRXd6VW5saFYyUnVXbGhKZFdGdVRXbFlVM2RwWW0xR2RGcFlUV2xQYkhSa1RFTktkRmxZUW5kaFZ6VnVZM2xKTmtsclJrSlJWVVZ6VkZWR1FsUlRlRVJSVlVaR1R6QnNRbEV4UVhOVk1FWkNWWHAwU2xGVlRsVk1SMnhEVVZWR2NGRnFkRXBSVlU1eFVXbDRlbEZyUmtKak1FazNVMVZHUkdSRlNYTmtNRXBDVVZoa1EwOHdiRUpSTTJoRFRFZFdRbEZYVlRkVFZVWkdXbWw0VmxGVlJsWlBNRTVDVVRGWmMxSlZSa0pTVTNoV1VWVkdWa3hGTVVKUlZUQnpVbFZHUWxKVGVGSlJWVVpTVEVWV1FsRlZWWE5WVlVaQ1ZWTjRSbEZWUmtaTVJsWkNVVlpWYzFKVlJrSlNVM2hPVVZWR1RrOHdiRUpTVkU1RlRFWnNRbEZXYTNOUk1FWkNVWHAwU2xGVlZtbE1SV3hDVVZWcmMxWXdSa0pXZVhoSVVWVkdTRXhIYkVSUlZVWndVWGw0UkZGVlJrUlBNR3hDVWxoQ1JVeEZNVUpSVlRCelVUQkdRbEY1ZUU1UlZVWk9URVZPUWxGVlZYTlVWVVpDVkZONFJGRlZSa1JNUlhSQ1VWVnpjMUpWUmtKU1ZIUlNVVlZWTVZGcGVGQlJWVVpRVEVWV1FsRlZWWE5XVlVaQ1ZsTjRURkZWUmt4TVJWWkNVVlZWYzFOVlJrSlRVM2hHVVZWR1JreEZiRUpSVld0elVsVkdRbEpUZUZwUlZVWmFUekZzUWxKWGNFVk1SV3hDVVZWcmMxRXdSa0pSZVhoR1VWVkdSa3hGWkVKUlZXTnpVbFZHUWxKVGVFaFJWVVpJVEVWV1FsRlZWWE5XVlVaQ1ZsTjRSbEZWUmtaTVJURkNVVlV3YzFKVlJrSlNVM2hPVVZWR1RreEZWa0pSVlZWelZEQkdRbFI1ZUVaUlZVNTFVa040VkZGVlJsUk1SV1JDVVZWamMxRXdSa0pTVTNoS1VWVkdTa3hGYkVKUlZXdHpWVlZHUWxWVGVFUlJWVVpHVEVWV1FsRXlhRVJNUld4Q1VWVnJjMUl3UmtKU2VYaE9VVlZHVGt4RlRrSlJWVTF6VTFWR1FsTlRlRVJSVlVaR1RFVjBRbEZWYzNOU1ZVWkNVbE40VGxGVlJrNU1SVTVDVVZWVmMxSXdSa0pTZVhoTVVWVkdURXhGVGtKUlZVMXpVMVZHUWxOVGVFaFJWVVpJVEVWMFFsRlZjM05TVlVaRVpVVlJjMVpWUmtKV1UzaElVVlZHU0V4Rk1VSlJWVEJ6VVRCR1FsRjVlRXBSVlVaS1RFVk9RbEZWVlhOVE1FWkNVM2w0UmxGVlJrWk1SbVJDVVZaamMxRXdSa0pTVTNoSVVWVkdTRXhGZEVKUlZYTnpVVEJHUWxGNWVGUlJWVVpVVEVWT1FsRlZUWE5UTUVaQ1UzbDRSRkZWUmtaTVJXUkNVVlZqYzFFd1JrSlNVM2hJVVZWR1NFeEZWa0pSVlZWelVUQkdRbEY2ZEZwUlZWWjNVbWw0U0ZGVlJraE1SV1JDVVZWamMxSXdSa0pTZVhoSVVWVkdTRXhGYkVKUlZXdHpVakJHUWxKNWVFcFJWVVpLVEVWc1FsRlZhM05WVlVaQ1ZWTjRSRkZWUmtSUE1XeENVbGhDUkV4RVVrUlJWVVV3VVhwMFdsRlZUVEZSZVhoR1VWVkdSa3hGVGtKUlZVMXpVVEJHUWxKVGVFcFJWVVpLVEVWT1FsRlZUWE5WVlVaQ1ZWTjRURkZWUmt4TVJVNUNVVlZOYzFOVlJrSlRVM2hLVVZWR1NreEZUa0pSVlUxelZWVkdRbFZUZUV4UlZVWk1URVZPUWxGVlZYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5OMW93U2tKUk1uaEZURVV4UWxGVk1ITlJNRVpDVVhwMFdsRlZUbE5NUlU1Q1VWVk5OMWRWUmtaU1EzZDVVbFZHUWsxclZUZFhWVVpFVFRCVmMxSlZSa0pTVTNoRVVWVkdSRXhGVGtKUlZWVnpWakJHUWxaNWVFUlJWVVpFVEVWc1FsRlZhM05STUVaQ1VsTjRTbEZWUmtwTVJXUkNVVlZqYzFSVlJrSlVVM2hFVVZWR1JFeEZkRUpSVlhOelVUQkdRbEY1ZUZSUlZVWlVURVZPUWxGVlkzTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5OMW93U2tKUk0zQkZURVV4UWxGVk1ITlJNRVpDVVhwMFdsRlZUbE5NUlU1Q1VWVk5OMWRWUmtaU1EzaEdVVlZHUmt4RlRrSlJWVTF6VVRCR1FsSlRlRXBSVlVaS1RFVk9RbEZWVFhOVU1FWkNWSGw0UkZGVlJrWk1SV1JDVVZWamMxRXdSa0pTVTNoSVVWVkdTRXhGVGtKUlZVMXpVVEJHUWxKVGVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBibEZyUmtaaFJVMXpZekJXUWxGWVRrWlBNbVJEVVZWT01GSlRlRlpSVlVaV1RFVmtRbEZWWTNOVFZVWkNVMU40UkZGVlJrUk1SWFJDVVZWemMxRXdSa0pTVTNoSVVWVkdTRXhGVGtKUlZWVnpVVEJHUWxGNmRHNVJhMFpFVERCSmMxTlZSa0pUVTNoSVVWVkdTRXhHVmtKUlZsVnpVVEJHUWxGNWVFeFJWVVpNVEVWV1FsRlZWWE5STUVaQ1VYcDBibEZyUmtSTlZVbHpWbFZHUWxaVGVFUlJWVVpFVEVWc1FsRlZhM05TVlVaQ1VsTjRSRkZWUmtSUE1XeENVVEkxUTB4RlRrSlJWVTAzVjFWR1JGSkRlRTVSVlVaT1RFVmtRbEZWWTNOVFZVWkNVMU40UkZGVlJrUk1SVGxDVVZVNGMxRXdSa0pTVTNoSVVWVkdTRXhGVGtKUlZWVnpVakJHUWxKNWVFUlJWVVpFVEVWc1FsRlZhM05UVlVaQ1UxTjRTRkZWUmtoTVJXeENVVlZyYzFFd1JrSlJlblJhVVZWV2IxSkRlSEJTYTBaQ1lWVlpOMWRWUmtSaGExbHpVekJHUWxONWVFaFJWVVpJVEVWMFFsRlZjM05STUVaQ1VsTjRUbEZWUms1TVJVNUNVVlZOYzFRd1JrSlVlWGhFVVZWR1JrOHlaRU5SVlUwMVVXbDRURkZWUmt4UE1tUkRVVlZPVFV4RmJFSlJWV3R6VkZWR1FsUlRlRVJSVlVaRVRFVjBRbEZWYzNOUk1FWkNVbE40U2xGVlJrcE1SVlpDVVZWVmMxUXdSa0pVZVhoTVVWVkdURXhGZEVKUlZYTnpWVlZHUWxWVGVFcFJWVVpLVEVWMFFsRlZjM05STUVaQ1VsTjRSRkZWUmtSUE1XeENVbFJzUlV4SWJFWlJWVVkxVWxSMFdsRlZUalpTVTNoTVVWVkdURXhGVGtKUlZVMXpWVEJHUWxWNWVFaFJWVVpJVEVac1FsRldhM05TTUVaQ1VubDRSRkZWUmtSTVJXUkNVVlZqYzFFd1JrSlJlWGhFVVZWR1JFOHhiRUpSTTFwRVRFVjBRbEZWYzNOUk1FWkNVWGw0VkZGVlJsUk1SV1JDVVZWamMxWlZSa0pXVTNoRVVWVkdSRXhGYkVKUlZXdHpVVEJHUWxKVGVFaFJWVVpJVEVWT1FsRlZWWE5STUVaQ1VYcDBXbEZWVGpaUmVYaE1VVlZHVEV4RlRrSlJWVTF6VmxWR1FsWlRlRWhSVlVaSVRFVjBRbEZWYzNOUk1FWkNVWGw0VkZGVlJsUlBNbVJEVVZWT2NWRjVlRXBSVlVaS1RFVXhRbEZWTUhOUk1FWkNVbE40VkZGVlJsUk1SV1JDVVZWamMxWlZSa0pXVTNoRVVWVkdSRXhGYkVKUlZXdHpVVEJHUWxKVGVHeFJWVVpzVEVWT1FsRlZWWE5TTUVaQ1VubDRWRkZWUmxSTVJVNUNVVlZWTjFvd1NrSlJNMmhHVEVWc1FsRlZhM05STUVaQ1VYcDBXbEZWVms5TVIyUkZVVlZHYmxKRWRGcFJWVTV2VWtONFRGRlZSa3hNUlU1Q1VWVk5jMVJWUmtKVVUzaElVVlZHU0V4R1RrSlJWazF6VVRCR1FsRjZkRnBSVlU0MlVXbDRSbEZWUmtaTVJVNUNVVlZOYzFFd1JrSlNVM2hFVVZWR1JFeEZkRUpSVlhOelVUQkdRbEY1ZUU1UlZVWlFURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JQTW1SRFVWVk9lVkZwZUV4UlZVWk1URVZPUWxGVlRYTlVWVVpDVkZONFNGRlZSa2hNUld4Q1VWVnJjMUV3UmtKUmVuUmFVVlZPZVZGcGVFUlJWVVpFVHpGc1FsSlZVWE5MTUZaQ1VWTjBSazh4YkVKUmVUbEdURVZzUWxGVmEzTlNNRVpDVW5sNFNsRlZSa3BNUld4Q1VWVnJjMU5WUmtKVFZIUnVVV3RHUkdKRlNYTlJNRVpDVWxONFRGRlZSa3hNUlU1Q1VWVlZOMW93U2tKUk1WRnpWRlZHUWxSVGVFUlJWVVpFVEVaT1FsRldUWE5STUVaQ1VsTjRTbEZWUmtwTVJWWkNVVlZWYzFFd1JrSlNVM2hNVVZWR1RFeEZUa0pSVlZWelVUQkdRbEpUZUVSUlZVWkVUekZzUWxKWVNrUk1SMnhGVVZWR2NGSkVkRnBSVlU1eFVrTjRVRkZWUmxCTVJXUkNVVlZqYzFSVlJrSlVVM2hFVVZWR1JFeEZkRUpSVlhOelVUQkdRbEY1ZUZCUlZVWlFURVZPUWxGVlZYTlRWVVpDVTFONFJGRlZSa1pNUld4Q1VWVnJjMUpWUmtKU1UzaEVVVlZHUkU4eGJFSlJlbVJFVEVWV1FsRlZWWE5STUVaQ1VYbDRSRkZWUmtaTVJVNUNVVlZOYzFkVlJrSlhVM2hLVVZWR1NreEZPVUpSVlRoelVUQkdRbEY1ZUZCUlZVWlFURVZzUWxGVmEzTlVNRVpDVkhsNFJGRlZSa1JNUlRsQ1VWVTRjMUV3UmtKUmVYaE1VVlZHVEV4RlRrSlJWVlZ6VTFWR1FsTlRlRVpSVlVaR1RFVnNRbEZWYTNOUk1FWkNVbE40VEZGVlJreE1SWFJDVVZVd2MxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMDNXakJLUWxFemNFZE1SVEZDVVZVd2MxRXdSa0pSZW5SYVVWVk9VMHhGVGtKUlZVMDNWMVZHUmxKRGQzbFNWVVpDVFd0Vk4xZFZSa1JOTUZWell6QmFRbEZZVGtkUE1XeENVVE5TUjB4RlZrSlJWVlZ6VVRCR1FsRjVlRVJSVlVaR1RFVk9RbEZWVFhOWFZVWkNWMU40U2xGVlJrcE1SVTVDVVZWTmMxUXdSa0pVZVhoRVVWVkdSRXhHUmtKUlZrVnpVMVZHUWxOVGVFUlJWVVpFVEVVeFFsRlZNSE5STUVaQ1VYbDRVbEZWUmxKTVJVNUNVVlZWYzFOVlJrSlRVM2hFVVZWR1NFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVUekprUTFGVlZqQlNVM2hXVVZWR1ZreEZaRUpSVldOelZEQkdRbFI1ZUVSUlZVWkVURVpzUWxGV2EzTlRWVVpDVTFONFNsRlZSa3BNUlU1Q1VWVk5OMW93U2tKUmVrWkVURVZXUWxGVlZYTlJNRVpDVVhsNFJGRlZSa1pNUlU1Q1VWVk5jMVl3UmtKV2VYaEVVVlZHUkV4RmJFSlJWV3R6VVRCR1FsSlRlRlpSVlVaV1RFVmtRbEZWWTNOVFZVWkNVMU40UkZGVlJraE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRTh5T1VOUlZVMDFVWGw0U0ZGVlJraE1SV1JDVVZWamMxSXdSa0pTZVhoRVVWVkdSRXhHVmtKUlZsVnpVVEJHUWxGNmRHNVJhMFpFWkVWSmMxRXdSa0pSZW5SdVVXdEdSRkpEZUVoUlZVWklURVZPUWxGVlRYTlJNRVpDVVhsNFJsRlZSa2hNUldSQ1VWVmpjMUpWUmtKU1UzaElVVlZHU0V4RlpFSlJWV056VWpCR1FsSjVlRVJSVlVaRVRFWldRbEZXVlhOU1ZVWkNVbmw0UkZGVlJrUlBNamxEVVZWT2QxRjVlRlJSVlVaVVRFVk9RbEZWVFhOVFZVWkNVMU40UkZGVlJrWk1SV1JDVVZWamMxRXdSa0pTVTNoRVVWVkdSRTh5T1VOUlZVNHdVV2w0U0ZGVlJraE1SV1JDVVZWamMxSXdSa0pTZVhoRVVWVkdSRTh5WkVOUlZVNVpURVZPUWxGVlRUZGFNRXBDVWxWUmMwOUZWa0pSVkdoR1R6SmtRMUZWVFRWU1UzaEdVVlZHUmt4RlRrSlJWVTF6VVRCR1FsSlRlRWhSVlVaSVRFVjBRbEZWYzNOUk1FWkNVbE40U2xGVlJrcE1SVTVDVVZWTmMxbFZSa0paVTNoS1VWVkdTa3hHUmtKUlZrVnpVVEJHUWxKNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBkbEZyUmtSaVJWRnpWVEJHUWxWNWVFUlJWVVpFVEVWc1FsRlZhM05STUVaQ1VsTjRTRkZWUmtoTVJVNUNVVlZOYzFZd1JrSldlWGhLVVZWR1NreEZaRUpSVldOelVUQkdRbEY1ZUZwUlZVWmFURVZzUWxGVmEzTlVWVVpDVkZONFJGRlZSa1pNUlU1Q1VWVk5OMW93U2tKUk1uQkdURVZPUWxGVlRUZFhWVVpFVW1sNFJGRlZSa1JQTVd4Q1VsVlJjMkV3VGtKUlYzUkVUekZzUWxFeWVFUk1SVTVDVVZWTmMxSXdSa0pTZVhoRVVWVkdSRXhGVGtKUlZVMDNWMVZHUkZScGVGQlJWVVpTVEVWT1FsRlZWWE5TTUVaQ1VubDRTRkZWUmtoTVJrNUNVVlpOYzFFd1JrSlNVM2hFVVZWR1JFeEZWa0pSVlZWelVUQkdRbEpUZUVSUlZVWkdURVZzUWxGVmEzTlJNRVpDVVhsNFRGRlZSa3hNUlU1Q1VWVk5jMkl3U2tKUlZ6bERURVZXUWxGVlZYTlNWVVpDVW5sNFJGRlZSa1JQTW1SRFVWVldNRkpUZUV4UlZVWk1URVZPUWxGVlRYTlRWVVpDVTFONFNGRlZSa2hNUlU1Q1VWVk5jMUl3UmtKU2VYaEVVVlZHUkU4eU9VTlJWVTV4VVdsNFZsRlZSbFpQTWpsRFVWVk9WMHhGT1VKUlZUaHpVVEJHUWxGNWVGSlJWVVpTVEVWc1FsRlZhM05UVlVaQ1UxTjRSRkZWUmtSUE1tUkRVVlZWZUZGcGVIQlJhMFpDWVZWSk4xb3dTa0pSTW5CRFRFVXhRbEZWTUhOU01FWkNVbmw0UkZGVlJrWk1Sa1pDVVZaRmMxRXdSa0pSZVhoSVVWVkdTRXhGVGtKUlZWVnpVakJHUWxKNWVFWlJWVVpHVEVaR1FsRldSWE5STUVaQ1VsTjRTbEZWUmtwTVJWWkNVVlZWYzFFd1JrSlNVM2hFVVZWR1JreEZkRUpSVlhOelVUQkdRbEY1ZUVwUlZVWktURVZPUWxGVlZUZGlNRXBDVVhwa1JVeEdSa0pSVmtWelVUQkdRbEY1ZUVoUlZVWklURVZPUWxGVlZYTlNNRVpDVW5sNFJsRlZSa1pNUmtaQ1VWWkZjMUV3UmtKU1UzaEVVVlZHUkU4eVpFTlJWVTEyVVdsNFJsRlZSa1pNUlU1Q1VWVk5jMUV3UmtKU1UzaE9VVlZHVUV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVR6STVRMUZWVG10TVJURkNVVlV3YzFFd1JrSlJlWGhNVVZWR1RFeEZUa0pSVlZWelVqQkdRbEo1ZUVaUlZVWkdURVZzUWxGVmEzTlJNRVpDVWxONFJGRlZSa1JQTW1SRFVWVk5lbEZwZUVSUlZVWkVUekprUTFGVlZrVk1SMnhEVVZWR2NGRnFkRzVSYTBaRVlXdEpjMVJWUmtKVVUzaElVVlZHU0V4Rk1VSlJWVEJ6VTFWR1FsTlRlRWhSVlVaSVRFVk9RbEZWVlhOVVZVWkNWRk40UkZGVlJrWk1SVTVDVVZWTk4xb3dTa0pSTW5CRVRFVldRbEZWVlhOUk1FWkNVWGw0UkZGVlJrWk1SVEZDVVZVd2MxTlZSa0pUVTNoT1VWVkdUa3hGVGtKUlZVMXpVekJHUWxONWVFcFJWVVpLVEVaV1FsRldWWE5STUVaQ1VsTjRTRkZWUmtoTVJVNUNVVlZqYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUwM1lqQktRbEV5TlVWTVJYUkNVVlZ6YzFFd1JrSlJlWGhPVVZWR1RreEZaRUpSVldOelZGVkdRbFJUZUVSUlZVWkVURVYwUWxGVmMzTlJNRVpDVWxONFNGRlZSa2hNUlZaQ1VWVlZjMU5WUmtKVFUzaEVVVlZHUmt4RlRrSlJWVTAzWWpCS1FsRXpjRVJNUlZaQ1VWVlZjMUV3UmtKUmVYaEVVVlZHUmt4RmRFSlJWWE56VVRCR1FsRjVlRTVSVlVaT1RFVjBRbEZWYzNOVE1FWkNWRk40UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZW5RelVXdEdSRTlWU1hOVE1FWkNVM2w0UkZGVlJrUk1SMDVDVVZkTmMxSlZSa0pTVTNoRVVWVkdSRTh5T1VOUlZVNDBVV2w0UkZGVlJrUlBNbVJEVVZWT1IweEZUa0pSVlUwM1YxVkdSRkpwZUVSUlZVWkVUekZzUWxFd1VYTlRNRVpDVTNsNFJGRlZSa1JNUld4Q1VWVnJjMUl3UmtKU2VYaEtVVlZHU2t4RlRrSlJWVTAzVjFWR1JtSkZTWE5pTUZKQ1VWYzVSVTh4YkVKUk0wSkZURVZXUWxGVlZYTlJNRVpDVVhsNFJGRlZSa1pNUlU1Q1VWVk5jMWRWUmtKWFUzaEtVVlZHU2t4RlRrSlJWVTF6VXpCR1FsTjVlRVJSVlVaRVRFZDBRMUZWUm5KUmFYaEdVVlZHU0V4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVR6SmtRMUZWVm5kU1EzaEdVVlZHUmt4RlRrSlJWVTF6VVRCR1FsSlRlRVJSVlVaR1RFVk9RbEZWVFhOVU1FWkNWSGw0UkZGVlJrUk1Sa1pDVVZaRk4ySXdTa0pSTTFwRFRFVTVRbEZWT0hOUk1FWkNVWGw0VWxGVlJsSk1SVTVDVVZWTmMxTXdSa0pUZVhoRVVWVkdSa3hHVGtKUlZrMXpVVEJHUWxGNWVFaFJWVVpJVEVWV1FsRlZWWE5TVlVaQ1VsTjRTbEZWUmtwTVJVNUNVVlZWYzFNd1JrSlRlWGhNVVZWR1RFeEZUa0pSVlZVM1lqQktRbEY2VGtWTVJsWkNVVlpWYzFFd1JrSlNVM2hLVVZWR1NreEZUa0pSVldOelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRUZGlNRXBDVWxoU1EweEVRa1pSVlVWM1VsUjBkbEZyUmtSTlZWVnpTekJXUWxGVGRFWlBNamxEVVZWTmRsSlRlRVpSVlVaR1RFVk9RbEZWVFhOUk1FWkNVbE40VGxGVlJrNU1SV3hDVVZWcmMxUlZSa0pVVTNoRVVWVkdSRXhHVmtKUlZsVnpVVEJHUWxKVGVFcFJWVVpLVEVWT1FsRlZWWE5UVlVaQ1UxTjRSRkZWUmtaTVJVNUNVVlZWYzFOVlJrSlRVM2hFVVZWR1JFeEZNVUpSVlRCelVUQkdRbEY1ZUZKUlZVWlNURVZPUWxGVlZYTlRWVVpDVTFONFJGRlZSa2hNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkU4elpFTlJWVlYyVWxONGJsSlZSa0phTUZVM1pEQktRbEV5YUVaTVJXUkNVVlZqYzFJd1JrSlNlWGhLVVZWR1NreEZUa0pSVlZWelZGVkdRbFJUZUVSUlZVWkdURVZPUWxGVlRUZGtNRXBDVWxoS1EweEZWa0pSVlZWelVUQkdRbEY1ZUVSUlZVWkdURVZrUWxGVmEzTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5OMDVGU2tKUk1XZHpVMVZHUWxOVGVFUlJWVVpHVEVVeFFsRlZNSE5STUVaQ1VsTjRTRkZWUmtoTVJXeENVVlZyYzFFd1JrSlJlblF6VVd0R1JHUnJTWE5STUVaQ1VYcDBNMUZyUmtaU1EzY3lVbFZHUWs1clZUZGtNRXBDVVhwa1JreEZNVUpSVlRCelVUQkdRbEY1ZUV4UlZVWk1URVZPUWxGVlRYTlZNRVpDVlhsNFNGRlZSa2hNUld4Q1VWVnJjMUV3UmtKUmVuUXpVV3RHUkU5VlNYTlRWVVpDVTFONFJGRlZSa1pNUld4Q1VWVnJjMUV3UmtKU1UzaEdVVlZHUmt4RlRrSlJWVTAzWkRCS1FsRXlXWE5VVlVaQ1ZGTjRSRkZWUmtSTVJYUkNVVlZ6YzFFd1JrSlJlWGhVVVZWR1ZFeEZaRUpSVldOelZUQkdRbFY1ZUVSUlZVWkVUek5rUTFGVlZuVlJlWGhHVVZWR1JreEZUa0pSVlUxelVUQkdRbEpUZUVoUlZVWktURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JQZWxKRFVWVk9XVXhGYkVKUlZXdHpVVEJHUWxKVGVFNVJWVVpPVEVWT1FsRlZWWE5TTUVaQ1VubDRTRkZWUmtoTVJVNUNVVlZOTjJRd1NrSlJNMUpEVEVWT1FsRlZUVGRpTUVwQ1VUQlpjMUV3UmtKUmVuUnVVV3RHUkZKcGVFUlJWVVpFVHpGc1FsRXdXWE5STUVaQ1VYcDBXbEZWVmtWTVJURkNVVlV3YzFFd1JrSlJlWGhNVVZWR1RFeEZUa0pSVlUxelZGVkdRbFJUZUVSUlZVWkVUekZHUWxFelNrTk1SVTVDVVZWTk4xVlZSa1pTUTNnMVVrVkdRbVZWVVRkVlZVWkVaV3RSYzJWVlRrSlJXR3hFVHpGR1FsRXpjRVJNUmtaQ1VWWkZjMUpWUmtKU1UzaFdVVlZHVmt4RmJFSlJWV3R6VWxWR1FsSlRlRXBSVlVaS1RFVldRbEZWVlhOVE1FWkNVM3AwV2xGVlRuZFJlWGhLVVZWR1NreEZUa0pSVlUxelVqQkdRbEo1ZUU1UlZVWk9URVZPUWxGVlRYTlVWVVpDVkZONFJGRlZUbmRSYVhoS1VWVkdTa3hGTVVKUlZUQnpVVEJHUWxGNWVFeFJWVVpNVEVWV1FsRlZWWE5TVlVaRVlrVkpjMU13UmtKVGVYaEdVVlZPVFU4eVpFTlJWVTVFVEVWc1FsRlZhM05TVlVaQ1VsTjRTbEZWUmtwUE1tUkRVVlZPVjB4R1pFSlJWbU56VWxWR1FsSlRlRXBSVlVaS1R6SkdRbEV5Y0VOTVJVNUNVVEJSYzFFd1JrSlJlblJhVVZWV1IweEZNVUpSVlRCelVUQkdRbEY1ZUV4UlZVWk1URVZPUWxGVlRYTlVNRVpDVkhsNFJGRlZSa1pNUlU1Q1VWVk5jMUpWUmtKU1UzaEtVVlZHU2t4RlZrSlJWVlZ6VTFWR1FsTlRlRVJSVlVaR1RFVk9RbEZWVFRkVlZVWkVaR3ROYzFFd1JrSlJlblJNVVZWV1JVeEZUa0pSVlZWelVUQkdRbEY2ZEVwUlZWWkxURVV4UWxGVk1ITlJNRVpDVVhsNFJsRlZSa1pNUlU1Q1VWVk5jMVJWUmtKVVUzaEVVVlZHUms4eFJrSlNWM0JEVEVVNVFsRlZPSE5TVlVaQ1VsTjRWbEZWUmxaTVJXeENVVlZyYzFKVlJrSlNVM2hLVVZWR1NrOHhiRUpSZWxaRFRFVXhRbEZWTUhOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTmMxTlZSa0pUVTNoRVVWVkdSazh5WkVOUlZVNXhVV2w0VGxGVlJrNU1SVTVDVVZWTmMxTXdSa0pUZVhoRVVWVkdSRXhGT1VKUlZUaHpVVEJHUWxKVGVFcFJWVVpLVEVWV1FsRlZWWE5UVlVaQ1UxTjRSbEZWUmtaTVJXeENVVlZyYzFFd1JrSlNVM2hFVVZWR1JFOHhiRUpSZWtaRVRFVk9RbEZWVFhOUk1FWkNVbE40UkZGVlJrUlBNVVpDVVRCM2MxRXdSa0pSZW5SU1VWVk9SVXhIVGtKUlYwMXpVbFZHUWxKVGVGWlJWVVpXVEVWc1FsRlZhM05TVlVaQ1VsTjRTbEZWUmtwUE1XeENVVEkxUkV4RmJFSlJWV3R6VTFWR1FsTlRlRWhSVlVaSVRFVnNRbEZWYTNOUk1FWkNVbE40UkZGVlJrUk1SVTVDVVZWVmMxRXdSa0pSZW5SYVVWVk9lVkZwZUVaUlZVWkdURVZPUWxGVlRYTlJNRVpDVWxONFNsRlZSa3hNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkU4eVpFTlJWVTVoVEVVeFFsRlZNSE5STUVaQ1VYbDRUbEZWUms1TVJVNUNVVlZOYzFNd1JrSlRlWGhFVVZWR1JFeEZPVUpSVlRoelVUQkdRbEpUZUVwUlZVWktURVZXUWxGVlZYTlRWVVpDVTFONFJsRlZSa1pNUld4Q1VWVnJjMUpWUmtKU1UzaEtVVlZHU2t4RlRrSlJWVlZ6VVRCR1FsRjZkRnBSVlU0eVVrTjRSRkZWUmtSUE1VWkNVVEJaYzFFd1JrSlJlblJNVVZWT1JVeEZUa0pSVlZWelVUQkdRbEY2ZEVwUlZWWkxURVV4UWxGVk1ITlJNRVpDVVhsNFRsRlZSazVNUlU1Q1VWVk5OMUZWUmtSYVEzaEVVVlZHUkV4RlRrSlJWVlZ6VVRCR1FsRjVTWE5KYlZwd1lrZFZhVTlwU21oak0wNXNaRWhOZG1OSFJtcGhNMDEyWVc1R01WcFlTalZNTTA1NVdYazViR1J0Vm5Wa1F6a3dZMjFzYmxveVZubE1iWEI2U1dsM2FXTXlPVEZqYlU1c1l6Qk9kbUp1VW14aWJsRnBUMnh6YVZwSFZtMWhWelZzUzBOQ1lsaEhOV05rUm5kcFRHazBkbGt5T1hsYVZuZHBURVo0ZFZoSVVtTkphVFIxVEROYWFHTnBPV3RpTWs0eFlsZFdkV1JHZDJsTVJuaDFXRWhTWTBscE5IVk1NbEpvWkVkRmRtUnRSbmxNTWxKb1pFZEdVV050YkRKWVEwbHpXRWMxWTJSR2QybE1hVFIyV2tkR01GbFRPVEpaV0VsMldWZE9hbHBZUWpCU1IwWXdXVlozYVV4R2VIVllTRkpqU1drMGRVd3pXbWhqYVRsdldWaE9VR1F5TldOSmFYaGpZbXg0ZFZoSVVtTkphVFIxVERKV01scFhOVEJZUTBwalltd3djMGxIV2pGaWJVNHdZVmM1ZFV0RFFuRlZXRlpzWTI1cmMwbEhVblpaTTFaMFdsYzFNRXhEUW10WldGSm9WVWhLY0dScGQyZFpWMDVxV2xoQ01GSkhSakJaVTNkbllVZEdlbFF6WkhWSlEydG5aVEY0ZFZoSE5XTkpibFo2V2xOQ2VtUklTbkJaTTFKalNXcDBZMkpzZUhWa2JVWjVTVWhLYldJeVRqRmpNREYyWTI1Q2IwbEVNR2RNTVRSdlVIcHdiV0l5VGpGak1teDFXbTA1YW1SWVRqaGFiVGxxWkZoT2RtUllVbWxpU0ZaNVMxTlJkazh4ZUhWWVJ6VnhWVmhXYkdOdWEzVmFXR2d3V2xjMWEwdERRbkZWV0Zac1kyNXJkVnBZV214aWJsRnpTVWgwWTJKc2VIVllTRkl3WTIxc2Jsb3lWbmxQYVVKdFpGYzFhbVJIYkhaaWFXZG5XbGhhYkdKdVVYTkpSMUpvWkVkRmMwbEhWbk5hVnpCelNVYzVkV0pJYkVsWlZ6VnJZa2RXZVdONVFYQkpTSFJqWW14NGRWaElVbU5rU0Zwb1kybENjRXhEUW1wa1dFbHpTVWhTZEdORGQyZFpibFpwV1cxNGJGWkliSGRhVTNkbllqSTFNR1ZZUW14TVEwSnZXVmMxYTJKSFZYTkpTRTUzV2xkT2NGbFhkM05ZUnpWalpFWjRNRmhJVW14a2JWWjFaRVpDYUdSSFoyZFFVMEppU1VkV2MxcFhNR2RtU0hkbldrYzVhbVJYTVd4aWJsRm5XRk40WTJKc2VEQllTRkpqWkVoU05XTkhWV2RRVTBKdldWaE9VR1F5TkhWWk1rWnpZa05uWjFwWVdteGlibEZ6U1VaM2FXUkliSGRhVm5kcFNVTnJaMUI1UW14a2JWWjFaRU0xTUdWWVFteEpSRzluV2xoYWJHSnVVWE5ZUnpWalpFWjRNRmhJVW5WWlZ6RnNZek5DYUZreVZucEpSREJuWVVkR2VsUXpaSFZNYlU1b1lrZDNiMGxIVmpKYVZ6VXdURU5DWTBsdE5XaGlWMVo2WTBkR2FscFdkMmxKUTJ0blVIbENiR1J0Vm5Wa1F6VjFXVmN4YkdNelFtaFpNbFYxWXpOQ2MyRllVVzlKUm5kcFRHeDNhVWxEYTJkUGFVSmlXRlIwWTJKc2VIVllTRkpqWkVkT01XTnBRVGxKU0ZKMFkwTkJPVWxIVm5OYVZ6Qm5VRk5DYkdKSFZuUkpTSGc0U1VkU2Rsa3pWblJhVnpVd1R6RjRkVmhITldOa1JuZ3dUSGs0WjFKSE9YVktNMUZuV2tjNFoxcFlXbXhpYmxKNlNVYzVkVWxJVW14bFNGRm5XVmMxYTBsSFRuWmlWekZzWW01UloySnRPV3RhV0U1allteDRNRmhJVW5CYWFVRnZTVWRXYzFwWE1IVmliVGxyV2xaU05XTkhWV2RRVkRBNVNVUk5aMlpJZDJkYVYzaHNZbE0xZFdJeVVteFdTR3gzV2xOQk9WQlVNR2RQUTBGd1NVaDBZMkpzZURCWVNGSmpaRWhLYkdSSVZubGlhblJqWW14NE1GaElVamxZUnpWallteDRNRmhJVVhaTWVVSnRZakpPTVdONU9XbGlTRlo1U1VjeGRtTnVRbTlqZVVJd1lubENiV0l5VGpGak1teDFUREk1TVdSRWMyZGFWelY2WkZoS2JFbElaR3hLTTBwc1NVYzFkbVJEUW0xaFdFcHdZbTFqWjJSSGFHeGlVMEo1WVZka2IyUkRRblZpTTJSallteDRNRmhJVW5CYWFVRnZTVWhLYldJeVRqRmpNREYyWTI1Q2IweHVVbXhqTTFGdlNVaFNOV05IVldkTGVVSnhWVmhXYkdOdWEzVmFXRnBzWW01UmRXUklTbkJhTW1Sc1kyMVdhMGxEYTJkTFUwSTNXRWMxWTJSR2VEQllTRko1V2xoU01XTnRORGRZUnpWalpFWjRNR1pXZUhWWVJ6VmpaRVo0TUdGWFdXZExRMEl3WlZoQ2JFeHRiSFZhUjFZMFZESlpiMGxHZDJsTWJIZHBTVU5yWjFCcFFYUk5VMEZ3U1VoMFkySnNlSFZZU0ZKalpFWjRNRXg1T0dkVWJVWjBXbGhPZDFsWFRteGFRMEl3WTIxc2Jsb3lWbmxQZVVKcVkyMVdhR1JIVldkWlUwSjVXbGRrYkdWSVFXZGtSemhuWWxkR01Ga3laMmRhV0Zwc1ltNVJaMlJJYkhkYVUwSndZbWxDYjFsWE5XdGlSMVZ2UzFaNGRWaElVbU5rUm5nd1ltMUdkRnBZVG5kWlYwNXNZM2xCT1VsSVVqVmpSMVYxWXpOQ2MyRllVVzlKUm5kcFRHeDNhVWxEYXpkWVJ6VmpaRVo0TUZoSVVqQmxXRUpzU1VRd1oySnRSblJhV0U1M1dWZE9iR041TlhwaFIyeHRaRU5uY0U4eGVIVllTRkpqWkVaNE1HSnRSblJhV0U1M1dWZE9iR041TlhwaU0wb3dTME5yTjFoSE5XTmtSbmd3WmxaNGRWaElVbU5rUnpsMVpFaHNkMXBUUVRsSlNGSTFZMGRWZFdGWE5XdGFXR2hRV21sbloxaERTVFpZUTBsblMxTkJPRWxFUVdkS2FWbG5XRU5LZG1Kc2QybEpRM05uWkVoc2QxcFVkR05pYkhoMVdFaFNZMlJET0haSlJVNW9Za2Q0YkdOcFFtcFpWelJuWTBkR2VtTjVRbkJpYVVKb1NVZHdVbVJYVm5sbFV6VkdaRzFXZFdSRFFuWlpiWEJzV1ROUmMwbEZPV2xoYlZacVpFTjNaMkl6U1dkaGJsWjZaRU5DYUdKcFFteGtiVloxWkVOQ01HVllRbXhKU0U0d1kyMXNkVm94ZUhWWVNGSmpaRWRXTWxwWE5UQkpSREJuV2xoYWJHSnVVbUpKUjNCU1pGZFdlV1ZUTld4bFNFSm9ZbTFTZGtsR01HZFFNWGgxV0VoU1kyUkdlREJhV0Zwc1ltNVJaMDlzZUhWWVNGSmpaRVo0TUdKdFZqTkpSM0JTWkZkV2VXVlROVVprYlZaMVpFTm5aMlJJYkhkYVUzZG5aRWhzZDFwWE9XMUpSMVl5V2xjMU1FbEVNRGxRVTBKalNXMDVhV0Z0Vm1wa1JuZHBTVU5aYlVsSFZqSmFWelV3U1VOck4xaEhOV05pYkhnd1dFaFJka3g1UWxWamJXeHVXakpXZVVsSFNuQmtSekZvWXpKek5rbERXV2ROVTBKdFlqTkpaMkp0UmpCaFdGcHNTVWRvYUdKdFVuTmFXRXA2VDNsQmJVbEVTV2RhYlRsNVNVZHdVbVJYVm5sbFUwRnZXVmQ0TTFsWWJIcEpTRko1WkZkVmNGaEhOV05rUm5nd1dsaGFiR0p1VVhWaFdFNVZZMjFzYmxveVZubEpSREJuWWpJMWMyVlZhR2hpYlZKeldsaEtla2xFT0dkTmFVRTJTVVJOTjFoSE5XTmtSbmd3V2xoYWJHSnVVWFZpYlVaMFdsaE9kMWxYVG14SlJEQm5ZbTFHZEZwWVRuZFpWMDVzWTNrMWNXSXliSFZMUTBKalNXazFZMGxwUVhCUE1YaDFXRWhTWTJSSFZqSmFWelV3VEc1S2RWbFhNV3hqTTBKb1dUSlZaMUJUUW14a2JWWjFaRU0xZFZsWE1XeGpNMEpvV1RKVloxQXhlSFZZU0ZKalpFWjRNR0p0VmpOSlJrcHNXakJXTkdORFoyZFlRMGx2V0c1NFkxaEdlR05NYVd4alNXbEJja2xITldoaVYxWjZZMGRHYWxwWVRYVmhiVGx3WW1sbloxaERTbU5ZUm5oalRHbG5MMDlwTkhGWVJuaGpXRU0xT0V0V2QybEpRMnRuUzNsQ1kwbHBhR05ZUm5oalRHNTNhMHRXZDJsSlEydG5UMng0ZFZoSVVtTmtSbmd3WW01V2MySkVkR05pYkhoMVdFaFNZMlJET0haSlJVNXpXbGRHZFVsSVZuZEpTRkp2V2xOQ2JHUnRWblZrUTBKd1ltbENhbGxZVG14SlIyd3dTVWRzZWtsSFNteGhWelZ1U1VoS2JHUllUbXhhUm5oMVdFaFNZMlJIVmpKYVZ6VXdURzVLYkdNelZuTmtRMEU1U1VoV2RWcEhWbTFoVnpWc1drUjBZMkpzZURCWVNGSndXbWxCYjBsRFJteGtiVloxWkVNMU1GbFlTbTVhV0ZGblMxTkNOMWhITldOa1JuZ3dXRWhTYkdSdFZuVmtRelV3V1ZoS2JscFlVV2RRVTBKc1lrZFdkRTh4ZUhWWVNGSmpaRWd4WTJKc2VIVllTRkpqWkVNNGRrbEZUbk5pTWpWc1NVZEdkV1ZUUW5CaWJVNTJZbGRzZFZwNVFtdFpXRkpvU1VkR2RWcERRbmRqYlZaM1dsYzFhMGxJVW05YVUwSnNaRzFXZFdSRGQyZFpNMHBzV1ZoU2NHSnRZMmRrUjJoc1NVZG9hR0p0VW5OYVdFbG5XVmhLYmtsSGVIQmpNMUpqWW14NE1GaElVbXRaV0ZKb1NVUXdaMXBIUmpCWlUwRTVVRk5DZFdSWGVITkpSRGxqWW14NE1GaElVbU5rUm5ObldsaGFiR0p1VVdkWVUwRTJXRWMxWTJSR2VEQllTRkp4VlZoV2JHTnVhM1ZpVjBaeVdsVkdlV050UmpWTFEwSnJXVmhTYUV4RFFtSkpSMVl5V2xjMU1FbEdNR2RMVkhSallteDRkVmhJVW1Oa1F6aDJTVVZHYzJKSE9UTkpTRTUzV2xkT2NGbFhkMmRhV0Zwc1ltNVNla2xJVW5aSlIxSjVXVmhqWjJJelZqQmpNbXhyV2xOQ01HRkhWV2RpUjJ4MVdsaE9ZMkpzZURCWVNGSjZZMGRXYW1GWFJuTkpSREJuWVd4R01WcFlTalZNYlZZeVdsYzFNRXh1VG5kYVYwNXdXVmQ0WWtsSVVqVmpSMVZuV0ZOQ09HWkRRamRtVkhSallteDRNRmhJVW5CYWFVRnZTVU5HZG1KdGVEVlRSMFoxV2tkNGJHTnVUV2RLYVZsbll6TkNiRmt5YkdoaVF6VXdZMjFzYmxveVZubEpRMWx0U1VoT2QxcFhUbkJaVjNkMVpFaEtjRm95Wkd4amFUVm9ZMGhDYzJWVFoyZGFWM2hzWWxOM1oxcEhSakJaVTBGd1NVUXdPVkJUUW0xWlYzaDZXbE5CY0VsSWRHTmliSGd3V0VoU1kyUklTbXhrU0ZaNVltcDBZMkpzZURCWVNGSTVXRWMxWTJKc2VEQllTRkYyVEhsQ1JWcFlVbXhqYlRGd1ltMVZaMXBZV214aWJsRm5ZMGhLZG1OSFJtNVpXRkp3WWpJMFoyTkhSakJoUTBKd1ltbENhRnBJV21oaWJVNXNURU5DZDFwWVNXZFdlazVFU1VkV01scFhOVEJqZVVKNlkwZFdha2xEWjJwUFZHc3hUVk5zWTJKc2VEQllTRkYyVEhsQ1EyUlhTbWxpUjFWblpGaEJaMlJIT0dkYVJ6bHFaRmN4YkdKdVVYTkpTRkp2V2xjMFoyUkhPR2RrTW14MVdrYzVNMDk1UWpOWldGSnFZVU5DYldJelNXZFpVMEp1WWtjNWFWbFhkMmRpTTJSMVdsaEtSV0l5VGpGaVYxWjFaRU5DTWxsWVNXZExRMDAxVG5wSk1FdFdlSFZZU0ZKalpFZHNiVWxEWjJkSlZ6bDFZa2hzU1ZsWE5XdGlSMVo1WTNsQmJVcHBRV2hqTTBKc1dUSnNhR0pETlhWaU1Fb3hXVzFLYzFwVFFXMUthVUZvWVd4R01WcFlTalZNYld4NlZqSnNkVnBIT1ROTFEwSnNZa2RXZEVsRGEyZExVMEkzV0VjMVkySnNlREJZU0ZKalpFZEtNVmx0U25OYVZsSTFZMGRWWjFCVFFucGpSMVpxWVZkR2MweHRVbXhpUjFadVdWaFNiRlpJYkhkYVUwSTRaa05DTUdWWVFteFBNWGgxV0VoU1kyUkdlREJoVjFsblMwTkJhR050V25aWk0xWjZWRmM1ZVdOSFozVmtSMVo2WkVObloxbHVWbWxaYlhoc1ZraHNkMXBUUVhKSlNGSTFZMGRWWjB0VFFYQkpTSFJqWW14NE1GaElVbU5rUm5nd1dUTldlVWxFTUdkWk0xWjVURzVDYUdOdFZuVmtSVFYyV2tkVk4xaEhOV05rUm5nd1dFaFNPVmhITldOa1JuZ3dXRWhTYldJelNXZExRMEUzU1VkT01XTnFjMmRaTTFaNVNVUXdaMWt6Vm5sTWJrSm9ZMjFXZFdSRk5YWmFSMVZuUzFOQ04xaEhOV05rUm5nd1dFaFNZMlJIVmpKYVZ6VXdWVWRHTUdGRE5YZGtXRTV2UzBOQ2FtUllTV2RMVkhSallteDRNRmhJVW1Oa1JuZ3daRWN4ZDBsRU1HZFpNMVo1VHpGNGRWaElVbU5rUm5nd1psWjRkVmhITldOa1JuZ3dXRWhSZGt4NVFsQmliWGcxU1VkR2ExcERRak5oVnpWcllqTmpaMkZYV1dka01sVm5Xakk1TUVsSVVuWkpSMUoyV1ROV2RGcFhOVEJKUTJoc1RHMWpkVXhEUW5WaU0xRm5ZMGQ0YUdGWE5HZGlNa3B4U1VjNWVVbEhVbXhrUjBacVlVZFdhMGxGVWxCVVUyeGpZbXg0TUZoSVVtTmtSMnh0U1VObloyUkhNWGRKUkRBNVVGTkJiMGxIVm5OYVZ6QjFZak5rZFZwWVNrVmlNazR4WWxkV2RXUkRRamhtUTBKcllqSk9NV0pYVm5Wa1EwRndTVU5yWjJVeGVIVllTRkpqWkVaNE1GaElVbXhrYlZaMVpFWkNhR1JIWjNWalNGWjZZVU5uWjJSSE1YZE1iVkpzV20xR01XSklVbGRoVjFZelNVaDRPRWxJVW5SalF6VjNXVmhLYkdKdVVsaGhWelZyWWpOaloyWklkMmRrTW14MVdrYzVNMGxEYXpkWVJ6VmpaRVo0TUZoSVVqbFlSelZqWkVaNE1HWldlSFZZUnpWalpFWjRNRXg1T0dkU2JXeDVXbE5DYjFsWE5XdGlSMVo1WTNsQ2RtSnBRakJoUjFWbldsaGFiR0p1VVdkalIwWXdZVVo0ZFZoSVVtTmtSMnRuVUZOQmQwOHhlSFZZU0ZKalpFaGtiMkZYZUd4SlEyZG5TME5DYW1SWVNXZFFVMEpzWkcxV2RXUkdRbWhrUjJoaVNVZHJja3Q1UW1SSlEydG5TbWxaWjBsWFZqSmFWelV3VEcxc2VsVklTblpqUjBadVdWaFNjR0l5TlZSa1J6bDNZMGRXYTB0RGEyZExVMEkzV0VjMVkySnNlREJZU0ZKalpFZFdNbHBYTlRCTWJsSTFZMGRWWjFCVFFuQkpSRFJuVFZOQkwxaEhOV05rUm5nd1dFaFNZMlJIU2pGWmJVcHpXbFpTTldOSFZXZFBiSGgxV0VoU1kyUkdlREJZU0ZKNlkwZFdhbUZYUm5OTWJVcHdZbTFTVldWWVFteEpTSGc0U1VoU05XTkhWVGRZUnpWallteDRNRmhJVW1Oa1F6aDJTVWR3VW1SWFZubGxVMEp2V1ZjMWEySkhWbmxZUnpWalpFWjRNRmhJVW05WlZ6VnJZa2RWWjFCVFFXOUpSMUpvWkVkR1VXTnRiREpNYldSc1pFTm5aMWt6Vm5sTVEwSmpTVzFXTWxwWE5UQmpNWGRwU1VOcloyWklkMmRsTXpCblMxWnpaMXBZV214aWJsRjFaRWhzZDFwVFFtUkpRMWx0V0VjMVkyUkdlREJZU0ZKalpFZFNhR1JIUmxGamJXd3lURzFrYkdSRFoyZFpNMVo1VEVOQ1kwbHRhR2hpYlZKeldsWjNhVWxEYXpkWVJ6VmpaRVo0TUZoSVVuQmFhVUZ2U1Vkb2FHSnRVbk5hVTBGd1NVaDBZMkpzZURCWVNGSmpaRVo0TUdGSFJuVmFSM2hzVEcxR2QyTkhlRFZMUTBKcVpGaEpjMGxIVW1oa1IwVm5TMVIwWTJKc2VEQllTRkpqWkVneFkySnNlSFZZU0ZKalpFWjRNRXg1T0dkVWJVWXdZVmhhYkVsSGFHaGliVkp6V2xoS1kySnNlREJZU0ZKalpFZG9hR0p0VW5OYVUwRTVTVWM1ZFdSSWJIZGFVMEZ0U21sQ2FtUllTbUpKUnpsMVpFaHNkMXBUUW1SUE1YaDFXRWhTWTJSR2VEQmhWMWxuUzBOQ2IxbFhOV3RpUjFWblNtbFpaMkZIUm5WYVIzaHNURzFHZDJOSGVEVkpRMWx0U1VkR2Fsa3lWbmRrUlZKb1pFZEZiMGxIVGpGamFVRndTVU5yWjJVeGVIVllTRkpqWkVaNE1GaElVbXhrYlZaMVpFTTFlVnBZVGpGaVNGRm5VRk5DYjFsWE5XdGlSMVYxV1ZoQ2QySklhMjlKUjA0eFkybDNaMXBIUmpCWlUwRndUekY0ZFZoSVVtTmtSbmd3V0VoU2NGcHBRVzlKUjFZeVdsYzFNRXh1U214ak0xWnpaRU5CT1ZCVU1HZGFiVVp6WXpKVlowdFRRamRZUnpWalpFWjRNRmhJVW1Oa1JuZ3dXbGhhYkdKdVVYVmpTRXBzWkcxV2RXUkZVbXhhYlVZeFlraFJiMHRVZEdOaWJIZ3dXRWhTWTJSR2VEQm1WbmgxV0VoU1kyUkdlREJtVm5oMVdFaFNZMlJJTVdOaWJIZ3dXRWhTYkdSdFZuVmtRelV3WlZoQ2JFbEVNR2RrU0d4M1dsUjBZMkpzZUhWWVNGSmpaRU00ZGtsRmJHMUpSelYyV1cwNWEyVlRRbmRqYlZZeVdsYzFNRnBYVVdka1IyaHNTVWRTYkZwdFJqRmlTRkZuV1ZkT01HRlhPWFZNUTBKcllubENjR1JEUW5WaU0yUmpZbXg0TUZoSVVuQmFhVUZ2U1VOR2RtSnRlRFZUUjBaMVdrZDRiR051VFdkS2FWbG5TVmRXTWxwWE5UQk1iV3g2VWtkV2JWbFlWbk5rUmtKNVdsaGFiR0p1VW14YVEyZHdTVU5yWjJVeGVIVllSelZqWkVaNE1GaElVbkJhYVVGdlNVTm5aMGxZVG5kYVYwNXdXVmQzZFZneVVteGFiVVl4WWtoUloyWkllR05pYkhnd1dFaFNZMlJHZURCak0wSnNXVEpzYUdKRE5XWmFSMVp0V1ZoV2MyUkROV2hqU0VKelpWTm5aMXBZV214aWJsSlJXVmhTYjB4dVFuWmpRMmR3VEVOQ2ExbFlVbWhKUTJ0blVGUXdPVWxIV21oaVNFNXNTVU5yWjBwcFdtTmliSGd3V0VoU1kyUkdlREJaVjA1cVdsaENNRkpIUmpCWlUyZG5XbGQ0YkdKVFFYQkpRMnRuWlRGNGRWaEhOV05rUm5nd1dFaFNZMlJET0haSlJVNW9Za2QzWjFsVFFuVlpXRkp3WkcxVloxSkZPVTVKUnpGc1pFZG9kbHBEUW5aaWFVSXdZVWRWWjJSSFJubGFNbFl3U1Voa2NHUkhaMmRrUjJoc1NVaE9hR0pYVldkaWJVWjBXbE5DYUdONVFqQmhSMVZuV2xoYWJHSnVVWFZZUnpWalpFWjRNRmhJVW1Oa1F6aDJTVVZTZG1KcFpEQkpSMUoyU1VkU2JGcHRSakZpU0ZGbldWZE9NR0ZYT1hWamVVSjJZbWxDTTJGWE5XdGlNMk56U1VoU2IxbFlVVzVqZVVJellVZFdlVnBUUW01aVJ6bHBXVmQzWjJSdFJubGhWMFpwWWtkV2VrbEhTbXhKUTJkcVRtcEZNMDFEYkdOaWJIZ3dXRWhTWTJSR2VEQmhWMWxuUzBOQ2RtSnVValZqUjFWblNtbFpaMkZzUmpGYVdFbzFURzFzZWxKdVZuVlpNMUp3WWpJMGIwbEhWbk5hVnpGaVNVaFNOV05IVldkWVUwRndTVU5aYlVsRFJuRlZXRlpzWTI1cmRXRllUbGhoVnpWcllqTmpiMGxIVm5OYVZ6Qm5TMU5CY0VsSWRHTmliSGgxV0VoU1kyUkdlREJZU0ZKalpFTTRka2xGVW5aaWFXUXdTVWhLYkV4WVVubGhWMlJ1V2xoSloxbFhOR2RpTWpWSFZEQTRaMXBZV214aWJsRm5aREpvYkdKcFFqTmFVMEpxV1ZkNGMwbEhiREJqZVVKSFZEQTRiMHRUUW5SYVdGSnZZakpTWTJKc2VEQllTRkpqWkVaNE1GaElVakJpV0VGblVGTkNiR0pIVm5SWGVVSjJZbTVTTldOSFZXZFlWSFJqWW14NGRWaElVbU5rUm5nd1dFaFNZMlJIYkcxSlEyZG5aRWN4ZDBsRGEyZGxNWGgxV0VoU1kyUkdlREJZU0ZKalpFWjRNRnBYZUd4aVZuTm5ZakkxTUdWWVFteEpSakJuVUZOQ2RXUlhlSE5QTVhoMVdFaFNZMlJHZURCWVNGSmpaRWd4WTJKc2VIVllTRkpqWkVaNE1GaElVbU5rUXpoMlNVWkNlVnBZV214aWJsRm5ZMjFWZEdSSVNuQmFNbVJzWTIxc2RWcDVRblphYVVJd1lVZFZaMk15Um5SYVUwSnNaRzFXZFdSRGQyZGpNbXgxV1RKVloyUXlWV2RaVjNoNVdsZEdhMlZUUW1sa1YwcHBZa2RXYTBsSGJEQkpSMFpwWWpOYWJGaEhOV05rUm5nd1dFaFNZMlJHZURCaGJFWXhXbGhLTlV4dFZqSmFWelV3VEc1U2VXRlhaRzVhV0Vwc1drTkJPVWxJVWpWalIxVTNXRWMxWTJSR2VEQllTRkpqWkVaNE1GcFhlR3hpVm5OblpFaHNkMXBUUW1STFEyczNXRWMxWTJSR2VEQllTRkpqWkVaNE1HRnNSakZhV0VvMVRHMVdNbHBYTlRCTWJsSjVZVmRrYmxwWVNteGFRMEU1U1VoV2RWcEhWbTFoVnpWc1drUjBZMkpzZUhWWVNGSmpaRVo0TUZoSVVtTmtSMnh0U1VObloyUkhNWGRKUTJ0blpURjRkVmhJVW1Oa1JuZ3dXRWhTWTJSR2VEQmFWM2hzWWxaeloySXlOVEJsV0VKc1NVWXdaMUJUUWpCaVdFRTNXRWMxWTJSR2VEQllTRkpqWkVaNE1HWldlSFZZU0ZKalpFWjRNRmhJVWpsWVJ6VmpaRVo0TUZoSVVqbFlSelZqWkVaNE1HWldlSFZZUnpWalpFWjRNR050VmpCa1dFcDFTVWRXTWxwWE5UQk1ia3BzWXpOV2MyUkVkR05pYkhnd1psTjRZMkpzZUhWWVNGRjJUSGxDVVdGWFpHNWxWMHBvV1RKeloySXlOR2RaVTBKcllqSTFkbU5wUW14a2JWWjFaRU5DTUdKNVFucGhWekV4WWtkR01GcFRRbWhKUjFKd1dtMWFiR050Vm5Wa1EwSjJZbTFXWTJKc2VEQk1lVGhuVmxoT2JGcERRblppYlhnMVNVZGFkbU5wUW1kYWJUbHFaRmhOYjJGWE5HZG1RMEoyWkZoUmNGbERRbXhrYlZaMVpFaE9ZMkpzZURCak1teDBaRmQ0YUdSSFZUWkpSMW94WW0xT01HRlhPWFZMUTBJd1pWaENiRXhEUW14aVIxWjBURU5DYkdSdFZuVmtRMEZ3U1VoMFkySnNlREJZU0ZJeVdWaEpaMXBUUVRsSlIzQlNaRmRXZVdWVE5XeGxTRkpzWW0xUmIxaEhOV05rUm5nd1dFaFNkVnBZWTJkaGJFWXhXbGhLTlV4clZqSmFWelV3UzBOcmMxaEhOV05rUm5nd1dFaFNiR1J0Vm5Wa1EzaGpZbXg0TUZoSVVtTmtTSFJqWW14NE1GaElVbU5rUm5nd1pFaHNkMXBVYjJka1NHeDNXbE40WTJKc2VEQllTRkpqWkVaNE1HRllUbFJoVnpFeFlrZEdNRnBYVVRaSlNGSjVaRmRXWTJKc2VEQllTRkpqWkVneFkySnNlREJZU0ZGd1R6RjRkVmhITldOa1JuZ3dZV3hHTVZwWVNqVk1iVll5V2xjMU1FeHVVbmxoVjJSdVdsaEpiMGxIVlhOSlJ6VXhZa2QzYzBsSFZuTmFWekJuUzFSMFkySnNlREJtVm5oMVdFYzFPVWxEYXpkWVJ6VmpZbTF3VW1SWFZubGxVelZ0WW1rMWJHVklVbXhpYlZGdlNVaDBZMkpzZUhWWVNGSXdZMjFzYmxveVZubFBhVUp0WkZjMWFtUkhiSFppYVdkblpFaHNkMXBUZDJkYVIwWXdXVk5CY0VsSWRHTmliSGd3V0VoU2VWcFlVakZqYlRSblpFZG9jR041Tld4WlYwNXZTME5DYldSWE5XcGtSMngyWW1sbmNFbElkR05pYkhnd1dFaFNZMlJIY0ZKa1YxWjVaVk0xYkdSdFZuVmtRelV3WTIxc2Jsb3lWbmxMUTBJd1pWaENiRXhEUW10WldGSm9URU5DTUdGSGJIcEpRMnMzV0VjMVkyUkdlREJtVTBGd1R6RjRkVmhJVWpsTVJuaDFXRWhTTUdOdGJHNWFNbFo1VTBkR2RWcEhlR3hqYW05bldtNVdkVmt6VW5CaU1qUnZTVWhTTldOSFZYTkpSMUpvWkVkRlowdFRRamRZUnpWalpFWjRNR1J0Um5sSlIxWnpXbGN3WjFCVFFqQmhSMng2VjNsQmQwbEdNRGRZUnpWalpFWjRNR0ZYV1dkTFEwSnNZa2RXZEVsRGEyZGxNWGgxV0VoU1kyUkdlREJqYlZZd1pGaEtkVWxIY0ZKa1YxWjVaVk0xYkdSdFZuVmtRelV3WTIxc2Jsb3lWbmxMUTBJd1pWaENiRXhEUW10WldGSm9URU5DYkdKSFZuUk1RMEl3WTI1V2JFbERhemRZUnpWalpFWjRNR1pXZUhWWVNGSTVXRWMxT1VsRGF6ZFlSelZqWW01S2JHUklWbmxpYVVKeFZWaFdiR051YXpkWVJ6VTVTVU5yTjFoSE5HbFlXREE5WEc0aVhYMD1cbiJdfQ==

//# sourceMappingURL=data:application/json;charset=utf8;base64,
