define([
    "../core",
    "../data/var/dataPriv",
    "./support",
    "../event",
    "./trigger"
], function (jQuery, dataPriv, support) {
    "use strict";
    // Support: Firefox <=44
    // Firefox doesn't have focus(in | out) events
    // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
    //
    // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
    // focus(in | out) events fire after focus & blur events,
    // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
    // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
    if (!support.focusin) {
        jQuery.each({ focus: "focusin", blur: "focusout" }, function (orig, fix) {
            // Attach a single capturing handler on the document while someone wants focusin/focusout
            var handler = function (event) {
                jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
            };
            jQuery.event.special[fix] = {
                setup: function () {
                    var doc = this.ownerDocument || this, attaches = dataPriv.access(doc, fix);
                    if (!attaches) {
                        doc.addEventListener(orig, handler, true);
                    }
                    dataPriv.access(doc, fix, (attaches || 0) + 1);
                },
                teardown: function () {
                    var doc = this.ownerDocument || this, attaches = dataPriv.access(doc, fix) - 1;
                    if (!attaches) {
                        doc.removeEventListener(orig, handler, true);
                        dataPriv.remove(doc, fix);
                    }
                    else {
                        dataPriv.access(doc, fix, attaches);
                    }
                }
            };
        });
    }
    return jQuery;
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL2V2ZW50L2ZvY3VzaW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFFO0lBQ1AsU0FBUztJQUNULHNCQUFzQjtJQUN0QixXQUFXO0lBRVgsVUFBVTtJQUNWLFdBQVc7Q0FDWCxFQUFFLFVBQVUsTUFBTSxFQUFFLFFBQVEsRUFBRSxPQUFPO0lBRXRDLFlBQVksQ0FBQztJQUViLHdCQUF3QjtJQUN4Qiw4Q0FBOEM7SUFDOUMsdUVBQXVFO0lBQ3ZFLEVBQUU7SUFDRixnREFBZ0Q7SUFDaEQseURBQXlEO0lBQ3pELG1HQUFtRztJQUNuRyxnRkFBZ0Y7SUFDaEYsRUFBRSxDQUFDLENBQUUsQ0FBQyxPQUFPLENBQUMsT0FBUSxDQUFDLENBQUMsQ0FBQztRQUN4QixNQUFNLENBQUMsSUFBSSxDQUFFLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLEVBQUUsVUFBVSxJQUFJLEVBQUUsR0FBRztZQUV2RSx5RkFBeUY7WUFDekYsSUFBSSxPQUFPLEdBQUcsVUFBVSxLQUFLO2dCQUM1QixNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBRSxLQUFLLENBQUUsQ0FBRSxDQUFDO1lBQ3ZFLENBQUMsQ0FBQztZQUVGLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFFLEdBQUcsQ0FBRSxHQUFHO2dCQUM3QixLQUFLLEVBQUU7b0JBQ04sSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLGFBQWEsSUFBSSxJQUFJLEVBQ25DLFFBQVEsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFFLEdBQUcsRUFBRSxHQUFHLENBQUUsQ0FBQztvQkFFeEMsRUFBRSxDQUFDLENBQUUsQ0FBQyxRQUFTLENBQUMsQ0FBQyxDQUFDO3dCQUNqQixHQUFHLENBQUMsZ0JBQWdCLENBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUUsQ0FBQztvQkFDN0MsQ0FBQztvQkFDRCxRQUFRLENBQUMsTUFBTSxDQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBRSxRQUFRLElBQUksQ0FBQyxDQUFFLEdBQUcsQ0FBQyxDQUFFLENBQUM7Z0JBQ3BELENBQUM7Z0JBQ0QsUUFBUSxFQUFFO29CQUNULElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxhQUFhLElBQUksSUFBSSxFQUNuQyxRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBRSxHQUFHLEVBQUUsR0FBRyxDQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUU1QyxFQUFFLENBQUMsQ0FBRSxDQUFDLFFBQVMsQ0FBQyxDQUFDLENBQUM7d0JBQ2pCLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBRSxDQUFDO3dCQUMvQyxRQUFRLENBQUMsTUFBTSxDQUFFLEdBQUcsRUFBRSxHQUFHLENBQUUsQ0FBQztvQkFFN0IsQ0FBQztvQkFBQyxJQUFJLENBQUMsQ0FBQzt3QkFDUCxRQUFRLENBQUMsTUFBTSxDQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsUUFBUSxDQUFFLENBQUM7b0JBQ3ZDLENBQUM7Z0JBQ0YsQ0FBQzthQUNELENBQUM7UUFDSCxDQUFDLENBQUUsQ0FBQztJQUNMLENBQUM7SUFFRCxNQUFNLENBQUMsTUFBTSxDQUFDO0FBQ2QsQ0FBQyxDQUFFLENBQUMiLCJmaWxlIjoiYXNzZXRzL3BhY2tzL2pxdWVyeS9zcmMvZXZlbnQvZm9jdXNpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSggW1xuXHRcIi4uL2NvcmVcIixcblx0XCIuLi9kYXRhL3Zhci9kYXRhUHJpdlwiLFxuXHRcIi4vc3VwcG9ydFwiLFxuXG5cdFwiLi4vZXZlbnRcIixcblx0XCIuL3RyaWdnZXJcIlxuXSwgZnVuY3Rpb24oIGpRdWVyeSwgZGF0YVByaXYsIHN1cHBvcnQgKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcbn1cblxucmV0dXJuIGpRdWVyeTtcbn0gKTtcbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf8;base64,
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,
