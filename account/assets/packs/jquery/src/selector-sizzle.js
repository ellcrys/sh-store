define([
    "./core",
    "../external/sizzle/dist/sizzle"
], function (jQuery, Sizzle) {
    "use strict";
    jQuery.find = Sizzle;
    jQuery.expr = Sizzle.selectors;
    // Deprecated
    jQuery.expr[":"] = jQuery.expr.pseudos;
    jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
    jQuery.text = Sizzle.getText;
    jQuery.isXMLDoc = Sizzle.isXML;
    jQuery.contains = Sizzle.contains;
    jQuery.escapeSelector = Sizzle.escape;
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL3NlbGVjdG9yLXNpenpsZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUU7SUFDUCxRQUFRO0lBQ1IsZ0NBQWdDO0NBQ2hDLEVBQUUsVUFBVSxNQUFNLEVBQUUsTUFBTTtJQUUzQixZQUFZLENBQUM7SUFFYixNQUFNLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQztJQUNyQixNQUFNLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7SUFFL0IsYUFBYTtJQUNiLE1BQU0sQ0FBQyxJQUFJLENBQUUsR0FBRyxDQUFFLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDekMsTUFBTSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUM7SUFDdEQsTUFBTSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO0lBQzdCLE1BQU0sQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQztJQUMvQixNQUFNLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUM7SUFDbEMsTUFBTSxDQUFDLGNBQWMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0FBRXRDLENBQUMsQ0FBRSxDQUFDIiwiZmlsZSI6ImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL3NlbGVjdG9yLXNpenpsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSggW1xuXHRcIi4vY29yZVwiLFxuXHRcIi4uL2V4dGVybmFsL3NpenpsZS9kaXN0L3NpenpsZVwiXG5dLCBmdW5jdGlvbiggalF1ZXJ5LCBTaXp6bGUgKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5qUXVlcnkuZmluZCA9IFNpenpsZTtcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcblxuLy8gRGVwcmVjYXRlZFxualF1ZXJ5LmV4cHJbIFwiOlwiIF0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZVNvcnQgPSBqUXVlcnkudW5pcXVlID0gU2l6emxlLnVuaXF1ZVNvcnQ7XG5qUXVlcnkudGV4dCA9IFNpenpsZS5nZXRUZXh0O1xualF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xualF1ZXJ5LmNvbnRhaW5zID0gU2l6emxlLmNvbnRhaW5zO1xualF1ZXJ5LmVzY2FwZVNlbGVjdG9yID0gU2l6emxlLmVzY2FwZTtcblxufSApO1xuIl19
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL3NlbGVjdG9yLXNpenpsZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUM7SUFDSCxRQUFRO0lBQ1IsZ0NBQWdDO0NBQ25DLEVBQUUsVUFBVSxNQUFNLEVBQUUsTUFBTTtJQUN2QixZQUFZLENBQUM7SUFDYixNQUFNLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQztJQUNyQixNQUFNLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7SUFDL0IsYUFBYTtJQUNiLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdkMsTUFBTSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUM7SUFDdEQsTUFBTSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO0lBQzdCLE1BQU0sQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQztJQUMvQixNQUFNLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUM7SUFDbEMsTUFBTSxDQUFDLGNBQWMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0FBQzFDLENBQUMsQ0FBQyxDQUFDO0FBRUgsMmhEQUEyaEQiLCJmaWxlIjoiYXNzZXRzL3BhY2tzL2pxdWVyeS9zcmMvc2VsZWN0b3Itc2l6emxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKFtcbiAgICBcIi4vY29yZVwiLFxuICAgIFwiLi4vZXh0ZXJuYWwvc2l6emxlL2Rpc3Qvc2l6emxlXCJcbl0sIGZ1bmN0aW9uIChqUXVlcnksIFNpenpsZSkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIGpRdWVyeS5maW5kID0gU2l6emxlO1xuICAgIGpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcbiAgICAvLyBEZXByZWNhdGVkXG4gICAgalF1ZXJ5LmV4cHJbXCI6XCJdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbiAgICBqUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcbiAgICBqUXVlcnkudGV4dCA9IFNpenpsZS5nZXRUZXh0O1xuICAgIGpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbiAgICBqUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XG4gICAgalF1ZXJ5LmVzY2FwZVNlbGVjdG9yID0gU2l6emxlLmVzY2FwZTtcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGY4O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltRnpjMlYwY3k5d1lXTnJjeTlxY1hWbGNua3ZjM0pqTDNObGJHVmpkRzl5TFhOcGVucHNaUzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeE5RVUZOTEVOQlFVVTdTVUZEVUN4UlFVRlJPMGxCUTFJc1owTkJRV2RETzBOQlEyaERMRVZCUVVVc1ZVRkJWU3hOUVVGTkxFVkJRVVVzVFVGQlRUdEpRVVV6UWl4WlFVRlpMRU5CUVVNN1NVRkZZaXhOUVVGTkxFTkJRVU1zU1VGQlNTeEhRVUZITEUxQlFVMHNRMEZCUXp0SlFVTnlRaXhOUVVGTkxFTkJRVU1zU1VGQlNTeEhRVUZITEUxQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNN1NVRkZMMElzWVVGQllUdEpRVU5pTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVVc1IwRkJSeXhEUVVGRkxFZEJRVWNzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNN1NVRkRla01zVFVGQlRTeERRVUZETEZWQlFWVXNSMEZCUnl4TlFVRk5MRU5CUVVNc1RVRkJUU3hIUVVGSExFMUJRVTBzUTBGQlF5eFZRVUZWTEVOQlFVTTdTVUZEZEVRc1RVRkJUU3hEUVVGRExFbEJRVWtzUjBGQlJ5eE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRPMGxCUXpkQ0xFMUJRVTBzUTBGQlF5eFJRVUZSTEVkQlFVY3NUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJRenRKUVVNdlFpeE5RVUZOTEVOQlFVTXNVVUZCVVN4SFFVRkhMRTFCUVUwc1EwRkJReXhSUVVGUkxFTkJRVU03U1VGRGJFTXNUVUZCVFN4RFFVRkRMR05CUVdNc1IwRkJSeXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETzBGQlJYUkRMRU5CUVVNc1EwRkJSU3hEUVVGRElpd2labWxzWlNJNkltRnpjMlYwY3k5d1lXTnJjeTlxY1hWbGNua3ZjM0pqTDNObGJHVmpkRzl5TFhOcGVucHNaUzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltUmxabWx1WlNnZ1cxeHVYSFJjSWk0dlkyOXlaVndpTEZ4dVhIUmNJaTR1TDJWNGRHVnlibUZzTDNOcGVucHNaUzlrYVhOMEwzTnBlbnBzWlZ3aVhHNWRMQ0JtZFc1amRHbHZiaWdnYWxGMVpYSjVMQ0JUYVhwNmJHVWdLU0I3WEc1Y2Jsd2lkWE5sSUhOMGNtbGpkRndpTzF4dVhHNXFVWFZsY25rdVptbHVaQ0E5SUZOcGVucHNaVHRjYm1wUmRXVnllUzVsZUhCeUlEMGdVMmw2ZW14bExuTmxiR1ZqZEc5eWN6dGNibHh1THk4Z1JHVndjbVZqWVhSbFpGeHVhbEYxWlhKNUxtVjRjSEpiSUZ3aU9sd2lJRjBnUFNCcVVYVmxjbmt1Wlhod2NpNXdjMlYxWkc5ek8xeHVhbEYxWlhKNUxuVnVhWEYxWlZOdmNuUWdQU0JxVVhWbGNua3VkVzVwY1hWbElEMGdVMmw2ZW14bExuVnVhWEYxWlZOdmNuUTdYRzVxVVhWbGNua3VkR1Y0ZENBOUlGTnBlbnBzWlM1blpYUlVaWGgwTzF4dWFsRjFaWEo1TG1seldFMU1SRzlqSUQwZ1UybDZlbXhsTG1seldFMU1PMXh1YWxGMVpYSjVMbU52Ym5SaGFXNXpJRDBnVTJsNmVteGxMbU52Ym5SaGFXNXpPMXh1YWxGMVpYSjVMbVZ6WTJGd1pWTmxiR1ZqZEc5eUlEMGdVMmw2ZW14bExtVnpZMkZ3WlR0Y2JseHVmU0FwTzF4dUlsMTlcbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,
