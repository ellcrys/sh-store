define(function () {
    "use strict";
    // A method for quickly swapping in/out CSS properties to get correct calculations.
    return function (elem, options, callback, args) {
        var ret, name, old = {};
        // Remember the old values, and insert the new ones
        for (name in options) {
            old[name] = elem.style[name];
            elem.style[name] = options[name];
        }
        ret = callback.apply(elem, args || []);
        // Revert the old values
        for (name in options) {
            elem.style[name] = old[name];
        }
        return ret;
    };
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL2Nzcy92YXIvc3dhcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUU7SUFFUixZQUFZLENBQUM7SUFFYixtRkFBbUY7SUFDbkYsTUFBTSxDQUFDLFVBQVUsSUFBSSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSTtRQUM3QyxJQUFJLEdBQUcsRUFBRSxJQUFJLEVBQ1osR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUVWLG1EQUFtRDtRQUNuRCxHQUFHLENBQUMsQ0FBRSxJQUFJLElBQUksT0FBUSxDQUFDLENBQUMsQ0FBQztZQUN4QixHQUFHLENBQUUsSUFBSSxDQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBRSxJQUFJLENBQUUsQ0FBQztZQUNqQyxJQUFJLENBQUMsS0FBSyxDQUFFLElBQUksQ0FBRSxHQUFHLE9BQU8sQ0FBRSxJQUFJLENBQUUsQ0FBQztRQUN0QyxDQUFDO1FBRUQsR0FBRyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUUsSUFBSSxFQUFFLElBQUksSUFBSSxFQUFFLENBQUUsQ0FBQztRQUV6Qyx3QkFBd0I7UUFDeEIsR0FBRyxDQUFDLENBQUUsSUFBSSxJQUFJLE9BQVEsQ0FBQyxDQUFDLENBQUM7WUFDeEIsSUFBSSxDQUFDLEtBQUssQ0FBRSxJQUFJLENBQUUsR0FBRyxHQUFHLENBQUUsSUFBSSxDQUFFLENBQUM7UUFDbEMsQ0FBQztRQUVELE1BQU0sQ0FBQyxHQUFHLENBQUM7SUFDWixDQUFDLENBQUM7QUFFRixDQUFDLENBQUUsQ0FBQyIsImZpbGUiOiJhc3NldHMvcGFja3MvanF1ZXJ5L3NyYy9jc3MvdmFyL3N3YXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoIGZ1bmN0aW9uKCkge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gQSBtZXRob2QgZm9yIHF1aWNrbHkgc3dhcHBpbmcgaW4vb3V0IENTUyBwcm9wZXJ0aWVzIHRvIGdldCBjb3JyZWN0IGNhbGN1bGF0aW9ucy5cbnJldHVybiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5hcHBseSggZWxlbSwgYXJncyB8fCBbXSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxufSApO1xuIl19
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL2Nzcy92YXIvc3dhcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUM7SUFDSCxZQUFZLENBQUM7SUFDYixtRkFBbUY7SUFDbkYsTUFBTSxDQUFDLFVBQVUsSUFBSSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSTtRQUMxQyxJQUFJLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUN4QixtREFBbUQ7UUFDbkQsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDbkIsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDN0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckMsQ0FBQztRQUNELEdBQUcsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLENBQUM7UUFDdkMsd0JBQXdCO1FBQ3hCLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ25CLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pDLENBQUM7UUFDRCxNQUFNLENBQUMsR0FBRyxDQUFDO0lBQ2YsQ0FBQyxDQUFDO0FBQ04sQ0FBQyxDQUFDLENBQUM7QUFFSCwyMERBQTIwRCIsImZpbGUiOiJhc3NldHMvcGFja3MvanF1ZXJ5L3NyYy9jc3MvdmFyL3N3YXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoZnVuY3Rpb24gKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIC8vIEEgbWV0aG9kIGZvciBxdWlja2x5IHN3YXBwaW5nIGluL291dCBDU1MgcHJvcGVydGllcyB0byBnZXQgY29ycmVjdCBjYWxjdWxhdGlvbnMuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtLCBvcHRpb25zLCBjYWxsYmFjaywgYXJncykge1xuICAgICAgICB2YXIgcmV0LCBuYW1lLCBvbGQgPSB7fTtcbiAgICAgICAgLy8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG4gICAgICAgIGZvciAobmFtZSBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICBvbGRbbmFtZV0gPSBlbGVtLnN0eWxlW25hbWVdO1xuICAgICAgICAgICAgZWxlbS5zdHlsZVtuYW1lXSA9IG9wdGlvbnNbbmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0ID0gY2FsbGJhY2suYXBwbHkoZWxlbSwgYXJncyB8fCBbXSk7XG4gICAgICAgIC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuICAgICAgICBmb3IgKG5hbWUgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgZWxlbS5zdHlsZVtuYW1lXSA9IG9sZFtuYW1lXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH07XG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbUZ6YzJWMGN5OXdZV05yY3k5cWNYVmxjbmt2YzNKakwyTnpjeTkyWVhJdmMzZGhjQzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeE5RVUZOTEVOQlFVVTdTVUZGVWl4WlFVRlpMRU5CUVVNN1NVRkZZaXh0UmtGQmJVWTdTVUZEYmtZc1RVRkJUU3hEUVVGRExGVkJRVlVzU1VGQlNTeEZRVUZGTEU5QlFVOHNSVUZCUlN4UlFVRlJMRVZCUVVVc1NVRkJTVHRSUVVNM1F5eEpRVUZKTEVkQlFVY3NSVUZCUlN4SlFVRkpMRVZCUTFvc1IwRkJSeXhIUVVGSExFVkJRVVVzUTBGQlF6dFJRVVZXTEcxRVFVRnRSRHRSUVVOdVJDeEhRVUZITEVOQlFVTXNRMEZCUlN4SlFVRkpMRWxCUVVrc1QwRkJVU3hEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU40UWl4SFFVRkhMRU5CUVVVc1NVRkJTU3hEUVVGRkxFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUlN4SlFVRkpMRU5CUVVVc1EwRkJRenRaUVVOcVF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkZMRWxCUVVrc1EwRkJSU3hIUVVGSExFOUJRVThzUTBGQlJTeEpRVUZKTEVOQlFVVXNRMEZCUXp0UlFVTjBReXhEUVVGRE8xRkJSVVFzUjBGQlJ5eEhRVUZITEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzU1VGQlNTeEZRVUZGTEVOQlFVVXNRMEZCUXp0UlFVVjZReXgzUWtGQmQwSTdVVUZEZUVJc1IwRkJSeXhEUVVGRExFTkJRVVVzU1VGQlNTeEpRVUZKTEU5QlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRlRUlzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUlN4SlFVRkpMRU5CUVVVc1IwRkJSeXhIUVVGSExFTkJRVVVzU1VGQlNTeERRVUZGTEVOQlFVTTdVVUZEYkVNc1EwRkJRenRSUVVWRUxFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTTdTVUZEV2l4RFFVRkRMRU5CUVVNN1FVRkZSaXhEUVVGRExFTkJRVVVzUTBGQlF5SXNJbVpwYkdVaU9pSmhjM05sZEhNdmNHRmphM012YW5GMVpYSjVMM055WXk5amMzTXZkbUZ5TDNOM1lYQXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKa1pXWnBibVVvSUdaMWJtTjBhVzl1S0NrZ2UxeHVYRzVjSW5WelpTQnpkSEpwWTNSY0lqdGNibHh1THk4Z1FTQnRaWFJvYjJRZ1ptOXlJSEYxYVdOcmJIa2djM2RoY0hCcGJtY2dhVzR2YjNWMElFTlRVeUJ3Y205d1pYSjBhV1Z6SUhSdklHZGxkQ0JqYjNKeVpXTjBJR05oYkdOMWJHRjBhVzl1Y3k1Y2JuSmxkSFZ5YmlCbWRXNWpkR2x2YmlnZ1pXeGxiU3dnYjNCMGFXOXVjeXdnWTJGc2JHSmhZMnNzSUdGeVozTWdLU0I3WEc1Y2RIWmhjaUJ5WlhRc0lHNWhiV1VzWEc1Y2RGeDBiMnhrSUQwZ2UzMDdYRzVjYmx4MEx5OGdVbVZ0WlcxaVpYSWdkR2hsSUc5c1pDQjJZV3gxWlhNc0lHRnVaQ0JwYm5ObGNuUWdkR2hsSUc1bGR5QnZibVZ6WEc1Y2RHWnZjaUFvSUc1aGJXVWdhVzRnYjNCMGFXOXVjeUFwSUh0Y2JseDBYSFJ2YkdSYklHNWhiV1VnWFNBOUlHVnNaVzB1YzNSNWJHVmJJRzVoYldVZ1hUdGNibHgwWEhSbGJHVnRMbk4wZVd4bFd5QnVZVzFsSUYwZ1BTQnZjSFJwYjI1eld5QnVZVzFsSUYwN1hHNWNkSDFjYmx4dVhIUnlaWFFnUFNCallXeHNZbUZqYXk1aGNIQnNlU2dnWld4bGJTd2dZWEpuY3lCOGZDQmJYU0FwTzF4dVhHNWNkQzh2SUZKbGRtVnlkQ0IwYUdVZ2IyeGtJSFpoYkhWbGMxeHVYSFJtYjNJZ0tDQnVZVzFsSUdsdUlHOXdkR2x2Ym5NZ0tTQjdYRzVjZEZ4MFpXeGxiUzV6ZEhsc1pWc2dibUZ0WlNCZElEMGdiMnhrV3lCdVlXMWxJRjA3WEc1Y2RIMWNibHh1WEhSeVpYUjFjbTRnY21WME8xeHVmVHRjYmx4dWZTQXBPMXh1SWwxOVxuIl19
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,
