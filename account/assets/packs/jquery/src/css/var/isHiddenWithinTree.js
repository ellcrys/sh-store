define([
    "../../core",
    "../../selector"
    // css is assumed
], function (jQuery) {
    "use strict";
    // isHiddenWithinTree reports if an element has a non-"none" display style (inline and/or
    // through the CSS cascade), which is useful in deciding whether or not to make it visible.
    // It differs from the :hidden selector (jQuery.expr.pseudos.hidden) in two important ways:
    // * A hidden ancestor does not force an element to be classified as hidden.
    // * Being disconnected from the document does not force an element to be classified as hidden.
    // These differences improve the behavior of .toggle() et al. when applied to elements that are
    // detached or contained within hidden ancestors (gh-2404, gh-2863).
    return function (elem, el) {
        // isHiddenWithinTree might be called from jQuery#filter function;
        // in that case, element will be second argument
        elem = el || elem;
        // Inline style trumps all
        return elem.style.display === "none" ||
            elem.style.display === "" &&
                // Otherwise, check computed style
                // Support: Firefox <=43 - 45
                // Disconnected elements can have computed display: none, so first confirm that elem is
                // in the document.
                jQuery.contains(elem.ownerDocument, elem) &&
                jQuery.css(elem, "display") === "none";
    };
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL2Nzcy92YXIvaXNIaWRkZW5XaXRoaW5UcmVlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBRTtJQUNQLFlBQVk7SUFDWixnQkFBZ0I7SUFFaEIsaUJBQWlCO0NBQ2pCLEVBQUUsVUFBVSxNQUFNO0lBQ2xCLFlBQVksQ0FBQztJQUViLHlGQUF5RjtJQUN6RiwyRkFBMkY7SUFDM0YsMkZBQTJGO0lBQzNGLDRFQUE0RTtJQUM1RSwrRkFBK0Y7SUFDL0YsK0ZBQStGO0lBQy9GLG9FQUFvRTtJQUNwRSxNQUFNLENBQUMsVUFBVSxJQUFJLEVBQUUsRUFBRTtRQUV4QixrRUFBa0U7UUFDbEUsZ0RBQWdEO1FBQ2hELElBQUksR0FBRyxFQUFFLElBQUksSUFBSSxDQUFDO1FBRWxCLDBCQUEwQjtRQUMxQixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEtBQUssTUFBTTtZQUNuQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sS0FBSyxFQUFFO2dCQUV6QixrQ0FBa0M7Z0JBQ2xDLDZCQUE2QjtnQkFDN0IsdUZBQXVGO2dCQUN2RixtQkFBbUI7Z0JBQ25CLE1BQU0sQ0FBQyxRQUFRLENBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUU7Z0JBRTNDLE1BQU0sQ0FBQyxHQUFHLENBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBRSxLQUFLLE1BQU0sQ0FBQztJQUMzQyxDQUFDLENBQUM7QUFDSCxDQUFDLENBQUUsQ0FBQyIsImZpbGUiOiJhc3NldHMvcGFja3MvanF1ZXJ5L3NyYy9jc3MvdmFyL2lzSGlkZGVuV2l0aGluVHJlZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSggW1xuXHRcIi4uLy4uL2NvcmVcIixcblx0XCIuLi8uLi9zZWxlY3RvclwiXG5cblx0Ly8gY3NzIGlzIGFzc3VtZWRcbl0sIGZ1bmN0aW9uKCBqUXVlcnkgKSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdC8vIGlzSGlkZGVuV2l0aGluVHJlZSByZXBvcnRzIGlmIGFuIGVsZW1lbnQgaGFzIGEgbm9uLVwibm9uZVwiIGRpc3BsYXkgc3R5bGUgKGlubGluZSBhbmQvb3Jcblx0Ly8gdGhyb3VnaCB0aGUgQ1NTIGNhc2NhZGUpLCB3aGljaCBpcyB1c2VmdWwgaW4gZGVjaWRpbmcgd2hldGhlciBvciBub3QgdG8gbWFrZSBpdCB2aXNpYmxlLlxuXHQvLyBJdCBkaWZmZXJzIGZyb20gdGhlIDpoaWRkZW4gc2VsZWN0b3IgKGpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuKSBpbiB0d28gaW1wb3J0YW50IHdheXM6XG5cdC8vICogQSBoaWRkZW4gYW5jZXN0b3IgZG9lcyBub3QgZm9yY2UgYW4gZWxlbWVudCB0byBiZSBjbGFzc2lmaWVkIGFzIGhpZGRlbi5cblx0Ly8gKiBCZWluZyBkaXNjb25uZWN0ZWQgZnJvbSB0aGUgZG9jdW1lbnQgZG9lcyBub3QgZm9yY2UgYW4gZWxlbWVudCB0byBiZSBjbGFzc2lmaWVkIGFzIGhpZGRlbi5cblx0Ly8gVGhlc2UgZGlmZmVyZW5jZXMgaW1wcm92ZSB0aGUgYmVoYXZpb3Igb2YgLnRvZ2dsZSgpIGV0IGFsLiB3aGVuIGFwcGxpZWQgdG8gZWxlbWVudHMgdGhhdCBhcmVcblx0Ly8gZGV0YWNoZWQgb3IgY29udGFpbmVkIHdpdGhpbiBoaWRkZW4gYW5jZXN0b3JzIChnaC0yNDA0LCBnaC0yODYzKS5cblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cblx0XHRcdGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgJiZcblxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCI7XG5cdH07XG59ICk7XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL2Nzcy92YXIvaXNIaWRkZW5XaXRoaW5UcmVlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQztJQUNILFlBQVk7SUFDWixnQkFBZ0I7SUFDaEIsaUJBQWlCO0NBQ3BCLEVBQUUsVUFBVSxNQUFNO0lBQ2YsWUFBWSxDQUFDO0lBQ2IseUZBQXlGO0lBQ3pGLDJGQUEyRjtJQUMzRiwyRkFBMkY7SUFDM0YsNEVBQTRFO0lBQzVFLCtGQUErRjtJQUMvRiwrRkFBK0Y7SUFDL0Ysb0VBQW9FO0lBQ3BFLE1BQU0sQ0FBQyxVQUFVLElBQUksRUFBRSxFQUFFO1FBQ3JCLGtFQUFrRTtRQUNsRSxnREFBZ0Q7UUFDaEQsSUFBSSxHQUFHLEVBQUUsSUFBSSxJQUFJLENBQUM7UUFDbEIsMEJBQTBCO1FBQzFCLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sS0FBSyxNQUFNO1lBQ2hDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxLQUFLLEVBQUU7Z0JBQ3JCLGtDQUFrQztnQkFDbEMsNkJBQTZCO2dCQUM3Qix1RkFBdUY7Z0JBQ3ZGLG1CQUFtQjtnQkFDbkIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQztnQkFDekMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLEtBQUssTUFBTSxDQUFDO0lBQ25ELENBQUMsQ0FBQztBQUNOLENBQUMsQ0FBQyxDQUFDO0FBRUgsdTRGQUF1NEYiLCJmaWxlIjoiYXNzZXRzL3BhY2tzL2pxdWVyeS9zcmMvY3NzL3Zhci9pc0hpZGRlbldpdGhpblRyZWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoW1xuICAgIFwiLi4vLi4vY29yZVwiLFxuICAgIFwiLi4vLi4vc2VsZWN0b3JcIlxuICAgIC8vIGNzcyBpcyBhc3N1bWVkXG5dLCBmdW5jdGlvbiAoalF1ZXJ5KSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgLy8gaXNIaWRkZW5XaXRoaW5UcmVlIHJlcG9ydHMgaWYgYW4gZWxlbWVudCBoYXMgYSBub24tXCJub25lXCIgZGlzcGxheSBzdHlsZSAoaW5saW5lIGFuZC9vclxuICAgIC8vIHRocm91Z2ggdGhlIENTUyBjYXNjYWRlKSwgd2hpY2ggaXMgdXNlZnVsIGluIGRlY2lkaW5nIHdoZXRoZXIgb3Igbm90IHRvIG1ha2UgaXQgdmlzaWJsZS5cbiAgICAvLyBJdCBkaWZmZXJzIGZyb20gdGhlIDpoaWRkZW4gc2VsZWN0b3IgKGpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuKSBpbiB0d28gaW1wb3J0YW50IHdheXM6XG4gICAgLy8gKiBBIGhpZGRlbiBhbmNlc3RvciBkb2VzIG5vdCBmb3JjZSBhbiBlbGVtZW50IHRvIGJlIGNsYXNzaWZpZWQgYXMgaGlkZGVuLlxuICAgIC8vICogQmVpbmcgZGlzY29ubmVjdGVkIGZyb20gdGhlIGRvY3VtZW50IGRvZXMgbm90IGZvcmNlIGFuIGVsZW1lbnQgdG8gYmUgY2xhc3NpZmllZCBhcyBoaWRkZW4uXG4gICAgLy8gVGhlc2UgZGlmZmVyZW5jZXMgaW1wcm92ZSB0aGUgYmVoYXZpb3Igb2YgLnRvZ2dsZSgpIGV0IGFsLiB3aGVuIGFwcGxpZWQgdG8gZWxlbWVudHMgdGhhdCBhcmVcbiAgICAvLyBkZXRhY2hlZCBvciBjb250YWluZWQgd2l0aGluIGhpZGRlbiBhbmNlc3RvcnMgKGdoLTI0MDQsIGdoLTI4NjMpLlxuICAgIHJldHVybiBmdW5jdGlvbiAoZWxlbSwgZWwpIHtcbiAgICAgICAgLy8gaXNIaWRkZW5XaXRoaW5UcmVlIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG4gICAgICAgIC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuICAgICAgICBlbGVtID0gZWwgfHwgZWxlbTtcbiAgICAgICAgLy8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcbiAgICAgICAgcmV0dXJuIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHxcbiAgICAgICAgICAgIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJlxuICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcbiAgICAgICAgICAgICAgICAvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDMgLSA0NVxuICAgICAgICAgICAgICAgIC8vIERpc2Nvbm5lY3RlZCBlbGVtZW50cyBjYW4gaGF2ZSBjb21wdXRlZCBkaXNwbGF5OiBub25lLCBzbyBmaXJzdCBjb25maXJtIHRoYXQgZWxlbSBpc1xuICAgICAgICAgICAgICAgIC8vIGluIHRoZSBkb2N1bWVudC5cbiAgICAgICAgICAgICAgICBqUXVlcnkuY29udGFpbnMoZWxlbS5vd25lckRvY3VtZW50LCBlbGVtKSAmJlxuICAgICAgICAgICAgICAgIGpRdWVyeS5jc3MoZWxlbSwgXCJkaXNwbGF5XCIpID09PSBcIm5vbmVcIjtcbiAgICB9O1xufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zjg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1GemMyVjBjeTl3WVdOcmN5OXFjWFZsY25rdmMzSmpMMk56Y3k5MllYSXZhWE5JYVdSa1pXNVhhWFJvYVc1VWNtVmxMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFMUJRVTBzUTBGQlJUdEpRVU5RTEZsQlFWazdTVUZEV2l4blFrRkJaMEk3U1VGRmFFSXNhVUpCUVdsQ08wTkJRMnBDTEVWQlFVVXNWVUZCVlN4TlFVRk5PMGxCUTJ4Q0xGbEJRVmtzUTBGQlF6dEpRVVZpTEhsR1FVRjVSanRKUVVONlJpd3lSa0ZCTWtZN1NVRkRNMFlzTWtaQlFUSkdPMGxCUXpOR0xEUkZRVUUwUlR0SlFVTTFSU3dyUmtGQkswWTdTVUZETDBZc0swWkJRU3RHTzBsQlF5OUdMRzlGUVVGdlJUdEpRVU53UlN4TlFVRk5MRU5CUVVNc1ZVRkJWU3hKUVVGSkxFVkJRVVVzUlVGQlJUdFJRVVY0UWl4clJVRkJhMFU3VVVGRGJFVXNaMFJCUVdkRU8xRkJRMmhFTEVsQlFVa3NSMEZCUnl4RlFVRkZMRWxCUVVrc1NVRkJTU3hEUVVGRE8xRkJSV3hDTERCQ1FVRXdRanRSUVVNeFFpeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhQUVVGUExFdEJRVXNzVFVGQlRUdFpRVU51UXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFOUJRVThzUzBGQlN5eEZRVUZGTzJkQ1FVVjZRaXhyUTBGQmEwTTdaMEpCUTJ4RExEWkNRVUUyUWp0blFrRkROMElzZFVaQlFYVkdPMmRDUVVOMlJpeHRRa0ZCYlVJN1owSkJRMjVDTEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVVc1NVRkJTU3hEUVVGRExHRkJRV0VzUlVGQlJTeEpRVUZKTEVOQlFVVTdaMEpCUlRORExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVVXNTVUZCU1N4RlFVRkZMRk5CUVZNc1EwRkJSU3hMUVVGTExFMUJRVTBzUTBGQlF6dEpRVU16UXl4RFFVRkRMRU5CUVVNN1FVRkRTQ3hEUVVGRExFTkJRVVVzUTBGQlF5SXNJbVpwYkdVaU9pSmhjM05sZEhNdmNHRmphM012YW5GMVpYSjVMM055WXk5amMzTXZkbUZ5TDJselNHbGtaR1Z1VjJsMGFHbHVWSEpsWlM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbVJsWm1sdVpTZ2dXMXh1WEhSY0lpNHVMeTR1TDJOdmNtVmNJaXhjYmx4MFhDSXVMaTh1TGk5elpXeGxZM1J2Y2x3aVhHNWNibHgwTHk4Z1kzTnpJR2x6SUdGemMzVnRaV1JjYmwwc0lHWjFibU4wYVc5dUtDQnFVWFZsY25rZ0tTQjdYRzVjZEZ3aWRYTmxJSE4wY21samRGd2lPMXh1WEc1Y2RDOHZJR2x6U0dsa1pHVnVWMmwwYUdsdVZISmxaU0J5WlhCdmNuUnpJR2xtSUdGdUlHVnNaVzFsYm5RZ2FHRnpJR0VnYm05dUxWd2libTl1WlZ3aUlHUnBjM0JzWVhrZ2MzUjViR1VnS0dsdWJHbHVaU0JoYm1RdmIzSmNibHgwTHk4Z2RHaHliM1ZuYUNCMGFHVWdRMU5USUdOaGMyTmhaR1VwTENCM2FHbGphQ0JwY3lCMWMyVm1kV3dnYVc0Z1pHVmphV1JwYm1jZ2QyaGxkR2hsY2lCdmNpQnViM1FnZEc4Z2JXRnJaU0JwZENCMmFYTnBZbXhsTGx4dVhIUXZMeUJKZENCa2FXWm1aWEp6SUdaeWIyMGdkR2hsSURwb2FXUmtaVzRnYzJWc1pXTjBiM0lnS0dwUmRXVnllUzVsZUhCeUxuQnpaWFZrYjNNdWFHbGtaR1Z1S1NCcGJpQjBkMjhnYVcxd2IzSjBZVzUwSUhkaGVYTTZYRzVjZEM4dklDb2dRU0JvYVdSa1pXNGdZVzVqWlhOMGIzSWdaRzlsY3lCdWIzUWdabTl5WTJVZ1lXNGdaV3hsYldWdWRDQjBieUJpWlNCamJHRnpjMmxtYVdWa0lHRnpJR2hwWkdSbGJpNWNibHgwTHk4Z0tpQkNaV2x1WnlCa2FYTmpiMjV1WldOMFpXUWdabkp2YlNCMGFHVWdaRzlqZFcxbGJuUWdaRzlsY3lCdWIzUWdabTl5WTJVZ1lXNGdaV3hsYldWdWRDQjBieUJpWlNCamJHRnpjMmxtYVdWa0lHRnpJR2hwWkdSbGJpNWNibHgwTHk4Z1ZHaGxjMlVnWkdsbVptVnlaVzVqWlhNZ2FXMXdjbTkyWlNCMGFHVWdZbVZvWVhacGIzSWdiMllnTG5SdloyZHNaU2dwSUdWMElHRnNMaUIzYUdWdUlHRndjR3hwWldRZ2RHOGdaV3hsYldWdWRITWdkR2hoZENCaGNtVmNibHgwTHk4Z1pHVjBZV05vWldRZ2IzSWdZMjl1ZEdGcGJtVmtJSGRwZEdocGJpQm9hV1JrWlc0Z1lXNWpaWE4wYjNKeklDaG5hQzB5TkRBMExDQm5hQzB5T0RZektTNWNibHgwY21WMGRYSnVJR1oxYm1OMGFXOXVLQ0JsYkdWdExDQmxiQ0FwSUh0Y2JseHVYSFJjZEM4dklHbHpTR2xrWkdWdVYybDBhR2x1VkhKbFpTQnRhV2RvZENCaVpTQmpZV3hzWldRZ1puSnZiU0JxVVhWbGNua2pabWxzZEdWeUlHWjFibU4wYVc5dU8xeHVYSFJjZEM4dklHbHVJSFJvWVhRZ1kyRnpaU3dnWld4bGJXVnVkQ0IzYVd4c0lHSmxJSE5sWTI5dVpDQmhjbWQxYldWdWRGeHVYSFJjZEdWc1pXMGdQU0JsYkNCOGZDQmxiR1Z0TzF4dVhHNWNkRngwTHk4Z1NXNXNhVzVsSUhOMGVXeGxJSFJ5ZFcxd2N5QmhiR3hjYmx4MFhIUnlaWFIxY200Z1pXeGxiUzV6ZEhsc1pTNWthWE53YkdGNUlEMDlQU0JjSW01dmJtVmNJaUI4ZkZ4dVhIUmNkRngwWld4bGJTNXpkSGxzWlM1a2FYTndiR0Y1SUQwOVBTQmNJbHdpSUNZbVhHNWNibHgwWEhSY2RDOHZJRTkwYUdWeWQybHpaU3dnWTJobFkyc2dZMjl0Y0hWMFpXUWdjM1I1YkdWY2JseDBYSFJjZEM4dklGTjFjSEJ2Y25RNklFWnBjbVZtYjNnZ1BEMDBNeUF0SURRMVhHNWNkRngwWEhRdkx5QkVhWE5qYjI1dVpXTjBaV1FnWld4bGJXVnVkSE1nWTJGdUlHaGhkbVVnWTI5dGNIVjBaV1FnWkdsemNHeGhlVG9nYm05dVpTd2djMjhnWm1seWMzUWdZMjl1Wm1seWJTQjBhR0YwSUdWc1pXMGdhWE5jYmx4MFhIUmNkQzh2SUdsdUlIUm9aU0JrYjJOMWJXVnVkQzVjYmx4MFhIUmNkR3BSZFdWeWVTNWpiMjUwWVdsdWN5Z2daV3hsYlM1dmQyNWxja1J2WTNWdFpXNTBMQ0JsYkdWdElDa2dKaVpjYmx4dVhIUmNkRngwYWxGMVpYSjVMbU56Y3lnZ1pXeGxiU3dnWENKa2FYTndiR0Y1WENJZ0tTQTlQVDBnWENKdWIyNWxYQ0k3WEc1Y2RIMDdYRzU5SUNrN1hHNGlYWDA9XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,
