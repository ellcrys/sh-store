define([
    "../var/document",
    "../var/support"
], function (document, support) {
    "use strict";
    (function () {
        var fragment = document.createDocumentFragment(), div = fragment.appendChild(document.createElement("div")), input = document.createElement("input");
        // Support: Android 4.0 - 4.3 only
        // Check state lost if the name is set (#11217)
        // Support: Windows Web Apps (WWA)
        // `name` and `type` must use .setAttribute for WWA (#14901)
        input.setAttribute("type", "radio");
        input.setAttribute("checked", "checked");
        input.setAttribute("name", "t");
        div.appendChild(input);
        // Support: Android <=4.1 only
        // Older WebKit doesn't clone checked state correctly in fragments
        support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
        // Support: IE <=11 only
        // Make sure textarea (and checkbox) defaultValue is properly cloned
        div.innerHTML = "<textarea>x</textarea>";
        support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
    })();
    return support;
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL21hbmlwdWxhdGlvbi9zdXBwb3J0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBRTtJQUNQLGlCQUFpQjtJQUNqQixnQkFBZ0I7Q0FDaEIsRUFBRSxVQUFVLFFBQVEsRUFBRSxPQUFPO0lBRTlCLFlBQVksQ0FBQztJQUViLENBQUU7UUFDRCxJQUFJLFFBQVEsR0FBRyxRQUFRLENBQUMsc0JBQXNCLEVBQUUsRUFDL0MsR0FBRyxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUUsUUFBUSxDQUFDLGFBQWEsQ0FBRSxLQUFLLENBQUUsQ0FBRSxFQUM3RCxLQUFLLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBRSxPQUFPLENBQUUsQ0FBQztRQUUzQyxrQ0FBa0M7UUFDbEMsK0NBQStDO1FBQy9DLGtDQUFrQztRQUNsQyw0REFBNEQ7UUFDNUQsS0FBSyxDQUFDLFlBQVksQ0FBRSxNQUFNLEVBQUUsT0FBTyxDQUFFLENBQUM7UUFDdEMsS0FBSyxDQUFDLFlBQVksQ0FBRSxTQUFTLEVBQUUsU0FBUyxDQUFFLENBQUM7UUFDM0MsS0FBSyxDQUFDLFlBQVksQ0FBRSxNQUFNLEVBQUUsR0FBRyxDQUFFLENBQUM7UUFFbEMsR0FBRyxDQUFDLFdBQVcsQ0FBRSxLQUFLLENBQUUsQ0FBQztRQUV6Qiw4QkFBOEI7UUFDOUIsa0VBQWtFO1FBQ2xFLE9BQU8sQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBRSxJQUFJLENBQUUsQ0FBQyxTQUFTLENBQUUsSUFBSSxDQUFFLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztRQUUvRSx3QkFBd0I7UUFDeEIsb0VBQW9FO1FBQ3BFLEdBQUcsQ0FBQyxTQUFTLEdBQUcsd0JBQXdCLENBQUM7UUFDekMsT0FBTyxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBRSxJQUFJLENBQUUsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDO0lBQ3pFLENBQUMsQ0FBRSxFQUFFLENBQUM7SUFFTixNQUFNLENBQUMsT0FBTyxDQUFDO0FBRWYsQ0FBQyxDQUFFLENBQUMiLCJmaWxlIjoiYXNzZXRzL3BhY2tzL2pxdWVyeS9zcmMvbWFuaXB1bGF0aW9uL3N1cHBvcnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoIFtcblx0XCIuLi92YXIvZG9jdW1lbnRcIixcblx0XCIuLi92YXIvc3VwcG9ydFwiXG5dLCBmdW5jdGlvbiggZG9jdW1lbnQsIHN1cHBvcnQgKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHQvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAoIzExMjE3KVxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSBvbmx5XG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG59ICkoKTtcblxucmV0dXJuIHN1cHBvcnQ7XG5cbn0gKTtcbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL21hbmlwdWxhdGlvbi9zdXBwb3J0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQztJQUNILGlCQUFpQjtJQUNqQixnQkFBZ0I7Q0FDbkIsRUFBRSxVQUFVLFFBQVEsRUFBRSxPQUFPO0lBQzFCLFlBQVksQ0FBQztJQUNiLENBQUM7UUFDRyxJQUFJLFFBQVEsR0FBRyxRQUFRLENBQUMsc0JBQXNCLEVBQUUsRUFBRSxHQUFHLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckosa0NBQWtDO1FBQ2xDLCtDQUErQztRQUMvQyxrQ0FBa0M7UUFDbEMsNERBQTREO1FBQzVELEtBQUssQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3BDLEtBQUssQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3pDLEtBQUssQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ2hDLEdBQUcsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkIsOEJBQThCO1FBQzlCLGtFQUFrRTtRQUNsRSxPQUFPLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7UUFDM0Usd0JBQXdCO1FBQ3hCLG9FQUFvRTtRQUNwRSxHQUFHLENBQUMsU0FBUyxHQUFHLHdCQUF3QixDQUFDO1FBQ3pDLE9BQU8sQ0FBQyxjQUFjLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQztJQUMxRSxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ0wsTUFBTSxDQUFDLE9BQU8sQ0FBQztBQUNuQixDQUFDLENBQUMsQ0FBQztBQUVILCszRkFBKzNGIiwiZmlsZSI6ImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL21hbmlwdWxhdGlvbi9zdXBwb3J0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKFtcbiAgICBcIi4uL3Zhci9kb2N1bWVudFwiLFxuICAgIFwiLi4vdmFyL3N1cHBvcnRcIlxuXSwgZnVuY3Rpb24gKGRvY3VtZW50LCBzdXBwb3J0KSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLCBkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKSwgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgIC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcbiAgICAgICAgLy8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcbiAgICAgICAgLy8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuICAgICAgICAvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcbiAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInJhZGlvXCIpO1xuICAgICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiKTtcbiAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKFwibmFtZVwiLCBcInRcIik7XG4gICAgICAgIGRpdi5hcHBlbmRDaGlsZChpbnB1dCk7XG4gICAgICAgIC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgb25seVxuICAgICAgICAvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcbiAgICAgICAgc3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSh0cnVlKS5jbG9uZU5vZGUodHJ1ZSkubGFzdENoaWxkLmNoZWNrZWQ7XG4gICAgICAgIC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuICAgICAgICAvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuICAgICAgICBkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG4gICAgICAgIHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUodHJ1ZSkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcbiAgICB9KSgpO1xuICAgIHJldHVybiBzdXBwb3J0O1xufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zjg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1GemMyVjBjeTl3WVdOcmN5OXFjWFZsY25rdmMzSmpMMjFoYm1sd2RXeGhkR2x2Ymk5emRYQndiM0owTG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMRTFCUVUwc1EwRkJSVHRKUVVOUUxHbENRVUZwUWp0SlFVTnFRaXhuUWtGQlowSTdRMEZEYUVJc1JVRkJSU3hWUVVGVkxGRkJRVkVzUlVGQlJTeFBRVUZQTzBsQlJUbENMRmxCUVZrc1EwRkJRenRKUVVWaUxFTkJRVVU3VVVGRFJDeEpRVUZKTEZGQlFWRXNSMEZCUnl4UlFVRlJMRU5CUVVNc2MwSkJRWE5DTEVWQlFVVXNSVUZETDBNc1IwRkJSeXhIUVVGSExGRkJRVkVzUTBGQlF5eFhRVUZYTEVOQlFVVXNVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJSU3hMUVVGTExFTkJRVVVzUTBGQlJTeEZRVU0zUkN4TFFVRkxMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlJTeFBRVUZQTEVOQlFVVXNRMEZCUXp0UlFVVXpReXhyUTBGQmEwTTdVVUZEYkVNc0swTkJRU3RETzFGQlF5OURMR3REUVVGclF6dFJRVU5zUXl3MFJFRkJORVE3VVVGRE5VUXNTMEZCU3l4RFFVRkRMRmxCUVZrc1EwRkJSU3hOUVVGTkxFVkJRVVVzVDBGQlR5eERRVUZGTEVOQlFVTTdVVUZEZEVNc1MwRkJTeXhEUVVGRExGbEJRVmtzUTBGQlJTeFRRVUZUTEVWQlFVVXNVMEZCVXl4RFFVRkZMRU5CUVVNN1VVRkRNME1zUzBGQlN5eERRVUZETEZsQlFWa3NRMEZCUlN4TlFVRk5MRVZCUVVVc1IwRkJSeXhEUVVGRkxFTkJRVU03VVVGRmJFTXNSMEZCUnl4RFFVRkRMRmRCUVZjc1EwRkJSU3hMUVVGTExFTkJRVVVzUTBGQlF6dFJRVVY2UWl3NFFrRkJPRUk3VVVGRE9VSXNhMFZCUVd0Rk8xRkJRMnhGTEU5QlFVOHNRMEZCUXl4VlFVRlZMRWRCUVVjc1IwRkJSeXhEUVVGRExGTkJRVk1zUTBGQlJTeEpRVUZKTEVOQlFVVXNRMEZCUXl4VFFVRlRMRU5CUVVVc1NVRkJTU3hEUVVGRkxFTkJRVU1zVTBGQlV5eERRVUZETEU5QlFVOHNRMEZCUXp0UlFVVXZSU3gzUWtGQmQwSTdVVUZEZUVJc2IwVkJRVzlGTzFGQlEzQkZMRWRCUVVjc1EwRkJReXhUUVVGVExFZEJRVWNzZDBKQlFYZENMRU5CUVVNN1VVRkRla01zVDBGQlR5eERRVUZETEdOQlFXTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExGTkJRVk1zUTBGQlJTeEpRVUZKTEVOQlFVVXNRMEZCUXl4VFFVRlRMRU5CUVVNc1dVRkJXU3hEUVVGRE8wbEJRM3BGTEVOQlFVTXNRMEZCUlN4RlFVRkZMRU5CUVVNN1NVRkZUaXhOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETzBGQlJXWXNRMEZCUXl4RFFVRkZMRU5CUVVNaUxDSm1hV3hsSWpvaVlYTnpaWFJ6TDNCaFkydHpMMnB4ZFdWeWVTOXpjbU12YldGdWFYQjFiR0YwYVc5dUwzTjFjSEJ2Y25RdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUprWldacGJtVW9JRnRjYmx4MFhDSXVMaTkyWVhJdlpHOWpkVzFsYm5SY0lpeGNibHgwWENJdUxpOTJZWEl2YzNWd2NHOXlkRndpWEc1ZExDQm1kVzVqZEdsdmJpZ2daRzlqZFcxbGJuUXNJSE4xY0hCdmNuUWdLU0I3WEc1Y2Jsd2lkWE5sSUhOMGNtbGpkRndpTzF4dVhHNG9JR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUjJZWElnWm5KaFoyMWxiblFnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZFYjJOMWJXVnVkRVp5WVdkdFpXNTBLQ2tzWEc1Y2RGeDBaR2wySUQwZ1puSmhaMjFsYm5RdVlYQndaVzVrUTJocGJHUW9JR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0lGd2laR2wyWENJZ0tTQXBMRnh1WEhSY2RHbHVjSFYwSUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2dnWENKcGJuQjFkRndpSUNrN1hHNWNibHgwTHk4Z1UzVndjRzl5ZERvZ1FXNWtjbTlwWkNBMExqQWdMU0EwTGpNZ2IyNXNlVnh1WEhRdkx5QkRhR1ZqYXlCemRHRjBaU0JzYjNOMElHbG1JSFJvWlNCdVlXMWxJR2x6SUhObGRDQW9JekV4TWpFM0tWeHVYSFF2THlCVGRYQndiM0owT2lCWGFXNWtiM2R6SUZkbFlpQkJjSEJ6SUNoWFYwRXBYRzVjZEM4dklHQnVZVzFsWUNCaGJtUWdZSFI1Y0dWZ0lHMTFjM1FnZFhObElDNXpaWFJCZEhSeWFXSjFkR1VnWm05eUlGZFhRU0FvSXpFME9UQXhLVnh1WEhScGJuQjFkQzV6WlhSQmRIUnlhV0oxZEdVb0lGd2lkSGx3WlZ3aUxDQmNJbkpoWkdsdlhDSWdLVHRjYmx4MGFXNXdkWFF1YzJWMFFYUjBjbWxpZFhSbEtDQmNJbU5vWldOclpXUmNJaXdnWENKamFHVmphMlZrWENJZ0tUdGNibHgwYVc1d2RYUXVjMlYwUVhSMGNtbGlkWFJsS0NCY0ltNWhiV1ZjSWl3Z1hDSjBYQ0lnS1R0Y2JseHVYSFJrYVhZdVlYQndaVzVrUTJocGJHUW9JR2x1Y0hWMElDazdYRzVjYmx4MEx5OGdVM1Z3Y0c5eWREb2dRVzVrY205cFpDQThQVFF1TVNCdmJteDVYRzVjZEM4dklFOXNaR1Z5SUZkbFlrdHBkQ0JrYjJWemJpZDBJR05zYjI1bElHTm9aV05yWldRZ2MzUmhkR1VnWTI5eWNtVmpkR3g1SUdsdUlHWnlZV2R0Wlc1MGMxeHVYSFJ6ZFhCd2IzSjBMbU5vWldOclEyeHZibVVnUFNCa2FYWXVZMnh2Ym1WT2IyUmxLQ0IwY25WbElDa3VZMnh2Ym1WT2IyUmxLQ0IwY25WbElDa3ViR0Z6ZEVOb2FXeGtMbU5vWldOclpXUTdYRzVjYmx4MEx5OGdVM1Z3Y0c5eWREb2dTVVVnUEQweE1TQnZibXg1WEc1Y2RDOHZJRTFoYTJVZ2MzVnlaU0IwWlhoMFlYSmxZU0FvWVc1a0lHTm9aV05yWW05NEtTQmtaV1poZFd4MFZtRnNkV1VnYVhNZ2NISnZjR1Z5YkhrZ1kyeHZibVZrWEc1Y2RHUnBkaTVwYm01bGNraFVUVXdnUFNCY0lqeDBaWGgwWVhKbFlUNTRQQzkwWlhoMFlYSmxZVDVjSWp0Y2JseDBjM1Z3Y0c5eWRDNXViME5zYjI1bFEyaGxZMnRsWkNBOUlDRWhaR2wyTG1Oc2IyNWxUbTlrWlNnZ2RISjFaU0FwTG14aGMzUkRhR2xzWkM1a1pXWmhkV3gwVm1Gc2RXVTdYRzU5SUNrb0tUdGNibHh1Y21WMGRYSnVJSE4xY0hCdmNuUTdYRzVjYm4wZ0tUdGNiaUpkZlE9PVxuIl19
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,
