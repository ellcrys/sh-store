define(function () {
    "use strict";
    // We have to close these tags to support XHTML (#13200)
    var wrapMap = {
        // Support: IE <=9 only
        option: [1, "<select multiple='multiple'>", "</select>"],
        // XHTML parsers do not magically insert elements in the
        // same way that tag soup parsers do. So we cannot shorten
        // this by omitting <tbody> or other required elements.
        thead: [1, "<table>", "</table>"],
        col: [2, "<table><colgroup>", "</colgroup></table>"],
        tr: [2, "<table><tbody>", "</tbody></table>"],
        td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
        _default: [0, "", ""]
    };
    // Support: IE <=9 only
    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    return wrapMap;
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL21hbmlwdWxhdGlvbi93cmFwTWFwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBRTtJQUVSLFlBQVksQ0FBQztJQUViLHdEQUF3RDtJQUN4RCxJQUFJLE9BQU8sR0FBRztRQUViLHVCQUF1QjtRQUN2QixNQUFNLEVBQUUsQ0FBRSxDQUFDLEVBQUUsOEJBQThCLEVBQUUsV0FBVyxDQUFFO1FBRTFELHdEQUF3RDtRQUN4RCwwREFBMEQ7UUFDMUQsdURBQXVEO1FBQ3ZELEtBQUssRUFBRSxDQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsVUFBVSxDQUFFO1FBQ25DLEdBQUcsRUFBRSxDQUFFLENBQUMsRUFBRSxtQkFBbUIsRUFBRSxxQkFBcUIsQ0FBRTtRQUN0RCxFQUFFLEVBQUUsQ0FBRSxDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsa0JBQWtCLENBQUU7UUFDL0MsRUFBRSxFQUFFLENBQUUsQ0FBQyxFQUFFLG9CQUFvQixFQUFFLHVCQUF1QixDQUFFO1FBRXhELFFBQVEsRUFBRSxDQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFFO0tBQ3ZCLENBQUM7SUFFRix1QkFBdUI7SUFDdkIsT0FBTyxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO0lBRWxDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUNuRixPQUFPLENBQUMsRUFBRSxHQUFHLE9BQU8sQ0FBQyxFQUFFLENBQUM7SUFFeEIsTUFBTSxDQUFDLE9BQU8sQ0FBQztBQUNmLENBQUMsQ0FBRSxDQUFDIiwiZmlsZSI6ImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL21hbmlwdWxhdGlvbi93cmFwTWFwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBmdW5jdGlvbigpIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRvcHRpb246IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXSxcblxuXHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG53cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxucmV0dXJuIHdyYXBNYXA7XG59ICk7XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL21hbmlwdWxhdGlvbi93cmFwTWFwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQztJQUNILFlBQVksQ0FBQztJQUNiLHdEQUF3RDtJQUN4RCxJQUFJLE9BQU8sR0FBRztRQUNWLHVCQUF1QjtRQUN2QixNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsOEJBQThCLEVBQUUsV0FBVyxDQUFDO1FBQ3hELHdEQUF3RDtRQUN4RCwwREFBMEQ7UUFDMUQsdURBQXVEO1FBQ3ZELEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxTQUFTLEVBQUUsVUFBVSxDQUFDO1FBQ2pDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxtQkFBbUIsRUFBRSxxQkFBcUIsQ0FBQztRQUNwRCxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsa0JBQWtCLENBQUM7UUFDN0MsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLG9CQUFvQixFQUFFLHVCQUF1QixDQUFDO1FBQ3RELFFBQVEsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO0tBQ3hCLENBQUM7SUFDRix1QkFBdUI7SUFDdkIsT0FBTyxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO0lBQ2xDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUNuRixPQUFPLENBQUMsRUFBRSxHQUFHLE9BQU8sQ0FBQyxFQUFFLENBQUM7SUFDeEIsTUFBTSxDQUFDLE9BQU8sQ0FBQztBQUNuQixDQUFDLENBQUMsQ0FBQztBQUVILG0xRUFBbTFFIiwiZmlsZSI6ImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL21hbmlwdWxhdGlvbi93cmFwTWFwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKGZ1bmN0aW9uICgpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAvLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxuICAgIHZhciB3cmFwTWFwID0ge1xuICAgICAgICAvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuICAgICAgICBvcHRpb246IFsxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIl0sXG4gICAgICAgIC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXG4gICAgICAgIC8vIHNhbWUgd2F5IHRoYXQgdGFnIHNvdXAgcGFyc2VycyBkby4gU28gd2UgY2Fubm90IHNob3J0ZW5cbiAgICAgICAgLy8gdGhpcyBieSBvbWl0dGluZyA8dGJvZHk+IG9yIG90aGVyIHJlcXVpcmVkIGVsZW1lbnRzLlxuICAgICAgICB0aGVhZDogWzEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCJdLFxuICAgICAgICBjb2w6IFsyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiXSxcbiAgICAgICAgdHI6IFsyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiXSxcbiAgICAgICAgdGQ6IFszLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiXSxcbiAgICAgICAgX2RlZmF1bHQ6IFswLCBcIlwiLCBcIlwiXVxuICAgIH07XG4gICAgLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbiAgICB3cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG4gICAgd3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbiAgICB3cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcbiAgICByZXR1cm4gd3JhcE1hcDtcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGY4O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltRnpjMlYwY3k5d1lXTnJjeTlxY1hWbGNua3ZjM0pqTDIxaGJtbHdkV3hoZEdsdmJpOTNjbUZ3VFdGd0xtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEUxQlFVMHNRMEZCUlR0SlFVVlNMRmxCUVZrc1EwRkJRenRKUVVWaUxIZEVRVUYzUkR0SlFVTjRSQ3hKUVVGSkxFOUJRVThzUjBGQlJ6dFJRVVZpTEhWQ1FVRjFRanRSUVVOMlFpeE5RVUZOTEVWQlFVVXNRMEZCUlN4RFFVRkRMRVZCUVVVc09FSkJRVGhDTEVWQlFVVXNWMEZCVnl4RFFVRkZPMUZCUlRGRUxIZEVRVUYzUkR0UlFVTjRSQ3d3UkVGQk1FUTdVVUZETVVRc2RVUkJRWFZFTzFGQlEzWkVMRXRCUVVzc1JVRkJSU3hEUVVGRkxFTkJRVU1zUlVGQlJTeFRRVUZUTEVWQlFVVXNWVUZCVlN4RFFVRkZPMUZCUTI1RExFZEJRVWNzUlVGQlJTeERRVUZGTEVOQlFVTXNSVUZCUlN4dFFrRkJiVUlzUlVGQlJTeHhRa0ZCY1VJc1EwRkJSVHRSUVVOMFJDeEZRVUZGTEVWQlFVVXNRMEZCUlN4RFFVRkRMRVZCUVVVc1owSkJRV2RDTEVWQlFVVXNhMEpCUVd0Q0xFTkJRVVU3VVVGREwwTXNSVUZCUlN4RlFVRkZMRU5CUVVVc1EwRkJReXhGUVVGRkxHOUNRVUZ2UWl4RlFVRkZMSFZDUVVGMVFpeERRVUZGTzFGQlJYaEVMRkZCUVZFc1JVRkJSU3hEUVVGRkxFTkJRVU1zUlVGQlJTeEZRVUZGTEVWQlFVVXNSVUZCUlN4RFFVRkZPMHRCUTNaQ0xFTkJRVU03U1VGRlJpeDFRa0ZCZFVJN1NVRkRka0lzVDBGQlR5eERRVUZETEZGQlFWRXNSMEZCUnl4UFFVRlBMRU5CUVVNc1RVRkJUU3hEUVVGRE8wbEJSV3hETEU5QlFVOHNRMEZCUXl4TFFVRkxMRWRCUVVjc1QwRkJUeXhEUVVGRExFdEJRVXNzUjBGQlJ5eFBRVUZQTEVOQlFVTXNVVUZCVVN4SFFVRkhMRTlCUVU4c1EwRkJReXhQUVVGUExFZEJRVWNzVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXp0SlFVTnVSaXhQUVVGUExFTkJRVU1zUlVGQlJTeEhRVUZITEU5QlFVOHNRMEZCUXl4RlFVRkZMRU5CUVVNN1NVRkZlRUlzVFVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXp0QlFVTm1MRU5CUVVNc1EwRkJSU3hEUVVGRElpd2labWxzWlNJNkltRnpjMlYwY3k5d1lXTnJjeTlxY1hWbGNua3ZjM0pqTDIxaGJtbHdkV3hoZEdsdmJpOTNjbUZ3VFdGd0xtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpWkdWbWFXNWxLQ0JtZFc1amRHbHZiaWdwSUh0Y2JseHVYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNWNiaTh2SUZkbElHaGhkbVVnZEc4Z1kyeHZjMlVnZEdobGMyVWdkR0ZuY3lCMGJ5QnpkWEJ3YjNKMElGaElWRTFNSUNnak1UTXlNREFwWEc1MllYSWdkM0poY0UxaGNDQTlJSHRjYmx4dVhIUXZMeUJUZFhCd2IzSjBPaUJKUlNBOFBUa2diMjVzZVZ4dVhIUnZjSFJwYjI0NklGc2dNU3dnWENJOGMyVnNaV04wSUcxMWJIUnBjR3hsUFNkdGRXeDBhWEJzWlNjK1hDSXNJRndpUEM5elpXeGxZM1ErWENJZ1hTeGNibHh1WEhRdkx5QllTRlJOVENCd1lYSnpaWEp6SUdSdklHNXZkQ0J0WVdkcFkyRnNiSGtnYVc1elpYSjBJR1ZzWlcxbGJuUnpJR2x1SUhSb1pWeHVYSFF2THlCellXMWxJSGRoZVNCMGFHRjBJSFJoWnlCemIzVndJSEJoY25ObGNuTWdaRzh1SUZOdklIZGxJR05oYm01dmRDQnphRzl5ZEdWdVhHNWNkQzh2SUhSb2FYTWdZbmtnYjIxcGRIUnBibWNnUEhSaWIyUjVQaUJ2Y2lCdmRHaGxjaUJ5WlhGMWFYSmxaQ0JsYkdWdFpXNTBjeTVjYmx4MGRHaGxZV1E2SUZzZ01Td2dYQ0k4ZEdGaWJHVStYQ0lzSUZ3aVBDOTBZV0pzWlQ1Y0lpQmRMRnh1WEhSamIydzZJRnNnTWl3Z1hDSThkR0ZpYkdVK1BHTnZiR2R5YjNWd1Bsd2lMQ0JjSWp3dlkyOXNaM0p2ZFhBK1BDOTBZV0pzWlQ1Y0lpQmRMRnh1WEhSMGNqb2dXeUF5TENCY0lqeDBZV0pzWlQ0OGRHSnZaSGsrWENJc0lGd2lQQzkwWW05a2VUNDhMM1JoWW14bFBsd2lJRjBzWEc1Y2RIUmtPaUJiSURNc0lGd2lQSFJoWW14bFBqeDBZbTlrZVQ0OGRISStYQ0lzSUZ3aVBDOTBjajQ4TDNSaWIyUjVQand2ZEdGaWJHVStYQ0lnWFN4Y2JseHVYSFJmWkdWbVlYVnNkRG9nV3lBd0xDQmNJbHdpTENCY0lsd2lJRjFjYm4wN1hHNWNiaTh2SUZOMWNIQnZjblE2SUVsRklEdzlPU0J2Ym14NVhHNTNjbUZ3VFdGd0xtOXdkR2R5YjNWd0lEMGdkM0poY0UxaGNDNXZjSFJwYjI0N1hHNWNibmR5WVhCTllYQXVkR0p2WkhrZ1BTQjNjbUZ3VFdGd0xuUm1iMjkwSUQwZ2QzSmhjRTFoY0M1amIyeG5jbTkxY0NBOUlIZHlZWEJOWVhBdVkyRndkR2x2YmlBOUlIZHlZWEJOWVhBdWRHaGxZV1E3WEc1M2NtRndUV0Z3TG5Sb0lEMGdkM0poY0UxaGNDNTBaRHRjYmx4dWNtVjBkWEp1SUhkeVlYQk5ZWEE3WEc1OUlDazdYRzRpWFgwPVxuIl19
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,
