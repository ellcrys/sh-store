define([
    "../core",
    "../core/nodeName"
], function (jQuery, nodeName) {
    "use strict";
    function getAll(context, tag) {
        // Support: IE <=9 - 11 only
        // Use typeof to avoid zero-argument method invocation on host objects (#15151)
        var ret;
        if (typeof context.getElementsByTagName !== "undefined") {
            ret = context.getElementsByTagName(tag || "*");
        }
        else if (typeof context.querySelectorAll !== "undefined") {
            ret = context.querySelectorAll(tag || "*");
        }
        else {
            ret = [];
        }
        if (tag === undefined || tag && nodeName(context, tag)) {
            return jQuery.merge([context], ret);
        }
        return ret;
    }
    return getAll;
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL21hbmlwdWxhdGlvbi9nZXRBbGwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFFO0lBQ1AsU0FBUztJQUNULGtCQUFrQjtDQUNsQixFQUFFLFVBQVUsTUFBTSxFQUFFLFFBQVE7SUFFN0IsWUFBWSxDQUFDO0lBRWIsZ0JBQWlCLE9BQU8sRUFBRSxHQUFHO1FBRTVCLDRCQUE0QjtRQUM1QiwrRUFBK0U7UUFDL0UsSUFBSSxHQUFHLENBQUM7UUFFUixFQUFFLENBQUMsQ0FBRSxPQUFPLE9BQU8sQ0FBQyxvQkFBb0IsS0FBSyxXQUFZLENBQUMsQ0FBQyxDQUFDO1lBQzNELEdBQUcsR0FBRyxPQUFPLENBQUMsb0JBQW9CLENBQUUsR0FBRyxJQUFJLEdBQUcsQ0FBRSxDQUFDO1FBRWxELENBQUM7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUUsT0FBTyxPQUFPLENBQUMsZ0JBQWdCLEtBQUssV0FBWSxDQUFDLENBQUMsQ0FBQztZQUM5RCxHQUFHLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFFLEdBQUcsSUFBSSxHQUFHLENBQUUsQ0FBQztRQUU5QyxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDUCxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ1YsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFFLEdBQUcsS0FBSyxTQUFTLElBQUksR0FBRyxJQUFJLFFBQVEsQ0FBRSxPQUFPLEVBQUUsR0FBRyxDQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzVELE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFFLENBQUUsT0FBTyxDQUFFLEVBQUUsR0FBRyxDQUFFLENBQUM7UUFDekMsQ0FBQztRQUVELE1BQU0sQ0FBQyxHQUFHLENBQUM7SUFDWixDQUFDO0lBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUNkLENBQUMsQ0FBRSxDQUFDIiwiZmlsZSI6ImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL21hbmlwdWxhdGlvbi9nZXRBbGwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoIFtcblx0XCIuLi9jb3JlXCIsXG5cdFwiLi4vY29yZS9ub2RlTmFtZVwiXG5dLCBmdW5jdGlvbiggalF1ZXJ5LCBub2RlTmFtZSApIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAoIzE1MTUxKVxuXHR2YXIgcmV0O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIGlmICggdHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gW107XG5cdH1cblxuXHRpZiAoIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBub2RlTmFtZSggY29udGV4dCwgdGFnICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxucmV0dXJuIGdldEFsbDtcbn0gKTtcbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL21hbmlwdWxhdGlvbi9nZXRBbGwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDO0lBQ0gsU0FBUztJQUNULGtCQUFrQjtDQUNyQixFQUFFLFVBQVUsTUFBTSxFQUFFLFFBQVE7SUFDekIsWUFBWSxDQUFDO0lBQ2IsZ0JBQWdCLE9BQU8sRUFBRSxHQUFHO1FBQ3hCLDRCQUE0QjtRQUM1QiwrRUFBK0U7UUFDL0UsSUFBSSxHQUFHLENBQUM7UUFDUixFQUFFLENBQUMsQ0FBQyxPQUFPLE9BQU8sQ0FBQyxvQkFBb0IsS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQ3RELEdBQUcsR0FBRyxPQUFPLENBQUMsb0JBQW9CLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDO1FBQ25ELENBQUM7UUFDRCxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxPQUFPLENBQUMsZ0JBQWdCLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQztZQUN2RCxHQUFHLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQztRQUMvQyxDQUFDO1FBQ0QsSUFBSSxDQUFDLENBQUM7WUFDRixHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ2IsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLEdBQUcsS0FBSyxTQUFTLElBQUksR0FBRyxJQUFJLFFBQVEsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JELE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDeEMsQ0FBQztRQUNELE1BQU0sQ0FBQyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUNsQixDQUFDLENBQUMsQ0FBQztBQUVILCt0RUFBK3RFIiwiZmlsZSI6ImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL21hbmlwdWxhdGlvbi9nZXRBbGwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoW1xuICAgIFwiLi4vY29yZVwiLFxuICAgIFwiLi4vY29yZS9ub2RlTmFtZVwiXG5dLCBmdW5jdGlvbiAoalF1ZXJ5LCBub2RlTmFtZSkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIGZ1bmN0aW9uIGdldEFsbChjb250ZXh0LCB0YWcpIHtcbiAgICAgICAgLy8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuICAgICAgICAvLyBVc2UgdHlwZW9mIHRvIGF2b2lkIHplcm8tYXJndW1lbnQgbWV0aG9kIGludm9jYXRpb24gb24gaG9zdCBvYmplY3RzICgjMTUxNTEpXG4gICAgICAgIHZhciByZXQ7XG4gICAgICAgIGlmICh0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgcmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSh0YWcgfHwgXCIqXCIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHJldCA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCh0YWcgfHwgXCIqXCIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0ID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBub2RlTmFtZShjb250ZXh0LCB0YWcpKSB7XG4gICAgICAgICAgICByZXR1cm4galF1ZXJ5Lm1lcmdlKFtjb250ZXh0XSwgcmV0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgICByZXR1cm4gZ2V0QWxsO1xufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zjg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1GemMyVjBjeTl3WVdOcmN5OXFjWFZsY25rdmMzSmpMMjFoYm1sd2RXeGhkR2x2Ymk5blpYUkJiR3d1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNUVUZCVFN4RFFVRkZPMGxCUTFBc1UwRkJVenRKUVVOVUxHdENRVUZyUWp0RFFVTnNRaXhGUVVGRkxGVkJRVlVzVFVGQlRTeEZRVUZGTEZGQlFWRTdTVUZGTjBJc1dVRkJXU3hEUVVGRE8wbEJSV0lzWjBKQlFXbENMRTlCUVU4c1JVRkJSU3hIUVVGSE8xRkJSVFZDTERSQ1FVRTBRanRSUVVNMVFpd3JSVUZCSzBVN1VVRkRMMFVzU1VGQlNTeEhRVUZITEVOQlFVTTdVVUZGVWl4RlFVRkZMRU5CUVVNc1EwRkJSU3hQUVVGUExFOUJRVThzUTBGQlF5eHZRa0ZCYjBJc1MwRkJTeXhYUVVGWkxFTkJRVU1zUTBGQlF5eERRVUZETzFsQlF6TkVMRWRCUVVjc1IwRkJSeXhQUVVGUExFTkJRVU1zYjBKQlFXOUNMRU5CUVVVc1IwRkJSeXhKUVVGSkxFZEJRVWNzUTBGQlJTeERRVUZETzFGQlJXeEVMRU5CUVVNN1VVRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVVXNUMEZCVHl4UFFVRlBMRU5CUVVNc1owSkJRV2RDTEV0QlFVc3NWMEZCV1N4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVNNVJDeEhRVUZITEVkQlFVY3NUMEZCVHl4RFFVRkRMR2RDUVVGblFpeERRVUZGTEVkQlFVY3NTVUZCU1N4SFFVRkhMRU5CUVVVc1EwRkJRenRSUVVVNVF5eERRVUZETzFGQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1dVRkRVQ3hIUVVGSExFZEJRVWNzUlVGQlJTeERRVUZETzFGQlExWXNRMEZCUXp0UlFVVkVMRVZCUVVVc1EwRkJReXhEUVVGRkxFZEJRVWNzUzBGQlN5eFRRVUZUTEVsQlFVa3NSMEZCUnl4SlFVRkpMRkZCUVZFc1EwRkJSU3hQUVVGUExFVkJRVVVzUjBGQlJ5eERRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUXpWRUxFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkZMRU5CUVVVc1QwRkJUeXhEUVVGRkxFVkJRVVVzUjBGQlJ5eERRVUZGTEVOQlFVTTdVVUZEZWtNc1EwRkJRenRSUVVWRUxFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTTdTVUZEV2l4RFFVRkRPMGxCUlVRc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF6dEJRVU5rTEVOQlFVTXNRMEZCUlN4RFFVRkRJaXdpWm1sc1pTSTZJbUZ6YzJWMGN5OXdZV05yY3k5cWNYVmxjbmt2YzNKakwyMWhibWx3ZFd4aGRHbHZiaTluWlhSQmJHd3Vhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKa1pXWnBibVVvSUZ0Y2JseDBYQ0l1TGk5amIzSmxYQ0lzWEc1Y2RGd2lMaTR2WTI5eVpTOXViMlJsVG1GdFpWd2lYRzVkTENCbWRXNWpkR2x2YmlnZ2FsRjFaWEo1TENCdWIyUmxUbUZ0WlNBcElIdGNibHh1WENKMWMyVWdjM1J5YVdOMFhDSTdYRzVjYm1aMWJtTjBhVzl1SUdkbGRFRnNiQ2dnWTI5dWRHVjRkQ3dnZEdGbklDa2dlMXh1WEc1Y2RDOHZJRk4xY0hCdmNuUTZJRWxGSUR3OU9TQXRJREV4SUc5dWJIbGNibHgwTHk4Z1ZYTmxJSFI1Y0dWdlppQjBieUJoZG05cFpDQjZaWEp2TFdGeVozVnRaVzUwSUcxbGRHaHZaQ0JwYm5adlkyRjBhVzl1SUc5dUlHaHZjM1FnYjJKcVpXTjBjeUFvSXpFMU1UVXhLVnh1WEhSMllYSWdjbVYwTzF4dVhHNWNkR2xtSUNnZ2RIbHdaVzltSUdOdmJuUmxlSFF1WjJWMFJXeGxiV1Z1ZEhOQ2VWUmhaMDVoYldVZ0lUMDlJRndpZFc1a1pXWnBibVZrWENJZ0tTQjdYRzVjZEZ4MGNtVjBJRDBnWTI5dWRHVjRkQzVuWlhSRmJHVnRaVzUwYzBKNVZHRm5UbUZ0WlNnZ2RHRm5JSHg4SUZ3aUtsd2lJQ2s3WEc1Y2JseDBmU0JsYkhObElHbG1JQ2dnZEhsd1pXOW1JR052Ym5SbGVIUXVjWFZsY25sVFpXeGxZM1J2Y2tGc2JDQWhQVDBnWENKMWJtUmxabWx1WldSY0lpQXBJSHRjYmx4MFhIUnlaWFFnUFNCamIyNTBaWGgwTG5GMVpYSjVVMlZzWldOMGIzSkJiR3dvSUhSaFp5QjhmQ0JjSWlwY0lpQXBPMXh1WEc1Y2RIMGdaV3h6WlNCN1hHNWNkRngwY21WMElEMGdXMTA3WEc1Y2RIMWNibHh1WEhScFppQW9JSFJoWnlBOVBUMGdkVzVrWldacGJtVmtJSHg4SUhSaFp5QW1KaUJ1YjJSbFRtRnRaU2dnWTI5dWRHVjRkQ3dnZEdGbklDa2dLU0I3WEc1Y2RGeDBjbVYwZFhKdUlHcFJkV1Z5ZVM1dFpYSm5aU2dnV3lCamIyNTBaWGgwSUYwc0lISmxkQ0FwTzF4dVhIUjlYRzVjYmx4MGNtVjBkWEp1SUhKbGREdGNibjFjYmx4dWNtVjBkWEp1SUdkbGRFRnNiRHRjYm4wZ0tUdGNiaUpkZlE9PVxuIl19
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,
