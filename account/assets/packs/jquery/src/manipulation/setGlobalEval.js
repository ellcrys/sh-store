define([
    "../data/var/dataPriv"
], function (dataPriv) {
    "use strict";
    // Mark scripts as having already been evaluated
    function setGlobalEval(elems, refElements) {
        var i = 0, l = elems.length;
        for (; i < l; i++) {
            dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
        }
    }
    return setGlobalEval;
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL21hbmlwdWxhdGlvbi9zZXRHbG9iYWxFdmFsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBRTtJQUNQLHNCQUFzQjtDQUN0QixFQUFFLFVBQVUsUUFBUTtJQUVyQixZQUFZLENBQUM7SUFFYixnREFBZ0Q7SUFDaEQsdUJBQXdCLEtBQUssRUFBRSxXQUFXO1FBQ3pDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFDUixDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztRQUVsQixHQUFHLENBQUMsQ0FBQyxFQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUcsQ0FBQztZQUNyQixRQUFRLENBQUMsR0FBRyxDQUNYLEtBQUssQ0FBRSxDQUFDLENBQUUsRUFDVixZQUFZLEVBQ1osQ0FBQyxXQUFXLElBQUksUUFBUSxDQUFDLEdBQUcsQ0FBRSxXQUFXLENBQUUsQ0FBQyxDQUFFLEVBQUUsWUFBWSxDQUFFLENBQzlELENBQUM7UUFDSCxDQUFDO0lBQ0YsQ0FBQztJQUVELE1BQU0sQ0FBQyxhQUFhLENBQUM7QUFDckIsQ0FBQyxDQUFFLENBQUMiLCJmaWxlIjoiYXNzZXRzL3BhY2tzL2pxdWVyeS9zcmMvbWFuaXB1bGF0aW9uL3NldEdsb2JhbEV2YWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoIFtcblx0XCIuLi9kYXRhL3Zhci9kYXRhUHJpdlwiXG5dLCBmdW5jdGlvbiggZGF0YVByaXYgKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFQcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cbnJldHVybiBzZXRHbG9iYWxFdmFsO1xufSApO1xuIl19
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL21hbmlwdWxhdGlvbi9zZXRHbG9iYWxFdmFsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQztJQUNILHNCQUFzQjtDQUN6QixFQUFFLFVBQVUsUUFBUTtJQUNqQixZQUFZLENBQUM7SUFDYixnREFBZ0Q7SUFDaEQsdUJBQXVCLEtBQUssRUFBRSxXQUFXO1FBQ3JDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztRQUM1QixHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUNoQixRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxZQUFZLEVBQUUsQ0FBQyxXQUFXLElBQUksUUFBUSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUNyRyxDQUFDO0lBQ0wsQ0FBQztJQUNELE1BQU0sQ0FBQyxhQUFhLENBQUM7QUFDekIsQ0FBQyxDQUFDLENBQUM7QUFFSCxtOENBQW04QyIsImZpbGUiOiJhc3NldHMvcGFja3MvanF1ZXJ5L3NyYy9tYW5pcHVsYXRpb24vc2V0R2xvYmFsRXZhbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZShbXG4gICAgXCIuLi9kYXRhL3Zhci9kYXRhUHJpdlwiXG5dLCBmdW5jdGlvbiAoZGF0YVByaXYpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAvLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbiAgICBmdW5jdGlvbiBzZXRHbG9iYWxFdmFsKGVsZW1zLCByZWZFbGVtZW50cykge1xuICAgICAgICB2YXIgaSA9IDAsIGwgPSBlbGVtcy5sZW5ndGg7XG4gICAgICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBkYXRhUHJpdi5zZXQoZWxlbXNbaV0sIFwiZ2xvYmFsRXZhbFwiLCAhcmVmRWxlbWVudHMgfHwgZGF0YVByaXYuZ2V0KHJlZkVsZW1lbnRzW2ldLCBcImdsb2JhbEV2YWxcIikpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzZXRHbG9iYWxFdmFsO1xufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zjg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1GemMyVjBjeTl3WVdOcmN5OXFjWFZsY25rdmMzSmpMMjFoYm1sd2RXeGhkR2x2Ymk5elpYUkhiRzlpWVd4RmRtRnNMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFMUJRVTBzUTBGQlJUdEpRVU5RTEhOQ1FVRnpRanREUVVOMFFpeEZRVUZGTEZWQlFWVXNVVUZCVVR0SlFVVnlRaXhaUVVGWkxFTkJRVU03U1VGRllpeG5SRUZCWjBRN1NVRkRhRVFzZFVKQlFYZENMRXRCUVVzc1JVRkJSU3hYUVVGWE8xRkJRM3BETEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkRVaXhEUVVGRExFZEJRVWNzUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXp0UlFVVnNRaXhIUVVGSExFTkJRVU1zUTBGQlF5eEZRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVWNzUTBGQlF6dFpRVU55UWl4UlFVRlJMRU5CUVVNc1IwRkJSeXhEUVVOWUxFdEJRVXNzUTBGQlJTeERRVUZETEVOQlFVVXNSVUZEVml4WlFVRlpMRVZCUTFvc1EwRkJReXhYUVVGWExFbEJRVWtzVVVGQlVTeERRVUZETEVkQlFVY3NRMEZCUlN4WFFVRlhMRU5CUVVVc1EwRkJReXhEUVVGRkxFVkJRVVVzV1VGQldTeERRVUZGTEVOQlF6bEVMRU5CUVVNN1VVRkRTQ3hEUVVGRE8wbEJRMFlzUTBGQlF6dEpRVVZFTEUxQlFVMHNRMEZCUXl4aFFVRmhMRU5CUVVNN1FVRkRja0lzUTBGQlF5eERRVUZGTEVOQlFVTWlMQ0ptYVd4bElqb2lZWE56WlhSekwzQmhZMnR6TDJweGRXVnllUzl6Y21NdmJXRnVhWEIxYkdGMGFXOXVMM05sZEVkc2IySmhiRVYyWVd3dWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUprWldacGJtVW9JRnRjYmx4MFhDSXVMaTlrWVhSaEwzWmhjaTlrWVhSaFVISnBkbHdpWEc1ZExDQm1kVzVqZEdsdmJpZ2daR0YwWVZCeWFYWWdLU0I3WEc1Y2Jsd2lkWE5sSUhOMGNtbGpkRndpTzF4dVhHNHZMeUJOWVhKcklITmpjbWx3ZEhNZ1lYTWdhR0YyYVc1bklHRnNjbVZoWkhrZ1ltVmxiaUJsZG1Gc2RXRjBaV1JjYm1aMWJtTjBhVzl1SUhObGRFZHNiMkpoYkVWMllXd29JR1ZzWlcxekxDQnlaV1pGYkdWdFpXNTBjeUFwSUh0Y2JseDBkbUZ5SUdrZ1BTQXdMRnh1WEhSY2RHd2dQU0JsYkdWdGN5NXNaVzVuZEdnN1hHNWNibHgwWm05eUlDZ2dPeUJwSUR3Z2JEc2dhU3NySUNrZ2UxeHVYSFJjZEdSaGRHRlFjbWwyTG5ObGRDaGNibHgwWEhSY2RHVnNaVzF6V3lCcElGMHNYRzVjZEZ4MFhIUmNJbWRzYjJKaGJFVjJZV3hjSWl4Y2JseDBYSFJjZENGeVpXWkZiR1Z0Wlc1MGN5QjhmQ0JrWVhSaFVISnBkaTVuWlhRb0lISmxaa1ZzWlcxbGJuUnpXeUJwSUYwc0lGd2laMnh2WW1Gc1JYWmhiRndpSUNsY2JseDBYSFFwTzF4dVhIUjlYRzU5WEc1Y2JuSmxkSFZ5YmlCelpYUkhiRzlpWVd4RmRtRnNPMXh1ZlNBcE8xeHVJbDE5XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,
