define(function () {
    "use strict";
    /**
     * Determines whether an object can have data
     */
    return function (owner) {
        // Accepts only:
        //  - Node
        //    - Node.ELEMENT_NODE
        //    - Node.DOCUMENT_NODE
        //  - Object
        //    - Any
        return owner.nodeType === 1 || owner.nodeType === 9 || !(+owner.nodeType);
    };
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL2RhdGEvdmFyL2FjY2VwdERhdGEuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFFO0lBRVIsWUFBWSxDQUFDO0lBRWI7O09BRUc7SUFDSCxNQUFNLENBQUMsVUFBVSxLQUFLO1FBRXJCLGdCQUFnQjtRQUNoQixVQUFVO1FBQ1YseUJBQXlCO1FBQ3pCLDBCQUEwQjtRQUMxQixZQUFZO1FBQ1osV0FBVztRQUNYLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsUUFBUSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFFLENBQUM7SUFDN0UsQ0FBQyxDQUFDO0FBRUYsQ0FBQyxDQUFFLENBQUMiLCJmaWxlIjoiYXNzZXRzL3BhY2tzL2pxdWVyeS9zcmMvZGF0YS92YXIvYWNjZXB0RGF0YS5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSggZnVuY3Rpb24oKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciBhbiBvYmplY3QgY2FuIGhhdmUgZGF0YVxuICovXG5yZXR1cm4gZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG59ICk7XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL2RhdGEvdmFyL2FjY2VwdERhdGEuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDO0lBQ0gsWUFBWSxDQUFDO0lBQ2I7O09BRUc7SUFDSCxNQUFNLENBQUMsVUFBVSxLQUFLO1FBQ2xCLGdCQUFnQjtRQUNoQixVQUFVO1FBQ1YseUJBQXlCO1FBQ3pCLDBCQUEwQjtRQUMxQixZQUFZO1FBQ1osV0FBVztRQUNYLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsUUFBUSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDOUUsQ0FBQyxDQUFDO0FBQ04sQ0FBQyxDQUFDLENBQUM7QUFFSCx1bkNBQXVuQyIsImZpbGUiOiJhc3NldHMvcGFja3MvanF1ZXJ5L3NyYy9kYXRhL3Zhci9hY2NlcHREYXRhLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKGZ1bmN0aW9uICgpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgYW4gb2JqZWN0IGNhbiBoYXZlIGRhdGFcbiAgICAgKi9cbiAgICByZXR1cm4gZnVuY3Rpb24gKG93bmVyKSB7XG4gICAgICAgIC8vIEFjY2VwdHMgb25seTpcbiAgICAgICAgLy8gIC0gTm9kZVxuICAgICAgICAvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG4gICAgICAgIC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG4gICAgICAgIC8vICAtIE9iamVjdFxuICAgICAgICAvLyAgICAtIEFueVxuICAgICAgICByZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISgrb3duZXIubm9kZVR5cGUpO1xuICAgIH07XG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbUZ6YzJWMGN5OXdZV05yY3k5cWNYVmxjbmt2YzNKakwyUmhkR0V2ZG1GeUwyRmpZMlZ3ZEVSaGRHRXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1RVRkJUU3hEUVVGRk8wbEJSVklzV1VGQldTeERRVUZETzBsQlJXSTdPMDlCUlVjN1NVRkRTQ3hOUVVGTkxFTkJRVU1zVlVGQlZTeExRVUZMTzFGQlJYSkNMR2RDUVVGblFqdFJRVU5vUWl4VlFVRlZPMUZCUTFZc2VVSkJRWGxDTzFGQlEzcENMREJDUVVFd1FqdFJRVU14UWl4WlFVRlpPMUZCUTFvc1YwRkJWenRSUVVOWUxFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNVVUZCVVN4TFFVRkxMRU5CUVVNc1NVRkJTU3hMUVVGTExFTkJRVU1zVVVGQlVTeExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVVc1EwRkJReXhMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZGTEVOQlFVTTdTVUZETjBVc1EwRkJReXhEUVVGRE8wRkJSVVlzUTBGQlF5eERRVUZGTEVOQlFVTWlMQ0ptYVd4bElqb2lZWE56WlhSekwzQmhZMnR6TDJweGRXVnllUzl6Y21NdlpHRjBZUzkyWVhJdllXTmpaWEIwUkdGMFlTNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1SbFptbHVaU2dnWm5WdVkzUnBiMjRvS1NCN1hHNWNibHdpZFhObElITjBjbWxqZEZ3aU8xeHVYRzR2S2lwY2JpQXFJRVJsZEdWeWJXbHVaWE1nZDJobGRHaGxjaUJoYmlCdlltcGxZM1FnWTJGdUlHaGhkbVVnWkdGMFlWeHVJQ292WEc1eVpYUjFjbTRnWm5WdVkzUnBiMjRvSUc5M2JtVnlJQ2tnZTF4dVhHNWNkQzh2SUVGalkyVndkSE1nYjI1c2VUcGNibHgwTHk4Z0lDMGdUbTlrWlZ4dVhIUXZMeUFnSUNBdElFNXZaR1V1UlV4RlRVVk9WRjlPVDBSRlhHNWNkQzh2SUNBZ0lDMGdUbTlrWlM1RVQwTlZUVVZPVkY5T1QwUkZYRzVjZEM4dklDQXRJRTlpYW1WamRGeHVYSFF2THlBZ0lDQXRJRUZ1ZVZ4dVhIUnlaWFIxY200Z2IzZHVaWEl1Ym05a1pWUjVjR1VnUFQwOUlERWdmSHdnYjNkdVpYSXVibTlrWlZSNWNHVWdQVDA5SURrZ2ZId2dJU2dnSzI5M2JtVnlMbTV2WkdWVWVYQmxJQ2s3WEc1OU8xeHVYRzU5SUNrN1hHNGlYWDA9XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL2RhdGEvdmFyL2FjY2VwdERhdGEuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDO0lBQ0gsWUFBWSxDQUFDO0lBQ2I7O09BRUc7SUFDSCxNQUFNLENBQUMsVUFBVSxLQUFLO1FBQ2xCLGdCQUFnQjtRQUNoQixVQUFVO1FBQ1YseUJBQXlCO1FBQ3pCLDBCQUEwQjtRQUMxQixZQUFZO1FBQ1osV0FBVztRQUNYLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsUUFBUSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDOUUsQ0FBQyxDQUFDO0FBQ04sQ0FBQyxDQUFDLENBQUM7QUFDSCx1bkNBQXVuQztBQUV2bkMsMnNGQUEyc0YiLCJmaWxlIjoiYXNzZXRzL3BhY2tzL2pxdWVyeS9zcmMvZGF0YS92YXIvYWNjZXB0RGF0YS5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZShmdW5jdGlvbiAoKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIGFuIG9iamVjdCBjYW4gaGF2ZSBkYXRhXG4gICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChvd25lcikge1xuICAgICAgICAvLyBBY2NlcHRzIG9ubHk6XG4gICAgICAgIC8vICAtIE5vZGVcbiAgICAgICAgLy8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuICAgICAgICAvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuICAgICAgICAvLyAgLSBPYmplY3RcbiAgICAgICAgLy8gICAgLSBBbnlcbiAgICAgICAgcmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoK293bmVyLm5vZGVUeXBlKTtcbiAgICB9O1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGY4O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltRnpjMlYwY3k5d1lXTnJjeTlxY1hWbGNua3ZjM0pqTDJSaGRHRXZkbUZ5TDJGalkyVndkRVJoZEdFdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzVFVGQlRTeERRVUZGTzBsQlJWSXNXVUZCV1N4RFFVRkRPMGxCUldJN08wOUJSVWM3U1VGRFNDeE5RVUZOTEVOQlFVTXNWVUZCVlN4TFFVRkxPMUZCUlhKQ0xHZENRVUZuUWp0UlFVTm9RaXhWUVVGVk8xRkJRMVlzZVVKQlFYbENPMUZCUTNwQ0xEQkNRVUV3UWp0UlFVTXhRaXhaUVVGWk8xRkJRMW9zVjBGQlZ6dFJRVU5ZTEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hMUVVGTExFTkJRVU1zU1VGQlNTeExRVUZMTEVOQlFVTXNVVUZCVVN4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVVVzUTBGQlF5eExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkZMRU5CUVVNN1NVRkROMFVzUTBGQlF5eERRVUZETzBGQlJVWXNRMEZCUXl4RFFVRkZMRU5CUVVNaUxDSm1hV3hsSWpvaVlYTnpaWFJ6TDNCaFkydHpMMnB4ZFdWeWVTOXpjbU12WkdGMFlTOTJZWEl2WVdOalpYQjBSR0YwWVM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbVJsWm1sdVpTZ2dablZ1WTNScGIyNG9LU0I3WEc1Y2Jsd2lkWE5sSUhOMGNtbGpkRndpTzF4dVhHNHZLaXBjYmlBcUlFUmxkR1Z5YldsdVpYTWdkMmhsZEdobGNpQmhiaUJ2WW1wbFkzUWdZMkZ1SUdoaGRtVWdaR0YwWVZ4dUlDb3ZYRzV5WlhSMWNtNGdablZ1WTNScGIyNG9JRzkzYm1WeUlDa2dlMXh1WEc1Y2RDOHZJRUZqWTJWd2RITWdiMjVzZVRwY2JseDBMeThnSUMwZ1RtOWtaVnh1WEhRdkx5QWdJQ0F0SUU1dlpHVXVSVXhGVFVWT1ZGOU9UMFJGWEc1Y2RDOHZJQ0FnSUMwZ1RtOWtaUzVFVDBOVlRVVk9WRjlPVDBSRlhHNWNkQzh2SUNBdElFOWlhbVZqZEZ4dVhIUXZMeUFnSUNBdElFRnVlVnh1WEhSeVpYUjFjbTRnYjNkdVpYSXVibTlrWlZSNWNHVWdQVDA5SURFZ2ZId2diM2R1WlhJdWJtOWtaVlI1Y0dVZ1BUMDlJRGtnZkh3Z0lTZ2dLMjkzYm1WeUxtNXZaR1ZVZVhCbElDazdYRzU5TzF4dVhHNTlJQ2s3WEc0aVhYMD1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbUZ6YzJWMGN5OXdZV05yY3k5cWNYVmxjbmt2YzNKakwyUmhkR0V2ZG1GeUwyRmpZMlZ3ZEVSaGRHRXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1RVRkJUU3hEUVVGRE8wbEJRMGdzV1VGQldTeERRVUZETzBsQlEySTdPMDlCUlVjN1NVRkRTQ3hOUVVGTkxFTkJRVU1zVlVGQlZTeExRVUZMTzFGQlEyeENMR2RDUVVGblFqdFJRVU5vUWl4VlFVRlZPMUZCUTFZc2VVSkJRWGxDTzFGQlEzcENMREJDUVVFd1FqdFJRVU14UWl4WlFVRlpPMUZCUTFvc1YwRkJWenRSUVVOWUxFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNVVUZCVVN4TFFVRkxMRU5CUVVNc1NVRkJTU3hMUVVGTExFTkJRVU1zVVVGQlVTeExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdTVUZET1VVc1EwRkJReXhEUVVGRE8wRkJRMDRzUTBGQlF5eERRVUZETEVOQlFVTTdRVUZGU0N4MWJrTkJRWFZ1UXlJc0ltWnBiR1VpT2lKaGMzTmxkSE12Y0dGamEzTXZhbkYxWlhKNUwzTnlZeTlrWVhSaEwzWmhjaTloWTJObGNIUkVZWFJoTG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2laR1ZtYVc1bEtHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQmNJblZ6WlNCemRISnBZM1JjSWp0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCRVpYUmxjbTFwYm1WeklIZG9aWFJvWlhJZ1lXNGdiMkpxWldOMElHTmhiaUJvWVhabElHUmhkR0ZjYmlBZ0lDQWdLaTljYmlBZ0lDQnlaWFIxY200Z1puVnVZM1JwYjI0Z0tHOTNibVZ5S1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRUZqWTJWd2RITWdiMjVzZVRwY2JpQWdJQ0FnSUNBZ0x5OGdJQzBnVG05a1pWeHVJQ0FnSUNBZ0lDQXZMeUFnSUNBdElFNXZaR1V1UlV4RlRVVk9WRjlPVDBSRlhHNGdJQ0FnSUNBZ0lDOHZJQ0FnSUMwZ1RtOWtaUzVFVDBOVlRVVk9WRjlPVDBSRlhHNGdJQ0FnSUNBZ0lDOHZJQ0F0SUU5aWFtVmpkRnh1SUNBZ0lDQWdJQ0F2THlBZ0lDQXRJRUZ1ZVZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYjNkdVpYSXVibTlrWlZSNWNHVWdQVDA5SURFZ2ZId2diM2R1WlhJdWJtOWtaVlI1Y0dVZ1BUMDlJRGtnZkh3Z0lTZ3JiM2R1WlhJdWJtOWtaVlI1Y0dVcE8xeHVJQ0FnSUgwN1hHNTlLVHRjYmx4dUx5OGpJSE52ZFhKalpVMWhjSEJwYm1kVlVrdzlaR0YwWVRwaGNIQnNhV05oZEdsdmJpOXFjMjl1TzJOb1lYSnpaWFE5ZFhSbU9EdGlZWE5sTmpRc1pYbEtNbHBZU25waFZ6bDFTV3B2ZWt4RFNucGlNMVo1V1RKV2VrbHFjR0pKYlVaNll6SldNR041T1hkWlYwNXlZM2s1Y1dOWVZteGpibXQyWXpOS2Frd3lVbWhrUjBWMlpHMUdlVXd5Um1wWk1sWjNaRVZTYUdSSFJYVmhiazFwV0ZOM2FXSnRSblJhV0UxcFQyeDBaRXhEU25SWldFSjNZVmMxYm1ONVNUWkphMFpDVVZWRmMxUlZSa0pVVTNoRVVWVkdSazh3YkVKU1ZrbHpWMVZHUWxkVGVFUlJWVVpFVHpCc1FsSlhTVGRQTURsQ1VsVmpOMU5WUmtSVFEzaE9VVlZHVGt4RlRrSlJWVTF6VmxWR1FsWlRlRXhSVlVaTVR6RkdRbEpZU2tOTVIyUkRVVlZHYmxGcWRGSlJWVTV2VVdsNFZsRlZSbFpQTVVaQ1VURlpjMlZWU2tKUldHeERUekZHUWxFemNFTk1SRUpEVVZWRmQxRnFkRkpSVlUxNFVXbDRXbEZWUmxwUE1VWkNVVEZ2YzFZd1JrSldlblJTVVZWT1dVeEZNVUpSVlRCelVUQkdRbEY1ZUV4UlZVWk1URVZPUWxGVlRYTlZWVVpDVlZONFRGRlZSa3hNUlU1Q1VWVk5jMU5WUmtKVFUzaE1VVlZHVEV4RlRrSlJWVTF6VlZWR1FsVlRlRXhSVlVaTVRFVk9RbEZWVFhOVFZVWkNVMU40UkZGVlJrUk1SVTVDVVZWVmMxRXdSa0pSZVhoTVVWVkdURXhGVGtKUlZVMXpWVlZHUWxWVGVFUlJWVVpHVEVWT1FsRlZUVGRUVlVaRVRqQlZjMUV3UmtKUmVYaEVVVlZHUkU4d1JrSlNWVmx6VVRCR1FsRjVlRVJSVlVaR1RFVk9RbEZWVFdsTVEwcHRZVmQ0YkVscWIybFpXRTU2V2xoU2Vrd3pRbWhaTW5SNlRESndlR1JYVm5sbFV6bDZZMjFOZGxwSFJqQlpVemt5V1ZoSmRsbFhUbXBhV0VJd1VrZEdNRmxUTlhGamVVbHpTVzVPZG1SWVNtcGFXRTVFWWpJMU1GcFhOVEJKYW5CaVNXMVNiRnB0YkhWYVUyZG5XbTVXZFZrelVuQmlNalJ2UzFOQ04xaEhOV05pYkhkcFpGaE9iRWxJVGpCamJXeHFaRVozYVU4eGVIVllSelIyUzJsd1kySnBRWEZKUlZKc1pFZFdlV0pYYkhWYVdFMW5aREpvYkdSSGFHeGphVUpvWW1sQ2RsbHRjR3haTTFGbldUSkdkVWxIYUdoa2JWVm5Xa2RHTUZsV2VIVkpRMjkyV0VjMWVWcFlVakZqYlRSbldtNVdkVmt6VW5CaU1qUnZTVWM1TTJKdFZubEpRMnRuWlRGNGRWaEhOV05rUXpoMlNVVkdhbGt5Vm5ka1NFMW5ZakkxYzJWVWNHTmliSGd3VEhrNFowbERNR2RVYlRscldsWjRkVmhJVVhaTWVVRm5TVU5CZEVsRk5YWmFSMVYxVWxWNFJsUlZWazlXUmpsUFZEQlNSbGhITldOa1F6aDJTVU5CWjBsRE1HZFViVGxyV2xNMVJWUXdUbFpVVlZaUFZrWTVUMVF3VWtaWVJ6VmpaRU00ZGtsRFFYUkpSVGxwWVcxV2FtUkdlSFZZU0ZGMlRIbEJaMGxEUVhSSlJVWjFaVlo0ZFZoSVVubGFXRkl4WTIwMFoySXpaSFZhV0VsMVltMDVhMXBXVWpWalIxVm5VRlF3T1VsRVJXZG1TSGRuWWpOa2RWcFlTWFZpYlRscldsWlNOV05IVldkUVZEQTVTVVJyWjJaSWQyZEpVMmRuU3pJNU0ySnRWbmxNYlRWMldrZFdWV1ZZUW14SlEyczNXRWMxT1U4eGVIVllSelU1U1VOck4xaEhOR2xZV0RBOVhHNGlYWDA9XG4iXX0=

//# sourceMappingURL=data:application/json;charset=utf8;base64,
