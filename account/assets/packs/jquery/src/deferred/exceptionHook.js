define([
    "../core",
    "../deferred"
], function (jQuery) {
    "use strict";
    // These usually indicate a programmer mistake during development,
    // warn about them ASAP rather than swallowing them by default.
    var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
    jQuery.Deferred.exceptionHook = function (error, stack) {
        // Support: IE 8 - 9 only
        // Console exists when dev tools are open, which can happen at any time
        if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
            window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);
        }
    };
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL2RlZmVycmVkL2V4Y2VwdGlvbkhvb2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFFO0lBQ1AsU0FBUztJQUNULGFBQWE7Q0FDYixFQUFFLFVBQVUsTUFBTTtJQUVuQixZQUFZLENBQUM7SUFFYixrRUFBa0U7SUFDbEUsK0RBQStEO0lBQy9ELElBQUksV0FBVyxHQUFHLHdEQUF3RCxDQUFDO0lBRTNFLE1BQU0sQ0FBQyxRQUFRLENBQUMsYUFBYSxHQUFHLFVBQVUsS0FBSyxFQUFFLEtBQUs7UUFFckQseUJBQXlCO1FBQ3pCLHVFQUF1RTtRQUN2RSxFQUFFLENBQUMsQ0FBRSxNQUFNLENBQUMsT0FBTyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLEtBQUssSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFFLEtBQUssQ0FBQyxJQUFJLENBQUcsQ0FBQyxDQUFDLENBQUM7WUFDeEYsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUUsNkJBQTZCLEdBQUcsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBRSxDQUFDO1FBQzFGLENBQUM7SUFDRixDQUFDLENBQUM7QUFFRixDQUFDLENBQUUsQ0FBQyIsImZpbGUiOiJhc3NldHMvcGFja3MvanF1ZXJ5L3NyYy9kZWZlcnJlZC9leGNlcHRpb25Ib29rLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBbXG5cdFwiLi4vY29yZVwiLFxuXHRcIi4uL2RlZmVycmVkXCJcbl0sIGZ1bmN0aW9uKCBqUXVlcnkgKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vLyBUaGVzZSB1c3VhbGx5IGluZGljYXRlIGEgcHJvZ3JhbW1lciBtaXN0YWtlIGR1cmluZyBkZXZlbG9wbWVudCxcbi8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxudmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cbmpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBzdGFjayApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG5cdGlmICggd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KCBlcnJvci5uYW1lICkgKSB7XG5cdFx0d2luZG93LmNvbnNvbGUud2FybiggXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrLCBzdGFjayApO1xuXHR9XG59O1xuXG59ICk7XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL2RlZmVycmVkL2V4Y2VwdGlvbkhvb2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDO0lBQ0gsU0FBUztJQUNULGFBQWE7Q0FDaEIsRUFBRSxVQUFVLE1BQU07SUFDZixZQUFZLENBQUM7SUFDYixrRUFBa0U7SUFDbEUsK0RBQStEO0lBQy9ELElBQUksV0FBVyxHQUFHLHdEQUF3RCxDQUFDO0lBQzNFLE1BQU0sQ0FBQyxRQUFRLENBQUMsYUFBYSxHQUFHLFVBQVUsS0FBSyxFQUFFLEtBQUs7UUFDbEQseUJBQXlCO1FBQ3pCLHVFQUF1RTtRQUN2RSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLEtBQUssSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakYsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsNkJBQTZCLEdBQUcsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzNGLENBQUM7SUFDTCxDQUFDLENBQUM7QUFDTixDQUFDLENBQUMsQ0FBQztBQUVILCswREFBKzBEIiwiZmlsZSI6ImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL2RlZmVycmVkL2V4Y2VwdGlvbkhvb2suanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoW1xuICAgIFwiLi4vY29yZVwiLFxuICAgIFwiLi4vZGVmZXJyZWRcIlxuXSwgZnVuY3Rpb24gKGpRdWVyeSkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIC8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuICAgIC8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxuICAgIHZhciByZXJyb3JOYW1lcyA9IC9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO1xuICAgIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24gKGVycm9yLCBzdGFjaykge1xuICAgICAgICAvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG4gICAgICAgIC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG4gICAgICAgIGlmICh3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS53YXJuICYmIGVycm9yICYmIHJlcnJvck5hbWVzLnRlc3QoZXJyb3IubmFtZSkpIHtcbiAgICAgICAgICAgIHdpbmRvdy5jb25zb2xlLndhcm4oXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICB9O1xufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zjg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1GemMyVjBjeTl3WVdOcmN5OXFjWFZsY25rdmMzSmpMMlJsWm1WeWNtVmtMMlY0WTJWd2RHbHZia2h2YjJzdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzVFVGQlRTeERRVUZGTzBsQlExQXNVMEZCVXp0SlFVTlVMR0ZCUVdFN1EwRkRZaXhGUVVGRkxGVkJRVlVzVFVGQlRUdEpRVVZ1UWl4WlFVRlpMRU5CUVVNN1NVRkZZaXhyUlVGQmEwVTdTVUZEYkVVc0swUkJRU3RFTzBsQlF5OUVMRWxCUVVrc1YwRkJWeXhIUVVGSExIZEVRVUYzUkN4RFFVRkRPMGxCUlRORkxFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNZVUZCWVN4SFFVRkhMRlZCUVZVc1MwRkJTeXhGUVVGRkxFdEJRVXM3VVVGRmNrUXNlVUpCUVhsQ08xRkJRM3BDTEhWRlFVRjFSVHRSUVVOMlJTeEZRVUZGTEVOQlFVTXNRMEZCUlN4TlFVRk5MRU5CUVVNc1QwRkJUeXhKUVVGSkxFMUJRVTBzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4SlFVRkpMRXRCUVVzc1NVRkJTU3hYUVVGWExFTkJRVU1zU1VGQlNTeERRVUZGTEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVjc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRGVFWXNUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVVVzTmtKQlFUWkNMRWRCUVVjc1MwRkJTeXhEUVVGRExFOUJRVThzUlVGQlJTeExRVUZMTEVOQlFVTXNTMEZCU3l4RlFVRkZMRXRCUVVzc1EwRkJSU3hEUVVGRE8xRkJRekZHTEVOQlFVTTdTVUZEUml4RFFVRkRMRU5CUVVNN1FVRkZSaXhEUVVGRExFTkJRVVVzUTBGQlF5SXNJbVpwYkdVaU9pSmhjM05sZEhNdmNHRmphM012YW5GMVpYSjVMM055WXk5a1pXWmxjbkpsWkM5bGVHTmxjSFJwYjI1SWIyOXJMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVpHVm1hVzVsS0NCYlhHNWNkRndpTGk0dlkyOXlaVndpTEZ4dVhIUmNJaTR1TDJSbFptVnljbVZrWENKY2JsMHNJR1oxYm1OMGFXOXVLQ0JxVVhWbGNua2dLU0I3WEc1Y2Jsd2lkWE5sSUhOMGNtbGpkRndpTzF4dVhHNHZMeUJVYUdWelpTQjFjM1ZoYkd4NUlHbHVaR2xqWVhSbElHRWdjSEp2WjNKaGJXMWxjaUJ0YVhOMFlXdGxJR1IxY21sdVp5QmtaWFpsYkc5d2JXVnVkQ3hjYmk4dklIZGhjbTRnWVdKdmRYUWdkR2hsYlNCQlUwRlFJSEpoZEdobGNpQjBhR0Z1SUhOM1lXeHNiM2RwYm1jZ2RHaGxiU0JpZVNCa1pXWmhkV3gwTGx4dWRtRnlJSEpsY25KdmNrNWhiV1Z6SUQwZ0wxNG9SWFpoYkh4SmJuUmxjbTVoYkh4U1lXNW5aWHhTWldabGNtVnVZMlY4VTNsdWRHRjRmRlI1Y0dWOFZWSkpLVVZ5Y205eUpDODdYRzVjYm1wUmRXVnllUzVFWldabGNuSmxaQzVsZUdObGNIUnBiMjVJYjI5cklEMGdablZ1WTNScGIyNG9JR1Z5Y205eUxDQnpkR0ZqYXlBcElIdGNibHh1WEhRdkx5QlRkWEJ3YjNKME9pQkpSU0E0SUMwZ09TQnZibXg1WEc1Y2RDOHZJRU52Ym5OdmJHVWdaWGhwYzNSeklIZG9aVzRnWkdWMklIUnZiMnh6SUdGeVpTQnZjR1Z1TENCM2FHbGphQ0JqWVc0Z2FHRndjR1Z1SUdGMElHRnVlU0IwYVcxbFhHNWNkR2xtSUNnZ2QybHVaRzkzTG1OdmJuTnZiR1VnSmlZZ2QybHVaRzkzTG1OdmJuTnZiR1V1ZDJGeWJpQW1KaUJsY25KdmNpQW1KaUJ5WlhKeWIzSk9ZVzFsY3k1MFpYTjBLQ0JsY25KdmNpNXVZVzFsSUNrZ0tTQjdYRzVjZEZ4MGQybHVaRzkzTG1OdmJuTnZiR1V1ZDJGeWJpZ2dYQ0pxVVhWbGNua3VSR1ZtWlhKeVpXUWdaWGhqWlhCMGFXOXVPaUJjSWlBcklHVnljbTl5TG0xbGMzTmhaMlVzSUdWeWNtOXlMbk4wWVdOckxDQnpkR0ZqYXlBcE8xeHVYSFI5WEc1OU8xeHVYRzU5SUNrN1hHNGlYWDA9XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,
