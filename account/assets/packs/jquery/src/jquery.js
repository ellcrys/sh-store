define([
    "./core",
    "./selector",
    "./traversing",
    "./callbacks",
    "./deferred",
    "./deferred/exceptionHook",
    "./core/ready",
    "./data",
    "./queue",
    "./queue/delay",
    "./attributes",
    "./event",
    "./event/alias",
    "./event/focusin",
    "./manipulation",
    "./manipulation/_evalUrl",
    "./wrap",
    "./css",
    "./css/hiddenVisibleSelectors",
    "./serialize",
    "./ajax",
    "./ajax/xhr",
    "./ajax/script",
    "./ajax/jsonp",
    "./ajax/load",
    "./event/ajax",
    "./effects",
    "./effects/animatedSelector",
    "./offset",
    "./dimensions",
    "./deprecated",
    "./exports/amd",
    "./exports/global"
], function (jQuery) {
    "use strict";
    return jQuery;
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL2pxdWVyeS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUU7SUFDUCxRQUFRO0lBQ1IsWUFBWTtJQUNaLGNBQWM7SUFDZCxhQUFhO0lBQ2IsWUFBWTtJQUNaLDBCQUEwQjtJQUMxQixjQUFjO0lBQ2QsUUFBUTtJQUNSLFNBQVM7SUFDVCxlQUFlO0lBQ2YsY0FBYztJQUNkLFNBQVM7SUFDVCxlQUFlO0lBQ2YsaUJBQWlCO0lBQ2pCLGdCQUFnQjtJQUNoQix5QkFBeUI7SUFDekIsUUFBUTtJQUNSLE9BQU87SUFDUCw4QkFBOEI7SUFDOUIsYUFBYTtJQUNiLFFBQVE7SUFDUixZQUFZO0lBQ1osZUFBZTtJQUNmLGNBQWM7SUFDZCxhQUFhO0lBQ2IsY0FBYztJQUNkLFdBQVc7SUFDWCw0QkFBNEI7SUFDNUIsVUFBVTtJQUNWLGNBQWM7SUFDZCxjQUFjO0lBQ2QsZUFBZTtJQUNmLGtCQUFrQjtDQUNsQixFQUFFLFVBQVUsTUFBTTtJQUVuQixZQUFZLENBQUM7SUFFYixNQUFNLENBQUMsTUFBTSxDQUFDO0FBRWQsQ0FBQyxDQUFFLENBQUMiLCJmaWxlIjoiYXNzZXRzL3BhY2tzL2pxdWVyeS9zcmMvanF1ZXJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBbXG5cdFwiLi9jb3JlXCIsXG5cdFwiLi9zZWxlY3RvclwiLFxuXHRcIi4vdHJhdmVyc2luZ1wiLFxuXHRcIi4vY2FsbGJhY2tzXCIsXG5cdFwiLi9kZWZlcnJlZFwiLFxuXHRcIi4vZGVmZXJyZWQvZXhjZXB0aW9uSG9va1wiLFxuXHRcIi4vY29yZS9yZWFkeVwiLFxuXHRcIi4vZGF0YVwiLFxuXHRcIi4vcXVldWVcIixcblx0XCIuL3F1ZXVlL2RlbGF5XCIsXG5cdFwiLi9hdHRyaWJ1dGVzXCIsXG5cdFwiLi9ldmVudFwiLFxuXHRcIi4vZXZlbnQvYWxpYXNcIixcblx0XCIuL2V2ZW50L2ZvY3VzaW5cIixcblx0XCIuL21hbmlwdWxhdGlvblwiLFxuXHRcIi4vbWFuaXB1bGF0aW9uL19ldmFsVXJsXCIsXG5cdFwiLi93cmFwXCIsXG5cdFwiLi9jc3NcIixcblx0XCIuL2Nzcy9oaWRkZW5WaXNpYmxlU2VsZWN0b3JzXCIsXG5cdFwiLi9zZXJpYWxpemVcIixcblx0XCIuL2FqYXhcIixcblx0XCIuL2FqYXgveGhyXCIsXG5cdFwiLi9hamF4L3NjcmlwdFwiLFxuXHRcIi4vYWpheC9qc29ucFwiLFxuXHRcIi4vYWpheC9sb2FkXCIsXG5cdFwiLi9ldmVudC9hamF4XCIsXG5cdFwiLi9lZmZlY3RzXCIsXG5cdFwiLi9lZmZlY3RzL2FuaW1hdGVkU2VsZWN0b3JcIixcblx0XCIuL29mZnNldFwiLFxuXHRcIi4vZGltZW5zaW9uc1wiLFxuXHRcIi4vZGVwcmVjYXRlZFwiLFxuXHRcIi4vZXhwb3J0cy9hbWRcIixcblx0XCIuL2V4cG9ydHMvZ2xvYmFsXCJcbl0sIGZ1bmN0aW9uKCBqUXVlcnkgKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5yZXR1cm4galF1ZXJ5O1xuXG59ICk7XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL2pxdWVyeS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUM7SUFDSCxRQUFRO0lBQ1IsWUFBWTtJQUNaLGNBQWM7SUFDZCxhQUFhO0lBQ2IsWUFBWTtJQUNaLDBCQUEwQjtJQUMxQixjQUFjO0lBQ2QsUUFBUTtJQUNSLFNBQVM7SUFDVCxlQUFlO0lBQ2YsY0FBYztJQUNkLFNBQVM7SUFDVCxlQUFlO0lBQ2YsaUJBQWlCO0lBQ2pCLGdCQUFnQjtJQUNoQix5QkFBeUI7SUFDekIsUUFBUTtJQUNSLE9BQU87SUFDUCw4QkFBOEI7SUFDOUIsYUFBYTtJQUNiLFFBQVE7SUFDUixZQUFZO0lBQ1osZUFBZTtJQUNmLGNBQWM7SUFDZCxhQUFhO0lBQ2IsY0FBYztJQUNkLFdBQVc7SUFDWCw0QkFBNEI7SUFDNUIsVUFBVTtJQUNWLGNBQWM7SUFDZCxjQUFjO0lBQ2QsZUFBZTtJQUNmLGtCQUFrQjtDQUNyQixFQUFFLFVBQVUsTUFBTTtJQUNmLFlBQVksQ0FBQztJQUNiLE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDbEIsQ0FBQyxDQUFDLENBQUM7QUFFSCwrMkRBQSsyRCIsImZpbGUiOiJhc3NldHMvcGFja3MvanF1ZXJ5L3NyYy9qcXVlcnkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoW1xuICAgIFwiLi9jb3JlXCIsXG4gICAgXCIuL3NlbGVjdG9yXCIsXG4gICAgXCIuL3RyYXZlcnNpbmdcIixcbiAgICBcIi4vY2FsbGJhY2tzXCIsXG4gICAgXCIuL2RlZmVycmVkXCIsXG4gICAgXCIuL2RlZmVycmVkL2V4Y2VwdGlvbkhvb2tcIixcbiAgICBcIi4vY29yZS9yZWFkeVwiLFxuICAgIFwiLi9kYXRhXCIsXG4gICAgXCIuL3F1ZXVlXCIsXG4gICAgXCIuL3F1ZXVlL2RlbGF5XCIsXG4gICAgXCIuL2F0dHJpYnV0ZXNcIixcbiAgICBcIi4vZXZlbnRcIixcbiAgICBcIi4vZXZlbnQvYWxpYXNcIixcbiAgICBcIi4vZXZlbnQvZm9jdXNpblwiLFxuICAgIFwiLi9tYW5pcHVsYXRpb25cIixcbiAgICBcIi4vbWFuaXB1bGF0aW9uL19ldmFsVXJsXCIsXG4gICAgXCIuL3dyYXBcIixcbiAgICBcIi4vY3NzXCIsXG4gICAgXCIuL2Nzcy9oaWRkZW5WaXNpYmxlU2VsZWN0b3JzXCIsXG4gICAgXCIuL3NlcmlhbGl6ZVwiLFxuICAgIFwiLi9hamF4XCIsXG4gICAgXCIuL2FqYXgveGhyXCIsXG4gICAgXCIuL2FqYXgvc2NyaXB0XCIsXG4gICAgXCIuL2FqYXgvanNvbnBcIixcbiAgICBcIi4vYWpheC9sb2FkXCIsXG4gICAgXCIuL2V2ZW50L2FqYXhcIixcbiAgICBcIi4vZWZmZWN0c1wiLFxuICAgIFwiLi9lZmZlY3RzL2FuaW1hdGVkU2VsZWN0b3JcIixcbiAgICBcIi4vb2Zmc2V0XCIsXG4gICAgXCIuL2RpbWVuc2lvbnNcIixcbiAgICBcIi4vZGVwcmVjYXRlZFwiLFxuICAgIFwiLi9leHBvcnRzL2FtZFwiLFxuICAgIFwiLi9leHBvcnRzL2dsb2JhbFwiXG5dLCBmdW5jdGlvbiAoalF1ZXJ5KSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgcmV0dXJuIGpRdWVyeTtcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGY4O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltRnpjMlYwY3k5d1lXTnJjeTlxY1hWbGNua3ZjM0pqTDJweGRXVnllUzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeE5RVUZOTEVOQlFVVTdTVUZEVUN4UlFVRlJPMGxCUTFJc1dVRkJXVHRKUVVOYUxHTkJRV003U1VGRFpDeGhRVUZoTzBsQlEySXNXVUZCV1R0SlFVTmFMREJDUVVFd1FqdEpRVU14UWl4alFVRmpPMGxCUTJRc1VVRkJVVHRKUVVOU0xGTkJRVk03U1VGRFZDeGxRVUZsTzBsQlEyWXNZMEZCWXp0SlFVTmtMRk5CUVZNN1NVRkRWQ3hsUVVGbE8wbEJRMllzYVVKQlFXbENPMGxCUTJwQ0xHZENRVUZuUWp0SlFVTm9RaXg1UWtGQmVVSTdTVUZEZWtJc1VVRkJVVHRKUVVOU0xFOUJRVTg3U1VGRFVDdzRRa0ZCT0VJN1NVRkRPVUlzWVVGQllUdEpRVU5pTEZGQlFWRTdTVUZEVWl4WlFVRlpPMGxCUTFvc1pVRkJaVHRKUVVObUxHTkJRV003U1VGRFpDeGhRVUZoTzBsQlEySXNZMEZCWXp0SlFVTmtMRmRCUVZjN1NVRkRXQ3cwUWtGQk5FSTdTVUZETlVJc1ZVRkJWVHRKUVVOV0xHTkJRV003U1VGRFpDeGpRVUZqTzBsQlEyUXNaVUZCWlR0SlFVTm1MR3RDUVVGclFqdERRVU5zUWl4RlFVRkZMRlZCUVZVc1RVRkJUVHRKUVVWdVFpeFpRVUZaTEVOQlFVTTdTVUZGWWl4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRE8wRkJSV1FzUTBGQlF5eERRVUZGTEVOQlFVTWlMQ0ptYVd4bElqb2lZWE56WlhSekwzQmhZMnR6TDJweGRXVnllUzl6Y21NdmFuRjFaWEo1TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2laR1ZtYVc1bEtDQmJYRzVjZEZ3aUxpOWpiM0psWENJc1hHNWNkRndpTGk5elpXeGxZM1J2Y2x3aUxGeHVYSFJjSWk0dmRISmhkbVZ5YzJsdVoxd2lMRnh1WEhSY0lpNHZZMkZzYkdKaFkydHpYQ0lzWEc1Y2RGd2lMaTlrWldabGNuSmxaRndpTEZ4dVhIUmNJaTR2WkdWbVpYSnlaV1F2WlhoalpYQjBhVzl1U0c5dmExd2lMRnh1WEhSY0lpNHZZMjl5WlM5eVpXRmtlVndpTEZ4dVhIUmNJaTR2WkdGMFlWd2lMRnh1WEhSY0lpNHZjWFZsZFdWY0lpeGNibHgwWENJdUwzRjFaWFZsTDJSbGJHRjVYQ0lzWEc1Y2RGd2lMaTloZEhSeWFXSjFkR1Z6WENJc1hHNWNkRndpTGk5bGRtVnVkRndpTEZ4dVhIUmNJaTR2WlhabGJuUXZZV3hwWVhOY0lpeGNibHgwWENJdUwyVjJaVzUwTDJadlkzVnphVzVjSWl4Y2JseDBYQ0l1TDIxaGJtbHdkV3hoZEdsdmJsd2lMRnh1WEhSY0lpNHZiV0Z1YVhCMWJHRjBhVzl1TDE5bGRtRnNWWEpzWENJc1hHNWNkRndpTGk5M2NtRndYQ0lzWEc1Y2RGd2lMaTlqYzNOY0lpeGNibHgwWENJdUwyTnpjeTlvYVdSa1pXNVdhWE5wWW14bFUyVnNaV04wYjNKelhDSXNYRzVjZEZ3aUxpOXpaWEpwWVd4cGVtVmNJaXhjYmx4MFhDSXVMMkZxWVhoY0lpeGNibHgwWENJdUwyRnFZWGd2ZUdoeVhDSXNYRzVjZEZ3aUxpOWhhbUY0TDNOamNtbHdkRndpTEZ4dVhIUmNJaTR2WVdwaGVDOXFjMjl1Y0Z3aUxGeHVYSFJjSWk0dllXcGhlQzlzYjJGa1hDSXNYRzVjZEZ3aUxpOWxkbVZ1ZEM5aGFtRjRYQ0lzWEc1Y2RGd2lMaTlsWm1abFkzUnpYQ0lzWEc1Y2RGd2lMaTlsWm1abFkzUnpMMkZ1YVcxaGRHVmtVMlZzWldOMGIzSmNJaXhjYmx4MFhDSXVMMjltWm5ObGRGd2lMRnh1WEhSY0lpNHZaR2x0Wlc1emFXOXVjMXdpTEZ4dVhIUmNJaTR2WkdWd2NtVmpZWFJsWkZ3aUxGeHVYSFJjSWk0dlpYaHdiM0owY3k5aGJXUmNJaXhjYmx4MFhDSXVMMlY0Y0c5eWRITXZaMnh2WW1Gc1hDSmNibDBzSUdaMWJtTjBhVzl1S0NCcVVYVmxjbmtnS1NCN1hHNWNibHdpZFhObElITjBjbWxqZEZ3aU8xeHVYRzV5WlhSMWNtNGdhbEYxWlhKNU8xeHVYRzU5SUNrN1hHNGlYWDA9XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL2pxdWVyeS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUM7SUFDSCxRQUFRO0lBQ1IsWUFBWTtJQUNaLGNBQWM7SUFDZCxhQUFhO0lBQ2IsWUFBWTtJQUNaLDBCQUEwQjtJQUMxQixjQUFjO0lBQ2QsUUFBUTtJQUNSLFNBQVM7SUFDVCxlQUFlO0lBQ2YsY0FBYztJQUNkLFNBQVM7SUFDVCxlQUFlO0lBQ2YsaUJBQWlCO0lBQ2pCLGdCQUFnQjtJQUNoQix5QkFBeUI7SUFDekIsUUFBUTtJQUNSLE9BQU87SUFDUCw4QkFBOEI7SUFDOUIsYUFBYTtJQUNiLFFBQVE7SUFDUixZQUFZO0lBQ1osZUFBZTtJQUNmLGNBQWM7SUFDZCxhQUFhO0lBQ2IsY0FBYztJQUNkLFdBQVc7SUFDWCw0QkFBNEI7SUFDNUIsVUFBVTtJQUNWLGNBQWM7SUFDZCxjQUFjO0lBQ2QsZUFBZTtJQUNmLGtCQUFrQjtDQUNyQixFQUFFLFVBQVUsTUFBTTtJQUNmLFlBQVksQ0FBQztJQUNiLE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDbEIsQ0FBQyxDQUFDLENBQUM7QUFDSCwrMkRBQSsyRDtBQUMvMkQsdThJQUF1OEk7QUFFdjhJLG01VUFBbTVVIiwiZmlsZSI6ImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL2pxdWVyeS5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZShbXG4gICAgXCIuL2NvcmVcIixcbiAgICBcIi4vc2VsZWN0b3JcIixcbiAgICBcIi4vdHJhdmVyc2luZ1wiLFxuICAgIFwiLi9jYWxsYmFja3NcIixcbiAgICBcIi4vZGVmZXJyZWRcIixcbiAgICBcIi4vZGVmZXJyZWQvZXhjZXB0aW9uSG9va1wiLFxuICAgIFwiLi9jb3JlL3JlYWR5XCIsXG4gICAgXCIuL2RhdGFcIixcbiAgICBcIi4vcXVldWVcIixcbiAgICBcIi4vcXVldWUvZGVsYXlcIixcbiAgICBcIi4vYXR0cmlidXRlc1wiLFxuICAgIFwiLi9ldmVudFwiLFxuICAgIFwiLi9ldmVudC9hbGlhc1wiLFxuICAgIFwiLi9ldmVudC9mb2N1c2luXCIsXG4gICAgXCIuL21hbmlwdWxhdGlvblwiLFxuICAgIFwiLi9tYW5pcHVsYXRpb24vX2V2YWxVcmxcIixcbiAgICBcIi4vd3JhcFwiLFxuICAgIFwiLi9jc3NcIixcbiAgICBcIi4vY3NzL2hpZGRlblZpc2libGVTZWxlY3RvcnNcIixcbiAgICBcIi4vc2VyaWFsaXplXCIsXG4gICAgXCIuL2FqYXhcIixcbiAgICBcIi4vYWpheC94aHJcIixcbiAgICBcIi4vYWpheC9zY3JpcHRcIixcbiAgICBcIi4vYWpheC9qc29ucFwiLFxuICAgIFwiLi9hamF4L2xvYWRcIixcbiAgICBcIi4vZXZlbnQvYWpheFwiLFxuICAgIFwiLi9lZmZlY3RzXCIsXG4gICAgXCIuL2VmZmVjdHMvYW5pbWF0ZWRTZWxlY3RvclwiLFxuICAgIFwiLi9vZmZzZXRcIixcbiAgICBcIi4vZGltZW5zaW9uc1wiLFxuICAgIFwiLi9kZXByZWNhdGVkXCIsXG4gICAgXCIuL2V4cG9ydHMvYW1kXCIsXG4gICAgXCIuL2V4cG9ydHMvZ2xvYmFsXCJcbl0sIGZ1bmN0aW9uIChqUXVlcnkpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICByZXR1cm4galF1ZXJ5O1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGY4O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltRnpjMlYwY3k5d1lXTnJjeTlxY1hWbGNua3ZjM0pqTDJweGRXVnllUzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeE5RVUZOTEVOQlFVVTdTVUZEVUN4UlFVRlJPMGxCUTFJc1dVRkJXVHRKUVVOYUxHTkJRV003U1VGRFpDeGhRVUZoTzBsQlEySXNXVUZCV1R0SlFVTmFMREJDUVVFd1FqdEpRVU14UWl4alFVRmpPMGxCUTJRc1VVRkJVVHRKUVVOU0xGTkJRVk03U1VGRFZDeGxRVUZsTzBsQlEyWXNZMEZCWXp0SlFVTmtMRk5CUVZNN1NVRkRWQ3hsUVVGbE8wbEJRMllzYVVKQlFXbENPMGxCUTJwQ0xHZENRVUZuUWp0SlFVTm9RaXg1UWtGQmVVSTdTVUZEZWtJc1VVRkJVVHRKUVVOU0xFOUJRVTg3U1VGRFVDdzRRa0ZCT0VJN1NVRkRPVUlzWVVGQllUdEpRVU5pTEZGQlFWRTdTVUZEVWl4WlFVRlpPMGxCUTFvc1pVRkJaVHRKUVVObUxHTkJRV003U1VGRFpDeGhRVUZoTzBsQlEySXNZMEZCWXp0SlFVTmtMRmRCUVZjN1NVRkRXQ3cwUWtGQk5FSTdTVUZETlVJc1ZVRkJWVHRKUVVOV0xHTkJRV003U1VGRFpDeGpRVUZqTzBsQlEyUXNaVUZCWlR0SlFVTm1MR3RDUVVGclFqdERRVU5zUWl4RlFVRkZMRlZCUVZVc1RVRkJUVHRKUVVWdVFpeFpRVUZaTEVOQlFVTTdTVUZGWWl4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRE8wRkJSV1FzUTBGQlF5eERRVUZGTEVOQlFVTWlMQ0ptYVd4bElqb2lZWE56WlhSekwzQmhZMnR6TDJweGRXVnllUzl6Y21NdmFuRjFaWEo1TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2laR1ZtYVc1bEtDQmJYRzVjZEZ3aUxpOWpiM0psWENJc1hHNWNkRndpTGk5elpXeGxZM1J2Y2x3aUxGeHVYSFJjSWk0dmRISmhkbVZ5YzJsdVoxd2lMRnh1WEhSY0lpNHZZMkZzYkdKaFkydHpYQ0lzWEc1Y2RGd2lMaTlrWldabGNuSmxaRndpTEZ4dVhIUmNJaTR2WkdWbVpYSnlaV1F2WlhoalpYQjBhVzl1U0c5dmExd2lMRnh1WEhSY0lpNHZZMjl5WlM5eVpXRmtlVndpTEZ4dVhIUmNJaTR2WkdGMFlWd2lMRnh1WEhSY0lpNHZjWFZsZFdWY0lpeGNibHgwWENJdUwzRjFaWFZsTDJSbGJHRjVYQ0lzWEc1Y2RGd2lMaTloZEhSeWFXSjFkR1Z6WENJc1hHNWNkRndpTGk5bGRtVnVkRndpTEZ4dVhIUmNJaTR2WlhabGJuUXZZV3hwWVhOY0lpeGNibHgwWENJdUwyVjJaVzUwTDJadlkzVnphVzVjSWl4Y2JseDBYQ0l1TDIxaGJtbHdkV3hoZEdsdmJsd2lMRnh1WEhSY0lpNHZiV0Z1YVhCMWJHRjBhVzl1TDE5bGRtRnNWWEpzWENJc1hHNWNkRndpTGk5M2NtRndYQ0lzWEc1Y2RGd2lMaTlqYzNOY0lpeGNibHgwWENJdUwyTnpjeTlvYVdSa1pXNVdhWE5wWW14bFUyVnNaV04wYjNKelhDSXNYRzVjZEZ3aUxpOXpaWEpwWVd4cGVtVmNJaXhjYmx4MFhDSXVMMkZxWVhoY0lpeGNibHgwWENJdUwyRnFZWGd2ZUdoeVhDSXNYRzVjZEZ3aUxpOWhhbUY0TDNOamNtbHdkRndpTEZ4dVhIUmNJaTR2WVdwaGVDOXFjMjl1Y0Z3aUxGeHVYSFJjSWk0dllXcGhlQzlzYjJGa1hDSXNYRzVjZEZ3aUxpOWxkbVZ1ZEM5aGFtRjRYQ0lzWEc1Y2RGd2lMaTlsWm1abFkzUnpYQ0lzWEc1Y2RGd2lMaTlsWm1abFkzUnpMMkZ1YVcxaGRHVmtVMlZzWldOMGIzSmNJaXhjYmx4MFhDSXVMMjltWm5ObGRGd2lMRnh1WEhSY0lpNHZaR2x0Wlc1emFXOXVjMXdpTEZ4dVhIUmNJaTR2WkdWd2NtVmpZWFJsWkZ3aUxGeHVYSFJjSWk0dlpYaHdiM0owY3k5aGJXUmNJaXhjYmx4MFhDSXVMMlY0Y0c5eWRITXZaMnh2WW1Gc1hDSmNibDBzSUdaMWJtTjBhVzl1S0NCcVVYVmxjbmtnS1NCN1hHNWNibHdpZFhObElITjBjbWxqZEZ3aU8xeHVYRzV5WlhSMWNtNGdhbEYxWlhKNU8xeHVYRzU5SUNrN1hHNGlYWDA9XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGY4O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltRnpjMlYwY3k5d1lXTnJjeTlxY1hWbGNua3ZjM0pqTDJweGRXVnllUzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeE5RVUZOTEVOQlFVTTdTVUZEU0N4UlFVRlJPMGxCUTFJc1dVRkJXVHRKUVVOYUxHTkJRV003U1VGRFpDeGhRVUZoTzBsQlEySXNXVUZCV1R0SlFVTmFMREJDUVVFd1FqdEpRVU14UWl4alFVRmpPMGxCUTJRc1VVRkJVVHRKUVVOU0xGTkJRVk03U1VGRFZDeGxRVUZsTzBsQlEyWXNZMEZCWXp0SlFVTmtMRk5CUVZNN1NVRkRWQ3hsUVVGbE8wbEJRMllzYVVKQlFXbENPMGxCUTJwQ0xHZENRVUZuUWp0SlFVTm9RaXg1UWtGQmVVSTdTVUZEZWtJc1VVRkJVVHRKUVVOU0xFOUJRVTg3U1VGRFVDdzRRa0ZCT0VJN1NVRkRPVUlzWVVGQllUdEpRVU5pTEZGQlFWRTdTVUZEVWl4WlFVRlpPMGxCUTFvc1pVRkJaVHRKUVVObUxHTkJRV003U1VGRFpDeGhRVUZoTzBsQlEySXNZMEZCWXp0SlFVTmtMRmRCUVZjN1NVRkRXQ3cwUWtGQk5FSTdTVUZETlVJc1ZVRkJWVHRKUVVOV0xHTkJRV003U1VGRFpDeGpRVUZqTzBsQlEyUXNaVUZCWlR0SlFVTm1MR3RDUVVGclFqdERRVU55UWl4RlFVRkZMRlZCUVZVc1RVRkJUVHRKUVVObUxGbEJRVmtzUTBGQlF6dEpRVU5pTEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNN1FVRkRiRUlzUTBGQlF5eERRVUZETEVOQlFVTTdRVUZGU0N3ck1rUkJRU3N5UkNJc0ltWnBiR1VpT2lKaGMzTmxkSE12Y0dGamEzTXZhbkYxWlhKNUwzTnlZeTlxY1hWbGNua3Vhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKa1pXWnBibVVvVzF4dUlDQWdJRndpTGk5amIzSmxYQ0lzWEc0Z0lDQWdYQ0l1TDNObGJHVmpkRzl5WENJc1hHNGdJQ0FnWENJdUwzUnlZWFpsY25OcGJtZGNJaXhjYmlBZ0lDQmNJaTR2WTJGc2JHSmhZMnR6WENJc1hHNGdJQ0FnWENJdUwyUmxabVZ5Y21Wa1hDSXNYRzRnSUNBZ1hDSXVMMlJsWm1WeWNtVmtMMlY0WTJWd2RHbHZia2h2YjJ0Y0lpeGNiaUFnSUNCY0lpNHZZMjl5WlM5eVpXRmtlVndpTEZ4dUlDQWdJRndpTGk5a1lYUmhYQ0lzWEc0Z0lDQWdYQ0l1TDNGMVpYVmxYQ0lzWEc0Z0lDQWdYQ0l1TDNGMVpYVmxMMlJsYkdGNVhDSXNYRzRnSUNBZ1hDSXVMMkYwZEhKcFluVjBaWE5jSWl4Y2JpQWdJQ0JjSWk0dlpYWmxiblJjSWl4Y2JpQWdJQ0JjSWk0dlpYWmxiblF2WVd4cFlYTmNJaXhjYmlBZ0lDQmNJaTR2WlhabGJuUXZabTlqZFhOcGJsd2lMRnh1SUNBZ0lGd2lMaTl0WVc1cGNIVnNZWFJwYjI1Y0lpeGNiaUFnSUNCY0lpNHZiV0Z1YVhCMWJHRjBhVzl1TDE5bGRtRnNWWEpzWENJc1hHNGdJQ0FnWENJdUwzZHlZWEJjSWl4Y2JpQWdJQ0JjSWk0dlkzTnpYQ0lzWEc0Z0lDQWdYQ0l1TDJOemN5OW9hV1JrWlc1V2FYTnBZbXhsVTJWc1pXTjBiM0p6WENJc1hHNGdJQ0FnWENJdUwzTmxjbWxoYkdsNlpWd2lMRnh1SUNBZ0lGd2lMaTloYW1GNFhDSXNYRzRnSUNBZ1hDSXVMMkZxWVhndmVHaHlYQ0lzWEc0Z0lDQWdYQ0l1TDJGcVlYZ3ZjMk55YVhCMFhDSXNYRzRnSUNBZ1hDSXVMMkZxWVhndmFuTnZibkJjSWl4Y2JpQWdJQ0JjSWk0dllXcGhlQzlzYjJGa1hDSXNYRzRnSUNBZ1hDSXVMMlYyWlc1MEwyRnFZWGhjSWl4Y2JpQWdJQ0JjSWk0dlpXWm1aV04wYzF3aUxGeHVJQ0FnSUZ3aUxpOWxabVpsWTNSekwyRnVhVzFoZEdWa1UyVnNaV04wYjNKY0lpeGNiaUFnSUNCY0lpNHZiMlptYzJWMFhDSXNYRzRnSUNBZ1hDSXVMMlJwYldWdWMybHZibk5jSWl4Y2JpQWdJQ0JjSWk0dlpHVndjbVZqWVhSbFpGd2lMRnh1SUNBZ0lGd2lMaTlsZUhCdmNuUnpMMkZ0WkZ3aUxGeHVJQ0FnSUZ3aUxpOWxlSEJ2Y25SekwyZHNiMkpoYkZ3aVhHNWRMQ0JtZFc1amRHbHZiaUFvYWxGMVpYSjVLU0I3WEc0Z0lDQWdYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNGdJQ0FnY21WMGRYSnVJR3BSZFdWeWVUdGNibjBwTzF4dVhHNHZMeU1nYzI5MWNtTmxUV0Z3Y0dsdVoxVlNURDFrWVhSaE9tRndjR3hwWTJGMGFXOXVMMnB6YjI0N1kyaGhjbk5sZEQxMWRHWTRPMkpoYzJVMk5DeGxlVW95V2xoS2VtRlhPWFZKYW05NlRFTktlbUl6Vm5sWk1sWjZTV3B3WWtsdFJucGpNbFl3WTNrNWQxbFhUbkpqZVRseFkxaFdiR051YTNaak0wcHFUREp3ZUdSWFZubGxVelZ4WTNsS1pFeERTblZaVnpGc1kzbEpObGN4TUhOSmJURm9ZMGhDY0dKdFpIcEphbTlwVVZWR1FsRlRlRTVSVlVaT1RFVk9RbEZWVlRkVFZVWkVWVU40VWxGVlJsSlBNR3hDVVRGSmMxZFZSa0pYVkhSS1VWVk9ZVXhIVGtKUlYwMDNVMVZHUkZwRGVHaFJWVVpvVHpCc1FsRXlTWE5YVlVaQ1YxUjBTbEZWVG1GTVJFSkRVVlZGZDFGcWRFcFJWVTE0VVdsNGFsRlZSbXBQTUd4Q1VUSlJjMVZWUmtKVlZIUktVVlZPVTB4R1RrSlJWazAzVTFWR1JGWkRlR3hSVlVac1R6QnNRbEV5V1hOWk1FWkNXWHAwU2xGVlRtdE1SazVDVVZaTk4xTlZSa1JXUTNoc1VWVkdiRTh3YkVKUk1sbHpZVlZLUWxGWGJFTlBNR3hDVVRKd1EweEhaRU5SVlVadVVXcDBTbEZWVG05UmFYZzFVV3RHUW1WVlNUZFRWVVpFWld0SmMxVlZSa0pWVkhSS1VWVk9VMHhGT1VKUlZUZzNVMVZHUkZWRGR6UlJhMFpDVDBWSk4xTlZSa1JQVlVseldWVkdRbGxVZEVwUlZVNXBURVpHUWxGV1JUZFRWVVpFVldsNFdsRlZSbHBQTUd4Q1VURnZjMXBWUmtKYVZIUktVVlZPYlV4SFRrSlJWMDAzVTFWR1JGcERlR2hSVlVab1R6QnNRbEV5U1hOWk1FWkNXWHAwU2xGVlRtdE1SbVJDVVZaak4xTlZSa1JYUTNjd1VXdEdRazVGU1RkVFZVWkVUbFZKYzFaVlJrSldWSFJLVVZWT1YweEhUa0pSVjAwM1UxVkdSRnBEZUdwUlZVWnFUekJzUWxFeVVYTmFWVVpDV2xSMFNsRlZUbTFNUjNSRFVWVkdjbEZxZEVSUlZVNXpVV2w0UmxGVlJrWk1SbFpDVVZaVmMxUlZSa0pVVkhSS1VWVldkVkZwZUZwUlZVWmFURVZPUWxGVlRUZFRWVVpHV1dsNFRsRlZSazVNUlU1Q1VWVk5jMVJWUmtKVVUzaEVVVlZHUkU4d1JrSlNWMUZ6VVRCR1FsRjVlRVJSVlVaR1RFVk9RbEZWVFdsTVEwcHRZVmQ0YkVscWIybFpXRTU2V2xoU2Vrd3pRbWhaTW5SNlRESndlR1JYVm5sbFV6bDZZMjFOZG1GdVJqRmFXRW8xVEcxd2VrbHBkMmxqTWpreFkyMU9iR013VG5aaWJsSnNZbTVSYVU5c2MybGFSMVp0WVZjMWJFdERRbUpZUnpWalpFWjNhVXhwT1dwaU0wcHNXRU5KYzFoSE5XTmtSbmRwVEdrNWVscFhlR3haTTFKMlkyeDNhVXhHZUhWWVNGSmpTV2swZG1SSVNtaGtiVlo1WXpKc2RWb3hkMmxNUm5oMVdFaFNZMGxwTkhaWk1rWnpZa2RLYUZreWRIcFlRMGx6V0VjMVkyUkdkMmxNYVRscldsZGFiR051U214YVJuZHBURVo0ZFZoSVVtTkphVFIyV2tkV2JWcFlTbmxhVjFGMldsaG9hbHBZUWpCaFZ6bDFVMGM1ZG1FeGQybE1SbmgxV0VoU1kwbHBOSFpaTWpsNVdsTTVlVnBYUm10bFZuZHBURVo0ZFZoSVVtTkphVFIyV2tkR01GbFdkMmxNUm5oMVdFaFNZMGxwTkhaaldGWnNaRmRXWTBscGVHTmliSGd3V0VOSmRVd3pSakZhV0Zac1RESlNiR0pIUmpWWVEwbHpXRWMxWTJSR2QybE1hVGxvWkVoU2VXRlhTakZrUjFaNldFTkpjMWhITldOa1JuZHBUR2s1YkdSdFZuVmtSbmRwVEVaNGRWaElVbU5KYVRSMldsaGFiR0p1VVhaWlYzaHdXVmhPWTBscGVHTmliSGd3V0VOSmRVd3lWakphVnpVd1RESmFkbGt6Vm5waFZ6VmpTV2w0WTJKc2VEQllRMGwxVERJeGFHSnRiSGRrVjNob1pFZHNkbUpzZDJsTVJuaDFXRWhTWTBscE5IWmlWMFoxWVZoQ01XSkhSakJoVnpsMVRERTViR1J0Um5OV1dFcHpXRU5KYzFoSE5XTmtSbmRwVEdrNU0yTnRSbmRZUTBseldFYzFZMlJHZDJsTWFUbHFZek5PWTBscGVHTmliSGd3V0VOSmRVd3lUbnBqZVRsdllWZFNhMXBYTlZkaFdFNXdXVzE0YkZVeVZuTmFWMDR3WWpOS2VsaERTWE5ZUnpWalpFWjNhVXhwT1hwYVdFcHdXVmQ0Y0dWdFZtTkphWGhqWW14NE1GaERTWFZNTWtaeFdWaG9ZMGxwZUdOaWJIZ3dXRU5KZFV3eVJuRlpXR2QyWlVkb2VWaERTWE5ZUnpWalpFWjNhVXhwT1doaGJVWTBURE5PYW1OdGJIZGtSbmRwVEVaNGRWaElVbU5KYVRSMldWZHdhR1ZET1hGak1qbDFZMFozYVV4R2VIVllTRkpqU1drMGRsbFhjR2hsUXpsellqSkdhMWhEU1hOWVJ6VmpaRVozYVV4cE9XeGtiVloxWkVNNWFHRnRSalJZUTBseldFYzFZMlJHZDJsTWFUbHNXbTFhYkZrelVucFlRMGx6V0VjMVkyUkdkMmxNYVRsc1dtMWFiRmt6VW5wTU1rWjFZVmN4YUdSSFZtdFZNbFp6V2xkT01HSXpTbU5KYVhoallteDRNRmhEU1hWTU1qbHRXbTVPYkdSR2QybE1SbmgxV0VoU1kwbHBOSFphUjJ4MFdsYzFlbUZYT1hWak1YZHBURVo0ZFZoSVVtTkphVFIyV2tkV2QyTnRWbXBaV0ZKc1drWjNhVXhHZUhWWVNGSmpTV2swZGxwWWFIZGlNMG93WTNrNWFHSlhVbU5KYVhoallteDRNRmhEU1hWTU1sWTBZMGM1ZVdSSVRYWmFNbmgyV1cxR2MxaERTbU5pYkRCelNVZGFNV0p0VGpCaFZ6bDFTME5DY1ZWWVZteGpibXRuUzFOQ04xaEhOV05pYkhkcFpGaE9iRWxJVGpCamJXeHFaRVozYVU4eGVIVllSelY1V2xoU01XTnROR2RoYkVZeFdsaEtOVTh4ZUhWWVJ6VTVTVU5yTjFoSE5HbFlXREE5WEc0aVhYMD1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbUZ6YzJWMGN5OXdZV05yY3k5cWNYVmxjbmt2YzNKakwycHhkV1Z5ZVM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hOUVVGTkxFTkJRVU03U1VGRFNDeFJRVUZSTzBsQlExSXNXVUZCV1R0SlFVTmFMR05CUVdNN1NVRkRaQ3hoUVVGaE8wbEJRMklzV1VGQldUdEpRVU5hTERCQ1FVRXdRanRKUVVNeFFpeGpRVUZqTzBsQlEyUXNVVUZCVVR0SlFVTlNMRk5CUVZNN1NVRkRWQ3hsUVVGbE8wbEJRMllzWTBGQll6dEpRVU5rTEZOQlFWTTdTVUZEVkN4bFFVRmxPMGxCUTJZc2FVSkJRV2xDTzBsQlEycENMR2RDUVVGblFqdEpRVU5vUWl4NVFrRkJlVUk3U1VGRGVrSXNVVUZCVVR0SlFVTlNMRTlCUVU4N1NVRkRVQ3c0UWtGQk9FSTdTVUZET1VJc1lVRkJZVHRKUVVOaUxGRkJRVkU3U1VGRFVpeFpRVUZaTzBsQlExb3NaVUZCWlR0SlFVTm1MR05CUVdNN1NVRkRaQ3hoUVVGaE8wbEJRMklzWTBGQll6dEpRVU5rTEZkQlFWYzdTVUZEV0N3MFFrRkJORUk3U1VGRE5VSXNWVUZCVlR0SlFVTldMR05CUVdNN1NVRkRaQ3hqUVVGak8wbEJRMlFzWlVGQlpUdEpRVU5tTEd0Q1FVRnJRanREUVVOeVFpeEZRVUZGTEZWQlFWVXNUVUZCVFR0SlFVTm1MRmxCUVZrc1EwRkJRenRKUVVOaUxFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTTdRVUZEYkVJc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRFNDd3JNa1JCUVNzeVJEdEJRVVV2TWtRc2RUaEpRVUYxT0VraUxDSm1hV3hsSWpvaVlYTnpaWFJ6TDNCaFkydHpMMnB4ZFdWeWVTOXpjbU12YW5GMVpYSjVMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVpHVm1hVzVsS0Z0Y2JpQWdJQ0JjSWk0dlkyOXlaVndpTEZ4dUlDQWdJRndpTGk5elpXeGxZM1J2Y2x3aUxGeHVJQ0FnSUZ3aUxpOTBjbUYyWlhKemFXNW5YQ0lzWEc0Z0lDQWdYQ0l1TDJOaGJHeGlZV05yYzF3aUxGeHVJQ0FnSUZ3aUxpOWtaV1psY25KbFpGd2lMRnh1SUNBZ0lGd2lMaTlrWldabGNuSmxaQzlsZUdObGNIUnBiMjVJYjI5clhDSXNYRzRnSUNBZ1hDSXVMMk52Y21VdmNtVmhaSGxjSWl4Y2JpQWdJQ0JjSWk0dlpHRjBZVndpTEZ4dUlDQWdJRndpTGk5eGRXVjFaVndpTEZ4dUlDQWdJRndpTGk5eGRXVjFaUzlrWld4aGVWd2lMRnh1SUNBZ0lGd2lMaTloZEhSeWFXSjFkR1Z6WENJc1hHNGdJQ0FnWENJdUwyVjJaVzUwWENJc1hHNGdJQ0FnWENJdUwyVjJaVzUwTDJGc2FXRnpYQ0lzWEc0Z0lDQWdYQ0l1TDJWMlpXNTBMMlp2WTNWemFXNWNJaXhjYmlBZ0lDQmNJaTR2YldGdWFYQjFiR0YwYVc5dVhDSXNYRzRnSUNBZ1hDSXVMMjFoYm1sd2RXeGhkR2x2Ymk5ZlpYWmhiRlZ5YkZ3aUxGeHVJQ0FnSUZ3aUxpOTNjbUZ3WENJc1hHNGdJQ0FnWENJdUwyTnpjMXdpTEZ4dUlDQWdJRndpTGk5amMzTXZhR2xrWkdWdVZtbHphV0pzWlZObGJHVmpkRzl5YzF3aUxGeHVJQ0FnSUZ3aUxpOXpaWEpwWVd4cGVtVmNJaXhjYmlBZ0lDQmNJaTR2WVdwaGVGd2lMRnh1SUNBZ0lGd2lMaTloYW1GNEwzaG9jbHdpTEZ4dUlDQWdJRndpTGk5aGFtRjRMM05qY21sd2RGd2lMRnh1SUNBZ0lGd2lMaTloYW1GNEwycHpiMjV3WENJc1hHNGdJQ0FnWENJdUwyRnFZWGd2Ykc5aFpGd2lMRnh1SUNBZ0lGd2lMaTlsZG1WdWRDOWhhbUY0WENJc1hHNGdJQ0FnWENJdUwyVm1abVZqZEhOY0lpeGNiaUFnSUNCY0lpNHZaV1ptWldOMGN5OWhibWx0WVhSbFpGTmxiR1ZqZEc5eVhDSXNYRzRnSUNBZ1hDSXVMMjltWm5ObGRGd2lMRnh1SUNBZ0lGd2lMaTlrYVcxbGJuTnBiMjV6WENJc1hHNGdJQ0FnWENJdUwyUmxjSEpsWTJGMFpXUmNJaXhjYmlBZ0lDQmNJaTR2Wlhod2IzSjBjeTloYldSY0lpeGNiaUFnSUNCY0lpNHZaWGh3YjNKMGN5OW5iRzlpWVd4Y0lseHVYU3dnWm5WdVkzUnBiMjRnS0dwUmRXVnllU2tnZTF4dUlDQWdJRndpZFhObElITjBjbWxqZEZ3aU8xeHVJQ0FnSUhKbGRIVnliaUJxVVhWbGNuazdYRzU5S1R0Y2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QV1JoZEdFNllYQndiR2xqWVhScGIyNHZhbk52Ymp0amFHRnljMlYwUFhWMFpqZzdZbUZ6WlRZMExHVjVTakphV0VwNllWYzVkVWxxYjNwTVEwcDZZak5XZVZreVZucEphbkJpU1cxR2VtTXlWakJqZVRsM1dWZE9jbU41T1hGaldGWnNZMjVyZG1NelNtcE1NbkI0WkZkV2VXVlROWEZqZVVwa1RFTktkVmxYTVd4amVVazJWekV3YzBsdE1XaGpTRUp3WW0xa2VrbHFiMmxSVlVaQ1VWTjRUbEZWUms1TVJVNUNVVlZWTjFOVlJrUlZRM2hTVVZWR1VrOHdiRUpSTVVselYxVkdRbGRVZEVwUlZVNWhURWRPUWxGWFRUZFRWVVpFV2tONGFGRlZSbWhQTUd4Q1VUSkpjMWRWUmtKWFZIUktVVlZPWVV4RVFrTlJWVVYzVVdwMFNsRlZUWGhSYVhocVVWVkdhazh3YkVKUk1sRnpWVlZHUWxWVWRFcFJWVTVUVEVaT1FsRldUVGRUVlVaRVZrTjRiRkZWUm14UE1HeENVVEpaYzFrd1JrSlplblJLVVZWT2EweEdUa0pSVmswM1UxVkdSRlpEZUd4UlZVWnNUekJzUWxFeVdYTmhWVXBDVVZkc1EwOHdiRUpSTW5CRFRFZGtRMUZWUm01UmFuUktVVlZPYjFGcGVEVlJhMFpDWlZWSk4xTlZSa1JsYTBselZWVkdRbFZVZEVwUlZVNVRURVU1UWxGVk9EZFRWVVpFVlVOM05GRnJSa0pQUlVrM1UxVkdSRTlWU1hOWlZVWkNXVlIwU2xGVlRtbE1Sa1pDVVZaRk4xTlZSa1JWYVhoYVVWVkdXazh3YkVKUk1XOXpXbFZHUWxwVWRFcFJWVTV0VEVkT1FsRlhUVGRUVlVaRVdrTjRhRkZWUm1oUE1HeENVVEpKYzFrd1JrSlplblJLVVZWT2EweEdaRUpSVm1NM1UxVkdSRmREZHpCUmEwWkNUa1ZKTjFOVlJrUk9WVWx6VmxWR1FsWlVkRXBSVlU1WFRFZE9RbEZYVFRkVFZVWkVXa040YWxGVlJtcFBNR3hDVVRKUmMxcFZSa0phVkhSS1VWVk9iVXhIZEVOUlZVWnlVV3AwUkZGVlRuTlJhWGhHVVZWR1JreEdWa0pSVmxWelZGVkdRbFJVZEVwUlZWWjFVV2w0V2xGVlJscE1SVTVDVVZWTk4xTlZSa1paYVhoT1VWVkdUa3hGVGtKUlZVMXpWRlZHUWxSVGVFUlJWVVpFVHpCR1FsSlhVWE5STUVaQ1VYbDRSRkZWUmtaTVJVNUNVVlZOYVV4RFNtMWhWM2hzU1dwdmFWbFlUbnBhV0ZKNlRETkNhRmt5ZEhwTU1uQjRaRmRXZVdWVE9YcGpiVTEyWVc1R01WcFlTalZNYlhCNlNXbDNhV015T1RGamJVNXNZekJPZG1KdVVteGlibEZwVDJ4emFWcEhWbTFoVnpWc1MwTkNZbGhITldOa1JuZHBUR2s1YW1JelNteFlRMGx6V0VjMVkyUkdkMmxNYVRsNldsZDRiRmt6VW5aamJIZHBURVo0ZFZoSVVtTkphVFIyWkVoS2FHUnRWbmxqTW14MVdqRjNhVXhHZUhWWVNGSmpTV2swZGxreVJuTmlSMHBvV1RKMGVsaERTWE5ZUnpWalpFWjNhVXhwT1d0YVYxcHNZMjVLYkZwR2QybE1SbmgxV0VoU1kwbHBOSFphUjFadFdsaEtlVnBYVVhaYVdHaHFXbGhDTUdGWE9YVlRSemwyWVRGM2FVeEdlSFZZU0ZKalNXazBkbGt5T1hsYVV6bDVXbGRHYTJWV2QybE1SbmgxV0VoU1kwbHBOSFphUjBZd1dWWjNhVXhHZUhWWVNGSmpTV2swZG1OWVZteGtWMVpqU1dsNFkySnNlREJZUTBsMVRETkdNVnBZVm14TU1sSnNZa2RHTlZoRFNYTllSelZqWkVaM2FVeHBPV2hrU0ZKNVlWZEtNV1JIVm5wWVEwbHpXRWMxWTJSR2QybE1hVGxzWkcxV2RXUkdkMmxNUm5oMVdFaFNZMGxwTkhaYVdGcHNZbTVSZGxsWGVIQlpXRTVqU1dsNFkySnNlREJZUTBsMVRESldNbHBYTlRCTU1scDJXVE5XZW1GWE5XTkphWGhqWW14NE1GaERTWFZNTWpGb1ltMXNkMlJYZUdoa1IyeDJZbXgzYVV4R2VIVllTRkpqU1drMGRtSlhSblZoV0VJeFlrZEdNR0ZYT1hWTU1UbHNaRzFHYzFaWVNuTllRMGx6V0VjMVkyUkdkMmxNYVRrelkyMUdkMWhEU1hOWVJ6VmpaRVozYVV4cE9XcGpNMDVqU1dsNFkySnNlREJZUTBsMVRESk9lbU41T1c5aFYxSnJXbGMxVjJGWVRuQlpiWGhzVlRKV2MxcFhUakJpTTBwNldFTkpjMWhITldOa1JuZHBUR2s1ZWxwWVNuQlpWM2h3WlcxV1kwbHBlR05pYkhnd1dFTkpkVXd5Um5GWldHaGpTV2w0WTJKc2VEQllRMGwxVERKR2NWbFlaM1psUjJoNVdFTkpjMWhITldOa1JuZHBUR2s1YUdGdFJqUk1NMDVxWTIxc2QyUkdkMmxNUm5oMVdFaFNZMGxwTkhaWlYzQm9aVU01Y1dNeU9YVmpSbmRwVEVaNGRWaElVbU5KYVRSMldWZHdhR1ZET1hOaU1rWnJXRU5KYzFoSE5XTmtSbmRwVEdrNWJHUnRWblZrUXpsb1lXMUdORmhEU1hOWVJ6VmpaRVozYVV4cE9XeGFiVnBzV1ROU2VsaERTWE5ZUnpWalpFWjNhVXhwT1d4YWJWcHNXVE5TZWt3eVJuVmhWekZvWkVkV2ExVXlWbk5hVjA0d1lqTktZMGxwZUdOaWJIZ3dXRU5KZFV3eU9XMWFiazVzWkVaM2FVeEdlSFZZU0ZKalNXazBkbHBIYkhSYVZ6VjZZVmM1ZFdNeGQybE1SbmgxV0VoU1kwbHBOSFphUjFaM1kyMVdhbGxZVW14YVJuZHBURVo0ZFZoSVVtTkphVFIyV2xob2QySXpTakJqZVRsb1lsZFNZMGxwZUdOaWJIZ3dXRU5KZFV3eVZqUmpSemw1WkVoTmRsb3llSFpaYlVaeldFTktZMkpzTUhOSlIxb3hZbTFPTUdGWE9YVkxRMEp4VlZoV2JHTnVhMmRMVTBJM1dFYzFZMkpzZDJsa1dFNXNTVWhPTUdOdGJHcGtSbmRwVHpGNGRWaEhOWGxhV0ZJeFkyMDBaMkZzUmpGYVdFbzFUekY0ZFZoSE5UbEpRMnMzV0VjMGFWaFlNRDFjYmx4dUx5OGpJSE52ZFhKalpVMWhjSEJwYm1kVlVrdzlaR0YwWVRwaGNIQnNhV05oZEdsdmJpOXFjMjl1TzJOb1lYSnpaWFE5ZFhSbU9EdGlZWE5sTmpRc1pYbEtNbHBZU25waFZ6bDFTV3B2ZWt4RFNucGlNMVo1V1RKV2VrbHFjR0pKYlVaNll6SldNR041T1hkWlYwNXlZM2s1Y1dOWVZteGpibXQyWXpOS2Frd3ljSGhrVjFaNVpWTTFjV041U21STVEwcDFXVmN4YkdONVNUWlhNVEJ6U1cweGFHTklRbkJpYldSNlNXcHZhVkZWUmtKUlUzaE9VVlZHVGt4RlRrSlJWVTAzVTFWR1JGTkRlRkpSVlVaU1R6QnNRbEV4U1hOWFZVWkNWMVIwU2xGVlRtRk1SMDVDVVZkTk4xTlZSa1JhUTNob1VWVkdhRTh3YkVKUk1rbHpWMVZHUWxkVWRFcFJWVTVoVEVSQ1ExRlZSWGRSYW5SS1VWVk5lRkZwZUdwUlZVWnFUekJzUWxFeVVYTlZWVVpDVlZSMFNsRlZUbE5NUms1Q1VWWk5OMU5WUmtSV1EzaHNVVlZHYkU4d2JFSlJNbGx6V1RCR1FsbDZkRXBSVlU1clRFWk9RbEZXVFRkVFZVWkVWa040YkZGVlJteFBNR3hDVVRKWmMyRlZTa0pSVjJ4RFR6QnNRbEV5Y0VOTVIyUkRVVlZHYmxGcWRFcFJWVTV2VVdsNE5WRnJSa0psVlVrM1UxVkdSR1ZyU1hOVlZVWkNWVlIwU2xGVlRsTk1SVGxDVVZVNE4xTlZSa1JWUTNjMFVXdEdRazlGU1RkVFZVWkVUMVZKYzFsVlJrSlpWSFJLVVZWT2FVeEdSa0pSVmtVM1UxVkdSRlZwZUZwUlZVWmFUekJzUWxFeGIzTmFWVVpDV2xSMFNsRlZUbTFNUjA1Q1VWZE5OMU5WUmtSYVEzaG9VVlZHYUU4d2JFSlJNa2x6V1RCR1FsbDZkRXBSVlU1clRFWmtRbEZXWXpkVFZVWkVWME4zTUZGclJrSk9SVWszVTFWR1JFNVZTWE5XVlVaQ1ZsUjBTbEZWVGxkTVIwNUNVVmROTjFOVlJrUmFRM2hxVVZWR2FrOHdiRUpSTWxGeldsVkdRbHBVZEVwUlZVNXRURWQwUTFGVlJuSlJhblJFVVZWT2VWRnBlRVpSVlVaR1RFWldRbEZXVlhOVVZVWkNWRlIwU2xGVlRtMU1SbXhDVVZacmMxRXdSa0pSZW5SS1VWVk9hVXhGTVVKUlZUQnpVVEJHUWxGNWVFNVJWVVpPVEVWT1FsRlZUVGRSVlVaRVlrVkpjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTAzVVZWR1JsTkRkM0pOYTFKQ1VWTnplVkpEU1hOSmJWcHdZa2RWYVU5cFNtaGpNMDVzWkVoTmRtTkhSbXBoTTAxMllXNUdNVnBZU2pWTU0wNTVXWGs1Y1dOWVZteGpibXQxWVc1TmFVeERTbnBpTTFaNVdUSldlbEV5T1hWa1IxWjFaRU5KTmxkNVNtdGFWMXB3WW0xVmIxY3hlSFZKUTBGblNVWjNhVXhwT1dwaU0wcHNXRU5KYzFoSE5HZEpRMEZuV0VOSmRVd3pUbXhpUjFacVpFYzVlVmhEU1hOWVJ6Um5TVU5CWjFoRFNYVk1NMUo1V1ZoYWJHTnVUbkJpYldSalNXbDRZMkpwUVdkSlEwSmpTV2swZGxreVJuTmlSMHBvV1RKMGVsaERTWE5ZUnpSblNVTkJaMWhEU1hWTU1sSnNXbTFXZVdOdFZtdFlRMGx6V0VjMFowbERRV2RZUTBsMVRESlNiRnB0Vm5samJWWnJUREpXTkZreVZuZGtSMngyWW10b2RtSXlkR05KYVhoalltbEJaMGxEUW1OSmFUUjJXVEk1ZVZwVE9YbGFWMFpyWlZaM2FVeEdlSFZKUTBGblNVWjNhVXhwT1d0WldGSm9XRU5KYzFoSE5HZEpRMEZuV0VOSmRVd3pSakZhV0Zac1dFTkpjMWhITkdkSlEwRm5XRU5KZFV3elJqRmFXRlpzVERKU2JHSkhSalZZUTBseldFYzBaMGxEUVdkWVEwbDFUREpHTUdSSVNuQlpibFl3V2xoT1kwbHBlR05pYVVGblNVTkNZMGxwTkhaYVdGcHNZbTVTWTBscGVHTmlhVUZuU1VOQ1kwbHBOSFphV0Zwc1ltNVJkbGxYZUhCWldFNWpTV2w0WTJKcFFXZEpRMEpqU1drMGRscFlXbXhpYmxGMldtMDVhbVJZVG5CaWJIZHBURVo0ZFVsRFFXZEpSbmRwVEdrNWRGbFhOWEJqU0ZaeldWaFNjR0l5TldOSmFYaGpZbWxCWjBsRFFtTkphVFIyWWxkR2RXRllRakZpUjBZd1lWYzVkVXd4T1d4a2JVWnpWbGhLYzFoRFNYTllSelJuU1VOQloxaERTWFZNTTJSNVdWaENZMGxwZUdOaWFVRm5TVU5DWTBscE5IWlpNMDU2V0VOSmMxaEhOR2RKUTBGbldFTkpkVXd5VG5wamVUbHZZVmRTYTFwWE5WZGhXRTV3V1cxNGJGVXlWbk5hVjA0d1lqTktlbGhEU1hOWVJ6Um5TVU5CWjFoRFNYVk1NMDVzWTIxc2FHSkhiRFphVm5kcFRFWjRkVWxEUVdkSlJuZHBUR2s1YUdGdFJqUllRMGx6V0VjMFowbERRV2RZUTBsMVRESkdjVmxZWjNabFIyaDVXRU5KYzFoSE5HZEpRMEZuV0VOSmRVd3lSbkZaV0dkMll6Sk9lV0ZZUWpCWVEwbHpXRWMwWjBsRFFXZFlRMGwxVERKR2NWbFlaM1poYms1MlltNUNZMGxwZUdOaWFVRm5TVU5DWTBscE5IWlpWM0JvWlVNNWMySXlSbXRZUTBseldFYzBaMGxEUVdkWVEwbDFUREpXTWxwWE5UQk1Na1p4V1Zob1kwbHBlR05pYVVGblNVTkNZMGxwTkhaYVYxcHRXbGRPTUdNeGQybE1SbmgxU1VOQlowbEdkMmxNYVRsc1dtMWFiRmt6VW5wTU1rWjFZVmN4YUdSSFZtdFZNbFp6V2xkT01HSXpTbU5KYVhoalltbEJaMGxEUW1OSmFUUjJZakphYldNeVZqQllRMGx6V0VjMFowbERRV2RZUTBsMVRESlNjR0pYVm5Wak1teDJZbTVPWTBscGVHTmlhVUZuU1VOQ1kwbHBOSFphUjFaM1kyMVdhbGxZVW14YVJuZHBURVo0ZFVsRFFXZEpSbmRwVEdrNWJHVklRblpqYmxKNlRESkdkRnBHZDJsTVJuaDFTVU5CWjBsR2QybE1hVGxzWlVoQ2RtTnVVbnBNTW1SellqSkthR0pHZDJsWVJ6VmtURU5DYldSWE5XcGtSMngyWW1sQmIyRnNSakZhV0VvMVMxTkNOMWhITkdkSlEwRm5XRU5LTVdNeVZXZGpNMUo1WVZkT01GaERTVGRZUnpSblNVTkJaMk50VmpCa1dFcDFTVWR3VW1SWFZubGxWSFJqWW00d2NFOHhlSFZZUnpSMlRIbE5aMk15T1RGamJVNXNWRmRHZDJOSGJIVmFNVlpUVkVReGExbFlVbWhQYlVaM1kwZDRjRmt5UmpCaFZ6bDFUREp3ZW1JeU5EZFpNbWhvWTI1T2JHUkVNVEZrUjFrMFR6SkthR015VlRKT1EzaHNaVlZ2ZVZkc2FFdGxiVVpZVDFoV1NtRnRPVFpVUlU1TFpXMUplbFp1YkZwTmJGbzJVMWR3ZDFscmJIUlNibkJxVFd4WmQxa3phelZrTVd4WVZHNUthbVZVYkhoWk1XaFhZa2RPZFdFeldtcE5NSEJ4VkVSS2QyVkhVbGhXYm14c1ZYcFdlRmt6YkV0YVJYaEVVMjVXV2xaNlJuTlpNMnhLVG14amVFMUlUa3BpVkVadldUQm9RMk5IU25SYVNIQktZVzA1Y0ZWV1ZrZFJiRVpVWlVVMVVsWlZXazlVUlZaUFVXeEdWbFpVWkZSV1ZWcEZWbFZPTkZWc1JsWlNiRXBRVFVkNFExVlVSa3BqTVdSV1VtdEtXRlpJVWt0VlZsWlBXVlY0U0ZSclNsSldNREF6VlRGV1IxSkdjRVJsUjJoU1ZsVmFiMVI2UW5OUmJFVjVVMWhPV0ZaVldrTldNVkl3VTJ4R1ZsUnRSazFTUlVwRVZWWldSbVF4Um5Ga1JYQlNWbFV4TkZWWGJEUmhiRVpXVW0xd1VFMUhlRU5WVkVwU1l6RldWbEpyU2xaV1NGSkxWVlpXVDFVd2VFZFVhMHBTVm1zd00xVXhWa2RTUmxwRVpVZDRVbFpWV25OVWVrSnpVV3hGZVZkWVRscE5SVnBEVjFod01GTnNSbFpVYlhSTlVtczFRMVZXV2s1T01VNVdVbXRTVjFFemFITlZWbFpIWWtVNGQySkZTbEpOYkd4NldWWldTMUZzUmxoaVJVNVFUVWQ0UTFWVVNuZFJNSGhJV2tWT1VsWlZXblZWVjNBd1UyeEdWbFJ0T1ZKaFdHY3hWVmQwUjFGdFZsWlRWR1JVVmxWYVJWcFhkRXBqTVZaV1VtdEtWbFpJVWt0VlZsWlBWVEI0Ums5VlNsSldWR2N6VlRGV1IxSkdWa1JrZWxKU1lUQmFRMVF3VmtwT01VNVdVbXRTVUZaVmJIcFhWbFpIVVd4c1ZXUkZjRkpXVlRWd1ZFVmFSMUZzUmxkU1ZHUlVWbFZhUlZaWGJEUlhiRVpXVW14d1VFMUhlRU5WVkVaMll6RndWbEpyU21GV1NGSkxWVlpXVDJKVmVFaFVhMHBTVmpBd00xVXhWa2RTUm5CRVpVZG9VbFpWV205VWVrSnpVV3hGZVZOWVRscE5SVnBEVjFod01GTnNSbFpVYlhSTlVtMVNRMVZXV21wT01VNVdVbXRTV0ZFelkzZFZWM1JIVVdzMVJsTlVaRlJXVlZwRlZHeFdTbU14V2xaU2EwcFhWa2hTUzFWV1ZrOVdNSGhJVkd0S1VsWXdNRE5WTVZaSFVrWndSR1ZIY0ZKV1ZWcHhWSHBDYzFGc1JYbFZXRTVoVmxWYVExZHNVakJUYkVaV1ZHMHhUVkl6VWtSVlZsWkhZMnhHY1dSRlVsSldWVFY2VlZkc05GSnNSbFpTYTFwTlVteGFRMVZXV2xaak1WSldVbXRLVlZaSVVrdFZWbFpYWkZaR2NHVkdjRkpXVlZwaFZFVldUMUZzUmxaVVZHUlVWbFZhUjFkWGJEUlViRVpXVW1zMVRWSlZOVU5WVmxaT1l6RlNWbEpyU2xWVk0yaEZWVlpXUjFKRk9IZFNhMHBUVmpGR2VsVlVRa2RSYkVZMVpVVlNVbFpWV2tkVVJWWlBVV3hHVmxSWGJFMVJNSEIwV1Zaa05HSkZiSEZpTW14YVYwVTFObGRzYUZObGEzZDZVVzFvV2sxdVVqWlVSRXAzWlVkU1dGWnViR3hWZW13MldUSXhUbVJ0Um5WU2FrWmhWMFZ2TVZSSE1YZGxhMnh3WkRKc2FrMXFhM2haTWpGUFlrZE5kMVJ1V21saWJFcHpXVzAxVW1GVk9YTmpNbXhoVWpGYWRGbFdZekZpUlhSRVVXMUtXVko2Vm1wYVJWb3pZVlY0Y0U5WGNHbE5NSEJ6VjBWT1NtTXhhRWhPVjA1clVtNWtjRlJIYXpWbGJIQllaVWQ0V2sweFNqSlpNbmd6WVZWNFIyVklWbGxUUmtwcVUxZHJNR1J0VWtsVGJXaHJZbFphTlZsNlNuTmtWbTk0WkRKc1RWSnVhREZYUldoVFdUQnNjRTVJV2xwTmExcDZXV3RrUzJGR2EzbGtTSEJaVVRCc2VsZEZZekZaTWxKSFpESnNUV0ZVYkhKWGJHUmhZa2RPZFZOdGVHRlNibVJ3VkVWYU5HUldhRWxWYlU1S1lWUlNNbGRyWkZkaVZuQlpVMjVzWVZZeFJqSlhiR2h2WVd4d1dWRnFRbWhXZW13eFZUQmpOV1J0Ulhoa01teE5VbTVvTVZkRmFGTlpNR3h3VGtoYVdrMXFiRFZYYkUwMVpWWndXRkp0ZEd4V2JtUndWRVZhTkdSV2FFbFZiVTVLWVZSU01sZHJaRWROUm14WFpESnNUVkp1YURGWFJXaFRXVEJzY0U1SVdtcFhSbHB6V2taa1Yxa3diSEJsUjA1cFlraG5kMWRGVGtwa1ZYZDZVbXBHWVZkR1duTlVSRXBUWWtkS1NGSnFWbGxSTUd4NlYwVmpNVmt5VWtka01teE5ZVlJzYjFwRmFGTmxWMFpZVTJwR2ExSXhXalpYUlU1S1l6Rm9TRTVYVG10U2JtUndWRWRyTldKSFVuUldibFpyVW01a2NGUkZXalJrVm1oSlZXMU9TbUZVVWpKWGJHaGhZa2RLZFZWWVdscFdNMmgzVjFab1Qxa3diSEJsUjA1cFlraG5kMWRGVGtwa1ZYZDVWbXBLWVZaNlZYZFVSRXBoWkd4cmVsWnVjR2hXZWxacVUxZHNORmt5U25ObFJFSlpVVEJzTVZSRVNYaGhSMHAwWWtoa2ExWXphRzlhUldSelpHMUtjMlF5YkUxU2JtZ3hWMFZvVTFrd2JIQk9TRnBwVmpCYU1WbFdhRU5OVjBwSVVtcENhRlo2YkRGVVJFVTFZa2RTZEZKdVRsZFhSWEI2VjBWT1NtTXhhRWhPVjA1clVtNWtjRlJIYXpWTk1rNTBVbTVrV1ZFd2JIcFhSV014V1RKU1IyUXliRTFoVkd4eFdYcE9UMWt3YkhCbFIwNXBZa2huZDFkRlRrcGtWWGQ1Vkc1d2FtVlViSFpaVm1SVFlURndXRTVXWkdoWFJUVjNWMWN4TkdKR1ZYbFdiazVoVmpBMGQxbHFUa3RsYkdoRVUxaE9XVko2Vm1wYVJWb3pZVlY0Y0U5WWNHRlhSWEIzVjFaa05HTkhWblJXYlU1S1lWaG9hbGx0ZURSTlJtaEVVMWhXVFUxclduaFhWbWh2V1RCc2NHVkhUbWxpU0dkM1YwVk9TbVJWZDNsU2JrWmFWMGRrTWxwVlpHOWxWbWhFVTFoT1dWSjZWbXBhUlZvellWVjRjRTlYYUdoaVZWa3dWRVJPVDJGdFRuUmlTR1JyVW01a2NGUkZXalJrVm1oSlZXMU9TbUZVVWpKWFZtUjNZVWRXUkU5WVJtcE5hbXd4V1RCYU0yRlZlRWRsU0ZaWlUwWkthbE5YYXpCa2JHeFlZMGRvYkZGNmJIcFpha3BIWVRGb1JGTllUbGxTZWxacVdrVmFNMkZWZUhCUFYzaHJZbFphTVZwRlRUVmhSMFowVW1wU1dWRXdiSHBYUldNeFdUSlNSMlF5YkUxaFZHeHpWMjB4WVdKR2EzcFZibkJaVVRCc2VsZEZZekZaTWxKSFpESnNUV0ZVYkhOWGJURmhZa1pyZWxWdWNFMU5hMW94V1ZaamVHRkhVa2hXYlhSV1RXeGFlbGRzWkU5TlIwbDZVMjFPU21GWWFHcFpiWGcwVFVab1JGTllWazFOYW14MFYyMDFUMkpIVWtka01teE5VbTVvTVZkRmFGTlpNR3h3VGtoYVlWSXllREJYYkdNeFpXMUdXRTlZVm1wTldHUndWRVZhTkdSV2FFbFZiVTVLWVZSU01sZHJaRmRrTWs1MFZtMXdXbGRHU25OWGExb3pZVlY0UjJWSVZsbFRSa3BxVTFkck1HUnNjRmxoU0dScFRUQnZkMWt6YXpWaFIwcFlWVzFPU21GWWFHcFpiWGcwVFVab1JGTllWazFOYkZrd1dUQmpOV1ZYVWtsVVdGcGhUVzVvTWxkWE1VZGpNV2hFVTIxT2FXSkVRbnBUVldSaFRWZEtkRlJxUW1oV2Vtd3hVekJPUTJOV1ZsbFdiWGhxWW0xMGJsTXhUa05PTVdoSVRsZE9hV0pJWkhCYVJtaFBZa1ZzU1ZScVFtcGlWM2h4V2tWYU0yRlZPSGhsU0ZaWlVucFdOVmRzYUZOTlYwNTBUa2RrYUdKRldYaFhiR2hMVGxVNGVHVklWbGxTZWxVMVUxVk9jazR4YUVoT1IyeFpWMFJCT1ZoSE5HbFlXREE5WEc0aVhYMD1cbiJdfQ==
