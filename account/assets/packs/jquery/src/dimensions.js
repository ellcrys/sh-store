define([
    "./core",
    "./core/access",
    "./css"
], function (jQuery, access) {
    "use strict";
    // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
    jQuery.each({ Height: "height", Width: "width" }, function (name, type) {
        jQuery.each({ padding: "inner" + name, content: type, "": "outer" + name }, function (defaultExtra, funcName) {
            // Margin is only for outerHeight, outerWidth
            jQuery.fn[funcName] = function (margin, value) {
                var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"), extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
                return access(this, function (elem, type, value) {
                    var doc;
                    if (jQuery.isWindow(elem)) {
                        // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
                        return funcName.indexOf("outer") === 0 ?
                            elem["inner" + name] :
                            elem.document.documentElement["client" + name];
                    }
                    // Get document width or height
                    if (elem.nodeType === 9) {
                        doc = elem.documentElement;
                        // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
                        // whichever is greatest
                        return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
                    }
                    return value === undefined ?
                        // Get width or height on the element, requesting but not forcing parseFloat
                        jQuery.css(elem, type, extra) :
                        // Set width or height on the element
                        jQuery.style(elem, type, value, extra);
                }, type, chainable ? margin : undefined, chainable);
            };
        });
    });
    return jQuery;
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL2RpbWVuc2lvbnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFFO0lBQ1AsUUFBUTtJQUNSLGVBQWU7SUFDZixPQUFPO0NBQ1AsRUFBRSxVQUFVLE1BQU0sRUFBRSxNQUFNO0lBRTNCLFlBQVksQ0FBQztJQUViLG9GQUFvRjtJQUNwRixNQUFNLENBQUMsSUFBSSxDQUFFLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEVBQUUsVUFBVSxJQUFJLEVBQUUsSUFBSTtRQUN0RSxNQUFNLENBQUMsSUFBSSxDQUFFLEVBQUUsT0FBTyxFQUFFLE9BQU8sR0FBRyxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsT0FBTyxHQUFHLElBQUksRUFBRSxFQUMxRSxVQUFVLFlBQVksRUFBRSxRQUFRO1lBRWhDLDZDQUE2QztZQUM3QyxNQUFNLENBQUMsRUFBRSxDQUFFLFFBQVEsQ0FBRSxHQUFHLFVBQVUsTUFBTSxFQUFFLEtBQUs7Z0JBQzlDLElBQUksU0FBUyxHQUFHLFNBQVMsQ0FBQyxNQUFNLElBQUksQ0FBRSxZQUFZLElBQUksT0FBTyxNQUFNLEtBQUssU0FBUyxDQUFFLEVBQ2xGLEtBQUssR0FBRyxZQUFZLElBQUksQ0FBRSxNQUFNLEtBQUssSUFBSSxJQUFJLEtBQUssS0FBSyxJQUFJLEdBQUcsUUFBUSxHQUFHLFFBQVEsQ0FBRSxDQUFDO2dCQUVyRixNQUFNLENBQUMsTUFBTSxDQUFFLElBQUksRUFBRSxVQUFVLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSztvQkFDL0MsSUFBSSxHQUFHLENBQUM7b0JBRVIsRUFBRSxDQUFDLENBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBRSxJQUFJLENBQUcsQ0FBQyxDQUFDLENBQUM7d0JBRS9CLDBFQUEwRTt3QkFDMUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUUsT0FBTyxDQUFFLEtBQUssQ0FBQzs0QkFDdkMsSUFBSSxDQUFFLE9BQU8sR0FBRyxJQUFJLENBQUU7NEJBQ3RCLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFFLFFBQVEsR0FBRyxJQUFJLENBQUUsQ0FBQztvQkFDbkQsQ0FBQztvQkFFRCwrQkFBK0I7b0JBQy9CLEVBQUUsQ0FBQyxDQUFFLElBQUksQ0FBQyxRQUFRLEtBQUssQ0FBRSxDQUFDLENBQUMsQ0FBQzt3QkFDM0IsR0FBRyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUM7d0JBRTNCLCtFQUErRTt3QkFDL0Usd0JBQXdCO3dCQUN4QixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FDZCxJQUFJLENBQUMsSUFBSSxDQUFFLFFBQVEsR0FBRyxJQUFJLENBQUUsRUFBRSxHQUFHLENBQUUsUUFBUSxHQUFHLElBQUksQ0FBRSxFQUNwRCxJQUFJLENBQUMsSUFBSSxDQUFFLFFBQVEsR0FBRyxJQUFJLENBQUUsRUFBRSxHQUFHLENBQUUsUUFBUSxHQUFHLElBQUksQ0FBRSxFQUNwRCxHQUFHLENBQUUsUUFBUSxHQUFHLElBQUksQ0FBRSxDQUN0QixDQUFDO29CQUNILENBQUM7b0JBRUQsTUFBTSxDQUFDLEtBQUssS0FBSyxTQUFTO3dCQUV6Qiw0RUFBNEU7d0JBQzVFLE1BQU0sQ0FBQyxHQUFHLENBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUU7d0JBRS9CLHFDQUFxQzt3QkFDckMsTUFBTSxDQUFDLEtBQUssQ0FBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUUsQ0FBQztnQkFDM0MsQ0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLEdBQUcsTUFBTSxHQUFHLFNBQVMsRUFBRSxTQUFTLENBQUUsQ0FBQztZQUN0RCxDQUFDLENBQUM7UUFDSCxDQUFDLENBQUUsQ0FBQztJQUNMLENBQUMsQ0FBRSxDQUFDO0lBRUosTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUNkLENBQUMsQ0FBRSxDQUFDIiwiZmlsZSI6ImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL2RpbWVuc2lvbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoIFtcblx0XCIuL2NvcmVcIixcblx0XCIuL2NvcmUvYWNjZXNzXCIsXG5cdFwiLi9jc3NcIlxuXSwgZnVuY3Rpb24oIGpRdWVyeSwgYWNjZXNzICkge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcblx0XHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vICQoIHdpbmRvdyApLm91dGVyV2lkdGgvSGVpZ2h0IHJldHVybiB3L2ggaW5jbHVkaW5nIHNjcm9sbGJhcnMgKGdoLTE3MjkpXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoIFwib3V0ZXJcIiApID09PSAwID9cblx0XHRcdFx0XHRcdGVsZW1bIFwiaW5uZXJcIiArIG5hbWUgXSA6XG5cdFx0XHRcdFx0XHRlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxucmV0dXJuIGpRdWVyeTtcbn0gKTtcbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf8;base64,
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,
