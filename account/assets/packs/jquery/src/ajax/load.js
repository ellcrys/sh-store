define([
    "../core",
    "../core/stripAndCollapse",
    "../core/parseHTML",
    "../ajax",
    "../traversing",
    "../manipulation",
    "../selector"
], function (jQuery, stripAndCollapse) {
    "use strict";
    /**
     * Load a url into a page
     */
    jQuery.fn.load = function (url, params, callback) {
        var selector, type, response, self = this, off = url.indexOf(" ");
        if (off > -1) {
            selector = stripAndCollapse(url.slice(off));
            url = url.slice(0, off);
        }
        // If it's a function
        if (jQuery.isFunction(params)) {
            // We assume that it's the callback
            callback = params;
            params = undefined;
            // Otherwise, build a param string
        }
        else if (params && typeof params === "object") {
            type = "POST";
        }
        // If we have elements to modify, make the request
        if (self.length > 0) {
            jQuery.ajax({
                url: url,
                // If "type" variable is undefined, then "GET" method will be used.
                // Make value of this field explicit since
                // user can override it through ajaxSetup method
                type: type || "GET",
                dataType: "html",
                data: params
            }).done(function (responseText) {
                // Save response for use in complete callback
                response = arguments;
                self.html(selector ?
                    // If a selector was specified, locate the right elements in a dummy div
                    // Exclude scripts to avoid IE 'Permission Denied' errors
                    jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) :
                    // Otherwise use the full result
                    responseText);
                // If the request succeeds, this function gets "data", "status", "jqXHR"
                // but they are ignored because response was set above.
                // If it fails, this function gets "jqXHR", "status", "error"
            }).always(callback && function (jqXHR, status) {
                self.each(function () {
                    callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
                });
            });
        }
        return this;
    };
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL2FqYXgvbG9hZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUU7SUFDUCxTQUFTO0lBQ1QsMEJBQTBCO0lBQzFCLG1CQUFtQjtJQUNuQixTQUFTO0lBQ1QsZUFBZTtJQUNmLGlCQUFpQjtJQUNqQixhQUFhO0NBQ2IsRUFBRSxVQUFVLE1BQU0sRUFBRSxnQkFBZ0I7SUFFckMsWUFBWSxDQUFDO0lBRWI7O09BRUc7SUFDSCxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksR0FBRyxVQUFVLEdBQUcsRUFBRSxNQUFNLEVBQUUsUUFBUTtRQUMvQyxJQUFJLFFBQVEsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUMzQixJQUFJLEdBQUcsSUFBSSxFQUNYLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFFLEdBQUcsQ0FBRSxDQUFDO1FBRTFCLEVBQUUsQ0FBQyxDQUFFLEdBQUcsR0FBRyxDQUFDLENBQUUsQ0FBQyxDQUFDLENBQUM7WUFDaEIsUUFBUSxHQUFHLGdCQUFnQixDQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUUsR0FBRyxDQUFFLENBQUUsQ0FBQztZQUNoRCxHQUFHLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBRSxDQUFDLEVBQUUsR0FBRyxDQUFFLENBQUM7UUFDM0IsQ0FBQztRQUVELHFCQUFxQjtRQUNyQixFQUFFLENBQUMsQ0FBRSxNQUFNLENBQUMsVUFBVSxDQUFFLE1BQU0sQ0FBRyxDQUFDLENBQUMsQ0FBQztZQUVuQyxtQ0FBbUM7WUFDbkMsUUFBUSxHQUFHLE1BQU0sQ0FBQztZQUNsQixNQUFNLEdBQUcsU0FBUyxDQUFDO1lBRXBCLGtDQUFrQztRQUNsQyxDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFFLE1BQU0sSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ25ELElBQUksR0FBRyxNQUFNLENBQUM7UUFDZixDQUFDO1FBRUQsa0RBQWtEO1FBQ2xELEVBQUUsQ0FBQyxDQUFFLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBRSxDQUFDLENBQUMsQ0FBQztZQUN2QixNQUFNLENBQUMsSUFBSSxDQUFFO2dCQUNaLEdBQUcsRUFBRSxHQUFHO2dCQUVSLG1FQUFtRTtnQkFDbkUsMENBQTBDO2dCQUMxQyxnREFBZ0Q7Z0JBQ2hELElBQUksRUFBRSxJQUFJLElBQUksS0FBSztnQkFDbkIsUUFBUSxFQUFFLE1BQU07Z0JBQ2hCLElBQUksRUFBRSxNQUFNO2FBQ1osQ0FBRSxDQUFDLElBQUksQ0FBRSxVQUFVLFlBQVk7Z0JBRS9CLDZDQUE2QztnQkFDN0MsUUFBUSxHQUFHLFNBQVMsQ0FBQztnQkFFckIsSUFBSSxDQUFDLElBQUksQ0FBRSxRQUFRO29CQUVsQix3RUFBd0U7b0JBQ3hFLHlEQUF5RDtvQkFDekQsTUFBTSxDQUFFLE9BQU8sQ0FBRSxDQUFDLE1BQU0sQ0FBRSxNQUFNLENBQUMsU0FBUyxDQUFFLFlBQVksQ0FBRSxDQUFFLENBQUMsSUFBSSxDQUFFLFFBQVEsQ0FBRTtvQkFFN0UsZ0NBQWdDO29CQUNoQyxZQUFZLENBQUUsQ0FBQztnQkFFakIsd0VBQXdFO2dCQUN4RSx1REFBdUQ7Z0JBQ3ZELDZEQUE2RDtZQUM3RCxDQUFDLENBQUUsQ0FBQyxNQUFNLENBQUUsUUFBUSxJQUFJLFVBQVUsS0FBSyxFQUFFLE1BQU07Z0JBQzlDLElBQUksQ0FBQyxJQUFJLENBQUU7b0JBQ1YsUUFBUSxDQUFDLEtBQUssQ0FBRSxJQUFJLEVBQUUsUUFBUSxJQUFJLENBQUUsS0FBSyxDQUFDLFlBQVksRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFFLENBQUUsQ0FBQztnQkFDM0UsQ0FBQyxDQUFFLENBQUM7WUFDTCxDQUFDLENBQUUsQ0FBQztRQUNMLENBQUM7UUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2IsQ0FBQyxDQUFDO0FBRUYsQ0FBQyxDQUFFLENBQUMiLCJmaWxlIjoiYXNzZXRzL3BhY2tzL2pxdWVyeS9zcmMvYWpheC9sb2FkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBbXG5cdFwiLi4vY29yZVwiLFxuXHRcIi4uL2NvcmUvc3RyaXBBbmRDb2xsYXBzZVwiLFxuXHRcIi4uL2NvcmUvcGFyc2VIVE1MXCIsXG5cdFwiLi4vYWpheFwiLFxuXHRcIi4uL3RyYXZlcnNpbmdcIixcblx0XCIuLi9tYW5pcHVsYXRpb25cIixcblx0XCIuLi9zZWxlY3RvclwiXG5dLCBmdW5jdGlvbiggalF1ZXJ5LCBzdHJpcEFuZENvbGxhcHNlICkge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXG4gKi9cbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcblx0dmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcblx0XHRzZWxmID0gdGhpcyxcblx0XHRvZmYgPSB1cmwuaW5kZXhPZiggXCIgXCIgKTtcblxuXHRpZiAoIG9mZiA+IC0xICkge1xuXHRcdHNlbGVjdG9yID0gc3RyaXBBbmRDb2xsYXBzZSggdXJsLnNsaWNlKCBvZmYgKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxufSApO1xuIl19
//# sourceMappingURL=data:application/json;charset=utf8;base64,
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL2FqYXgvbG9hZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUM7SUFDSCxTQUFTO0lBQ1QsMEJBQTBCO0lBQzFCLG1CQUFtQjtJQUNuQixTQUFTO0lBQ1QsZUFBZTtJQUNmLGlCQUFpQjtJQUNqQixhQUFhO0NBQ2hCLEVBQUUsVUFBVSxNQUFNLEVBQUUsZ0JBQWdCO0lBQ2pDLFlBQVksQ0FBQztJQUNiOztPQUVHO0lBQ0gsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEdBQUcsVUFBVSxHQUFHLEVBQUUsTUFBTSxFQUFFLFFBQVE7UUFDNUMsSUFBSSxRQUFRLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxJQUFJLEdBQUcsSUFBSSxFQUFFLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDWCxRQUFRLEdBQUcsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzVDLEdBQUcsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUM1QixDQUFDO1FBQ0QscUJBQXFCO1FBQ3JCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVCLG1DQUFtQztZQUNuQyxRQUFRLEdBQUcsTUFBTSxDQUFDO1lBQ2xCLE1BQU0sR0FBRyxTQUFTLENBQUM7WUFDbkIsa0NBQWtDO1FBQ3RDLENBQUM7UUFDRCxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDNUMsSUFBSSxHQUFHLE1BQU0sQ0FBQztRQUNsQixDQUFDO1FBQ0Qsa0RBQWtEO1FBQ2xELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsQixNQUFNLENBQUMsSUFBSSxDQUFDO2dCQUNSLEdBQUcsRUFBRSxHQUFHO2dCQUNSLG1FQUFtRTtnQkFDbkUsMENBQTBDO2dCQUMxQyxnREFBZ0Q7Z0JBQ2hELElBQUksRUFBRSxJQUFJLElBQUksS0FBSztnQkFDbkIsUUFBUSxFQUFFLE1BQU07Z0JBQ2hCLElBQUksRUFBRSxNQUFNO2FBQ2YsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLFlBQVk7Z0JBQzFCLDZDQUE2QztnQkFDN0MsUUFBUSxHQUFHLFNBQVMsQ0FBQztnQkFDckIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRO29CQUNkLHdFQUF3RTtvQkFDeEUseURBQXlEO29CQUN6RCxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO29CQUNyRSxnQ0FBZ0M7b0JBQ2hDLFlBQVksQ0FBQyxDQUFDO2dCQUNsQix3RUFBd0U7Z0JBQ3hFLHVEQUF1RDtnQkFDdkQsNkRBQTZEO1lBQ2pFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLElBQUksVUFBVSxLQUFLLEVBQUUsTUFBTTtnQkFDekMsSUFBSSxDQUFDLElBQUksQ0FBQztvQkFDTixRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxRQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUMxRSxDQUFDLENBQUMsQ0FBQztZQUNQLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQztRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDaEIsQ0FBQyxDQUFDO0FBQ04sQ0FBQyxDQUFDLENBQUM7QUFDSCxtcUtBQW1xSztBQUVucUssK2daQUErZ1oiLCJmaWxlIjoiYXNzZXRzL3BhY2tzL2pxdWVyeS9zcmMvYWpheC9sb2FkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKFtcbiAgICBcIi4uL2NvcmVcIixcbiAgICBcIi4uL2NvcmUvc3RyaXBBbmRDb2xsYXBzZVwiLFxuICAgIFwiLi4vY29yZS9wYXJzZUhUTUxcIixcbiAgICBcIi4uL2FqYXhcIixcbiAgICBcIi4uL3RyYXZlcnNpbmdcIixcbiAgICBcIi4uL21hbmlwdWxhdGlvblwiLFxuICAgIFwiLi4vc2VsZWN0b3JcIlxuXSwgZnVuY3Rpb24gKGpRdWVyeSwgc3RyaXBBbmRDb2xsYXBzZSkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIC8qKlxuICAgICAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAgICAgKi9cbiAgICBqUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uICh1cmwsIHBhcmFtcywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSwgc2VsZiA9IHRoaXMsIG9mZiA9IHVybC5pbmRleE9mKFwiIFwiKTtcbiAgICAgICAgaWYgKG9mZiA+IC0xKSB7XG4gICAgICAgICAgICBzZWxlY3RvciA9IHN0cmlwQW5kQ29sbGFwc2UodXJsLnNsaWNlKG9mZikpO1xuICAgICAgICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIG9mZik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgaXQncyBhIGZ1bmN0aW9uXG4gICAgICAgIGlmIChqUXVlcnkuaXNGdW5jdGlvbihwYXJhbXMpKSB7XG4gICAgICAgICAgICAvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuICAgICAgICAgICAgY2FsbGJhY2sgPSBwYXJhbXM7XG4gICAgICAgICAgICBwYXJhbXMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIHR5cGUgPSBcIlBPU1RcIjtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuICAgICAgICBpZiAoc2VsZi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBqUXVlcnkuYWpheCh7XG4gICAgICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICAgICAgLy8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cbiAgICAgICAgICAgICAgICAvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2VcbiAgICAgICAgICAgICAgICAvLyB1c2VyIGNhbiBvdmVycmlkZSBpdCB0aHJvdWdoIGFqYXhTZXR1cCBtZXRob2RcbiAgICAgICAgICAgICAgICB0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG4gICAgICAgICAgICAgICAgZGF0YVR5cGU6IFwiaHRtbFwiLFxuICAgICAgICAgICAgICAgIGRhdGE6IHBhcmFtc1xuICAgICAgICAgICAgfSkuZG9uZShmdW5jdGlvbiAocmVzcG9uc2VUZXh0KSB7XG4gICAgICAgICAgICAgICAgLy8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG4gICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBhcmd1bWVudHM7XG4gICAgICAgICAgICAgICAgc2VsZi5odG1sKHNlbGVjdG9yID9cbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG4gICAgICAgICAgICAgICAgICAgIC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuICAgICAgICAgICAgICAgICAgICBqUXVlcnkoXCI8ZGl2PlwiKS5hcHBlbmQoalF1ZXJ5LnBhcnNlSFRNTChyZXNwb25zZVRleHQpKS5maW5kKHNlbGVjdG9yKSA6XG4gICAgICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImRhdGFcIiwgXCJzdGF0dXNcIiwgXCJqcVhIUlwiXG4gICAgICAgICAgICAgICAgLy8gYnV0IHRoZXkgYXJlIGlnbm9yZWQgYmVjYXVzZSByZXNwb25zZSB3YXMgc2V0IGFib3ZlLlxuICAgICAgICAgICAgICAgIC8vIElmIGl0IGZhaWxzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJqcVhIUlwiLCBcInN0YXR1c1wiLCBcImVycm9yXCJcbiAgICAgICAgICAgIH0pLmFsd2F5cyhjYWxsYmFjayAmJiBmdW5jdGlvbiAoanFYSFIsIHN0YXR1cykge1xuICAgICAgICAgICAgICAgIHNlbGYuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHRoaXMsIHJlc3BvbnNlIHx8IFtqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFJdKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zjg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1GemMyVjBjeTl3WVdOcmN5OXFjWFZsY25rdmMzSmpMMkZxWVhndmJHOWhaQzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeE5RVUZOTEVOQlFVVTdTVUZEVUN4VFFVRlRPMGxCUTFRc01FSkJRVEJDTzBsQlF6RkNMRzFDUVVGdFFqdEpRVU51UWl4VFFVRlRPMGxCUTFRc1pVRkJaVHRKUVVObUxHbENRVUZwUWp0SlFVTnFRaXhoUVVGaE8wTkJRMklzUlVGQlJTeFZRVUZWTEUxQlFVMHNSVUZCUlN4blFrRkJaMEk3U1VGRmNrTXNXVUZCV1N4RFFVRkRPMGxCUldJN08wOUJSVWM3U1VGRFNDeE5RVUZOTEVOQlFVTXNSVUZCUlN4RFFVRkRMRWxCUVVrc1IwRkJSeXhWUVVGVkxFZEJRVWNzUlVGQlJTeE5RVUZOTEVWQlFVVXNVVUZCVVR0UlFVTXZReXhKUVVGSkxGRkJRVkVzUlVGQlJTeEpRVUZKTEVWQlFVVXNVVUZCVVN4RlFVTXpRaXhKUVVGSkxFZEJRVWNzU1VGQlNTeEZRVU5ZTEVkQlFVY3NSMEZCUnl4SFFVRkhMRU5CUVVNc1QwRkJUeXhEUVVGRkxFZEJRVWNzUTBGQlJTeERRVUZETzFGQlJURkNMRVZCUVVVc1EwRkJReXhEUVVGRkxFZEJRVWNzUjBGQlJ5eERRVUZETEVOQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRhRUlzVVVGQlVTeEhRVUZITEdkQ1FVRm5RaXhEUVVGRkxFZEJRVWNzUTBGQlF5eExRVUZMTEVOQlFVVXNSMEZCUnl4RFFVRkZMRU5CUVVVc1EwRkJRenRaUVVOb1JDeEhRVUZITEVkQlFVY3NSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJSU3hEUVVGRExFVkJRVVVzUjBGQlJ5eERRVUZGTEVOQlFVTTdVVUZETTBJc1EwRkJRenRSUVVWRUxIRkNRVUZ4UWp0UlFVTnlRaXhGUVVGRkxFTkJRVU1zUTBGQlJTeE5RVUZOTEVOQlFVTXNWVUZCVlN4RFFVRkZMRTFCUVUwc1EwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVVZ1UXl4dFEwRkJiVU03V1VGRGJrTXNVVUZCVVN4SFFVRkhMRTFCUVUwc1EwRkJRenRaUVVOc1FpeE5RVUZOTEVkQlFVY3NVMEZCVXl4RFFVRkRPMWxCUlhCQ0xHdERRVUZyUXp0UlFVTnNReXhEUVVGRE8xRkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkZMRTFCUVUwc1NVRkJTU3hQUVVGUExFMUJRVTBzUzBGQlN5eFJRVUZUTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTI1RUxFbEJRVWtzUjBGQlJ5eE5RVUZOTEVOQlFVTTdVVUZEWml4RFFVRkRPMUZCUlVRc2EwUkJRV3RFTzFGQlEyeEVMRVZCUVVVc1EwRkJReXhEUVVGRkxFbEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOMlFpeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkZPMmRDUVVOYUxFZEJRVWNzUlVGQlJTeEhRVUZITzJkQ1FVVlNMRzFGUVVGdFJUdG5Ra0ZEYmtVc01FTkJRVEJETzJkQ1FVTXhReXhuUkVGQlowUTdaMEpCUTJoRUxFbEJRVWtzUlVGQlJTeEpRVUZKTEVsQlFVa3NTMEZCU3p0blFrRkRia0lzVVVGQlVTeEZRVUZGTEUxQlFVMDdaMEpCUTJoQ0xFbEJRVWtzUlVGQlJTeE5RVUZOTzJGQlExb3NRMEZCUlN4RFFVRkRMRWxCUVVrc1EwRkJSU3hWUVVGVkxGbEJRVms3WjBKQlJTOUNMRFpEUVVFMlF6dG5Ra0ZETjBNc1VVRkJVU3hIUVVGSExGTkJRVk1zUTBGQlF6dG5Ra0ZGY2tJc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlJTeFJRVUZSTzI5Q1FVVnNRaXgzUlVGQmQwVTdiMEpCUTNoRkxIbEVRVUY1UkR0dlFrRkRla1FzVFVGQlRTeERRVUZGTEU5QlFVOHNRMEZCUlN4RFFVRkRMRTFCUVUwc1EwRkJSU3hOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZGTEZsQlFWa3NRMEZCUlN4RFFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRkxGRkJRVkVzUTBGQlJUdHZRa0ZGTjBVc1owTkJRV2RETzI5Q1FVTm9ReXhaUVVGWkxFTkJRVVVzUTBGQlF6dG5Ra0ZGYWtJc2QwVkJRWGRGTzJkQ1FVTjRSU3gxUkVGQmRVUTdaMEpCUTNaRUxEWkVRVUUyUkR0WlFVTTNSQ3hEUVVGRExFTkJRVVVzUTBGQlF5eE5RVUZOTEVOQlFVVXNVVUZCVVN4SlFVRkpMRlZCUVZVc1MwRkJTeXhGUVVGRkxFMUJRVTA3WjBKQlF6bERMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVVU3YjBKQlExWXNVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJSU3hKUVVGSkxFVkJRVVVzVVVGQlVTeEpRVUZKTEVOQlFVVXNTMEZCU3l4RFFVRkRMRmxCUVZrc1JVRkJSU3hOUVVGTkxFVkJRVVVzUzBGQlN5eERRVUZGTEVOQlFVVXNRMEZCUXp0blFrRkRNMFVzUTBGQlF5eERRVUZGTEVOQlFVTTdXVUZEVEN4RFFVRkRMRU5CUVVVc1EwRkJRenRSUVVOTUxFTkJRVU03VVVGRlJDeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRPMGxCUTJJc1EwRkJReXhEUVVGRE8wRkJSVVlzUTBGQlF5eERRVUZGTEVOQlFVTWlMQ0ptYVd4bElqb2lZWE56WlhSekwzQmhZMnR6TDJweGRXVnllUzl6Y21NdllXcGhlQzlzYjJGa0xtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpWkdWbWFXNWxLQ0JiWEc1Y2RGd2lMaTR2WTI5eVpWd2lMRnh1WEhSY0lpNHVMMk52Y21VdmMzUnlhWEJCYm1SRGIyeHNZWEJ6WlZ3aUxGeHVYSFJjSWk0dUwyTnZjbVV2Y0dGeWMyVklWRTFNWENJc1hHNWNkRndpTGk0dllXcGhlRndpTEZ4dVhIUmNJaTR1TDNSeVlYWmxjbk5wYm1kY0lpeGNibHgwWENJdUxpOXRZVzVwY0hWc1lYUnBiMjVjSWl4Y2JseDBYQ0l1TGk5elpXeGxZM1J2Y2x3aVhHNWRMQ0JtZFc1amRHbHZiaWdnYWxGMVpYSjVMQ0J6ZEhKcGNFRnVaRU52Ykd4aGNITmxJQ2tnZTF4dVhHNWNJblZ6WlNCemRISnBZM1JjSWp0Y2JseHVMeW9xWEc0Z0tpQk1iMkZrSUdFZ2RYSnNJR2x1ZEc4Z1lTQndZV2RsWEc0Z0tpOWNibXBSZFdWeWVTNW1iaTVzYjJGa0lEMGdablZ1WTNScGIyNG9JSFZ5YkN3Z2NHRnlZVzF6TENCallXeHNZbUZqYXlBcElIdGNibHgwZG1GeUlITmxiR1ZqZEc5eUxDQjBlWEJsTENCeVpYTndiMjV6WlN4Y2JseDBYSFJ6Wld4bUlEMGdkR2hwY3l4Y2JseDBYSFJ2Wm1ZZ1BTQjFjbXd1YVc1a1pYaFBaaWdnWENJZ1hDSWdLVHRjYmx4dVhIUnBaaUFvSUc5bVppQStJQzB4SUNrZ2UxeHVYSFJjZEhObGJHVmpkRzl5SUQwZ2MzUnlhWEJCYm1SRGIyeHNZWEJ6WlNnZ2RYSnNMbk5zYVdObEtDQnZabVlnS1NBcE8xeHVYSFJjZEhWeWJDQTlJSFZ5YkM1emJHbGpaU2dnTUN3Z2IyWm1JQ2s3WEc1Y2RIMWNibHh1WEhRdkx5QkpaaUJwZENkeklHRWdablZ1WTNScGIyNWNibHgwYVdZZ0tDQnFVWFZsY25rdWFYTkdkVzVqZEdsdmJpZ2djR0Z5WVcxeklDa2dLU0I3WEc1Y2JseDBYSFF2THlCWFpTQmhjM04xYldVZ2RHaGhkQ0JwZENkeklIUm9aU0JqWVd4c1ltRmphMXh1WEhSY2RHTmhiR3hpWVdOcklEMGdjR0Z5WVcxek8xeHVYSFJjZEhCaGNtRnRjeUE5SUhWdVpHVm1hVzVsWkR0Y2JseHVYSFF2THlCUGRHaGxjbmRwYzJVc0lHSjFhV3hrSUdFZ2NHRnlZVzBnYzNSeWFXNW5YRzVjZEgwZ1pXeHpaU0JwWmlBb0lIQmhjbUZ0Y3lBbUppQjBlWEJsYjJZZ2NHRnlZVzF6SUQwOVBTQmNJbTlpYW1WamRGd2lJQ2tnZTF4dVhIUmNkSFI1Y0dVZ1BTQmNJbEJQVTFSY0lqdGNibHgwZlZ4dVhHNWNkQzh2SUVsbUlIZGxJR2hoZG1VZ1pXeGxiV1Z1ZEhNZ2RHOGdiVzlrYVdaNUxDQnRZV3RsSUhSb1pTQnlaWEYxWlhOMFhHNWNkR2xtSUNnZ2MyVnNaaTVzWlc1bmRHZ2dQaUF3SUNrZ2UxeHVYSFJjZEdwUmRXVnllUzVoYW1GNEtDQjdYRzVjZEZ4MFhIUjFjbXc2SUhWeWJDeGNibHh1WEhSY2RGeDBMeThnU1dZZ1hDSjBlWEJsWENJZ2RtRnlhV0ZpYkdVZ2FYTWdkVzVrWldacGJtVmtMQ0IwYUdWdUlGd2lSMFZVWENJZ2JXVjBhRzlrSUhkcGJHd2dZbVVnZFhObFpDNWNibHgwWEhSY2RDOHZJRTFoYTJVZ2RtRnNkV1VnYjJZZ2RHaHBjeUJtYVdWc1pDQmxlSEJzYVdOcGRDQnphVzVqWlZ4dVhIUmNkRngwTHk4Z2RYTmxjaUJqWVc0Z2IzWmxjbkpwWkdVZ2FYUWdkR2h5YjNWbmFDQmhhbUY0VTJWMGRYQWdiV1YwYUc5a1hHNWNkRngwWEhSMGVYQmxPaUIwZVhCbElIeDhJRndpUjBWVVhDSXNYRzVjZEZ4MFhIUmtZWFJoVkhsd1pUb2dYQ0pvZEcxc1hDSXNYRzVjZEZ4MFhIUmtZWFJoT2lCd1lYSmhiWE5jYmx4MFhIUjlJQ2t1Wkc5dVpTZ2dablZ1WTNScGIyNG9JSEpsYzNCdmJuTmxWR1Y0ZENBcElIdGNibHh1WEhSY2RGeDBMeThnVTJGMlpTQnlaWE53YjI1elpTQm1iM0lnZFhObElHbHVJR052YlhCc1pYUmxJR05oYkd4aVlXTnJYRzVjZEZ4MFhIUnlaWE53YjI1elpTQTlJR0Z5WjNWdFpXNTBjenRjYmx4dVhIUmNkRngwYzJWc1ppNW9kRzFzS0NCelpXeGxZM1J2Y2lBL1hHNWNibHgwWEhSY2RGeDBMeThnU1dZZ1lTQnpaV3hsWTNSdmNpQjNZWE1nYzNCbFkybG1hV1ZrTENCc2IyTmhkR1VnZEdobElISnBaMmgwSUdWc1pXMWxiblJ6SUdsdUlHRWdaSFZ0YlhrZ1pHbDJYRzVjZEZ4MFhIUmNkQzh2SUVWNFkyeDFaR1VnYzJOeWFYQjBjeUIwYnlCaGRtOXBaQ0JKUlNBblVHVnliV2x6YzJsdmJpQkVaVzVwWldRbklHVnljbTl5YzF4dVhIUmNkRngwWEhScVVYVmxjbmtvSUZ3aVBHUnBkajVjSWlBcExtRndjR1Z1WkNnZ2FsRjFaWEo1TG5CaGNuTmxTRlJOVENnZ2NtVnpjRzl1YzJWVVpYaDBJQ2tnS1M1bWFXNWtLQ0J6Wld4bFkzUnZjaUFwSURwY2JseHVYSFJjZEZ4MFhIUXZMeUJQZEdobGNuZHBjMlVnZFhObElIUm9aU0JtZFd4c0lISmxjM1ZzZEZ4dVhIUmNkRngwWEhSeVpYTndiMjV6WlZSbGVIUWdLVHRjYmx4dVhIUmNkQzh2SUVsbUlIUm9aU0J5WlhGMVpYTjBJSE4xWTJObFpXUnpMQ0IwYUdseklHWjFibU4wYVc5dUlHZGxkSE1nWENKa1lYUmhYQ0lzSUZ3aWMzUmhkSFZ6WENJc0lGd2lhbkZZU0ZKY0lseHVYSFJjZEM4dklHSjFkQ0IwYUdWNUlHRnlaU0JwWjI1dmNtVmtJR0psWTJGMWMyVWdjbVZ6Y0c5dWMyVWdkMkZ6SUhObGRDQmhZbTkyWlM1Y2JseDBYSFF2THlCSlppQnBkQ0JtWVdsc2N5d2dkR2hwY3lCbWRXNWpkR2x2YmlCblpYUnpJRndpYW5GWVNGSmNJaXdnWENKemRHRjBkWE5jSWl3Z1hDSmxjbkp2Y2x3aVhHNWNkRngwZlNBcExtRnNkMkY1Y3lnZ1kyRnNiR0poWTJzZ0ppWWdablZ1WTNScGIyNG9JR3B4V0VoU0xDQnpkR0YwZFhNZ0tTQjdYRzVjZEZ4MFhIUnpaV3htTG1WaFkyZ29JR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkRngwWEhSallXeHNZbUZqYXk1aGNIQnNlU2dnZEdocGN5d2djbVZ6Y0c5dWMyVWdmSHdnV3lCcWNWaElVaTV5WlhOd2IyNXpaVlJsZUhRc0lITjBZWFIxY3l3Z2FuRllTRklnWFNBcE8xeHVYSFJjZEZ4MGZTQXBPMXh1WEhSY2RIMGdLVHRjYmx4MGZWeHVYRzVjZEhKbGRIVnliaUIwYUdsek8xeHVmVHRjYmx4dWZTQXBPMXh1SWwxOVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGY4O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltRnpjMlYwY3k5d1lXTnJjeTlxY1hWbGNua3ZjM0pqTDJGcVlYZ3ZiRzloWkM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hOUVVGTkxFTkJRVU03U1VGRFNDeFRRVUZUTzBsQlExUXNNRUpCUVRCQ08wbEJRekZDTEcxQ1FVRnRRanRKUVVOdVFpeFRRVUZUTzBsQlExUXNaVUZCWlR0SlFVTm1MR2xDUVVGcFFqdEpRVU5xUWl4aFFVRmhPME5CUTJoQ0xFVkJRVVVzVlVGQlZTeE5RVUZOTEVWQlFVVXNaMEpCUVdkQ08wbEJRMnBETEZsQlFWa3NRMEZCUXp0SlFVTmlPenRQUVVWSE8wbEJRMGdzVFVGQlRTeERRVUZETEVWQlFVVXNRMEZCUXl4SlFVRkpMRWRCUVVjc1ZVRkJWU3hIUVVGSExFVkJRVVVzVFVGQlRTeEZRVUZGTEZGQlFWRTdVVUZETlVNc1NVRkJTU3hSUVVGUkxFVkJRVVVzU1VGQlNTeEZRVUZGTEZGQlFWRXNSVUZCUlN4SlFVRkpMRWRCUVVjc1NVRkJTU3hGUVVGRkxFZEJRVWNzUjBGQlJ5eEhRVUZITEVOQlFVTXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8xRkJRMnhGTEVWQlFVVXNRMEZCUXl4RFFVRkRMRWRCUVVjc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEV0N4UlFVRlJMRWRCUVVjc1owSkJRV2RDTEVOQlFVTXNSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlF6VkRMRWRCUVVjc1IwRkJSeXhIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNSVUZCUlN4SFFVRkhMRU5CUVVNc1EwRkJRenRSUVVNMVFpeERRVUZETzFGQlEwUXNjVUpCUVhGQ08xRkJRM0pDTEVWQlFVVXNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhWUVVGVkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUXpWQ0xHMURRVUZ0UXp0WlFVTnVReXhSUVVGUkxFZEJRVWNzVFVGQlRTeERRVUZETzFsQlEyeENMRTFCUVUwc1IwRkJSeXhUUVVGVExFTkJRVU03V1VGRGJrSXNhME5CUVd0RE8xRkJRM1JETEVOQlFVTTdVVUZEUkN4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zVFVGQlRTeEpRVUZKTEU5QlFVOHNUVUZCVFN4TFFVRkxMRkZCUVZFc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRE5VTXNTVUZCU1N4SFFVRkhMRTFCUVUwc1EwRkJRenRSUVVOc1FpeERRVUZETzFGQlEwUXNhMFJCUVd0RU8xRkJRMnhFTEVWQlFVVXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTnNRaXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETzJkQ1FVTlNMRWRCUVVjc1JVRkJSU3hIUVVGSE8yZENRVU5TTEcxRlFVRnRSVHRuUWtGRGJrVXNNRU5CUVRCRE8yZENRVU14UXl4blJFRkJaMFE3WjBKQlEyaEVMRWxCUVVrc1JVRkJSU3hKUVVGSkxFbEJRVWtzUzBGQlN6dG5Ra0ZEYmtJc1VVRkJVU3hGUVVGRkxFMUJRVTA3WjBKQlEyaENMRWxCUVVrc1JVRkJSU3hOUVVGTk8yRkJRMllzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRmxCUVZrN1owSkJRekZDTERaRFFVRTJRenRuUWtGRE4wTXNVVUZCVVN4SFFVRkhMRk5CUVZNc1EwRkJRenRuUWtGRGNrSXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUk8yOUNRVU5rTEhkRlFVRjNSVHR2UWtGRGVFVXNlVVJCUVhsRU8yOUNRVU42UkN4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRPMjlDUVVOeVJTeG5RMEZCWjBNN2IwSkJRMmhETEZsQlFWa3NRMEZCUXl4RFFVRkRPMmRDUVVOc1FpeDNSVUZCZDBVN1owSkJRM2hGTEhWRVFVRjFSRHRuUWtGRGRrUXNOa1JCUVRaRU8xbEJRMnBGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhSUVVGUkxFbEJRVWtzVlVGQlZTeExRVUZMTEVWQlFVVXNUVUZCVFR0blFrRkRla01zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXp0dlFrRkRUaXhSUVVGUkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NSVUZCUlN4UlFVRlJMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zV1VGQldTeEZRVUZGTEUxQlFVMHNSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRE8yZENRVU14UlN4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOUUxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlExQXNRMEZCUXp0UlFVTkVMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU03U1VGRGFFSXNRMEZCUXl4RFFVRkRPMEZCUTA0c1EwRkJReXhEUVVGRExFTkJRVU03UVVGRlNDeHRjVXRCUVcxeFN5SXNJbVpwYkdVaU9pSmhjM05sZEhNdmNHRmphM012YW5GMVpYSjVMM055WXk5aGFtRjRMMnh2WVdRdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUprWldacGJtVW9XMXh1SUNBZ0lGd2lMaTR2WTI5eVpWd2lMRnh1SUNBZ0lGd2lMaTR2WTI5eVpTOXpkSEpwY0VGdVpFTnZiR3hoY0hObFhDSXNYRzRnSUNBZ1hDSXVMaTlqYjNKbEwzQmhjbk5sU0ZSTlRGd2lMRnh1SUNBZ0lGd2lMaTR2WVdwaGVGd2lMRnh1SUNBZ0lGd2lMaTR2ZEhKaGRtVnljMmx1WjF3aUxGeHVJQ0FnSUZ3aUxpNHZiV0Z1YVhCMWJHRjBhVzl1WENJc1hHNGdJQ0FnWENJdUxpOXpaV3hsWTNSdmNsd2lYRzVkTENCbWRXNWpkR2x2YmlBb2FsRjFaWEo1TENCemRISnBjRUZ1WkVOdmJHeGhjSE5sS1NCN1hHNGdJQ0FnWENKMWMyVWdjM1J5YVdOMFhDSTdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dURzloWkNCaElIVnliQ0JwYm5SdklHRWdjR0ZuWlZ4dUlDQWdJQ0FxTDF4dUlDQWdJR3BSZFdWeWVTNW1iaTVzYjJGa0lEMGdablZ1WTNScGIyNGdLSFZ5YkN3Z2NHRnlZVzF6TENCallXeHNZbUZqYXlrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYzJWc1pXTjBiM0lzSUhSNWNHVXNJSEpsYzNCdmJuTmxMQ0J6Wld4bUlEMGdkR2hwY3l3Z2IyWm1JRDBnZFhKc0xtbHVaR1Y0VDJZb1hDSWdYQ0lwTzF4dUlDQWdJQ0FnSUNCcFppQW9iMlptSUQ0Z0xURXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxiR1ZqZEc5eUlEMGdjM1J5YVhCQmJtUkRiMnhzWVhCelpTaDFjbXd1YzJ4cFkyVW9iMlptS1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IxY213Z1BTQjFjbXd1YzJ4cFkyVW9NQ3dnYjJabUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0F2THlCSlppQnBkQ2R6SUdFZ1puVnVZM1JwYjI1Y2JpQWdJQ0FnSUNBZ2FXWWdLR3BSZFdWeWVTNXBjMFoxYm1OMGFXOXVLSEJoY21GdGN5a3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRmRsSUdGemMzVnRaU0IwYUdGMElHbDBKM01nZEdobElHTmhiR3hpWVdOclhHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVd4c1ltRmpheUE5SUhCaGNtRnRjenRjYmlBZ0lDQWdJQ0FnSUNBZ0lIQmhjbUZ0Y3lBOUlIVnVaR1ZtYVc1bFpEdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklFOTBhR1Z5ZDJselpTd2dZblZwYkdRZ1lTQndZWEpoYlNCemRISnBibWRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbGJITmxJR2xtSUNod1lYSmhiWE1nSmlZZ2RIbHdaVzltSUhCaGNtRnRjeUE5UFQwZ1hDSnZZbXBsWTNSY0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaU0E5SUZ3aVVFOVRWRndpTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDOHZJRWxtSUhkbElHaGhkbVVnWld4bGJXVnVkSE1nZEc4Z2JXOWthV1o1TENCdFlXdGxJSFJvWlNCeVpYRjFaWE4wWEc0Z0lDQWdJQ0FnSUdsbUlDaHpaV3htTG14bGJtZDBhQ0ErSURBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdwUmRXVnllUzVoYW1GNEtIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjFjbXc2SUhWeWJDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJKWmlCY0luUjVjR1ZjSWlCMllYSnBZV0pzWlNCcGN5QjFibVJsWm1sdVpXUXNJSFJvWlc0Z1hDSkhSVlJjSWlCdFpYUm9iMlFnZDJsc2JDQmlaU0IxYzJWa0xseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRTFoYTJVZ2RtRnNkV1VnYjJZZ2RHaHBjeUJtYVdWc1pDQmxlSEJzYVdOcGRDQnphVzVqWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklIVnpaWElnWTJGdUlHOTJaWEp5YVdSbElHbDBJSFJvY205MVoyZ2dZV3BoZUZObGRIVndJRzFsZEdodlpGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUhSNWNHVWdmSHdnWENKSFJWUmNJaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaFZIbHdaVG9nWENKb2RHMXNYQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFlUb2djR0Z5WVcxelhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1M1a2IyNWxLR1oxYm1OMGFXOXVJQ2h5WlhOd2IyNXpaVlJsZUhRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJUWVhabElISmxjM0J2Ym5ObElHWnZjaUIxYzJVZ2FXNGdZMjl0Y0d4bGRHVWdZMkZzYkdKaFkydGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE53YjI1elpTQTlJR0Z5WjNWdFpXNTBjenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6Wld4bUxtaDBiV3dvYzJWc1pXTjBiM0lnUDF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJKWmlCaElITmxiR1ZqZEc5eUlIZGhjeUJ6Y0dWamFXWnBaV1FzSUd4dlkyRjBaU0IwYUdVZ2NtbG5hSFFnWld4bGJXVnVkSE1nYVc0Z1lTQmtkVzF0ZVNCa2FYWmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1JYaGpiSFZrWlNCelkzSnBjSFJ6SUhSdklHRjJiMmxrSUVsRklDZFFaWEp0YVhOemFXOXVJRVJsYm1sbFpDY2daWEp5YjNKelhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3BSZFdWeWVTaGNJanhrYVhZK1hDSXBMbUZ3Y0dWdVpDaHFVWFZsY25rdWNHRnljMlZJVkUxTUtISmxjM0J2Ym5ObFZHVjRkQ2twTG1acGJtUW9jMlZzWldOMGIzSXBJRHBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdUM1JvWlhKM2FYTmxJSFZ6WlNCMGFHVWdablZzYkNCeVpYTjFiSFJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpjRzl1YzJWVVpYaDBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCSlppQjBhR1VnY21WeGRXVnpkQ0J6ZFdOalpXVmtjeXdnZEdocGN5Qm1kVzVqZEdsdmJpQm5aWFJ6SUZ3aVpHRjBZVndpTENCY0luTjBZWFIxYzF3aUxDQmNJbXB4V0VoU1hDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJpZFhRZ2RHaGxlU0JoY21VZ2FXZHViM0psWkNCaVpXTmhkWE5sSUhKbGMzQnZibk5sSUhkaGN5QnpaWFFnWVdKdmRtVXVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnU1dZZ2FYUWdabUZwYkhNc0lIUm9hWE1nWm5WdVkzUnBiMjRnWjJWMGN5QmNJbXB4V0VoU1hDSXNJRndpYzNSaGRIVnpYQ0lzSUZ3aVpYSnliM0pjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdmU2t1WVd4M1lYbHpLR05oYkd4aVlXTnJJQ1ltSUdaMWJtTjBhVzl1SUNocWNWaElVaXdnYzNSaGRIVnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJWc1ppNWxZV05vS0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGc2JHSmhZMnN1WVhCd2JIa29kR2hwY3l3Z2NtVnpjRzl1YzJVZ2ZId2dXMnB4V0VoU0xuSmxjM0J2Ym5ObFZHVjRkQ3dnYzNSaGRIVnpMQ0JxY1ZoSVVsMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUNBZ2ZUdGNibjBwTzF4dVhHNHZMeU1nYzI5MWNtTmxUV0Z3Y0dsdVoxVlNURDFrWVhSaE9tRndjR3hwWTJGMGFXOXVMMnB6YjI0N1kyaGhjbk5sZEQxMWRHWTRPMkpoYzJVMk5DeGxlVW95V2xoS2VtRlhPWFZKYW05NlRFTktlbUl6Vm5sWk1sWjZTV3B3WWtsdFJucGpNbFl3WTNrNWQxbFhUbkpqZVRseFkxaFdiR051YTNaak0wcHFUREpHY1ZsWVozWmlSemxvV2tNMWNXTjVTbVJNUTBwMVdWY3hiR041U1RaWE1UQnpTVzB4YUdOSVFuQmliV1I2U1dwdmFWRlZSa0pSVTNoT1VWVkdUa3hGVGtKUlZWVTNVMVZHUkZWRGVGUlJWVVpVVHpCc1FsRXhVWE5OUlVwQ1VWUkNRMDh3YkVKUmVrWkRURWN4UTFGVlJuUlJhblJLVVZWT2RWRnBlRlJSVlVaVVR6QnNRbEV4VVhOYVZVWkNXbFIwU2xGVlRtMU1SMnhEVVZWR2NGRnFkRXBSVlU1eFVXbDRhRkZWUm1oUE1FNUNVVEpKYzFKVlJrSlNVM2hXVVZWR1ZreEZNVUpSVlRCelVsVkdRbEpUZUc1UmEwWkNXakJKTjFOVlJrWmphMDF6VjFWR1FsZFRlRVJSVlVaRVR6QnNRbEpYU1RkUE1EbENVbFZqTjFOVlJrUlRRM2hPVVZWR1RreEZUa0pSVlUxelVsVkdRbEpUZUVSUlZVWkVURVZzUWxGVmEzTlNNRVpDVW5sNFZsRlZSbFpNUldSQ1VWVmpjMUpWUmtKU1UzaE9VVlZHVGt4RlZrSlJWVlZ6VlZWR1FsVlVkRkpSVlUxMlVYbDRTbEZWUmtwTVJrWkNVVlpGYzFKVlJrSlNVM2hLVVZWR1NreEZWa0pSVlZWelZWVkdRbFZUZUVaUlZVMTZVV2w0U2xGVlJrcE1SV1JDVVZWamMxTlZSa0pUVTNoR1VWVk9XVXhGWkVKUlZXTnpVakJHUWxKNWVFaFJWVVpJVEVWT1FsRlZUWE5VTUVaQ1ZIbDRSRkZWUmtaTVJXUkNVVlZqYzFFd1JrSlNVM2hFVVZWR1JFOHhSa0pTVkVaRFRFVldRbEZWVlhOUk1FWkNVWGw0UkZGVlJrWk1SV1JDVVZWamMxSXdSa0pTZVhoRVVWVkdSRXhGVGtKUlZWVnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUVGRYVlVaRVlVVkpjMVZWUmtKVlUzaElVVlZHU0V4SFpFTlJWVVp1VVdsNFJGRlZSa1pNUldSQ1VWVmpjMUV3UmtKUmVYaE1VVlZHVEV4RlRrSlJWVlZ6VWpCR1FsSjVlRVJSVlVaR1RFVk9RbEZWVlhOUk1FWkNVWHAwV2xGVlRtOVNRM2hJVVZWR1NFeEZaRUpSVldOelVqQkdRbEo1ZUVSUlZVWkVURVYwUWxGVmMzTlJNRVpDVWxONFJGRlZSa1JNUlZaQ1VWVlZjMUl3UmtKU2VYaEVVVlZHUmt4RlRrSlJWVTAzVlZWR1JFMHdTWE5STUVaQ1VYcDBVbEZWVmtWTVNFWkRVVlZHZUZGcWRGSlJWVTU1VVdsNFJsRlZSa1pNUlU1Q1VWVk5jMUV3UmtKU1UzaE9VVlZHVGt4RlRrSlJWVTF6VmxWR1FsWlRlRVJSVlVaR1RFVXhRbEZWTUhOUk1FWkNVbmw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZW5SYVVWVldkVkY1ZUhSUk1FWkNZbFZOTjFkVlJrUmlhMDF6VlZWR1FsVlRlRWhSVlVaSVRFVXhRbEZWTUhOUk1FWkNVWHAwV2xGVlRuTlJhWGhPVVZWR1RreEZaRUpSVldOelZUQkdRbFY1ZUVSUlZVWkVUekZzUWxKWVFrTk1SM1JFVVZWR2NsRjZkRkpSVlU1elVYbDRSRkZWUmtSUE1VWkNVVlZOYzFOVlJrSlRVM2hFVVZWR1JFeEZWa0pSVlZWelVUQkdRbEY1ZUVSUlZVWkdURVV4UWxGVk1ITlRWVVpDVTFONFVGRlZSbEJNUlRGQ1VWVXdjMU13UmtKVGVYaFNVVlZHVkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVR6RnNRbEV5TlVWTVJXeENVVlZyYzFJd1JrSlNlWGhPVVZWR1RreEZUa0pSVlUwM1ZWVkdSRnBwZUVSUlZVWkVUekZHUWxKVlVYTmhNRkpDVVZkMFJVOHhSa0pSTW5oRlRFVldRbEZWVlhOUk1FWkNVWGw0UkZGVlJrWk1SV3hDVVZWcmMxRXdSa0pSZVhoT1VWVkdUa3hGWkVKUlZXTnpVVEJHUWxKVGVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBXbEZWVGpKUmFYaE9VVlZHVGt4RlRrSlJWVTF6VTFWR1FsTlRlRVJSVlVaR1R6SmtRMUZWVG1GTVJXUkNVVlZqYzFKVlJrSlNVM2hJVVZWR1NFOHlaRU5SVlZaVFRFY3hSbEZWUm5SU1ZIUnVVV3RHUkdKclZYTk5SVTVDVVZSQ1JFOHlaRU5SVlUxNFVYbDRibEpGUmtKYU1GRTNXakJLUWxFeWFFVk1SV3hDVVZWcmMxSlZSa0pTVTNoS1VWVkdTa3hGYkVKUlZXdHpVekJHUWxONmRHNVJhMFpFWW10SmMxVlZSa0pWVTNoR1VWVkdSa3hGTVVKUlZUQTNXakJLUWxFeWFFTk1SV3hDVVZWcmMxSlZSa0pTVTNoT1VWVkdUazh5UmtKUk1XOXpVVEJHUWxKVGVFUlJWVVpFVEVWc1FsRlZhM05STUVaQ1VsTjRWbEZWUmxaTVJteENVVlpyTjFvd1NrSlNVemxEVEVSYVJGRlZSVEpSZW5SdVVXdEdSRTR3VFhOVlZVWkNWVk40U0ZGVlJraE1SazVDVVZaTmMxRXdSa0pSZW5SdVVXdEdSbU5yU1hOVFZVWkNVMU40UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pTVTNoU1VWVkdVazh5T1VOUlZWWnpVV2w0TTFKVlJrSmtNRlUzWWpCS1FsRXphRVpNU0d4RlVWVkdOVkpFZEhaUmEwWkVaV3RSYzFSVlJrSlVVM2hFVVZWR1JreEZPVUpSVlRoelVUQkdRbEpUZUVSUlZVWkVURVV4UWxGVk1ITlJNRVpDVWxONFRsRlZSazVNUlU1Q1VWVk5jMVV3UmtKVmVYaEVVVlZHUmt4R2JFSlJWbXR6VVRCR1FsSlRlRVJSVlVaR1RFVk9RbEZWVFhOVFZVWkNVMU40UkZGVlJrWk1Sa1pDVVZaRmMxRXdSa0pTVkhSMlVXdEdSazR3VlhOYU1FNUNVVmRrUkU4eU9VTlJWVTV2VVhsNFdsRlZSbHBNUlU1Q1VWVlZjMUV3UmtKUmVuUnVVV3RHUm1GclNYTmtNRlpDVVZoa1JrOHlaRU5SVlU0MFVsTjRNVkpGUmtKa1ZWRTNXakJLUWxFeldrVk1SRnBGVVZWRk1sSkVkRnBSVlUwelVrTjRSRkZWUmtSTVJVNUNVVlZWYzFFd1JrSlJlWGhPVVZWR1RreEZUa0pSVlZWelZWVkdRbFZUZUVwUlZVWktURVpXUWxGV1ZYTlRNRVpDVTNsNFJsRlZSa1pNUlRGQ1VWVXdOMW93U2tKUmVteEVURVZzUWxGVmEzTlJNRVpDVVhsNFNsRlZSa3BNUlU1Q1VWVlZOMkl3U2tKUk1WbHpWVlZHUWxWVGVFUlJWVVpFVEVWMFFsRlZjM05STUVaQ1VsTjRTbEZWUmtwTVJWWkNVVlZWYzFWVlJrSlZVM2hLVVZWR1NreEZUa0pSVlZWelV6QkdRbE41ZUVSUlZVWkVURVpzUWxGV2EzTlNWVVpDVWxONFRsRlZSazVNUlZaQ1VWVlZjMU13UmtKVGVYaEVVVlZHUmt4RlRrSlJWVlZ6VVRCR1FsRjZkRzVSYTBaRVRUQlZjMUV3UmtKUmVYaEVVVlZHUmt4RlRrSlJWVTAzVjFWR1JGUkRlRVJSVlVaRVRFVk9RbEZWVlhOUk1FWkNVWHAwVWxGVlRrMU1SVTVDVVZWTk4xVlZSa1pTUTNoT1VWVkdUa3hGVGtKUlZVMXpVMVZHUWxOVGVFUlJWVVpFVHpCc1FsRXlTWE5STUVaQ1VYbDRSRkZWUmtSUE1FWkNVbFZaYzFFd1JrSlJlWGhFVVZWR1JreEZUa0pSVlUxcFRFTktiV0ZYZUd4SmFtOXBXVmhPZWxwWVVucE1NMEpvV1RKMGVrd3ljSGhrVjFaNVpWTTVlbU50VFhaWlYzQm9aVU01YzJJeVJtdE1iWEI2U1dsM2FXTXlPVEZqYlU1c1l6Qk9kbUp1VW14aWJsRnBUMnh6YVZwSFZtMWhWelZzUzBOQ1lsaEhOV05rUm5kcFRHazBkbGt5T1hsYVZuZHBURVo0ZFZoSVVtTkphVFIxVERKT2RtTnRWWFpqTTFKNVlWaENRbUp0VWtSaU1uaHpXVmhDZWxwV2QybE1SbmgxV0VoU1kwbHBOSFZNTWs1MlkyMVZkbU5IUm5sak1sWkpWa1V4VFZoRFNYTllSelZqWkVaM2FVeHBOSFpaVjNCb1pVWjNhVXhHZUhWWVNGSmpTV2swZFV3elVubFpXRnBzWTI1T2NHSnRaR05KYVhoallteDRNRmhEU1hWTWFUbDBXVmMxY0dOSVZuTlpXRkp3WWpJMVkwbHBlR05pYkhnd1dFTkpkVXhwT1hwYVYzaHNXVE5TZG1Oc2QybFlSelZrVEVOQ2JXUlhOV3BrUjJ4MlltbG5aMkZzUmpGYVdFbzFURU5DZW1SSVNuQmpSVVoxV2tWT2RtSkhlR2hqU0U1c1NVTnJaMlV4ZUhWWVJ6VmpTVzVXZWxwVFFucGtTRXB3V1ROU1kwbHFkR05pYkhoMVRIbHZjVmhITkdkTGFVSk5ZakpHYTBsSFJXZGtXRXB6U1Vkc2RXUkhPR2RaVTBKM1dWZGtiRmhITkdkTGFUbGpZbTF3VW1SWFZubGxVelZ0WW1rMWMySXlSbXRKUkRCbldtNVdkVmt6VW5CaU1qUnZTVWhXZVdKRGQyZGpSMFo1V1ZjeGVreERRbXBaVjNoeldXMUdhbUY1UVhCSlNIUmpZbXg0TUdSdFJubEpTRTVzWWtkV2FtUkhPWGxNUTBJd1pWaENiRXhEUW5sYVdFNTNZakkxZWxwVGVHTmliSGd3V0VoU2VscFhlRzFKUkRCblpFZG9jR041ZUdOaWJIZ3dXRWhTZGxwdFdXZFFVMEl4WTIxM2RXRlhOV3RhV0doUVdtbG5aMWhEU1dkWVEwbG5TMVIwWTJKc2VIVllTRkp3V21sQmIwbEhPVzFhYVVFclNVTXdlRWxEYTJkbE1YaDFXRWhTWTJSSVRteGlSMVpxWkVjNWVVbEVNR2RqTTFKNVlWaENRbUp0VWtSaU1uaHpXVmhDZWxwVFoyZGtXRXB6VEc1T2MyRlhUbXhMUTBKMldtMVpaMHRUUVhCUE1YaDFXRWhTWTJSSVZubGlRMEU1U1VoV2VXSkROWHBpUjJ4cVdsTm5aMDFEZDJkaU1scHRTVU5yTjFoSE5XTmtTREZqWW14NGRWaElVWFpNZVVKS1dtbENjR1JEWkhwSlIwVm5XbTVXZFZrelVuQmlNalZqWW14NE1HRlhXV2RMUTBKeFZWaFdiR051YTNWaFdFNUhaRmMxYW1SSGJIWmlhV2RuWTBkR2VWbFhNWHBKUTJ0blMxTkNOMWhITldOaWJIZ3dXRWhSZGt4NVFsaGFVMEpvWXpOT01XSlhWV2RrUjJob1pFTkNjR1JEWkhwSlNGSnZXbE5DYWxsWGVITlpiVVpxWVRGNGRWaElVbU5rUjA1b1lrZDRhVmxYVG5KSlJEQm5ZMGRHZVZsWE1YcFBNWGgxV0VoU1kyUklRbWhqYlVaMFkzbEJPVWxJVm5WYVIxWnRZVmMxYkZwRWRHTmliSGgxV0VoUmRreDVRbEJrUjJoc1kyNWtjR015VlhOSlIwb3hZVmQ0YTBsSFJXZGpSMFo1V1Zjd1oyTXpVbmxoVnpWdVdFYzFZMlJJTUdkYVYzaDZXbE5DY0ZwcFFXOUpTRUpvWTIxR2RHTjVRVzFLYVVJd1pWaENiR0l5V1dkalIwWjVXVmN4ZWtsRU1EbFFVMEpqU1cwNWFXRnRWbXBrUm5kcFNVTnJaMlV4ZUhWWVNGSmpaRWhTTldOSFZXZFFVMEpqU1d4Q1VGVXhVbU5KYW5SallteDRNR1pXZUhWWVJ6VmpaRU00ZGtsRmJHMUpTR1JzU1Vkb2FHUnRWV2RhVjNoc1lsZFdkV1JJVFdka1J6aG5ZbGM1YTJGWFdqVk1RMEowV1ZkMGJFbElVbTlhVTBKNVdsaEdNVnBZVGpCWVJ6VmpaRWRzYlVsRFoyZGpNbFp6V21rMWMxcFhOVzVrUjJkblVHbEJkMGxEYTJkbE1YaDFXRWhTWTJSSGNGSmtWMVo1WlZNMWFHRnRSalJMUTBJM1dFYzFZMlJHZURCWVNGSXhZMjEzTmtsSVZubGlRM2hqWW14NGRWaElVbU5rUm5nd1RIazRaMU5YV1dkWVEwb3daVmhDYkZoRFNXZGtiVVo1WVZkR2FXSkhWV2RoV0UxblpGYzFhMXBYV25CaWJWWnJURU5DTUdGSFZuVkpSbmRwVWpCV1ZWaERTV2RpVjFZd1lVYzVhMGxJWkhCaVIzZG5XVzFWWjJSWVRteGFRelZqWW14NE1GaElVbU5rUXpoMlNVVXhhR0V5Vldka2JVWnpaRmRWWjJJeVdXZGtSMmh3WTNsQ2JXRlhWbk5hUTBKc1pVaENjMkZYVG5Ca1EwSjZZVmMxYWxwV2VIVllTRkpqWkVaNE1FeDVPR2RrV0U1c1kybENhbGxYTkdkaU0xcHNZMjVLY0ZwSFZXZGhXRkZuWkVkb2VXSXpWbTVoUTBKb1lXMUdORlV5VmpCa1dFRm5ZbGRXTUdGSE9XdFlSelZqWkVaNE1GaElVakJsV0VKc1QybENNR1ZZUW14SlNIZzRTVVozYVZJd1ZsVllRMGx6V0VjMVkyUkdlREJZU0ZKcldWaFNhRlpJYkhkYVZHOW5XRU5LYjJSSE1YTllRMGx6V0VjMVkyUkdlREJZU0ZKcldWaFNhRTlwUW5kWldFcG9ZbGhPWTJKc2VEQllTRkk1U1VOcmRWcEhPWFZhVTJkbldtNVdkVmt6VW5CaU1qUnZTVWhLYkdNelFuWmliazVzVmtkV05HUkRRWEJKU0hSallteDRkVmhJVW1Oa1JuZ3dUSGs0WjFVeVJqSmFVMEo1V2xoT2QySXlOWHBhVTBKdFlqTkpaMlJZVG14SlIyeDFTVWRPZG1KWVFuTmFXRkpzU1VkT2FHSkhlR2xaVjA1eVdFYzFZMlJHZURCWVNGSjVXbGhPZDJJeU5YcGFVMEU1U1VkR2VWb3pWblJhVnpVd1kzcDBZMkpzZUhWWVNGSmpaRVo0TUdNeVZuTmFhVFZ2WkVjeGMwdERRbnBhVjNoc1dUTlNkbU5wUVM5WVJ6VmpZbXg0TUZoSVVtTmtSbmd3VEhrNFoxTlhXV2RaVTBKNldsZDRiRmt6VW5aamFVSXpXVmhOWjJNelFteFpNbXh0WVZkV2EweERRbk5pTWs1b1pFZFZaMlJIYUd4SlNFcHdXakpvTUVsSFZuTmFWekZzWW01U2VrbEhiSFZKUjBWbldraFdkR0pZYTJkYVIyd3lXRWMxWTJSR2VEQllTRkpqWkVNNGRrbEZWalJaTW5neFdrZFZaMk15VG5saFdFSXdZM2xDTUdKNVFtaGtiVGx3V2tOQ1NsSlRRVzVWUjFaNVlsZHNlbU15YkhaaWFVSkZXbGMxY0ZwWFVXNUpSMVo1WTIwNWVXTXhlSFZZU0ZKalpFWjRNRmhJVW5GVldGWnNZMjVyYjBsR2QybFFSMUp3WkdvMVkwbHBRWEJNYlVaM1kwZFdkVnBEWjJkaGJFWXhXbGhLTlV4dVFtaGpiazVzVTBaU1RsUkRaMmRqYlZaNlkwYzVkV015VmxWYVdHZ3dTVU5yWjB0VE5XMWhWelZyUzBOQ2VscFhlR3haTTFKMlkybEJjRWxFY0dOaWJIaDFXRWhTWTJSR2VEQllTRkYyVEhsQ1VHUkhhR3hqYm1Sd1l6SlZaMlJZVG14SlNGSnZXbE5DYldSWGVITkpTRXBzWXpOV2MyUkdlSFZZU0ZKalpFWjRNRmhJVW5sYVdFNTNZakkxZWxwV1VteGxTRkZuUzFSMFkySnNlSFZZU0ZKalpFTTRka2xGYkcxSlNGSnZXbE5DZVZwWVJqRmFXRTR3U1VoT01Wa3lUbXhhVjFKNlRFTkNNR0ZIYkhwSlIxb3hZbTFPTUdGWE9YVkpSMlJzWkVoTloxaERTbXRaV0ZKb1dFTkpjMGxHZDJsak0xSm9aRWhXZWxoRFNYTkpSbmRwWVc1R1dWTkdTbU5KYkhoMVdFaFNZMlJET0haSlIwb3haRU5DTUdGSFZqVkpSMFo1V2xOQ2NGb3lOWFpqYlZaclNVZEtiRmt5UmpGak1sVm5ZMjFXZW1OSE9YVmpNbFZuWkRKR2VrbElUbXhrUTBKb1dXMDVNbHBUTldOaWJIZ3dXRWhSZGt4NVFrcGFhVUp3WkVOQ2JWbFhiSE5qZVhkblpFZG9jR041UW0xa1Z6VnFaRWRzZG1KcFFtNWFXRko2U1VaM2FXRnVSbGxUUmtwalNXbDNaMWhEU25wa1IwWXdaRmhPWTBscGQyZFlRMHBzWTI1S2RtTnNkMmxZUnpWalpFWjRNR1pUUVhCTWJVWnpaREpHTldONVoyZFpNa1p6WWtkS2FGa3ljMmRLYVZsbldtNVdkVmt6VW5CaU1qUnZTVWR3ZUZkRmFGTk1RMEo2WkVkR01HUllUV2RMVTBJM1dFYzFZMlJHZURCWVNGSjZXbGQ0YlV4dFZtaFpNbWR2U1VkYU1XSnRUakJoVnpsMVMwTnJaMlV4ZUhWWVNGSmpaRVo0TUZoSVVtcFpWM2h6V1cxR2FtRjVOV2hqU0VKelpWTm5aMlJIYUhCamVYZG5ZMjFXZW1OSE9YVmpNbFZuWmtoM1oxZDVRbkZqVm1oSlZXazFlVnBZVG5kaU1qVjZXbFpTYkdWSVVYTkpTRTR3V1ZoU01XTjVkMmRoYmtaWlUwWkpaMWhUUVhCUE1YaDFXRWhTWTJSR2VEQm1VMEZ3VHpGNGRWaElVbU5rU0RCblMxUjBZMkpzZURCbVZuaDFXRWMxWTJSSVNteGtTRlo1WW1sQ01HRkhiSHBQTVhoMVpsUjBZMkpzZUhWbVUwRndUekY0ZFVsc01UbGNiaUpkZlE9PVxuIl19

//# sourceMappingURL=data:application/json;charset=utf8;base64,
