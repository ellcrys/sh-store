define([
    "../core"
], function (jQuery) {
    "use strict";
    // Register as a named AMD module, since jQuery can be concatenated with other
    // files that may use define, but not via a proper concatenation script that
    // understands anonymous AMD modules. A named AMD is safest and most robust
    // way to register. Lowercase jquery is used because AMD module names are
    // derived from file names, and jQuery is normally delivered in a lowercase
    // file name. Do this after creating the global so that if an AMD module wants
    // to call noConflict to hide this version of jQuery, it will work.
    // Note that for maximum portability, libraries that are not jQuery should
    // declare themselves as anonymous modules, and avoid setting a global if an
    // AMD loader is present. jQuery is a special case. For more information, see
    // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
    if (typeof define === "function" && define.amd) {
        define("jquery", [], function () {
            return jQuery;
        });
    }
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL2V4cG9ydHMvYW1kLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBRTtJQUNQLFNBQVM7Q0FDVCxFQUFFLFVBQVUsTUFBTTtJQUVuQixZQUFZLENBQUM7SUFFYiw4RUFBOEU7SUFDOUUsNEVBQTRFO0lBQzVFLDJFQUEyRTtJQUMzRSx5RUFBeUU7SUFDekUsMkVBQTJFO0lBQzNFLDhFQUE4RTtJQUM5RSxtRUFBbUU7SUFFbkUsMEVBQTBFO0lBQzFFLDRFQUE0RTtJQUM1RSw2RUFBNkU7SUFDN0Usa0ZBQWtGO0lBRWxGLEVBQUUsQ0FBQyxDQUFFLE9BQU8sTUFBTSxLQUFLLFVBQVUsSUFBSSxNQUFNLENBQUMsR0FBSSxDQUFDLENBQUMsQ0FBQztRQUNsRCxNQUFNLENBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRTtZQUNyQixNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ2YsQ0FBQyxDQUFFLENBQUM7SUFDTCxDQUFDO0FBRUQsQ0FBQyxDQUFFLENBQUMiLCJmaWxlIjoiYXNzZXRzL3BhY2tzL2pxdWVyeS9zcmMvZXhwb3J0cy9hbWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoIFtcblx0XCIuLi9jb3JlXCJcbl0sIGZ1bmN0aW9uKCBqUXVlcnkgKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cblxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnk7XG5cdH0gKTtcbn1cblxufSApO1xuIl19
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL2V4cG9ydHMvYW1kLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQztJQUNILFNBQVM7Q0FDWixFQUFFLFVBQVUsTUFBTTtJQUNmLFlBQVksQ0FBQztJQUNiLDhFQUE4RTtJQUM5RSw0RUFBNEU7SUFDNUUsMkVBQTJFO0lBQzNFLHlFQUF5RTtJQUN6RSwyRUFBMkU7SUFDM0UsOEVBQThFO0lBQzlFLG1FQUFtRTtJQUNuRSwwRUFBMEU7SUFDMUUsNEVBQTRFO0lBQzVFLDZFQUE2RTtJQUM3RSxrRkFBa0Y7SUFDbEYsRUFBRSxDQUFDLENBQUMsT0FBTyxNQUFNLEtBQUssVUFBVSxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzdDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsRUFBRSxFQUFFO1lBQ2pCLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDbEIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCx1cUVBQXVxRSIsImZpbGUiOiJhc3NldHMvcGFja3MvanF1ZXJ5L3NyYy9leHBvcnRzL2FtZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZShbXG4gICAgXCIuLi9jb3JlXCJcbl0sIGZ1bmN0aW9uIChqUXVlcnkpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAvLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcbiAgICAvLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4gICAgLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4gICAgLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxuICAgIC8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuICAgIC8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuICAgIC8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cbiAgICAvLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuICAgIC8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cbiAgICAvLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4galF1ZXJ5O1xuICAgICAgICB9KTtcbiAgICB9XG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbUZ6YzJWMGN5OXdZV05yY3k5cWNYVmxjbmt2YzNKakwyVjRjRzl5ZEhNdllXMWtMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFMUJRVTBzUTBGQlJUdEpRVU5RTEZOQlFWTTdRMEZEVkN4RlFVRkZMRlZCUVZVc1RVRkJUVHRKUVVWdVFpeFpRVUZaTEVOQlFVTTdTVUZGWWl3NFJVRkJPRVU3U1VGRE9VVXNORVZCUVRSRk8wbEJRelZGTERKRlFVRXlSVHRKUVVNelJTeDVSVUZCZVVVN1NVRkRla1VzTWtWQlFUSkZPMGxCUXpORkxEaEZRVUU0UlR0SlFVTTVSU3h0UlVGQmJVVTdTVUZGYmtVc01FVkJRVEJGTzBsQlF6RkZMRFJGUVVFMFJUdEpRVU0xUlN3MlJVRkJOa1U3U1VGRE4wVXNhMFpCUVd0R08wbEJSV3hHTEVWQlFVVXNRMEZCUXl4RFFVRkZMRTlCUVU4c1RVRkJUU3hMUVVGTExGVkJRVlVzU1VGQlNTeE5RVUZOTEVOQlFVTXNSMEZCU1N4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOc1JDeE5RVUZOTEVOQlFVVXNVVUZCVVN4RlFVRkZMRVZCUVVVc1JVRkJSVHRaUVVOeVFpeE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRPMUZCUTJZc1EwRkJReXhEUVVGRkxFTkJRVU03U1VGRFRDeERRVUZETzBGQlJVUXNRMEZCUXl4RFFVRkZMRU5CUVVNaUxDSm1hV3hsSWpvaVlYTnpaWFJ6TDNCaFkydHpMMnB4ZFdWeWVTOXpjbU12Wlhod2IzSjBjeTloYldRdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUprWldacGJtVW9JRnRjYmx4MFhDSXVMaTlqYjNKbFhDSmNibDBzSUdaMWJtTjBhVzl1S0NCcVVYVmxjbmtnS1NCN1hHNWNibHdpZFhObElITjBjbWxqZEZ3aU8xeHVYRzR2THlCU1pXZHBjM1JsY2lCaGN5QmhJRzVoYldWa0lFRk5SQ0J0YjJSMWJHVXNJSE5wYm1ObElHcFJkV1Z5ZVNCallXNGdZbVVnWTI5dVkyRjBaVzVoZEdWa0lIZHBkR2dnYjNSb1pYSmNiaTh2SUdacGJHVnpJSFJvWVhRZ2JXRjVJSFZ6WlNCa1pXWnBibVVzSUdKMWRDQnViM1FnZG1saElHRWdjSEp2Y0dWeUlHTnZibU5oZEdWdVlYUnBiMjRnYzJOeWFYQjBJSFJvWVhSY2JpOHZJSFZ1WkdWeWMzUmhibVJ6SUdGdWIyNTViVzkxY3lCQlRVUWdiVzlrZFd4bGN5NGdRU0J1WVcxbFpDQkJUVVFnYVhNZ2MyRm1aWE4wSUdGdVpDQnRiM04wSUhKdlluVnpkRnh1THk4Z2QyRjVJSFJ2SUhKbFoybHpkR1Z5TGlCTWIzZGxjbU5oYzJVZ2FuRjFaWEo1SUdseklIVnpaV1FnWW1WallYVnpaU0JCVFVRZ2JXOWtkV3hsSUc1aGJXVnpJR0Z5WlZ4dUx5OGdaR1Z5YVhabFpDQm1jbTl0SUdacGJHVWdibUZ0WlhNc0lHRnVaQ0JxVVhWbGNua2dhWE1nYm05eWJXRnNiSGtnWkdWc2FYWmxjbVZrSUdsdUlHRWdiRzkzWlhKallYTmxYRzR2THlCbWFXeGxJRzVoYldVdUlFUnZJSFJvYVhNZ1lXWjBaWElnWTNKbFlYUnBibWNnZEdobElHZHNiMkpoYkNCemJ5QjBhR0YwSUdsbUlHRnVJRUZOUkNCdGIyUjFiR1VnZDJGdWRITmNiaTh2SUhSdklHTmhiR3dnYm05RGIyNW1iR2xqZENCMGJ5Qm9hV1JsSUhSb2FYTWdkbVZ5YzJsdmJpQnZaaUJxVVhWbGNua3NJR2wwSUhkcGJHd2dkMjl5YXk1Y2JseHVMeThnVG05MFpTQjBhR0YwSUdadmNpQnRZWGhwYlhWdElIQnZjblJoWW1sc2FYUjVMQ0JzYVdKeVlYSnBaWE1nZEdoaGRDQmhjbVVnYm05MElHcFJkV1Z5ZVNCemFHOTFiR1JjYmk4dklHUmxZMnhoY21VZ2RHaGxiWE5sYkhabGN5QmhjeUJoYm05dWVXMXZkWE1nYlc5a2RXeGxjeXdnWVc1a0lHRjJiMmxrSUhObGRIUnBibWNnWVNCbmJHOWlZV3dnYVdZZ1lXNWNiaTh2SUVGTlJDQnNiMkZrWlhJZ2FYTWdjSEpsYzJWdWRDNGdhbEYxWlhKNUlHbHpJR0VnYzNCbFkybGhiQ0JqWVhObExpQkdiM0lnYlc5eVpTQnBibVp2Y20xaGRHbHZiaXdnYzJWbFhHNHZMeUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2YW5KaWRYSnJaUzl5WlhGMWFYSmxhbk12ZDJscmFTOVZjR1JoZEdsdVp5MWxlR2x6ZEdsdVp5MXNhV0p5WVhKcFpYTWpkMmxyYVMxaGJtOXVYRzVjYm1sbUlDZ2dkSGx3Wlc5bUlHUmxabWx1WlNBOVBUMGdYQ0ptZFc1amRHbHZibHdpSUNZbUlHUmxabWx1WlM1aGJXUWdLU0I3WEc1Y2RHUmxabWx1WlNnZ1hDSnFjWFZsY25sY0lpd2dXMTBzSUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEhKbGRIVnliaUJxVVhWbGNuazdYRzVjZEgwZ0tUdGNibjFjYmx4dWZTQXBPMXh1SWwxOVxuIl19
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,
