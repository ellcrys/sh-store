define([
    "../core"
], function (jQuery, noGlobal) {
    "use strict";
    var 
    // Map over jQuery in case of overwrite
    _jQuery = window.jQuery, 
    // Map over the $ in case of overwrite
    _$ = window.$;
    jQuery.noConflict = function (deep) {
        if (window.$ === jQuery) {
            window.$ = _$;
        }
        if (deep && window.jQuery === jQuery) {
            window.jQuery = _jQuery;
        }
        return jQuery;
    };
    // Expose jQuery and $ identifiers, even in AMD
    // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
    // and CommonJS for browser emulators (#13566)
    if (!noGlobal) {
        window.jQuery = window.$ = jQuery;
    }
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL2V4cG9ydHMvZ2xvYmFsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBRTtJQUNQLFNBQVM7Q0FDVCxFQUFFLFVBQVUsTUFBTSxFQUFFLFFBQVE7SUFFN0IsWUFBWSxDQUFDO0lBRWI7SUFFQyx1Q0FBdUM7SUFDdkMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNO0lBRXZCLHNDQUFzQztJQUN0QyxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUVmLE1BQU0sQ0FBQyxVQUFVLEdBQUcsVUFBVSxJQUFJO1FBQ2pDLEVBQUUsQ0FBQyxDQUFFLE1BQU0sQ0FBQyxDQUFDLEtBQUssTUFBTyxDQUFDLENBQUMsQ0FBQztZQUMzQixNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNmLENBQUM7UUFFRCxFQUFFLENBQUMsQ0FBRSxJQUFJLElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyxNQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDO1FBQ3pCLENBQUM7UUFFRCxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ2YsQ0FBQyxDQUFDO0lBRUYsK0NBQStDO0lBQy9DLGdFQUFnRTtJQUNoRSw4Q0FBOEM7SUFDOUMsRUFBRSxDQUFDLENBQUUsQ0FBQyxRQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ2pCLE1BQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUM7SUFDbkMsQ0FBQztBQUVELENBQUMsQ0FBRSxDQUFDIiwiZmlsZSI6ImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL2V4cG9ydHMvZ2xvYmFsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBbXG5cdFwiLi4vY29yZVwiXG5dLCBmdW5jdGlvbiggalF1ZXJ5LCBub0dsb2JhbCApIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggIW5vR2xvYmFsICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cbn0gKTtcbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL2V4cG9ydHMvZ2xvYmFsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQztJQUNILFNBQVM7Q0FDWixFQUFFLFVBQVUsTUFBTSxFQUFFLFFBQVE7SUFDekIsWUFBWSxDQUFDO0lBQ2I7SUFDQSx1Q0FBdUM7SUFDdkMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNO0lBQ3ZCLHNDQUFzQztJQUN0QyxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNkLE1BQU0sQ0FBQyxVQUFVLEdBQUcsVUFBVSxJQUFJO1FBQzlCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQztZQUN0QixNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNsQixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNuQyxNQUFNLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQztRQUM1QixDQUFDO1FBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNsQixDQUFDLENBQUM7SUFDRiwrQ0FBK0M7SUFDL0MsZ0VBQWdFO0lBQ2hFLDhDQUE4QztJQUM5QyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDWixNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO0lBQ3RDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILG0rREFBbStEIiwiZmlsZSI6ImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL2V4cG9ydHMvZ2xvYmFsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKFtcbiAgICBcIi4uL2NvcmVcIlxuXSwgZnVuY3Rpb24gKGpRdWVyeSwgbm9HbG9iYWwpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICB2YXIgXG4gICAgLy8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG4gICAgX2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksIFxuICAgIC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG4gICAgXyQgPSB3aW5kb3cuJDtcbiAgICBqUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uIChkZWVwKSB7XG4gICAgICAgIGlmICh3aW5kb3cuJCA9PT0galF1ZXJ5KSB7XG4gICAgICAgICAgICB3aW5kb3cuJCA9IF8kO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSkge1xuICAgICAgICAgICAgd2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGpRdWVyeTtcbiAgICB9O1xuICAgIC8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4gICAgLy8gKCM3MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxuICAgIC8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbiAgICBpZiAoIW5vR2xvYmFsKSB7XG4gICAgICAgIHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcbiAgICB9XG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbUZ6YzJWMGN5OXdZV05yY3k5cWNYVmxjbmt2YzNKakwyVjRjRzl5ZEhNdloyeHZZbUZzTG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMRTFCUVUwc1EwRkJSVHRKUVVOUUxGTkJRVk03UTBGRFZDeEZRVUZGTEZWQlFWVXNUVUZCVFN4RlFVRkZMRkZCUVZFN1NVRkZOMElzV1VGQldTeERRVUZETzBsQlJXSTdTVUZGUXl4MVEwRkJkVU03U1VGRGRrTXNUMEZCVHl4SFFVRkhMRTFCUVUwc1EwRkJReXhOUVVGTk8wbEJSWFpDTEhORFFVRnpRenRKUVVOMFF5eEZRVUZGTEVkQlFVY3NUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVWbUxFMUJRVTBzUTBGQlF5eFZRVUZWTEVkQlFVY3NWVUZCVlN4SlFVRkpPMUZCUTJwRExFVkJRVVVzUTBGQlF5eERRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkRMRXRCUVVzc1RVRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU16UWl4TlFVRk5MRU5CUVVNc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF6dFJRVU5tTEVOQlFVTTdVVUZGUkN4RlFVRkZMRU5CUVVNc1EwRkJSU3hKUVVGSkxFbEJRVWtzVFVGQlRTeERRVUZETEUxQlFVMHNTMEZCU3l4TlFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRM2hETEUxQlFVMHNRMEZCUXl4TlFVRk5MRWRCUVVjc1QwRkJUeXhEUVVGRE8xRkJRM3BDTEVOQlFVTTdVVUZGUkN4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRE8wbEJRMllzUTBGQlF5eERRVUZETzBsQlJVWXNLME5CUVN0RE8wbEJReTlETEdkRlFVRm5SVHRKUVVOb1JTdzRRMEZCT0VNN1NVRkRPVU1zUlVGQlJTeERRVUZETEVOQlFVVXNRMEZCUXl4UlFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMnBDTEUxQlFVMHNRMEZCUXl4TlFVRk5MRWRCUVVjc1RVRkJUU3hEUVVGRExFTkJRVU1zUjBGQlJ5eE5RVUZOTEVOQlFVTTdTVUZEYmtNc1EwRkJRenRCUVVWRUxFTkJRVU1zUTBGQlJTeERRVUZESWl3aVptbHNaU0k2SW1GemMyVjBjeTl3WVdOcmN5OXFjWFZsY25rdmMzSmpMMlY0Y0c5eWRITXZaMnh2WW1Gc0xtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpWkdWbWFXNWxLQ0JiWEc1Y2RGd2lMaTR2WTI5eVpWd2lYRzVkTENCbWRXNWpkR2x2YmlnZ2FsRjFaWEo1TENCdWIwZHNiMkpoYkNBcElIdGNibHh1WENKMWMyVWdjM1J5YVdOMFhDSTdYRzVjYm5aaGNseHVYRzVjZEM4dklFMWhjQ0J2ZG1WeUlHcFJkV1Z5ZVNCcGJpQmpZWE5sSUc5bUlHOTJaWEozY21sMFpWeHVYSFJmYWxGMVpYSjVJRDBnZDJsdVpHOTNMbXBSZFdWeWVTeGNibHh1WEhRdkx5Qk5ZWEFnYjNabGNpQjBhR1VnSkNCcGJpQmpZWE5sSUc5bUlHOTJaWEozY21sMFpWeHVYSFJmSkNBOUlIZHBibVJ2ZHk0a08xeHVYRzVxVVhWbGNua3VibTlEYjI1bWJHbGpkQ0E5SUdaMWJtTjBhVzl1S0NCa1pXVndJQ2tnZTF4dVhIUnBaaUFvSUhkcGJtUnZkeTRrSUQwOVBTQnFVWFZsY25rZ0tTQjdYRzVjZEZ4MGQybHVaRzkzTGlRZ1BTQmZKRHRjYmx4MGZWeHVYRzVjZEdsbUlDZ2daR1ZsY0NBbUppQjNhVzVrYjNjdWFsRjFaWEo1SUQwOVBTQnFVWFZsY25rZ0tTQjdYRzVjZEZ4MGQybHVaRzkzTG1wUmRXVnllU0E5SUY5cVVYVmxjbms3WEc1Y2RIMWNibHh1WEhSeVpYUjFjbTRnYWxGMVpYSjVPMXh1ZlR0Y2JseHVMeThnUlhod2IzTmxJR3BSZFdWeWVTQmhibVFnSkNCcFpHVnVkR2xtYVdWeWN5d2daWFpsYmlCcGJpQkJUVVJjYmk4dklDZ2pOekV3TWlOamIyMXRaVzUwT2pFd0xDQm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZhbkYxWlhKNUwycHhkV1Z5ZVM5d2RXeHNMelUxTnlsY2JpOHZJR0Z1WkNCRGIyMXRiMjVLVXlCbWIzSWdZbkp2ZDNObGNpQmxiWFZzWVhSdmNuTWdLQ014TXpVMk5pbGNibWxtSUNnZ0lXNXZSMnh2WW1Gc0lDa2dlMXh1WEhSM2FXNWtiM2N1YWxGMVpYSjVJRDBnZDJsdVpHOTNMaVFnUFNCcVVYVmxjbms3WEc1OVhHNWNibjBnS1R0Y2JpSmRmUT09XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,
