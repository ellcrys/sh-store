define([
    "../var/document",
    "../var/support"
], function (document, support) {
    "use strict";
    (function () {
        var input = document.createElement("input"), select = document.createElement("select"), opt = select.appendChild(document.createElement("option"));
        input.type = "checkbox";
        // Support: Android <=4.3 only
        // Default value for a checkbox should be "on"
        support.checkOn = input.value !== "";
        // Support: IE <=11 only
        // Must access selectedIndex to make default options select
        support.optSelected = opt.selected;
        // Support: IE <=11 only
        // An input loses its value after becoming a radio
        input = document.createElement("input");
        input.value = "t";
        input.type = "radio";
        support.radioValue = input.value === "t";
    })();
    return support;
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL2F0dHJpYnV0ZXMvc3VwcG9ydC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUU7SUFDUCxpQkFBaUI7SUFDakIsZ0JBQWdCO0NBQ2hCLEVBQUUsVUFBVSxRQUFRLEVBQUUsT0FBTztJQUU5QixZQUFZLENBQUM7SUFFYixDQUFFO1FBQ0QsSUFBSSxLQUFLLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBRSxPQUFPLENBQUUsRUFDNUMsTUFBTSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUUsUUFBUSxDQUFFLEVBQzNDLEdBQUcsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFFLFFBQVEsQ0FBQyxhQUFhLENBQUUsUUFBUSxDQUFFLENBQUUsQ0FBQztRQUVoRSxLQUFLLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQztRQUV4Qiw4QkFBOEI7UUFDOUIsOENBQThDO1FBQzlDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLEtBQUssS0FBSyxFQUFFLENBQUM7UUFFckMsd0JBQXdCO1FBQ3hCLDJEQUEyRDtRQUMzRCxPQUFPLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUM7UUFFbkMsd0JBQXdCO1FBQ3hCLGtEQUFrRDtRQUNsRCxLQUFLLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBRSxPQUFPLENBQUUsQ0FBQztRQUMxQyxLQUFLLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztRQUNsQixLQUFLLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQztRQUNyQixPQUFPLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxLQUFLLEtBQUssR0FBRyxDQUFDO0lBQzFDLENBQUMsQ0FBRSxFQUFFLENBQUM7SUFFTixNQUFNLENBQUMsT0FBTyxDQUFDO0FBRWYsQ0FBQyxDQUFFLENBQUMiLCJmaWxlIjoiYXNzZXRzL3BhY2tzL2pxdWVyeS9zcmMvYXR0cmlidXRlcy9zdXBwb3J0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKCBbXG5cdFwiLi4vdmFyL2RvY3VtZW50XCIsXG5cdFwiLi4vdmFyL3N1cHBvcnRcIlxuXSwgZnVuY3Rpb24oIGRvY3VtZW50LCBzdXBwb3J0ICkge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxucmV0dXJuIHN1cHBvcnQ7XG5cbn0gKTtcbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL2F0dHJpYnV0ZXMvc3VwcG9ydC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUM7SUFDSCxpQkFBaUI7SUFDakIsZ0JBQWdCO0NBQ25CLEVBQUUsVUFBVSxRQUFRLEVBQUUsT0FBTztJQUMxQixZQUFZLENBQUM7SUFDYixDQUFDO1FBQ0csSUFBSSxLQUFLLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsRUFBRSxNQUFNLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsRUFBRSxHQUFHLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDbkosS0FBSyxDQUFDLElBQUksR0FBRyxVQUFVLENBQUM7UUFDeEIsOEJBQThCO1FBQzlCLDhDQUE4QztRQUM5QyxPQUFPLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxLQUFLLEtBQUssRUFBRSxDQUFDO1FBQ3JDLHdCQUF3QjtRQUN4QiwyREFBMkQ7UUFDM0QsT0FBTyxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDO1FBQ25DLHdCQUF3QjtRQUN4QixrREFBa0Q7UUFDbEQsS0FBSyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDeEMsS0FBSyxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUM7UUFDbEIsS0FBSyxDQUFDLElBQUksR0FBRyxPQUFPLENBQUM7UUFDckIsT0FBTyxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsS0FBSyxLQUFLLEdBQUcsQ0FBQztJQUM3QyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ0wsTUFBTSxDQUFDLE9BQU8sQ0FBQztBQUNuQixDQUFDLENBQUMsQ0FBQztBQUVILCszRUFBKzNFIiwiZmlsZSI6ImFzc2V0cy9wYWNrcy9qcXVlcnkvc3JjL2F0dHJpYnV0ZXMvc3VwcG9ydC5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZShbXG4gICAgXCIuLi92YXIvZG9jdW1lbnRcIixcbiAgICBcIi4uL3Zhci9zdXBwb3J0XCJcbl0sIGZ1bmN0aW9uIChkb2N1bWVudCwgc3VwcG9ydCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSwgc2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKSwgb3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIikpO1xuICAgICAgICBpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xuICAgICAgICAvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcbiAgICAgICAgLy8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG4gICAgICAgIHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuICAgICAgICAvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcbiAgICAgICAgLy8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3RcbiAgICAgICAgc3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcbiAgICAgICAgLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4gICAgICAgIC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG4gICAgICAgIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgICAgICBpbnB1dC52YWx1ZSA9IFwidFwiO1xuICAgICAgICBpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuICAgICAgICBzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG4gICAgfSkoKTtcbiAgICByZXR1cm4gc3VwcG9ydDtcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGY4O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltRnpjMlYwY3k5d1lXTnJjeTlxY1hWbGNua3ZjM0pqTDJGMGRISnBZblYwWlhNdmMzVndjRzl5ZEM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hOUVVGTkxFTkJRVVU3U1VGRFVDeHBRa0ZCYVVJN1NVRkRha0lzWjBKQlFXZENPME5CUTJoQ0xFVkJRVVVzVlVGQlZTeFJRVUZSTEVWQlFVVXNUMEZCVHp0SlFVVTVRaXhaUVVGWkxFTkJRVU03U1VGRllpeERRVUZGTzFGQlEwUXNTVUZCU1N4TFFVRkxMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlJTeFBRVUZQTEVOQlFVVXNSVUZETlVNc1RVRkJUU3hIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlFVVXNVVUZCVVN4RFFVRkZMRVZCUXpORExFZEJRVWNzUjBGQlJ5eE5RVUZOTEVOQlFVTXNWMEZCVnl4RFFVRkZMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRVVVzVVVGQlVTeERRVUZGTEVOQlFVVXNRMEZCUXp0UlFVVm9SU3hMUVVGTExFTkJRVU1zU1VGQlNTeEhRVUZITEZWQlFWVXNRMEZCUXp0UlFVVjRRaXc0UWtGQk9FSTdVVUZET1VJc09FTkJRVGhETzFGQlF6bERMRTlCUVU4c1EwRkJReXhQUVVGUExFZEJRVWNzUzBGQlN5eERRVUZETEV0QlFVc3NTMEZCU3l4RlFVRkZMRU5CUVVNN1VVRkZja01zZDBKQlFYZENPMUZCUTNoQ0xESkVRVUV5UkR0UlFVTXpSQ3hQUVVGUExFTkJRVU1zVjBGQlZ5eEhRVUZITEVkQlFVY3NRMEZCUXl4UlFVRlJMRU5CUVVNN1VVRkZia01zZDBKQlFYZENPMUZCUTNoQ0xHdEVRVUZyUkR0UlFVTnNSQ3hMUVVGTExFZEJRVWNzVVVGQlVTeERRVUZETEdGQlFXRXNRMEZCUlN4UFFVRlBMRU5CUVVVc1EwRkJRenRSUVVNeFF5eExRVUZMTEVOQlFVTXNTMEZCU3l4SFFVRkhMRWRCUVVjc1EwRkJRenRSUVVOc1FpeExRVUZMTEVOQlFVTXNTVUZCU1N4SFFVRkhMRTlCUVU4c1EwRkJRenRSUVVOeVFpeFBRVUZQTEVOQlFVTXNWVUZCVlN4SFFVRkhMRXRCUVVzc1EwRkJReXhMUVVGTExFdEJRVXNzUjBGQlJ5eERRVUZETzBsQlF6RkRMRU5CUVVNc1EwRkJSU3hGUVVGRkxFTkJRVU03U1VGRlRpeE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRPMEZCUldZc1EwRkJReXhEUVVGRkxFTkJRVU1pTENKbWFXeGxJam9pWVhOelpYUnpMM0JoWTJ0ekwycHhkV1Z5ZVM5emNtTXZZWFIwY21saWRYUmxjeTl6ZFhCd2IzSjBMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVpHVm1hVzVsS0NCYlhHNWNkRndpTGk0dmRtRnlMMlJ2WTNWdFpXNTBYQ0lzWEc1Y2RGd2lMaTR2ZG1GeUwzTjFjSEJ2Y25SY0lseHVYU3dnWm5WdVkzUnBiMjRvSUdSdlkzVnRaVzUwTENCemRYQndiM0owSUNrZ2UxeHVYRzVjSW5WelpTQnpkSEpwWTNSY0lqdGNibHh1S0NCbWRXNWpkR2x2YmlncElIdGNibHgwZG1GeUlHbHVjSFYwSUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2dnWENKcGJuQjFkRndpSUNrc1hHNWNkRngwYzJWc1pXTjBJRDBnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDZ2dYQ0p6Wld4bFkzUmNJaUFwTEZ4dVhIUmNkRzl3ZENBOUlITmxiR1ZqZEM1aGNIQmxibVJEYUdsc1pDZ2daRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnZ1hDSnZjSFJwYjI1Y0lpQXBJQ2s3WEc1Y2JseDBhVzV3ZFhRdWRIbHdaU0E5SUZ3aVkyaGxZMnRpYjNoY0lqdGNibHh1WEhRdkx5QlRkWEJ3YjNKME9pQkJibVJ5YjJsa0lEdzlOQzR6SUc5dWJIbGNibHgwTHk4Z1JHVm1ZWFZzZENCMllXeDFaU0JtYjNJZ1lTQmphR1ZqYTJKdmVDQnphRzkxYkdRZ1ltVWdYQ0p2Ymx3aVhHNWNkSE4xY0hCdmNuUXVZMmhsWTJ0UGJpQTlJR2x1Y0hWMExuWmhiSFZsSUNFOVBTQmNJbHdpTzF4dVhHNWNkQzh2SUZOMWNIQnZjblE2SUVsRklEdzlNVEVnYjI1c2VWeHVYSFF2THlCTmRYTjBJR0ZqWTJWemN5QnpaV3hsWTNSbFpFbHVaR1Y0SUhSdklHMWhhMlVnWkdWbVlYVnNkQ0J2Y0hScGIyNXpJSE5sYkdWamRGeHVYSFJ6ZFhCd2IzSjBMbTl3ZEZObGJHVmpkR1ZrSUQwZ2IzQjBMbk5sYkdWamRHVmtPMXh1WEc1Y2RDOHZJRk4xY0hCdmNuUTZJRWxGSUR3OU1URWdiMjVzZVZ4dVhIUXZMeUJCYmlCcGJuQjFkQ0JzYjNObGN5QnBkSE1nZG1Gc2RXVWdZV1owWlhJZ1ltVmpiMjFwYm1jZ1lTQnlZV1JwYjF4dVhIUnBibkIxZENBOUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvSUZ3aWFXNXdkWFJjSWlBcE8xeHVYSFJwYm5CMWRDNTJZV3gxWlNBOUlGd2lkRndpTzF4dVhIUnBibkIxZEM1MGVYQmxJRDBnWENKeVlXUnBiMXdpTzF4dVhIUnpkWEJ3YjNKMExuSmhaR2x2Vm1Gc2RXVWdQU0JwYm5CMWRDNTJZV3gxWlNBOVBUMGdYQ0owWENJN1hHNTlJQ2tvS1R0Y2JseHVjbVYwZFhKdUlITjFjSEJ2Y25RN1hHNWNibjBnS1R0Y2JpSmRmUT09XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,
