// Code generated by protoc-gen-gogo.
// source: server.proto
// DO NOT EDIT!

/*
Package proto_rpc is a generated protocol buffer package.

It is generated from these files:
	server.proto

It has these top-level messages:
	GetIdentityMsg
	ObjectCountResponse
	GetObjectMsg
	OrderBy
	DBSession
	CreateObjectsMsg
	CreateIdentityMsg
	ObjectResponse
	MultiObjectResponse
	ObjectResponseData
	Object
*/
package proto_rpc

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// GetIdentityMsg represents an identity request message
type GetIdentityMsg struct {
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"id,omitempty" structs:"id,omitempty" mapstructure:"id,omitempty"`
}

func (m *GetIdentityMsg) Reset()                    { *m = GetIdentityMsg{} }
func (m *GetIdentityMsg) String() string            { return proto.CompactTextString(m) }
func (*GetIdentityMsg) ProtoMessage()               {}
func (*GetIdentityMsg) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{0} }

func (m *GetIdentityMsg) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

// ObjectCountResponse represents object counts
type ObjectCountResponse struct {
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *ObjectCountResponse) Reset()                    { *m = ObjectCountResponse{} }
func (m *ObjectCountResponse) String() string            { return proto.CompactTextString(m) }
func (*ObjectCountResponse) ProtoMessage()               {}
func (*ObjectCountResponse) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{1} }

func (m *ObjectCountResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// GetObjectMsg represents query parameters for retrieving objects
type GetObjectMsg struct {
	Query   []byte     `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty" structs:"query,omitempty" mapstructure:"query,omitempty"`
	Owner   string     `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty" structs:"owner,omitempty" mapstructure:"owner,omitempty"`
	Creator string     `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty" structs:"creator,omitempty" mapstructure:"creator,omitempty"`
	Order   []*OrderBy `protobuf:"bytes,4,rep,name=order" json:"order,omitempty" structs:"order,omitempty" mapstructure:"order,omitempty"`
	Limit   int32      `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty" structs:"limit,omitempty" mapstructure:"limit,omitempty"`
}

func (m *GetObjectMsg) Reset()                    { *m = GetObjectMsg{} }
func (m *GetObjectMsg) String() string            { return proto.CompactTextString(m) }
func (*GetObjectMsg) ProtoMessage()               {}
func (*GetObjectMsg) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{2} }

func (m *GetObjectMsg) GetQuery() []byte {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *GetObjectMsg) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *GetObjectMsg) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *GetObjectMsg) GetOrder() []*OrderBy {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *GetObjectMsg) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// OrderBy represents how a field is ordered in a query
type OrderBy struct {
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty" structs:"field,omitempty" mapstructure:"field,omitempty"`
	Order int32  `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty" structs:"order,omitempty" mapstructure:"order,omitempty"`
}

func (m *OrderBy) Reset()                    { *m = OrderBy{} }
func (m *OrderBy) String() string            { return proto.CompactTextString(m) }
func (*OrderBy) ProtoMessage()               {}
func (*OrderBy) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{3} }

func (m *OrderBy) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *OrderBy) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

// DBSession represents a database session request body
type DBSession struct {
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"id,omitempty" structs:"id,omitempty" mapstructure:"id,omitempty"`
}

func (m *DBSession) Reset()                    { *m = DBSession{} }
func (m *DBSession) String() string            { return proto.CompactTextString(m) }
func (*DBSession) ProtoMessage()               {}
func (*DBSession) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{4} }

func (m *DBSession) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

// CreateObjects represents a collection of objects to be created
type CreateObjectsMsg struct {
	Objects []*Object `protobuf:"bytes,1,rep,name=objects" json:"objects,omitempty" structs:"objects,omitempty" mapstructure:"objects,omitempty"`
}

func (m *CreateObjectsMsg) Reset()                    { *m = CreateObjectsMsg{} }
func (m *CreateObjectsMsg) String() string            { return proto.CompactTextString(m) }
func (*CreateObjectsMsg) ProtoMessage()               {}
func (*CreateObjectsMsg) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{5} }

func (m *CreateObjectsMsg) GetObjects() []*Object {
	if m != nil {
		return m.Objects
	}
	return nil
}

// CreateIdentityMsg represents an identity of a person or organization
type CreateIdentityMsg struct {
	Email     string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty" structs:"email,omitempty" mapstructure:"email,omitempty"`
	Password  string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty" structs:"password,omitempty" mapstructure:"password,omitempty"`
	Developer bool   `protobuf:"varint,3,opt,name=developer,proto3" json:"developer,omitempty" structs:"developer,omitempty" mapstructure:"developer,omitempty"`
}

func (m *CreateIdentityMsg) Reset()                    { *m = CreateIdentityMsg{} }
func (m *CreateIdentityMsg) String() string            { return proto.CompactTextString(m) }
func (*CreateIdentityMsg) ProtoMessage()               {}
func (*CreateIdentityMsg) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{6} }

func (m *CreateIdentityMsg) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *CreateIdentityMsg) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *CreateIdentityMsg) GetDeveloper() bool {
	if m != nil {
		return m.Developer
	}
	return false
}

// ObjectResponse defines a response about a single object
type ObjectResponse struct {
	Data  *ObjectResponseData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty" structs:"data,omitempty" mapstructure:"data,omitempty"`
	Links map[string]string   `protobuf:"bytes,2,rep,name=links" json:"links,omitempty" structs:"links,omitempty" mapstructure:"links,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ObjectResponse) Reset()                    { *m = ObjectResponse{} }
func (m *ObjectResponse) String() string            { return proto.CompactTextString(m) }
func (*ObjectResponse) ProtoMessage()               {}
func (*ObjectResponse) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{7} }

func (m *ObjectResponse) GetData() *ObjectResponseData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ObjectResponse) GetLinks() map[string]string {
	if m != nil {
		return m.Links
	}
	return nil
}

// MultiObjectResponse describes a response of multiple objects
type MultiObjectResponse struct {
	Data  []*ObjectResponseData `protobuf:"bytes,1,rep,name=data" json:"data,omitempty" structs:"data,omitempty" mapstructure:"data,omitempty"`
	Links map[string]string     `protobuf:"bytes,2,rep,name=links" json:"links,omitempty" structs:"links,omitempty" mapstructure:"links,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *MultiObjectResponse) Reset()                    { *m = MultiObjectResponse{} }
func (m *MultiObjectResponse) String() string            { return proto.CompactTextString(m) }
func (*MultiObjectResponse) ProtoMessage()               {}
func (*MultiObjectResponse) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{8} }

func (m *MultiObjectResponse) GetData() []*ObjectResponseData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *MultiObjectResponse) GetLinks() map[string]string {
	if m != nil {
		return m.Links
	}
	return nil
}

// ObjectResponse describes an object and related information
type ObjectResponseData struct {
	Type       string  `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty" structs:"type,omitempty" mapstructure:"type,omitempty"`
	ID         string  `protobuf:"bytes,2,opt,name=ID,proto3" json:"id,omitempty" structs:"id,omitempty" mapstructure:"id,omitempty"`
	Attributes *Object `protobuf:"bytes,3,opt,name=attributes" json:"attributes,omitempty" structs:"attributes,omitempty" mapstructure:"attributes,omitempty"`
}

func (m *ObjectResponseData) Reset()                    { *m = ObjectResponseData{} }
func (m *ObjectResponseData) String() string            { return proto.CompactTextString(m) }
func (*ObjectResponseData) ProtoMessage()               {}
func (*ObjectResponseData) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{9} }

func (m *ObjectResponseData) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ObjectResponseData) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *ObjectResponseData) GetAttributes() *Object {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// Object describes an object
type Object struct {
	ID          string `protobuf:"bytes,1,opt,name=ID,proto3" json:"id,omitempty" structs:"id,omitempty" mapstructure:"id,omitempty"`
	OwnerID     string `protobuf:"bytes,2,opt,name=ownerID,proto3" json:"owner_id,omitempty" structs:"ownerId,omitempty" mapstructure:"ownerId,omitempty"`
	CreatorID   string `protobuf:"bytes,3,opt,name=creatorID,proto3" json:"creator_id,omitempty" structs:"creatorId,omitempty" mapstructure:"creatorId,omitempty"`
	PartitionID string `protobuf:"bytes,4,opt,name=partitionID,proto3" json:"partition_id,omitempty" structs:"partitionId,omitempty" mapstructure:"partitionId,omitempty"`
	Key         string `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty" structs:"key,omitempty" mapstructure:"key,omitempty"`
	Value       string `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty" structs:"value,omitempty" mapstructure:"value,omitempty"`
	Protected   bool   `protobuf:"varint,7,opt,name=protected,proto3" json:"protected,omitempty" structs:"protected,omitempty" mapstructure:"protected,omitempty"`
	RefOnly     bool   `protobuf:"varint,8,opt,name=refOnly,proto3" json:"ref_only,omitempty" structs:"refOnly,omitempty" mapstructure:"refOnly,omitempty"`
	Timestamp   int64  `protobuf:"varint,9,opt,name=timestamp,proto3" json:"timestamp,omitempty" structs:"timestamp,omitempty" mapstructure:"timestamp,omitempty"`
	PrevHash    string `protobuf:"bytes,10,opt,name=prevHash,proto3" json:"prev_hash,omitempty" structs:"prevHash,omitempty" mapstructure:"prevHash,omitempty"`
	PeerHash    string `protobuf:"bytes,11,opt,name=peerHash,proto3" json:"peer_hash,omitempty" structs:"peerHash,omitempty" mapstructure:"peerHash,omitempty"`
	Hash        string `protobuf:"bytes,12,opt,name=hash,proto3" json:"hash,omitempty" structs:"hash,omitempty" mapstructure:"hash,omitempty"`
	Ref1        string `protobuf:"bytes,13,opt,name=ref1,proto3" json:"ref1,omitempty" structs:"ref1,omitempty" mapstructure:"ref1,omitempty"`
	Ref2        string `protobuf:"bytes,14,opt,name=ref2,proto3" json:"ref2,omitempty" structs:"ref2,omitempty" mapstructure:"ref2,omitempty"`
	Ref3        string `protobuf:"bytes,15,opt,name=ref3,proto3" json:"ref3,omitempty" structs:"ref3,omitempty" mapstructure:"ref3,omitempty"`
	Ref4        string `protobuf:"bytes,16,opt,name=ref4,proto3" json:"ref4,omitempty" structs:"ref4,omitempty" mapstructure:"ref4,omitempty"`
	Ref5        string `protobuf:"bytes,17,opt,name=ref5,proto3" json:"ref5,omitempty" structs:"ref5,omitempty" mapstructure:"ref5,omitempty"`
	Ref6        string `protobuf:"bytes,18,opt,name=ref6,proto3" json:"ref6,omitempty" structs:"ref6,omitempty" mapstructure:"ref6,omitempty"`
	Ref7        string `protobuf:"bytes,19,opt,name=ref7,proto3" json:"ref7,omitempty" structs:"ref7,omitempty" mapstructure:"ref7,omitempty"`
	Ref8        string `protobuf:"bytes,20,opt,name=ref8,proto3" json:"ref8,omitempty" structs:"ref8,omitempty" mapstructure:"ref8,omitempty"`
	Ref9        string `protobuf:"bytes,21,opt,name=ref9,proto3" json:"ref9,omitempty" structs:"ref9,omitempty" mapstructure:"ref9,omitempty"`
	Ref10       string `protobuf:"bytes,22,opt,name=ref10,proto3" json:"ref10,omitempty" structs:"ref10,omitempty" mapstructure:"ref10,omitempty"`
}

func (m *Object) Reset()                    { *m = Object{} }
func (m *Object) String() string            { return proto.CompactTextString(m) }
func (*Object) ProtoMessage()               {}
func (*Object) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{10} }

func (m *Object) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Object) GetOwnerID() string {
	if m != nil {
		return m.OwnerID
	}
	return ""
}

func (m *Object) GetCreatorID() string {
	if m != nil {
		return m.CreatorID
	}
	return ""
}

func (m *Object) GetPartitionID() string {
	if m != nil {
		return m.PartitionID
	}
	return ""
}

func (m *Object) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Object) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Object) GetProtected() bool {
	if m != nil {
		return m.Protected
	}
	return false
}

func (m *Object) GetRefOnly() bool {
	if m != nil {
		return m.RefOnly
	}
	return false
}

func (m *Object) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Object) GetPrevHash() string {
	if m != nil {
		return m.PrevHash
	}
	return ""
}

func (m *Object) GetPeerHash() string {
	if m != nil {
		return m.PeerHash
	}
	return ""
}

func (m *Object) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Object) GetRef1() string {
	if m != nil {
		return m.Ref1
	}
	return ""
}

func (m *Object) GetRef2() string {
	if m != nil {
		return m.Ref2
	}
	return ""
}

func (m *Object) GetRef3() string {
	if m != nil {
		return m.Ref3
	}
	return ""
}

func (m *Object) GetRef4() string {
	if m != nil {
		return m.Ref4
	}
	return ""
}

func (m *Object) GetRef5() string {
	if m != nil {
		return m.Ref5
	}
	return ""
}

func (m *Object) GetRef6() string {
	if m != nil {
		return m.Ref6
	}
	return ""
}

func (m *Object) GetRef7() string {
	if m != nil {
		return m.Ref7
	}
	return ""
}

func (m *Object) GetRef8() string {
	if m != nil {
		return m.Ref8
	}
	return ""
}

func (m *Object) GetRef9() string {
	if m != nil {
		return m.Ref9
	}
	return ""
}

func (m *Object) GetRef10() string {
	if m != nil {
		return m.Ref10
	}
	return ""
}

func init() {
	proto.RegisterType((*GetIdentityMsg)(nil), "proto_rpc.GetIdentityMsg")
	proto.RegisterType((*ObjectCountResponse)(nil), "proto_rpc.ObjectCountResponse")
	proto.RegisterType((*GetObjectMsg)(nil), "proto_rpc.GetObjectMsg")
	proto.RegisterType((*OrderBy)(nil), "proto_rpc.OrderBy")
	proto.RegisterType((*DBSession)(nil), "proto_rpc.DBSession")
	proto.RegisterType((*CreateObjectsMsg)(nil), "proto_rpc.CreateObjectsMsg")
	proto.RegisterType((*CreateIdentityMsg)(nil), "proto_rpc.CreateIdentityMsg")
	proto.RegisterType((*ObjectResponse)(nil), "proto_rpc.ObjectResponse")
	proto.RegisterType((*MultiObjectResponse)(nil), "proto_rpc.MultiObjectResponse")
	proto.RegisterType((*ObjectResponseData)(nil), "proto_rpc.ObjectResponseData")
	proto.RegisterType((*Object)(nil), "proto_rpc.Object")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for API service

type APIClient interface {
	CreateIdentity(ctx context.Context, in *CreateIdentityMsg, opts ...grpc.CallOption) (*ObjectResponse, error)
	CreateObjects(ctx context.Context, in *CreateObjectsMsg, opts ...grpc.CallOption) (*MultiObjectResponse, error)
	CreateDBSession(ctx context.Context, in *DBSession, opts ...grpc.CallOption) (*DBSession, error)
	GetDBSession(ctx context.Context, in *DBSession, opts ...grpc.CallOption) (*DBSession, error)
	DeleteDBSession(ctx context.Context, in *DBSession, opts ...grpc.CallOption) (*DBSession, error)
	GetObjects(ctx context.Context, in *GetObjectMsg, opts ...grpc.CallOption) (*MultiObjectResponse, error)
	CountObjects(ctx context.Context, in *GetObjectMsg, opts ...grpc.CallOption) (*ObjectCountResponse, error)
	GetIdentity(ctx context.Context, in *GetIdentityMsg, opts ...grpc.CallOption) (*ObjectResponse, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) CreateIdentity(ctx context.Context, in *CreateIdentityMsg, opts ...grpc.CallOption) (*ObjectResponse, error) {
	out := new(ObjectResponse)
	err := grpc.Invoke(ctx, "/proto_rpc.API/CreateIdentity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateObjects(ctx context.Context, in *CreateObjectsMsg, opts ...grpc.CallOption) (*MultiObjectResponse, error) {
	out := new(MultiObjectResponse)
	err := grpc.Invoke(ctx, "/proto_rpc.API/CreateObjects", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateDBSession(ctx context.Context, in *DBSession, opts ...grpc.CallOption) (*DBSession, error) {
	out := new(DBSession)
	err := grpc.Invoke(ctx, "/proto_rpc.API/CreateDBSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetDBSession(ctx context.Context, in *DBSession, opts ...grpc.CallOption) (*DBSession, error) {
	out := new(DBSession)
	err := grpc.Invoke(ctx, "/proto_rpc.API/GetDBSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteDBSession(ctx context.Context, in *DBSession, opts ...grpc.CallOption) (*DBSession, error) {
	out := new(DBSession)
	err := grpc.Invoke(ctx, "/proto_rpc.API/DeleteDBSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetObjects(ctx context.Context, in *GetObjectMsg, opts ...grpc.CallOption) (*MultiObjectResponse, error) {
	out := new(MultiObjectResponse)
	err := grpc.Invoke(ctx, "/proto_rpc.API/GetObjects", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CountObjects(ctx context.Context, in *GetObjectMsg, opts ...grpc.CallOption) (*ObjectCountResponse, error) {
	out := new(ObjectCountResponse)
	err := grpc.Invoke(ctx, "/proto_rpc.API/CountObjects", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetIdentity(ctx context.Context, in *GetIdentityMsg, opts ...grpc.CallOption) (*ObjectResponse, error) {
	out := new(ObjectResponse)
	err := grpc.Invoke(ctx, "/proto_rpc.API/GetIdentity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	CreateIdentity(context.Context, *CreateIdentityMsg) (*ObjectResponse, error)
	CreateObjects(context.Context, *CreateObjectsMsg) (*MultiObjectResponse, error)
	CreateDBSession(context.Context, *DBSession) (*DBSession, error)
	GetDBSession(context.Context, *DBSession) (*DBSession, error)
	DeleteDBSession(context.Context, *DBSession) (*DBSession, error)
	GetObjects(context.Context, *GetObjectMsg) (*MultiObjectResponse, error)
	CountObjects(context.Context, *GetObjectMsg) (*ObjectCountResponse, error)
	GetIdentity(context.Context, *GetIdentityMsg) (*ObjectResponse, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_CreateIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIdentityMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_rpc.API/CreateIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateIdentity(ctx, req.(*CreateIdentityMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateObjectsMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_rpc.API/CreateObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateObjects(ctx, req.(*CreateObjectsMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateDBSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DBSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateDBSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_rpc.API/CreateDBSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateDBSession(ctx, req.(*DBSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetDBSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DBSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetDBSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_rpc.API/GetDBSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetDBSession(ctx, req.(*DBSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteDBSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DBSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteDBSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_rpc.API/DeleteDBSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteDBSession(ctx, req.(*DBSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_rpc.API/GetObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetObjects(ctx, req.(*GetObjectMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CountObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CountObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_rpc.API/CountObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CountObjects(ctx, req.(*GetObjectMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdentityMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_rpc.API/GetIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetIdentity(ctx, req.(*GetIdentityMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto_rpc.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIdentity",
			Handler:    _API_CreateIdentity_Handler,
		},
		{
			MethodName: "CreateObjects",
			Handler:    _API_CreateObjects_Handler,
		},
		{
			MethodName: "CreateDBSession",
			Handler:    _API_CreateDBSession_Handler,
		},
		{
			MethodName: "GetDBSession",
			Handler:    _API_GetDBSession_Handler,
		},
		{
			MethodName: "DeleteDBSession",
			Handler:    _API_DeleteDBSession_Handler,
		},
		{
			MethodName: "GetObjects",
			Handler:    _API_GetObjects_Handler,
		},
		{
			MethodName: "CountObjects",
			Handler:    _API_CountObjects_Handler,
		},
		{
			MethodName: "GetIdentity",
			Handler:    _API_GetIdentity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}

func init() { proto.RegisterFile("server.proto", fileDescriptorServer) }

var fileDescriptorServer = []byte{
	// 1377 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x98, 0x4f, 0x6f, 0x1b, 0xc5,
	0x1b, 0xc7, 0xe5, 0x7f, 0x4d, 0x3c, 0x71, 0x93, 0x66, 0x92, 0x5f, 0x7f, 0xd3, 0xf0, 0xc7, 0x91,
	0xc5, 0xa1, 0x08, 0x48, 0x5b, 0xdb, 0x71, 0x9c, 0xa8, 0x45, 0xc5, 0x71, 0x09, 0x96, 0x52, 0x05,
	0x0d, 0xa2, 0x02, 0x15, 0x11, 0xd6, 0xf6, 0x24, 0x5e, 0x62, 0x7b, 0x97, 0xdd, 0x71, 0x2a, 0x73,
	0x41, 0x42, 0xdc, 0xb8, 0xc0, 0x89, 0xf7, 0x80, 0x84, 0x78, 0x39, 0x88, 0x8b, 0x0f, 0x70, 0x33,
	0x37, 0x5e, 0x01, 0x9a, 0x3f, 0xde, 0xdd, 0x99, 0xdd, 0xd9, 0x42, 0xd5, 0x0a, 0x4e, 0xf6, 0x3c,
	0xdf, 0x67, 0xe6, 0xf3, 0xcc, 0xb3, 0x33, 0xcf, 0xcc, 0x2e, 0x28, 0xf9, 0xc4, 0xbb, 0x24, 0xde,
	0x8e, 0xeb, 0x39, 0xd4, 0x81, 0x45, 0xfe, 0x73, 0xea, 0xb9, 0xbd, 0xad, 0xb7, 0xce, 0x6d, 0x3a,
	0x98, 0x74, 0x77, 0x7a, 0xce, 0xe8, 0xd6, 0xb9, 0x73, 0xee, 0xdc, 0xe2, 0x52, 0x77, 0x72, 0xc6,
	0x5b, 0xbc, 0xc1, 0xff, 0x89, 0x9e, 0x95, 0x01, 0x58, 0x3d, 0x22, 0xb4, 0xd3, 0x27, 0x63, 0x6a,
	0xd3, 0xe9, 0x43, 0xff, 0x1c, 0x3e, 0x02, 0xd9, 0x4e, 0x1b, 0x65, 0xb6, 0x33, 0x37, 0x8b, 0xad,
	0x77, 0xe7, 0xb3, 0x72, 0xc9, 0xee, 0xbf, 0xe9, 0x8c, 0x6c, 0x4a, 0x46, 0x2e, 0x9d, 0xfe, 0x39,
	0x2b, 0x57, 0x7d, 0xea, 0x4d, 0x7a, 0xd4, 0x3f, 0xa8, 0x44, 0x85, 0xca, 0xf6, 0xc8, 0x72, 0x85,
	0x32, 0xf1, 0x88, 0xa6, 0xe1, 0x6c, 0xa7, 0x5d, 0x79, 0x03, 0x6c, 0x9c, 0x74, 0x3f, 0x27, 0x3d,
	0x7a, 0xe8, 0x4c, 0xc6, 0x14, 0x13, 0xdf, 0x75, 0xc6, 0x3e, 0x81, 0x9b, 0xa0, 0xd0, 0x63, 0x06,
	0x4e, 0xcc, 0x61, 0xd1, 0xa8, 0xfc, 0x9c, 0x07, 0xa5, 0x23, 0x42, 0x45, 0x07, 0x16, 0x15, 0x01,
	0x85, 0x2f, 0x26, 0xc4, 0x9b, 0x72, 0xb7, 0x52, 0xeb, 0x64, 0x3e, 0x2b, 0xaf, 0x71, 0x83, 0x12,
	0x5b, 0x33, 0x88, 0x4d, 0xd3, 0xf4, 0xf0, 0x74, 0x19, 0x8b, 0xd1, 0x19, 0xc6, 0x79, 0x32, 0x26,
	0x1e, 0xca, 0xf2, 0xf9, 0x73, 0x0c, 0x37, 0x18, 0x30, 0x9a, 0xa6, 0x63, 0x74, 0x19, 0x8b, 0xd1,
	0xa1, 0x03, 0x96, 0x7a, 0x1e, 0xb1, 0xa8, 0xe3, 0xa1, 0x1c, 0x07, 0x7d, 0x38, 0x9f, 0x95, 0xd7,
	0xa5, 0x49, 0x41, 0xdd, 0x0d, 0x50, 0x31, 0x55, 0x87, 0xc5, 0x1d, 0xf0, 0x82, 0x02, 0xa7, 0xa0,
	0xe0, 0x78, 0x7d, 0xe2, 0xa1, 0xfc, 0x76, 0xee, 0xe6, 0x4a, 0x15, 0xee, 0x04, 0x0b, 0x66, 0xe7,
	0x84, 0xd9, 0x5b, 0x53, 0x39, 0x57, 0xd6, 0x30, 0xcd, 0x55, 0xd5, 0x62, 0x73, 0xd5, 0x64, 0x2c,
	0x88, 0x2c, 0xa5, 0x43, 0x7b, 0x64, 0x53, 0x54, 0xd8, 0xce, 0xdc, 0x2c, 0x08, 0x0c, 0x37, 0x18,
	0x30, 0x9a, 0xa6, 0x63, 0x74, 0x19, 0x8b, 0xd1, 0x2b, 0xbf, 0x64, 0xc0, 0x92, 0x9c, 0x0a, 0x43,
	0x9e, 0xd9, 0x64, 0xd8, 0x97, 0xab, 0x98, 0x23, 0xb9, 0xc1, 0x80, 0xd4, 0x34, 0x1d, 0xa9, 0xcb,
	0x58, 0x8c, 0xce, 0x17, 0x0b, 0x4f, 0x6a, 0x36, 0x9c, 0xd9, 0xf3, 0x4f, 0x60, 0xa5, 0x07, 0x8a,
	0xed, 0xd6, 0x07, 0xc4, 0xf7, 0x6d, 0x67, 0xfc, 0xc2, 0x76, 0xe7, 0x0f, 0x19, 0x70, 0xed, 0x90,
	0x2d, 0x16, 0x22, 0xf6, 0x9c, 0xcf, 0x36, 0xdd, 0xd7, 0x19, 0xb0, 0xe4, 0x88, 0x26, 0xca, 0xf0,
	0x85, 0xb3, 0x1e, 0x5d, 0x38, 0x5c, 0x11, 0x4b, 0x57, 0x7a, 0x19, 0x96, 0x6e, 0x4c, 0x8d, 0x4d,
	0x3d, 0xe6, 0x80, 0x17, 0xe0, 0xca, 0x1f, 0x59, 0xb0, 0x2e, 0x22, 0x8b, 0x56, 0x29, 0x02, 0x0a,
	0x64, 0x64, 0xd9, 0xc3, 0xe8, 0x23, 0xe6, 0x06, 0x43, 0xee, 0x35, 0x4d, 0x0f, 0x40, 0x97, 0xb1,
	0x18, 0x1d, 0x52, 0xb0, 0xec, 0x5a, 0xbe, 0xff, 0xc4, 0xf1, 0xfa, 0xb2, 0x24, 0x7c, 0x34, 0x9f,
	0x95, 0xe1, 0xc2, 0xa6, 0xc0, 0xde, 0x0e, 0x60, 0x71, 0x59, 0xe7, 0x25, 0x78, 0xe0, 0x80, 0x04,
	0xa7, 0xa0, 0xd8, 0x27, 0x97, 0x64, 0xe8, 0xb8, 0x44, 0x14, 0x88, 0xe5, 0xd6, 0xe3, 0xf9, 0xac,
	0xbc, 0x11, 0x18, 0x15, 0xee, 0xfd, 0x80, 0x9b, 0xa0, 0xeb, 0xe0, 0x24, 0x17, 0x1c, 0xd2, 0x2a,
	0xbf, 0x66, 0xc1, 0xaa, 0x78, 0xb0, 0x41, 0x85, 0xfe, 0x0a, 0xe4, 0xfb, 0x16, 0xb5, 0x78, 0xa6,
	0x57, 0xaa, 0xaf, 0xc4, 0x56, 0xc0, 0xc2, 0xb1, 0x6d, 0x51, 0xab, 0x75, 0x3c, 0x9f, 0x95, 0x57,
	0x99, 0xbb, 0x12, 0x62, 0x23, 0x0c, 0x51, 0x91, 0x62, 0xd1, 0xa9, 0x2a, 0xe6, 0x60, 0xf8, 0x6d,
	0x86, 0x95, 0x90, 0xf1, 0x85, 0x8f, 0xb2, 0x7c, 0x11, 0xbe, 0x66, 0x0c, 0x61, 0xe7, 0x98, 0xb9,
	0x3d, 0x18, 0x53, 0x6f, 0xba, 0x28, 0x34, 0xe3, 0x0b, 0xdf, 0x58, 0x68, 0x14, 0x2d, 0x5e, 0x68,
	0x54, 0x19, 0x8b, 0x18, 0xb6, 0x9a, 0x00, 0x84, 0x14, 0x78, 0x0d, 0xe4, 0x2e, 0x88, 0x38, 0x95,
	0x8a, 0x98, 0xfd, 0x65, 0x07, 0xda, 0xa5, 0x35, 0x9c, 0x10, 0xb1, 0x5e, 0xb0, 0x68, 0x1c, 0x64,
	0x9b, 0x99, 0xca, 0xef, 0x59, 0xb0, 0xf1, 0x70, 0x32, 0xa4, 0xb6, 0x31, 0xc1, 0xb9, 0x7f, 0x27,
	0xc1, 0xdf, 0x69, 0x09, 0x7e, 0x3d, 0x12, 0x42, 0x42, 0xc0, 0xff, 0xed, 0x2c, 0xff, 0x96, 0x05,
	0x30, 0x9e, 0x37, 0xf8, 0x19, 0xc8, 0xd3, 0xa9, 0x4b, 0x64, 0xbd, 0xe0, 0x59, 0x64, 0x6d, 0x43,
	0x16, 0x55, 0x49, 0x0f, 0x5a, 0x53, 0x31, 0x1f, 0x59, 0x96, 0xe6, 0xec, 0xf3, 0x2e, 0xcd, 0xf0,
	0xfb, 0x0c, 0x00, 0x16, 0xa5, 0x9e, 0xdd, 0x9d, 0x50, 0xe2, 0xf3, 0x7a, 0x90, 0x58, 0x88, 0x3f,
	0x9d, 0xcf, 0xca, 0x9b, 0xa1, 0xa3, 0xc2, 0x6e, 0x05, 0xec, 0x24, 0x07, 0x3d, 0x86, 0x44, 0x1f,
	0x1c, 0x09, 0xa2, 0xf2, 0x23, 0x04, 0x57, 0x04, 0xf6, 0x45, 0x9d, 0x48, 0xd0, 0x05, 0x4b, 0xfc,
	0xb2, 0x14, 0xe4, 0xf4, 0x11, 0xab, 0xbc, 0xdc, 0x74, 0xaa, 0x21, 0xee, 0xaa, 0xf7, 0xb1, 0x4e,
	0xff, 0x29, 0x37, 0x32, 0xc5, 0x01, 0x2f, 0x30, 0xf0, 0x4b, 0x50, 0x94, 0xf7, 0xa5, 0x4e, 0x5b,
	0xde, 0xcb, 0x3e, 0x61, 0x39, 0x95, 0x46, 0x9d, 0x7a, 0x5f, 0xbf, 0x9a, 0xa5, 0x71, 0x93, 0x5c,
	0x70, 0x88, 0x83, 0xdf, 0x64, 0xc0, 0x8a, 0x6b, 0x79, 0xd4, 0xa6, 0xb6, 0x33, 0xee, 0xb4, 0x51,
	0x9e, 0xe3, 0xbb, 0xf3, 0x59, 0xf9, 0x7a, 0x60, 0xd6, 0x03, 0x68, 0x47, 0x0e, 0x9c, 0x45, 0xcf,
	0xd4, 0x33, 0x27, 0xc9, 0x09, 0x47, 0xb1, 0xf0, 0xb1, 0xd8, 0x68, 0x05, 0x4e, 0xef, 0xcc, 0x67,
	0xe5, 0xab, 0x17, 0x44, 0xbd, 0x62, 0xd7, 0x03, 0xa8, 0xa2, 0xe8, 0x30, 0x55, 0x14, 0x7b, 0x96,
	0x2c, 0xf6, 0xec, 0x95, 0xf0, 0xcc, 0xe6, 0x06, 0x43, 0xe9, 0xd0, 0x34, 0x1d, 0xa1, 0xcb, 0xb2,
	0x08, 0xb0, 0xd3, 0x93, 0xed, 0x0d, 0xd2, 0xa3, 0xa4, 0x8f, 0x96, 0xc2, 0xd3, 0x33, 0x30, 0x1a,
	0x9e, 0x62, 0x82, 0x1e, 0x4b, 0x61, 0x82, 0x0b, 0x0e, 0x69, 0x6c, 0xcd, 0x7a, 0xe4, 0xec, 0x64,
	0x3c, 0x9c, 0xa2, 0x65, 0x0e, 0xe6, 0x6b, 0xd6, 0x23, 0x67, 0xa7, 0xce, 0x78, 0x38, 0x35, 0xac,
	0x59, 0xd9, 0xc3, 0x4c, 0x8d, 0x3b, 0xe0, 0x05, 0x86, 0x4d, 0x96, 0xda, 0x23, 0xe2, 0x53, 0x6b,
	0xe4, 0xa2, 0x22, 0x7b, 0x85, 0x12, 0x93, 0x0d, 0x8c, 0x86, 0xc9, 0x26, 0xe8, 0xb1, 0x2a, 0x97,
	0xe0, 0x82, 0x43, 0x1a, 0x9c, 0x80, 0x65, 0xd7, 0x23, 0x97, 0xef, 0x59, 0xfe, 0x00, 0x01, 0xfe,
	0x44, 0x3f, 0x16, 0x69, 0x26, 0x97, 0xa7, 0x03, 0xcb, 0x1f, 0x98, 0x2e, 0x47, 0xb2, 0x4f, 0x5a,
	0x96, 0x63, 0x1e, 0x38, 0x40, 0x71, 0x2c, 0x21, 0x1e, 0xc7, 0xae, 0x44, 0xb0, 0x84, 0x78, 0xa9,
	0x58, 0xd9, 0x27, 0x05, 0x1b, 0xf7, 0xc0, 0x01, 0x8a, 0x9d, 0x1f, 0x6c, 0x74, 0x54, 0x0a, 0xcf,
	0x8f, 0x18, 0x2d, 0x3c, 0x3f, 0x06, 0xa9, 0x24, 0x4d, 0xc5, 0x7c, 0x64, 0x46, 0xf0, 0xc8, 0xd9,
	0x1d, 0x74, 0x35, 0x24, 0xb0, 0xb6, 0x81, 0xa0, 0x4a, 0x09, 0x4b, 0xe6, 0x8e, 0x42, 0x60, 0x06,
	0x49, 0xa8, 0xa2, 0x55, 0x85, 0x50, 0x35, 0x13, 0xaa, 0xa9, 0x84, 0xaa, 0x4e, 0xa8, 0x4a, 0x42,
	0x0d, 0xad, 0x29, 0x84, 0x9a, 0x99, 0x50, 0x4b, 0x25, 0xd4, 0x74, 0x42, 0x4d, 0x12, 0xea, 0xe8,
	0x9a, 0x42, 0xa8, 0x9b, 0x09, 0xf5, 0x54, 0x42, 0x5d, 0x27, 0xd4, 0x25, 0x61, 0x17, 0xad, 0x2b,
	0x84, 0x5d, 0x33, 0x61, 0x37, 0x95, 0xb0, 0xab, 0x13, 0x76, 0x25, 0xa1, 0x81, 0xa0, 0x42, 0x68,
	0x98, 0x09, 0x8d, 0x54, 0x42, 0x43, 0x27, 0x34, 0x24, 0x61, 0x0f, 0x6d, 0x28, 0x84, 0x3d, 0x33,
	0x61, 0x2f, 0x95, 0xb0, 0xa7, 0x13, 0xf6, 0x24, 0xa1, 0x89, 0x36, 0x15, 0x42, 0xd3, 0x4c, 0x68,
	0xa6, 0x12, 0x9a, 0x3a, 0xa1, 0x29, 0x09, 0xfb, 0xe8, 0x7f, 0x0a, 0x61, 0xdf, 0x4c, 0xd8, 0x4f,
	0x25, 0xec, 0xeb, 0x84, 0x7d, 0x76, 0x20, 0xb1, 0x7d, 0x71, 0x1b, 0x5d, 0x0f, 0x0f, 0x24, 0x6e,
	0x30, 0x1c, 0x48, 0x9a, 0x96, 0xb4, 0xe9, 0x6e, 0x2b, 0x07, 0x12, 0xb7, 0x54, 0x7f, 0xca, 0x83,
	0xdc, 0x3b, 0xef, 0x77, 0x60, 0x07, 0xac, 0xaa, 0x2f, 0xb2, 0xf0, 0xe5, 0xc8, 0x2d, 0x2e, 0xf6,
	0x8e, 0xbb, 0x75, 0xc3, 0xf8, 0x26, 0x00, 0x8f, 0xc1, 0x55, 0xe5, 0x6d, 0x1d, 0xbe, 0x14, 0x1b,
	0x29, 0x7c, 0x8f, 0xdf, 0x7a, 0x35, 0xfd, 0x3e, 0x0f, 0xef, 0x81, 0x35, 0xd1, 0x27, 0xfc, 0xce,
	0xb0, 0x19, 0xe9, 0x12, 0x58, 0xb7, 0x12, 0xad, 0xf0, 0x80, 0x7f, 0xab, 0x7b, 0xb6, 0xbe, 0xf7,
	0xc0, 0x5a, 0x9b, 0x0c, 0xc9, 0xb3, 0xa2, 0x1f, 0x00, 0x10, 0x7c, 0x26, 0xf4, 0xe1, 0xff, 0x23,
	0x3e, 0xd1, 0xaf, 0x87, 0x4f, 0x4d, 0xc0, 0x11, 0x28, 0xf1, 0xaf, 0x92, 0xff, 0x68, 0xa0, 0xa4,
	0xaf, 0x99, 0x87, 0x60, 0x25, 0xf2, 0x39, 0x15, 0xde, 0x50, 0xc7, 0xf9, 0x7b, 0x0f, 0xb7, 0x7b,
	0x85, 0x2b, 0xb5, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x4e, 0xcf, 0xc2, 0x65, 0xe4, 0x15, 0x00,
	0x00,
}
